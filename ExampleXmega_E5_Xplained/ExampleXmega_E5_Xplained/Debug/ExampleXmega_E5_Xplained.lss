
ExampleXmega_E5_Xplained.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ffa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00802000  00000ffa  0000108e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00802128  00802128  000011b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000570  00000000  00000000  000011e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ccce  00000000  00000000  00001756  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000258f  00000000  00000000  0000e424  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003d51  00000000  00000000  000109b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000010a4  00000000  00000000  00014704  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002bce  00000000  00000000  000157a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000056bd  00000000  00000000  00018376  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000500  00000000  00000000  0001da33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5f c0       	rjmp	.+190    	; 0xc0 <__dtors_end>
   2:	00 00       	nop
   4:	82 c0       	rjmp	.+260    	; 0x10a <__bad_interrupt>
   6:	00 00       	nop
   8:	80 c0       	rjmp	.+256    	; 0x10a <__bad_interrupt>
   a:	00 00       	nop
   c:	7e c0       	rjmp	.+252    	; 0x10a <__bad_interrupt>
   e:	00 00       	nop
  10:	7c c0       	rjmp	.+248    	; 0x10a <__bad_interrupt>
  12:	00 00       	nop
  14:	7a c0       	rjmp	.+244    	; 0x10a <__bad_interrupt>
  16:	00 00       	nop
  18:	78 c0       	rjmp	.+240    	; 0x10a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bb c5       	rjmp	.+2934   	; 0xb94 <__vector_7>
  1e:	00 00       	nop
  20:	74 c0       	rjmp	.+232    	; 0x10a <__bad_interrupt>
  22:	00 00       	nop
  24:	72 c0       	rjmp	.+228    	; 0x10a <__bad_interrupt>
  26:	00 00       	nop
  28:	70 c0       	rjmp	.+224    	; 0x10a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6e c0       	rjmp	.+220    	; 0x10a <__bad_interrupt>
  2e:	00 00       	nop
  30:	6c c0       	rjmp	.+216    	; 0x10a <__bad_interrupt>
  32:	00 00       	nop
  34:	6a c0       	rjmp	.+212    	; 0x10a <__bad_interrupt>
  36:	00 00       	nop
  38:	68 c0       	rjmp	.+208    	; 0x10a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	66 c0       	rjmp	.+204    	; 0x10a <__bad_interrupt>
  3e:	00 00       	nop
  40:	64 c0       	rjmp	.+200    	; 0x10a <__bad_interrupt>
  42:	00 00       	nop
  44:	62 c0       	rjmp	.+196    	; 0x10a <__bad_interrupt>
  46:	00 00       	nop
  48:	60 c0       	rjmp	.+192    	; 0x10a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5e c0       	rjmp	.+188    	; 0x10a <__bad_interrupt>
  4e:	00 00       	nop
  50:	5c c0       	rjmp	.+184    	; 0x10a <__bad_interrupt>
  52:	00 00       	nop
  54:	5a c0       	rjmp	.+180    	; 0x10a <__bad_interrupt>
  56:	00 00       	nop
  58:	58 c0       	rjmp	.+176    	; 0x10a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	56 c0       	rjmp	.+172    	; 0x10a <__bad_interrupt>
  5e:	00 00       	nop
  60:	54 c0       	rjmp	.+168    	; 0x10a <__bad_interrupt>
  62:	00 00       	nop
  64:	52 c0       	rjmp	.+164    	; 0x10a <__bad_interrupt>
  66:	00 00       	nop
  68:	50 c0       	rjmp	.+160    	; 0x10a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4e c0       	rjmp	.+156    	; 0x10a <__bad_interrupt>
  6e:	00 00       	nop
  70:	4c c0       	rjmp	.+152    	; 0x10a <__bad_interrupt>
  72:	00 00       	nop
  74:	4a c0       	rjmp	.+148    	; 0x10a <__bad_interrupt>
  76:	00 00       	nop
  78:	48 c0       	rjmp	.+144    	; 0x10a <__bad_interrupt>
  7a:	00 00       	nop
  7c:	46 c0       	rjmp	.+140    	; 0x10a <__bad_interrupt>
  7e:	00 00       	nop
  80:	44 c0       	rjmp	.+136    	; 0x10a <__bad_interrupt>
  82:	00 00       	nop
  84:	42 c0       	rjmp	.+132    	; 0x10a <__bad_interrupt>
  86:	00 00       	nop
  88:	40 c0       	rjmp	.+128    	; 0x10a <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3e c0       	rjmp	.+124    	; 0x10a <__bad_interrupt>
  8e:	00 00       	nop
  90:	3c c0       	rjmp	.+120    	; 0x10a <__bad_interrupt>
  92:	00 00       	nop
  94:	3a c0       	rjmp	.+116    	; 0x10a <__bad_interrupt>
  96:	00 00       	nop
  98:	38 c0       	rjmp	.+112    	; 0x10a <__bad_interrupt>
  9a:	00 00       	nop
  9c:	36 c0       	rjmp	.+108    	; 0x10a <__bad_interrupt>
  9e:	00 00       	nop
  a0:	34 c0       	rjmp	.+104    	; 0x10a <__bad_interrupt>
  a2:	00 00       	nop
  a4:	32 c0       	rjmp	.+100    	; 0x10a <__bad_interrupt>
  a6:	00 00       	nop
  a8:	30 c0       	rjmp	.+96     	; 0x10a <__bad_interrupt>
	...

000000ac <BIT_MASK_TABLE>:
  ac:	01 02 04 08 10 20 40 80                             ..... @.

000000b4 <__ctors_start>:
  b4:	d7 01       	movw	r26, r14
  b6:	24 03       	mulsu	r18, r20
  b8:	08 06       	cpc	r0, r24

000000ba <__ctors_end>:
  ba:	de 01       	movw	r26, r28
  bc:	28 03       	fmul	r18, r16
  be:	0c 06       	cpc	r0, r28

000000c0 <__dtors_end>:
  c0:	11 24       	eor	r1, r1
  c2:	1f be       	out	0x3f, r1	; 63
  c4:	cf ef       	ldi	r28, 0xFF	; 255
  c6:	cd bf       	out	0x3d, r28	; 61
  c8:	df e2       	ldi	r29, 0x2F	; 47
  ca:	de bf       	out	0x3e, r29	; 62

000000cc <__do_copy_data>:
  cc:	11 e2       	ldi	r17, 0x21	; 33
  ce:	a0 e0       	ldi	r26, 0x00	; 0
  d0:	b0 e2       	ldi	r27, 0x20	; 32
  d2:	ea ef       	ldi	r30, 0xFA	; 250
  d4:	ff e0       	ldi	r31, 0x0F	; 15
  d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x10>
  d8:	05 90       	lpm	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	a8 32       	cpi	r26, 0x28	; 40
  de:	b1 07       	cpc	r27, r17
  e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0xc>

000000e2 <__do_clear_bss>:
  e2:	21 e2       	ldi	r18, 0x21	; 33
  e4:	a8 e2       	ldi	r26, 0x28	; 40
  e6:	b1 e2       	ldi	r27, 0x21	; 33
  e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
  ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
  ec:	a2 34       	cpi	r26, 0x42	; 66
  ee:	b2 07       	cpc	r27, r18
  f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>

000000f2 <__do_global_ctors>:
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	ca eb       	ldi	r28, 0xBA	; 186
  f6:	d0 e0       	ldi	r29, 0x00	; 0
  f8:	03 c0       	rjmp	.+6      	; 0x100 <__do_global_ctors+0xe>
  fa:	22 97       	sbiw	r28, 0x02	; 2
  fc:	fe 01       	movw	r30, r28
  fe:	b3 d5       	rcall	.+2918   	; 0xc66 <__tablejump__>
 100:	c4 3b       	cpi	r28, 0xB4	; 180
 102:	d1 07       	cpc	r29, r17
 104:	d1 f7       	brne	.-12     	; 0xfa <__do_global_ctors+0x8>
 106:	02 d0       	rcall	.+4      	; 0x10c <main>
 108:	6c c7       	rjmp	.+3800   	; 0xfe2 <__do_global_dtors>

0000010a <__bad_interrupt>:
 10a:	7a cf       	rjmp	.-268    	; 0x0 <__vectors>

0000010c <main>:
//#include <avr/io.h>
#include <main_app.h>

int main(void)
{
	main_app();
 10c:	03 d0       	rcall	.+6      	; 0x114 <_Z8main_appv>
}
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret

00000114 <_Z8main_appv>:
	term_cmd->parse(data);
}
#endif

void main_app(void)
{
 114:	a7 e2       	ldi	r26, 0x27	; 39
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	ef e8       	ldi	r30, 0x8F	; 143
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	b5 c5       	rjmp	.+2922   	; 0xc88 <__prologue_saves__+0x1a>
	GI::Sys::Timer timer_touch = GI::Sys::Timer(20);
 11e:	04 e1       	ldi	r16, 0x14	; 20
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	ce 01       	movw	r24, r28
 130:	41 96       	adiw	r24, 0x11	; 17
 132:	23 d2       	rcall	.+1094   	; 0x57a <_ZN2GI3Sys5TimerC1Ey>
	GI::Sys::Timer blink_timer = GI::Sys::Timer(100);
 134:	04 e6       	ldi	r16, 0x64	; 100
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	ce 01       	movw	r24, r28
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	19 d2       	rcall	.+1074   	; 0x57a <_ZN2GI3Sys5TimerC1Ey>
	/*GI::Sys::Clock::changeCoreClk(25000000);
	unsigned long baud = 1200;
	terminal.ctl(GI::IO::IO_CTL_SET_SPEED, &baud);*/

#if (SHOW_SENSORS_RESULT_ON_SCREEN == 0)
	GI::IO terminal = GI::IO((char *)CONSOLE_UART_OUT);
 148:	64 e1       	ldi	r22, 0x14	; 20
 14a:	71 e2       	ldi	r23, 0x21	; 33
 14c:	ce 01       	movw	r24, r28
 14e:	81 96       	adiw	r24, 0x21	; 33
 150:	39 d1       	rcall	.+626    	; 0x3c4 <_ZN2GI2IOC1EPc>
void main_app(void)
{
	GI::Sys::Timer timer_touch = GI::Sys::Timer(20);
	GI::Sys::Timer blink_timer = GI::Sys::Timer(100);

	bool led_state = false;
 152:	f1 2c       	mov	r15, r1
	//terminal.write((unsigned char *)buffer, bytesread);

	while(1)
	{
		//GI::Sys::Clock::sleep();
		dev.idle();
 154:	88 e2       	ldi	r24, 0x28	; 40
 156:	91 e2       	ldi	r25, 0x21	; 33
 158:	29 d1       	rcall	.+594    	; 0x3ac <_ZN2GI5Board4Init4idleEv>
#endif
		/*
		 * Call every 20ms the idle function of touch screen interface
		 * 	and idle function of parent window.
		 */
		if(timer_touch.tick())
 15a:	ce 01       	movw	r24, r28
 15c:	41 96       	adiw	r24, 0x11	; 17
 15e:	33 d2       	rcall	.+1126   	; 0x5c6 <_ZN2GI3Sys5Timer4tickEv>
					pass->clearText->set((char *)"Wrong password!");
				}
			}
#endif
		}
		if(blink_timer.tick())
 160:	ce 01       	movw	r24, r28
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	30 d2       	rcall	.+1120   	; 0x5c6 <_ZN2GI3Sys5Timer4tickEv>
 166:	88 23       	and	r24, r24
 168:	a9 f3       	breq	.-22     	; 0x154 <_Z8main_appv+0x40>
		{
			bool state;
			GI::IO::read((char *)"led-0", &state);
 16a:	be 01       	movw	r22, r28
 16c:	69 5d       	subi	r22, 0xD9	; 217
 16e:	7f 4f       	sbci	r23, 0xFF	; 255
 170:	8b e1       	ldi	r24, 0x1B	; 27
 172:	91 e2       	ldi	r25, 0x21	; 33
 174:	bd d1       	rcall	.+890    	; 0x4f0 <_ZN2GI2IO4readEPcPb>
			if(state)
 176:	8f a1       	ldd	r24, Y+39	; 0x27
 178:	88 23       	and	r24, r24
 17a:	f1 f0       	breq	.+60     	; 0x1b8 <_Z8main_appv+0xa4>
			{
				if(led_state)
 17c:	ff 20       	and	r15, r15
 17e:	69 f0       	breq	.+26     	; 0x19a <_Z8main_appv+0x86>
				{
					blink_timer.interval(780);
 180:	0c e0       	ldi	r16, 0x0C	; 12
 182:	13 e0       	ldi	r17, 0x03	; 3
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	ce 01       	movw	r24, r28
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	08 d2       	rcall	.+1040   	; 0x5a6 <_ZN2GI3Sys5Timer8intervalEy>
					led_state = false;
 196:	f1 2c       	mov	r15, r1
 198:	0d c0       	rjmp	.+26     	; 0x1b4 <_Z8main_appv+0xa0>
				}
				else
				{
					blink_timer.interval(180);
 19a:	04 eb       	ldi	r16, 0xB4	; 180
 19c:	10 e0       	ldi	r17, 0x00	; 0
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	ce 01       	movw	r24, r28
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	fb d1       	rcall	.+1014   	; 0x5a6 <_ZN2GI3Sys5Timer8intervalEy>
					led_state = true;
 1b0:	ff 24       	eor	r15, r15
 1b2:	f3 94       	inc	r15
				}
				GI::IO::write((char *)"led-0", false);
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	0c c0       	rjmp	.+24     	; 0x1d0 <_Z8main_appv+0xbc>
			}
			else
			{
				blink_timer.interval(20);
 1b8:	04 e1       	ldi	r16, 0x14	; 20
 1ba:	10 e0       	ldi	r17, 0x00	; 0
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	ce 01       	movw	r24, r28
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	ec d1       	rcall	.+984    	; 0x5a6 <_ZN2GI3Sys5Timer8intervalEy>
				GI::IO::write((char *)"led-0", true);
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	8b e1       	ldi	r24, 0x1B	; 27
 1d2:	91 e2       	ldi	r25, 0x21	; 33
 1d4:	54 d1       	rcall	.+680    	; 0x47e <_ZN2GI2IO5writeEPcb>
 1d6:	be cf       	rjmp	.-132    	; 0x154 <_Z8main_appv+0x40>

000001d8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE>:

extern ioSettings *ioSetCfg[];


SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Gpio **device)
{
 1d8:	a0 e0       	ldi	r26, 0x00	; 0
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	e1 ef       	ldi	r30, 0xF1	; 241
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	50 c5       	rjmp	.+2720   	; 0xc82 <__prologue_saves__+0x14>
 1e2:	6c 01       	movw	r12, r24
 1e4:	8b 01       	movw	r16, r22
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	e8 2e       	mov	r14, r24
 1ea:	80 e2       	ldi	r24, 0x20	; 32
 1ec:	f8 2e       	mov	r15, r24
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
 1ee:	f7 01       	movw	r30, r14
 1f0:	c1 91       	ld	r28, Z+
 1f2:	d1 91       	ld	r29, Z+
 1f4:	7f 01       	movw	r14, r30
		if(!io_item || !io_item->cfg)
 1f6:	20 97       	sbiw	r28, 0x00	; 0
 1f8:	21 f0       	breq	.+8      	; 0x202 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x2a>
 1fa:	8d 85       	ldd	r24, Y+13	; 0x0d
 1fc:	9e 85       	ldd	r25, Y+14	; 0x0e
 1fe:	89 2b       	or	r24, r25
 200:	29 f4       	brne	.+10     	; 0x20c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x34>
		{
			*device = NULL;
 202:	f8 01       	movw	r30, r16
 204:	10 82       	st	Z, r1
 206:	11 82       	std	Z+1, r1	; 0x01
			return SYS_ERR_INVALID_PATH;
 208:	85 ef       	ldi	r24, 0xF5	; 245
 20a:	0f c0       	rjmp	.+30     	; 0x22a <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x52>
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_GPIO && !strcmp(io_item->info.name, path))
 20c:	88 81       	ld	r24, Y
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	71 f7       	brne	.-36     	; 0x1ee <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x16>
 212:	b6 01       	movw	r22, r12
 214:	ce 01       	movw	r24, r28
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	cd d6       	rcall	.+3482   	; 0xfb4 <strcmp>
 21a:	89 2b       	or	r24, r25
 21c:	41 f7       	brne	.-48     	; 0x1ee <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x16>
			break;
		dev_nr++;
	}
	*device = (GI::Dev::Gpio *)ioSetCfg[dev_nr]->ioConstruct;
 21e:	8f 85       	ldd	r24, Y+15	; 0x0f
 220:	98 89       	ldd	r25, Y+16	; 0x10
 222:	f8 01       	movw	r30, r16
 224:	80 83       	st	Z, r24
 226:	91 83       	std	Z+1, r25	; 0x01
	return SYS_ERR_OK;
 228:	80 e0       	ldi	r24, 0x00	; 0
}
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	e8 e0       	ldi	r30, 0x08	; 8
 230:	41 c5       	rjmp	.+2690   	; 0xcb4 <__epilogue_restores__+0x14>

00000232 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::I2c **device)
{
 232:	a0 e0       	ldi	r26, 0x00	; 0
 234:	b0 e0       	ldi	r27, 0x00	; 0
 236:	ee e1       	ldi	r30, 0x1E	; 30
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	23 c5       	rjmp	.+2630   	; 0xc82 <__prologue_saves__+0x14>
 23c:	6c 01       	movw	r12, r24
 23e:	8b 01       	movw	r16, r22
 240:	96 e0       	ldi	r25, 0x06	; 6
 242:	e9 2e       	mov	r14, r25
 244:	90 e2       	ldi	r25, 0x20	; 32
 246:	f9 2e       	mov	r15, r25
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
 248:	f7 01       	movw	r30, r14
 24a:	c1 91       	ld	r28, Z+
 24c:	d1 91       	ld	r29, Z+
 24e:	7f 01       	movw	r14, r30
		if(!io_item || !io_item->cfg)
 250:	20 97       	sbiw	r28, 0x00	; 0
 252:	21 f0       	breq	.+8      	; 0x25c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x2a>
 254:	8d 85       	ldd	r24, Y+13	; 0x0d
 256:	9e 85       	ldd	r25, Y+14	; 0x0e
 258:	89 2b       	or	r24, r25
 25a:	29 f4       	brne	.+10     	; 0x266 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x34>
		{
			*device = NULL;
 25c:	f8 01       	movw	r30, r16
 25e:	10 82       	st	Z, r1
 260:	11 82       	std	Z+1, r1	; 0x01
			return SYS_ERR_INVALID_PATH;
 262:	85 ef       	ldi	r24, 0xF5	; 245
 264:	0f c0       	rjmp	.+30     	; 0x284 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x52>
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_I2C && !strcmp(io_item->info.name, path))
 266:	88 81       	ld	r24, Y
 268:	83 30       	cpi	r24, 0x03	; 3
 26a:	71 f7       	brne	.-36     	; 0x248 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x16>
 26c:	b6 01       	movw	r22, r12
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	a0 d6       	rcall	.+3392   	; 0xfb4 <strcmp>
 274:	89 2b       	or	r24, r25
 276:	41 f7       	brne	.-48     	; 0x248 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x16>
			break;
		dev_nr++;
	}
	*device = (GI::Dev::I2c *)ioSetCfg[dev_nr]->ioConstruct;
 278:	8f 85       	ldd	r24, Y+15	; 0x0f
 27a:	98 89       	ldd	r25, Y+16	; 0x10
 27c:	f8 01       	movw	r30, r16
 27e:	80 83       	st	Z, r24
 280:	91 83       	std	Z+1, r25	; 0x01
	return SYS_ERR_OK;
 282:	80 e0       	ldi	r24, 0x00	; 0
}
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	e8 e0       	ldi	r30, 0x08	; 8
 28a:	14 c5       	rjmp	.+2600   	; 0xcb4 <__epilogue_restores__+0x14>

0000028c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Spi **device)
{
 28c:	a0 e0       	ldi	r26, 0x00	; 0
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	eb e4       	ldi	r30, 0x4B	; 75
 292:	f1 e0       	ldi	r31, 0x01	; 1
 294:	f6 c4       	rjmp	.+2540   	; 0xc82 <__prologue_saves__+0x14>
 296:	6c 01       	movw	r12, r24
 298:	8b 01       	movw	r16, r22
 29a:	26 e0       	ldi	r18, 0x06	; 6
 29c:	e2 2e       	mov	r14, r18
 29e:	20 e2       	ldi	r18, 0x20	; 32
 2a0:	f2 2e       	mov	r15, r18
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
 2a2:	f7 01       	movw	r30, r14
 2a4:	c1 91       	ld	r28, Z+
 2a6:	d1 91       	ld	r29, Z+
 2a8:	7f 01       	movw	r14, r30
		if(!io_item || !io_item->cfg)
 2aa:	20 97       	sbiw	r28, 0x00	; 0
 2ac:	21 f0       	breq	.+8      	; 0x2b6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x2a>
 2ae:	8d 85       	ldd	r24, Y+13	; 0x0d
 2b0:	9e 85       	ldd	r25, Y+14	; 0x0e
 2b2:	89 2b       	or	r24, r25
 2b4:	29 f4       	brne	.+10     	; 0x2c0 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x34>
		{
			*device = NULL;
 2b6:	f8 01       	movw	r30, r16
 2b8:	10 82       	st	Z, r1
 2ba:	11 82       	std	Z+1, r1	; 0x01
			return SYS_ERR_INVALID_PATH;
 2bc:	85 ef       	ldi	r24, 0xF5	; 245
 2be:	0f c0       	rjmp	.+30     	; 0x2de <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x52>
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_SPI && !strcmp(io_item->info.name, path))
 2c0:	88 81       	ld	r24, Y
 2c2:	84 30       	cpi	r24, 0x04	; 4
 2c4:	71 f7       	brne	.-36     	; 0x2a2 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x16>
 2c6:	b6 01       	movw	r22, r12
 2c8:	ce 01       	movw	r24, r28
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	73 d6       	rcall	.+3302   	; 0xfb4 <strcmp>
 2ce:	89 2b       	or	r24, r25
 2d0:	41 f7       	brne	.-48     	; 0x2a2 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x16>
			break;
		dev_nr++;
	}
	*device = (GI::Dev::Spi *)ioSetCfg[dev_nr]->ioConstruct;
 2d2:	8f 85       	ldd	r24, Y+15	; 0x0f
 2d4:	98 89       	ldd	r25, Y+16	; 0x10
 2d6:	f8 01       	movw	r30, r16
 2d8:	80 83       	st	Z, r24
 2da:	91 83       	std	Z+1, r25	; 0x01
	return SYS_ERR_OK;
 2dc:	80 e0       	ldi	r24, 0x00	; 0
}
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	e8 e0       	ldi	r30, 0x08	; 8
 2e4:	e7 c4       	rjmp	.+2510   	; 0xcb4 <__epilogue_restores__+0x14>

000002e6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Uart **device)
{
 2e6:	a0 e0       	ldi	r26, 0x00	; 0
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	e8 e7       	ldi	r30, 0x78	; 120
 2ec:	f1 e0       	ldi	r31, 0x01	; 1
 2ee:	c9 c4       	rjmp	.+2450   	; 0xc82 <__prologue_saves__+0x14>
 2f0:	6c 01       	movw	r12, r24
 2f2:	8b 01       	movw	r16, r22
 2f4:	36 e0       	ldi	r19, 0x06	; 6
 2f6:	e3 2e       	mov	r14, r19
 2f8:	30 e2       	ldi	r19, 0x20	; 32
 2fa:	f3 2e       	mov	r15, r19
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
 2fc:	f7 01       	movw	r30, r14
 2fe:	c1 91       	ld	r28, Z+
 300:	d1 91       	ld	r29, Z+
 302:	7f 01       	movw	r14, r30
		if(!io_item || !io_item->cfg)
 304:	20 97       	sbiw	r28, 0x00	; 0
 306:	21 f0       	breq	.+8      	; 0x310 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x2a>
 308:	8d 85       	ldd	r24, Y+13	; 0x0d
 30a:	9e 85       	ldd	r25, Y+14	; 0x0e
 30c:	89 2b       	or	r24, r25
 30e:	29 f4       	brne	.+10     	; 0x31a <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x34>
		{
			*device = NULL;
 310:	f8 01       	movw	r30, r16
 312:	10 82       	st	Z, r1
 314:	11 82       	std	Z+1, r1	; 0x01
			return SYS_ERR_INVALID_PATH;
 316:	85 ef       	ldi	r24, 0xF5	; 245
 318:	0f c0       	rjmp	.+30     	; 0x338 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x52>
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_UART && !strcmp(io_item->info.name, path))
 31a:	88 81       	ld	r24, Y
 31c:	82 30       	cpi	r24, 0x02	; 2
 31e:	71 f7       	brne	.-36     	; 0x2fc <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x16>
 320:	b6 01       	movw	r22, r12
 322:	ce 01       	movw	r24, r28
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	46 d6       	rcall	.+3212   	; 0xfb4 <strcmp>
 328:	89 2b       	or	r24, r25
 32a:	41 f7       	brne	.-48     	; 0x2fc <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x16>
			break;
		dev_nr++;
	}
	*device = (GI::Dev::Uart *)ioSetCfg[dev_nr]->ioConstruct;
 32c:	8f 85       	ldd	r24, Y+15	; 0x0f
 32e:	98 89       	ldd	r25, Y+16	; 0x10
 330:	f8 01       	movw	r30, r16
 332:	80 83       	st	Z, r24
 334:	91 83       	std	Z+1, r25	; 0x01
	return SYS_ERR_OK;
 336:	80 e0       	ldi	r24, 0x00	; 0
}
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
 33c:	e8 e0       	ldi	r30, 0x08	; 8
 33e:	ba c4       	rjmp	.+2420   	; 0xcb4 <__epilogue_restores__+0x14>

00000340 <_ZN2GI5Board4InitC1Ev>:
#if (USE_SNTP == 1 && USE_LWIP == 1)
    SNTP_CLIENT = new GI::App::SntpClient();
#endif
}

GI::Board::Init::~Init()
 340:	ef 92       	push	r14
 342:	ff 92       	push	r15
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	28 e0       	ldi	r18, 0x08	; 8
 34e:	fc 01       	movw	r30, r24
 350:	11 92       	st	Z+, r1
 352:	2a 95       	dec	r18
 354:	e9 f7       	brne	.-6      	; 0x350 <_ZN2GI5Board4InitC1Ev+0x10>
 356:	06 e0       	ldi	r16, 0x06	; 6
 358:	10 e2       	ldi	r17, 0x20	; 32
 35a:	f8 01       	movw	r30, r16
 35c:	c1 91       	ld	r28, Z+
 35e:	d1 91       	ld	r29, Z+
 360:	8f 01       	movw	r16, r30
 362:	8d 85       	ldd	r24, Y+13	; 0x0d
 364:	9e 85       	ldd	r25, Y+14	; 0x0e
 366:	89 2b       	or	r24, r25
 368:	e9 f0       	breq	.+58     	; 0x3a4 <_ZN2GI5Board4InitC1Ev+0x64>
 36a:	88 81       	ld	r24, Y
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	19 f0       	breq	.+6      	; 0x376 <_ZN2GI5Board4InitC1Ev+0x36>
 370:	82 30       	cpi	r24, 0x02	; 2
 372:	51 f0       	breq	.+20     	; 0x388 <_ZN2GI5Board4InitC1Ev+0x48>
 374:	13 c0       	rjmp	.+38     	; 0x39c <_ZN2GI5Board4InitC1Ev+0x5c>
 376:	88 e1       	ldi	r24, 0x18	; 24
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	6e d1       	rcall	.+732    	; 0x658 <_Znwj>
 37c:	7c 01       	movw	r14, r24
 37e:	00 97       	sbiw	r24, 0x00	; 0
 380:	59 f0       	breq	.+22     	; 0x398 <_ZN2GI5Board4InitC1Ev+0x58>
 382:	be 01       	movw	r22, r28
 384:	ba d2       	rcall	.+1396   	; 0x8fa <_ZN2GI3Dev4GpioC1EP10ioSettings>
 386:	08 c0       	rjmp	.+16     	; 0x398 <_ZN2GI5Board4InitC1Ev+0x58>
 388:	8b e0       	ldi	r24, 0x0B	; 11
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	65 d1       	rcall	.+714    	; 0x658 <_Znwj>
 38e:	7c 01       	movw	r14, r24
 390:	00 97       	sbiw	r24, 0x00	; 0
 392:	11 f0       	breq	.+4      	; 0x398 <_ZN2GI5Board4InitC1Ev+0x58>
 394:	be 01       	movw	r22, r28
 396:	ee d2       	rcall	.+1500   	; 0x974 <_ZN2GI3Dev4UartC1EP10ioSettings>
 398:	ef 86       	std	Y+15, r14	; 0x0f
 39a:	f8 8a       	std	Y+16, r15	; 0x10
 39c:	f8 e2       	ldi	r31, 0x28	; 40
 39e:	06 30       	cpi	r16, 0x06	; 6
 3a0:	1f 07       	cpc	r17, r31
 3a2:	d9 f6       	brne	.-74     	; 0x35a <_ZN2GI5Board4InitC1Ev+0x1a>
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	e6 e0       	ldi	r30, 0x06	; 6
 3aa:	86 c4       	rjmp	.+2316   	; 0xcb8 <__epilogue_restores__+0x18>

000003ac <_ZN2GI5Board4Init4idleEv>:
{

}

void GI::Board::Init::idle()
{
 3ac:	08 95       	ret

000003ae <_GLOBAL__sub_I_coreClk>:
#include <api/init_def.h>
#include <lib/operators.h>

extern ioSettings *ioSetCfg[];

GI::Sys::Clock coreClk = GI::Sys::Clock();
 3ae:	80 e3       	ldi	r24, 0x30	; 48
 3b0:	91 e2       	ldi	r25, 0x21	; 33
 3b2:	d2 d3       	rcall	.+1956   	; 0xb58 <_ZN2GI3Sys5ClockC1Ev>
GI::Board::Init dev = GI::Board::Init();
 3b4:	88 e2       	ldi	r24, 0x28	; 40
 3b6:	91 e2       	ldi	r25, 0x21	; 33
 3b8:	c3 cf       	rjmp	.-122    	; 0x340 <_ZN2GI5Board4InitC1Ev>
 3ba:	08 95       	ret

000003bc <_GLOBAL__sub_D_coreClk>:
#include <api/init_def.h>
#include <lib/operators.h>

extern ioSettings *ioSetCfg[];

GI::Sys::Clock coreClk = GI::Sys::Clock();
 3bc:	80 e3       	ldi	r24, 0x30	; 48
 3be:	91 e2       	ldi	r25, 0x21	; 33
 3c0:	cd c3       	rjmp	.+1946   	; 0xb5c <_ZN2GI3Sys5ClockD1Ev>
 3c2:	08 95       	ret

000003c4 <_ZN2GI2IOC1EPc>:
/**********************************************************************************/
int GI::IO::read(char *path, unsigned char *buff, unsigned int len)/*Char device*/
{
	GI::IO tmp_io = GI::IO((char *)path);
	return tmp_io.read(buff, len);
}
 3c4:	a8 e0       	ldi	r26, 0x08	; 8
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	e7 ee       	ldi	r30, 0xE7	; 231
 3ca:	f1 e0       	ldi	r31, 0x01	; 1
 3cc:	5c c4       	rjmp	.+2232   	; 0xc86 <__prologue_saves__+0x18>
 3ce:	8c 01       	movw	r16, r24
 3d0:	7b 01       	movw	r14, r22
 3d2:	86 e0       	ldi	r24, 0x06	; 6
 3d4:	f8 01       	movw	r30, r16
 3d6:	11 92       	st	Z+, r1
 3d8:	8a 95       	dec	r24
 3da:	e9 f7       	brne	.-6      	; 0x3d6 <_ZN2GI2IOC1EPc+0x12>
 3dc:	be 01       	movw	r22, r28
 3de:	69 5f       	subi	r22, 0xF9	; 249
 3e0:	7f 4f       	sbci	r23, 0xFF	; 255
 3e2:	c7 01       	movw	r24, r14
 3e4:	f9 de       	rcall	.-526    	; 0x1d8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE>
 3e6:	81 11       	cpse	r24, r1
 3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <_ZN2GI2IOC1EPc+0x34>
 3ea:	8f 81       	ldd	r24, Y+7	; 0x07
 3ec:	98 85       	ldd	r25, Y+8	; 0x08
 3ee:	f8 01       	movw	r30, r16
 3f0:	82 83       	std	Z+2, r24	; 0x02
 3f2:	93 83       	std	Z+3, r25	; 0x03
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	29 c0       	rjmp	.+82     	; 0x44a <_ZN2GI2IOC1EPc+0x86>
 3f8:	be 01       	movw	r22, r28
 3fa:	6b 5f       	subi	r22, 0xFB	; 251
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255
 3fe:	c7 01       	movw	r24, r14
 400:	18 df       	rcall	.-464    	; 0x232 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE>
 402:	81 11       	cpse	r24, r1
 404:	07 c0       	rjmp	.+14     	; 0x414 <_ZN2GI2IOC1EPc+0x50>
 406:	8d 81       	ldd	r24, Y+5	; 0x05
 408:	9e 81       	ldd	r25, Y+6	; 0x06
 40a:	f8 01       	movw	r30, r16
 40c:	82 83       	std	Z+2, r24	; 0x02
 40e:	93 83       	std	Z+3, r25	; 0x03
 410:	83 e0       	ldi	r24, 0x03	; 3
 412:	1b c0       	rjmp	.+54     	; 0x44a <_ZN2GI2IOC1EPc+0x86>
 414:	be 01       	movw	r22, r28
 416:	6d 5f       	subi	r22, 0xFD	; 253
 418:	7f 4f       	sbci	r23, 0xFF	; 255
 41a:	c7 01       	movw	r24, r14
 41c:	37 df       	rcall	.-402    	; 0x28c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE>
 41e:	81 11       	cpse	r24, r1
 420:	07 c0       	rjmp	.+14     	; 0x430 <_ZN2GI2IOC1EPc+0x6c>
 422:	8b 81       	ldd	r24, Y+3	; 0x03
 424:	9c 81       	ldd	r25, Y+4	; 0x04
 426:	f8 01       	movw	r30, r16
 428:	82 83       	std	Z+2, r24	; 0x02
 42a:	93 83       	std	Z+3, r25	; 0x03
 42c:	84 e0       	ldi	r24, 0x04	; 4
 42e:	0d c0       	rjmp	.+26     	; 0x44a <_ZN2GI2IOC1EPc+0x86>
 430:	be 01       	movw	r22, r28
 432:	6f 5f       	subi	r22, 0xFF	; 255
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	c7 01       	movw	r24, r14
 438:	56 df       	rcall	.-340    	; 0x2e6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE>
 43a:	81 11       	cpse	r24, r1
 43c:	08 c0       	rjmp	.+16     	; 0x44e <_ZN2GI2IOC1EPc+0x8a>
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	9a 81       	ldd	r25, Y+2	; 0x02
 442:	f8 01       	movw	r30, r16
 444:	82 83       	std	Z+2, r24	; 0x02
 446:	93 83       	std	Z+3, r25	; 0x03
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	81 83       	std	Z+1, r24	; 0x01
 44c:	04 c0       	rjmp	.+8      	; 0x456 <_ZN2GI2IOC1EPc+0x92>
 44e:	f8 01       	movw	r30, r16
 450:	11 82       	std	Z+1, r1	; 0x01
 452:	12 82       	std	Z+2, r1	; 0x02
 454:	13 82       	std	Z+3, r1	; 0x03
 456:	28 96       	adiw	r28, 0x08	; 8
 458:	e6 e0       	ldi	r30, 0x06	; 6
 45a:	2e c4       	rjmp	.+2140   	; 0xcb8 <__epilogue_restores__+0x18>

0000045c <_ZN2GI2IO5writeEb>:
 45c:	fc 01       	movw	r30, r24
 45e:	82 81       	ldd	r24, Z+2	; 0x02
 460:	93 81       	ldd	r25, Z+3	; 0x03
 462:	00 97       	sbiw	r24, 0x00	; 0
 464:	41 f0       	breq	.+16     	; 0x476 <_ZN2GI2IO5writeEb+0x1a>
 466:	21 81       	ldd	r18, Z+1	; 0x01
 468:	22 23       	and	r18, r18
 46a:	29 f0       	breq	.+10     	; 0x476 <_ZN2GI2IO5writeEb+0x1a>
 46c:	21 30       	cpi	r18, 0x01	; 1
 46e:	29 f4       	brne	.+10     	; 0x47a <_ZN2GI2IO5writeEb+0x1e>
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	43 c1       	rjmp	.+646    	; 0x6fa <_ZN2GI3Dev4Gpio6setOutEj>
 474:	08 95       	ret
 476:	8f ee       	ldi	r24, 0xEF	; 239
 478:	08 95       	ret
 47a:	88 ef       	ldi	r24, 0xF8	; 248
 47c:	08 95       	ret

0000047e <_ZN2GI2IO5writeEPcb>:
 47e:	a6 e0       	ldi	r26, 0x06	; 6
 480:	b0 e0       	ldi	r27, 0x00	; 0
 482:	e4 e4       	ldi	r30, 0x44	; 68
 484:	f2 e0       	ldi	r31, 0x02	; 2
 486:	02 c4       	rjmp	.+2052   	; 0xc8c <__prologue_saves__+0x1e>
 488:	16 2f       	mov	r17, r22
 48a:	bc 01       	movw	r22, r24
 48c:	ce 01       	movw	r24, r28
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	99 df       	rcall	.-206    	; 0x3c4 <_ZN2GI2IOC1EPc>
 492:	61 2f       	mov	r22, r17
 494:	ce 01       	movw	r24, r28
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	e1 df       	rcall	.-62     	; 0x45c <_ZN2GI2IO5writeEb>
 49a:	26 96       	adiw	r28, 0x06	; 6
 49c:	e3 e0       	ldi	r30, 0x03	; 3
 49e:	0f c4       	rjmp	.+2078   	; 0xcbe <__epilogue_restores__+0x1e>

000004a0 <_ZN2GI2IO4readEPb>:
 4a0:	a4 e0       	ldi	r26, 0x04	; 4
 4a2:	b0 e0       	ldi	r27, 0x00	; 0
 4a4:	e5 e5       	ldi	r30, 0x55	; 85
 4a6:	f2 e0       	ldi	r31, 0x02	; 2
 4a8:	ef c3       	rjmp	.+2014   	; 0xc88 <__prologue_saves__+0x1a>
 4aa:	fc 01       	movw	r30, r24
 4ac:	8b 01       	movw	r16, r22
 4ae:	82 81       	ldd	r24, Z+2	; 0x02
 4b0:	93 81       	ldd	r25, Z+3	; 0x03
 4b2:	00 97       	sbiw	r24, 0x00	; 0
 4b4:	b9 f0       	breq	.+46     	; 0x4e4 <_ZN2GI2IO4readEPb+0x44>
 4b6:	f1 80       	ldd	r15, Z+1	; 0x01
 4b8:	ff 20       	and	r15, r15
 4ba:	a1 f0       	breq	.+40     	; 0x4e4 <_ZN2GI2IO4readEPb+0x44>
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	f2 12       	cpse	r15, r18
 4c0:	13 c0       	rjmp	.+38     	; 0x4e8 <_ZN2GI2IO4readEPb+0x48>
 4c2:	be 01       	movw	r22, r28
 4c4:	6f 5f       	subi	r22, 0xFF	; 255
 4c6:	7f 4f       	sbci	r23, 0xFF	; 255
 4c8:	a1 d1       	rcall	.+834    	; 0x80c <_ZN2GI3Dev4Gpio5getInEPm>
 4ca:	49 81       	ldd	r20, Y+1	; 0x01
 4cc:	5a 81       	ldd	r21, Y+2	; 0x02
 4ce:	6b 81       	ldd	r22, Y+3	; 0x03
 4d0:	7c 81       	ldd	r23, Y+4	; 0x04
 4d2:	f8 01       	movw	r30, r16
 4d4:	45 2b       	or	r20, r21
 4d6:	46 2b       	or	r20, r22
 4d8:	47 2b       	or	r20, r23
 4da:	11 f0       	breq	.+4      	; 0x4e0 <_ZN2GI2IO4readEPb+0x40>
 4dc:	f0 82       	st	Z, r15
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <_ZN2GI2IO4readEPb+0x4a>
 4e0:	10 82       	st	Z, r1
 4e2:	03 c0       	rjmp	.+6      	; 0x4ea <_ZN2GI2IO4readEPb+0x4a>
 4e4:	8f ee       	ldi	r24, 0xEF	; 239
 4e6:	01 c0       	rjmp	.+2      	; 0x4ea <_ZN2GI2IO4readEPb+0x4a>
 4e8:	88 ef       	ldi	r24, 0xF8	; 248
 4ea:	24 96       	adiw	r28, 0x04	; 4
 4ec:	e5 e0       	ldi	r30, 0x05	; 5
 4ee:	e5 c3       	rjmp	.+1994   	; 0xcba <__epilogue_restores__+0x1a>

000004f0 <_ZN2GI2IO4readEPcPb>:

SysErr GI::IO::read(char *path, bool *state)/* Bit device */
{
 4f0:	a6 e0       	ldi	r26, 0x06	; 6
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
 4f4:	ed e7       	ldi	r30, 0x7D	; 125
 4f6:	f2 e0       	ldi	r31, 0x02	; 2
 4f8:	c8 c3       	rjmp	.+1936   	; 0xc8a <__prologue_saves__+0x1c>
 4fa:	8b 01       	movw	r16, r22
	GI::IO tmp_io = GI::IO((char *)path);
 4fc:	bc 01       	movw	r22, r24
 4fe:	ce 01       	movw	r24, r28
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	60 df       	rcall	.-320    	; 0x3c4 <_ZN2GI2IOC1EPc>
	return tmp_io.read(state);
 504:	b8 01       	movw	r22, r16
 506:	ce 01       	movw	r24, r28
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	ca df       	rcall	.-108    	; 0x4a0 <_ZN2GI2IO4readEPb>
}
 50c:	26 96       	adiw	r28, 0x06	; 6
 50e:	e4 e0       	ldi	r30, 0x04	; 4
 510:	d5 c3       	rjmp	.+1962   	; 0xcbc <__epilogue_restores__+0x1c>

00000512 <_ZN2GI3Sys5Timer6enableEb.part.0>:
	{
		sTimmerTickValue = (sTimmerInterval + STimerCnt)&(u64)__INT64_MAX__;
	}
	else
	{
		sTimmerTickValue = sTimmerTickValue | (u64)(-__INT64_MAX__ - 1);
 512:	af 92       	push	r10
 514:	bf 92       	push	r11
 516:	cf 92       	push	r12
 518:	df 92       	push	r13
 51a:	ef 92       	push	r14
 51c:	ff 92       	push	r15
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
 522:	fc 01       	movw	r30, r24
 524:	20 91 35 21 	lds	r18, 0x2135
 528:	30 91 36 21 	lds	r19, 0x2136
 52c:	40 91 37 21 	lds	r20, 0x2137
 530:	50 91 38 21 	lds	r21, 0x2138
 534:	60 91 39 21 	lds	r22, 0x2139
 538:	70 91 3a 21 	lds	r23, 0x213A
 53c:	80 91 3b 21 	lds	r24, 0x213B
 540:	90 91 3c 21 	lds	r25, 0x213C
 544:	a0 80       	ld	r10, Z
 546:	b1 80       	ldd	r11, Z+1	; 0x01
 548:	c2 80       	ldd	r12, Z+2	; 0x02
 54a:	d3 80       	ldd	r13, Z+3	; 0x03
 54c:	e4 80       	ldd	r14, Z+4	; 0x04
 54e:	f5 80       	ldd	r15, Z+5	; 0x05
 550:	06 81       	ldd	r16, Z+6	; 0x06
 552:	17 81       	ldd	r17, Z+7	; 0x07
 554:	bd d3       	rcall	.+1914   	; 0xcd0 <__adddi3>
 556:	9f 77       	andi	r25, 0x7F	; 127
 558:	20 87       	std	Z+8, r18	; 0x08
 55a:	31 87       	std	Z+9, r19	; 0x09
 55c:	42 87       	std	Z+10, r20	; 0x0a
 55e:	53 87       	std	Z+11, r21	; 0x0b
 560:	64 87       	std	Z+12, r22	; 0x0c
 562:	75 87       	std	Z+13, r23	; 0x0d
 564:	86 87       	std	Z+14, r24	; 0x0e
 566:	97 87       	std	Z+15, r25	; 0x0f
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	ff 90       	pop	r15
 56e:	ef 90       	pop	r14
 570:	df 90       	pop	r13
 572:	cf 90       	pop	r12
 574:	bf 90       	pop	r11
 576:	af 90       	pop	r10
 578:	08 95       	ret

0000057a <_ZN2GI3Sys5TimerC1Ey>:
 57a:	0f 93       	push	r16
 57c:	1f 93       	push	r17
 57e:	fc 01       	movw	r30, r24
 580:	80 e1       	ldi	r24, 0x10	; 16
 582:	df 01       	movw	r26, r30
 584:	1d 92       	st	X+, r1
 586:	8a 95       	dec	r24
 588:	e9 f7       	brne	.-6      	; 0x584 <_ZN2GI3Sys5TimerC1Ey+0xa>
 58a:	7f 77       	andi	r23, 0x7F	; 127
 58c:	00 83       	st	Z, r16
 58e:	11 83       	std	Z+1, r17	; 0x01
 590:	22 83       	std	Z+2, r18	; 0x02
 592:	33 83       	std	Z+3, r19	; 0x03
 594:	44 83       	std	Z+4, r20	; 0x04
 596:	55 83       	std	Z+5, r21	; 0x05
 598:	66 83       	std	Z+6, r22	; 0x06
 59a:	77 83       	std	Z+7, r23	; 0x07
 59c:	cf 01       	movw	r24, r30
 59e:	b9 df       	rcall	.-142    	; 0x512 <_ZN2GI3Sys5Timer6enableEb.part.0>
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	08 95       	ret

000005a6 <_ZN2GI3Sys5Timer8intervalEy>:
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	fc 01       	movw	r30, r24
 5ac:	7f 77       	andi	r23, 0x7F	; 127
 5ae:	00 83       	st	Z, r16
 5b0:	11 83       	std	Z+1, r17	; 0x01
 5b2:	22 83       	std	Z+2, r18	; 0x02
 5b4:	33 83       	std	Z+3, r19	; 0x03
 5b6:	44 83       	std	Z+4, r20	; 0x04
 5b8:	55 83       	std	Z+5, r21	; 0x05
 5ba:	66 83       	std	Z+6, r22	; 0x06
 5bc:	77 83       	std	Z+7, r23	; 0x07
 5be:	a9 df       	rcall	.-174    	; 0x512 <_ZN2GI3Sys5Timer6enableEb.part.0>
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	08 95       	ret

000005c6 <_ZN2GI3Sys5Timer4tickEv>:
	}
}
//#####################################################
bool GI::Sys::Timer::tick()
{
 5c6:	a0 e0       	ldi	r26, 0x00	; 0
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	e8 ee       	ldi	r30, 0xE8	; 232
 5cc:	f2 e0       	ldi	r31, 0x02	; 2
 5ce:	52 c3       	rjmp	.+1700   	; 0xc74 <__prologue_saves__+0x6>
 5d0:	fc 01       	movw	r30, r24
	if(!(sTimmerTickValue & (u64)(-__INT64_MAX__ - 1)))
 5d2:	50 84       	ldd	r5, Z+8	; 0x08
 5d4:	61 84       	ldd	r6, Z+9	; 0x09
 5d6:	72 84       	ldd	r7, Z+10	; 0x0a
 5d8:	83 84       	ldd	r8, Z+11	; 0x0b
 5da:	94 84       	ldd	r9, Z+12	; 0x0c
 5dc:	d5 85       	ldd	r29, Z+13	; 0x0d
 5de:	c6 85       	ldd	r28, Z+14	; 0x0e
 5e0:	b7 85       	ldd	r27, Z+15	; 0x0f
 5e2:	25 2d       	mov	r18, r5
 5e4:	36 2d       	mov	r19, r6
 5e6:	47 2d       	mov	r20, r7
 5e8:	58 2d       	mov	r21, r8
 5ea:	69 2d       	mov	r22, r9
 5ec:	7d 2f       	mov	r23, r29
 5ee:	8c 2f       	mov	r24, r28
 5f0:	9b 2f       	mov	r25, r27
 5f2:	a0 e0       	ldi	r26, 0x00	; 0
 5f4:	8b d3       	rcall	.+1814   	; 0xd0c <__cmpdi2_s8>
 5f6:	1c f1       	brlt	.+70     	; 0x63e <_ZN2GI3Sys5Timer4tickEv+0x78>
	{
		u64 Temp1 = sTimmerTickValue & (u64)__INT64_MAX__;
		u64 Temp2 = STimerCnt & (u64)__INT64_MAX__;
 5f8:	a0 90 35 21 	lds	r10, 0x2135
 5fc:	b0 90 36 21 	lds	r11, 0x2136
 600:	c0 90 37 21 	lds	r12, 0x2137
 604:	d0 90 38 21 	lds	r13, 0x2138
 608:	e0 90 39 21 	lds	r14, 0x2139
 60c:	f0 90 3a 21 	lds	r15, 0x213A
 610:	00 91 3b 21 	lds	r16, 0x213B
 614:	10 91 3c 21 	lds	r17, 0x213C
		u64 Temp = (Temp1 - Temp2 - 1)& (u64)(-__INT64_MAX__ - 1);
 618:	af ef       	ldi	r26, 0xFF	; 255
 61a:	63 d3       	rcall	.+1734   	; 0xce2 <__adddi3_s8>
bool GI::Sys::Timer::tick()
{
	if(!(sTimmerTickValue & (u64)(-__INT64_MAX__ - 1)))
	{
		u64 Temp1 = sTimmerTickValue & (u64)__INT64_MAX__;
		u64 Temp2 = STimerCnt & (u64)__INT64_MAX__;
 61c:	1f 77       	andi	r17, 0x7F	; 127
		u64 Temp = (Temp1 - Temp2 - 1)& (u64)(-__INT64_MAX__ - 1);
 61e:	6d d3       	rcall	.+1754   	; 0xcfa <__subdi3>
		if(Temp)
 620:	20 e0       	ldi	r18, 0x00	; 0
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	40 e0       	ldi	r20, 0x00	; 0
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	60 e0       	ldi	r22, 0x00	; 0
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 78       	andi	r25, 0x80	; 128
 630:	a0 e0       	ldi	r26, 0x00	; 0
 632:	6c d3       	rcall	.+1752   	; 0xd0c <__cmpdi2_s8>
 634:	21 f0       	breq	.+8      	; 0x63e <_ZN2GI3Sys5Timer4tickEv+0x78>
 636:	cf 01       	movw	r24, r30
 638:	6c df       	rcall	.-296    	; 0x512 <_ZN2GI3Sys5Timer6enableEb.part.0>
		{
			enable(true);
			return true;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	01 c0       	rjmp	.+2      	; 0x640 <_ZN2GI3Sys5Timer4tickEv+0x7a>
		}
	}
	return false;
 63e:	80 e0       	ldi	r24, 0x00	; 0
}
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
 644:	ef e0       	ldi	r30, 0x0F	; 15
 646:	2f c3       	rjmp	.+1630   	; 0xca6 <__epilogue_restores__+0x6>

00000648 <_GLOBAL__sub_I_fs_err_table>:
/*typedef struct {
	char name[8];
	SysErr (*fnc)(int argc, char *argv[]);
}cmd_list;*/

static GI::StringArray hystoryTable = GI::StringArray();
 648:	81 e3       	ldi	r24, 0x31	; 49
 64a:	91 e2       	ldi	r25, 0x21	; 33
 64c:	19 c0       	rjmp	.+50     	; 0x680 <_ZN2GI11StringArrayC1Ev>
 64e:	08 95       	ret

00000650 <_GLOBAL__sub_D_fs_err_table>:
 650:	81 e3       	ldi	r24, 0x31	; 49
 652:	91 e2       	ldi	r25, 0x21	; 33
 654:	26 c0       	rjmp	.+76     	; 0x6a2 <_ZN2GI11StringArrayD1Ev>
 656:	08 95       	ret

00000658 <_Znwj>:
#include <stdlib.h>

void* operator new(size_t sz) throw()
{
//    cerr << "allocating " << sz << " bytes\n";
    void* mem = malloc(sz);
 658:	7f c3       	rjmp	.+1790   	; 0xd58 <malloc>
    if (mem)
        return mem;
    else
        return NULL;
}
 65a:	08 95       	ret

0000065c <_ZdlPv>:


void operator delete(void* ptr) throw()
{
//    cerr << "deallocating at " << ptr << endl;
    free(ptr);
 65c:	15 c4       	rjmp	.+2090   	; 0xe88 <free>
 65e:	08 95       	ret

00000660 <_ZN2GI6StringD1Ev>:
	if (!Return)
		return NULL;
	*Return = 0;
	strcpy(Return, buff + position);
	return Return;
}
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	ec 01       	movw	r28, r24
 666:	88 81       	ld	r24, Y
 668:	99 81       	ldd	r25, Y+1	; 0x01
 66a:	00 97       	sbiw	r24, 0x00	; 0
 66c:	09 f0       	breq	.+2      	; 0x670 <_ZN2GI6StringD1Ev+0x10>
 66e:	0c d4       	rcall	.+2072   	; 0xe88 <free>
 670:	88 e0       	ldi	r24, 0x08	; 8
 672:	fe 01       	movw	r30, r28
 674:	11 92       	st	Z+, r1
 676:	8a 95       	dec	r24
 678:	e9 f7       	brne	.-6      	; 0x674 <_ZN2GI6StringD1Ev+0x14>
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <_ZN2GI11StringArrayC1Ev>:

GI::StringArray::StringArray()
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	ec 01       	movw	r28, r24
{
	memset(this, 0, sizeof(*this));
 686:	18 82       	st	Y, r1
 688:	19 82       	std	Y+1, r1	; 0x01
 68a:	1a 82       	std	Y+2, r1	; 0x02
 68c:	1b 82       	std	Y+3, r1	; 0x03
	array = (GI::String **)calloc(1, sizeof(GI::String *));
 68e:	62 e0       	ldi	r22, 0x02	; 2
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	46 d3       	rcall	.+1676   	; 0xd24 <calloc>
 698:	88 83       	st	Y, r24
 69a:	99 83       	std	Y+1, r25	; 0x01
}
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	08 95       	ret

000006a2 <_ZN2GI11StringArrayD1Ev>:

GI::StringArray::~StringArray()
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	ec 01       	movw	r28, r24
{
	if(!array)
 6ac:	88 81       	ld	r24, Y
 6ae:	99 81       	ldd	r25, Y+1	; 0x01
 6b0:	89 2b       	or	r24, r25
 6b2:	f1 f0       	breq	.+60     	; 0x6f0 <_ZN2GI11StringArrayD1Ev+0x4e>
		return;
	while(itemsCount)
 6b4:	ea 81       	ldd	r30, Y+2	; 0x02
 6b6:	fb 81       	ldd	r31, Y+3	; 0x03
 6b8:	88 81       	ld	r24, Y
 6ba:	99 81       	ldd	r25, Y+1	; 0x01
 6bc:	30 97       	sbiw	r30, 0x00	; 0
 6be:	a9 f0       	breq	.+42     	; 0x6ea <_ZN2GI11StringArrayD1Ev+0x48>
	{
		delete array[itemsCount - 1];
 6c0:	e1 50       	subi	r30, 0x01	; 1
 6c2:	f0 48       	sbci	r31, 0x80	; 128
 6c4:	ee 0f       	add	r30, r30
 6c6:	ff 1f       	adc	r31, r31
 6c8:	e8 0f       	add	r30, r24
 6ca:	f9 1f       	adc	r31, r25
 6cc:	00 81       	ld	r16, Z
 6ce:	11 81       	ldd	r17, Z+1	; 0x01
 6d0:	01 15       	cp	r16, r1
 6d2:	11 05       	cpc	r17, r1
 6d4:	21 f0       	breq	.+8      	; 0x6de <_ZN2GI11StringArrayD1Ev+0x3c>
 6d6:	c8 01       	movw	r24, r16
 6d8:	c3 df       	rcall	.-122    	; 0x660 <_ZN2GI6StringD1Ev>
 6da:	c8 01       	movw	r24, r16
 6dc:	bf df       	rcall	.-130    	; 0x65c <_ZdlPv>
		itemsCount--;
 6de:	8a 81       	ldd	r24, Y+2	; 0x02
 6e0:	9b 81       	ldd	r25, Y+3	; 0x03
 6e2:	01 97       	sbiw	r24, 0x01	; 1
 6e4:	8a 83       	std	Y+2, r24	; 0x02
 6e6:	9b 83       	std	Y+3, r25	; 0x03
 6e8:	e5 cf       	rjmp	.-54     	; 0x6b4 <_ZN2GI11StringArrayD1Ev+0x12>
	}
	free(array);
 6ea:	ce d3       	rcall	.+1948   	; 0xe88 <free>
	array = NULL;
 6ec:	18 82       	st	Y, r1
 6ee:	19 82       	std	Y+1, r1	; 0x01
}
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	1f 91       	pop	r17
 6f6:	0f 91       	pop	r16
 6f8:	08 95       	ret

000006fa <_ZN2GI3Dev4Gpio6setOutEj>:
{
	setMode(CfgGpio::GPIO_IN_FLOATING, multiPinMask);
}
/*#####################################################*/
SysErr GI::Dev::Gpio::setOut(unsigned int value)
{
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
	if (!this)
 6fe:	00 97       	sbiw	r24, 0x00	; 0
 700:	09 f4       	brne	.+2      	; 0x704 <_ZN2GI3Dev4Gpio6setOutEj+0xa>
 702:	3a c0       	rjmp	.+116    	; 0x778 <_ZN2GI3Dev4Gpio6setOutEj+0x7e>
		return SYS_ERR_INVALID_HANDLER;
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
 704:	dc 01       	movw	r26, r24
 706:	11 96       	adiw	r26, 0x01	; 1
 708:	ed 91       	ld	r30, X+
 70a:	fc 91       	ld	r31, X
 70c:	12 97       	sbiw	r26, 0x02	; 2
 70e:	c5 85       	ldd	r28, Z+13	; 0x0d
 710:	d6 85       	ldd	r29, Z+14	; 0x0e
	PORT_t *BaseAddr = GPIO_BASE_PTRS[int_cfg->pin >> 5];
 712:	ec 85       	ldd	r30, Y+12	; 0x0c
 714:	fd 85       	ldd	r31, Y+13	; 0x0d
 716:	df 01       	movw	r26, r30
 718:	85 e0       	ldi	r24, 0x05	; 5
 71a:	b6 95       	lsr	r27
 71c:	a7 95       	ror	r26
 71e:	8a 95       	dec	r24
 720:	e1 f7       	brne	.-8      	; 0x71a <_ZN2GI3Dev4Gpio6setOutEj+0x20>
 722:	aa 0f       	add	r26, r26
 724:	bb 1f       	adc	r27, r27
 726:	a2 52       	subi	r26, 0x22	; 34
 728:	bf 4d       	sbci	r27, 0xDF	; 223
 72a:	0d 90       	ld	r0, X+
 72c:	bc 91       	ld	r27, X
 72e:	a0 2d       	mov	r26, r0
	if (int_cfg->multiPin)
 730:	88 89       	ldd	r24, Y+16	; 0x10
 732:	88 23       	and	r24, r24
 734:	59 f0       	breq	.+22     	; 0x74c <_ZN2GI3Dev4Gpio6setOutEj+0x52>
	{
		BaseAddr->OUT = (BaseAddr->OUT & ~(int_cfg->pin % 8))
				| (value & (int_cfg->pin % 8));
 736:	14 96       	adiw	r26, 0x04	; 4
 738:	8c 91       	ld	r24, X
 73a:	14 97       	sbiw	r26, 0x04	; 4
 73c:	e7 70       	andi	r30, 0x07	; 7
 73e:	6e 23       	and	r22, r30
 740:	e0 95       	com	r30
 742:	e8 23       	and	r30, r24
 744:	6e 2b       	or	r22, r30
 746:	14 96       	adiw	r26, 0x04	; 4
 748:	6c 93       	st	X, r22
 74a:	10 c0       	rjmp	.+32     	; 0x76c <_ZN2GI3Dev4Gpio6setOutEj+0x72>
	}
	else
	{
		unsigned int state = value;
		if (int_cfg->reverse)
 74c:	8e 85       	ldd	r24, Y+14	; 0x0e
 74e:	88 23       	and	r24, r24
 750:	21 f0       	breq	.+8      	; 0x75a <_ZN2GI3Dev4Gpio6setOutEj+0x60>
			state = (~state) & 0x01;
 752:	61 70       	andi	r22, 0x01	; 1
 754:	77 27       	eor	r23, r23
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	68 27       	eor	r22, r24
 75a:	e7 70       	andi	r30, 0x07	; 7
 75c:	ff 27       	eor	r31, r31
		if (state)
			BaseAddr->OUTSET = pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
 75e:	e4 55       	subi	r30, 0x54	; 84
 760:	ff 4f       	sbci	r31, 0xFF	; 255
	else
	{
		unsigned int state = value;
		if (int_cfg->reverse)
			state = (~state) & 0x01;
		if (state)
 762:	67 2b       	or	r22, r23
 764:	29 f0       	breq	.+10     	; 0x770 <_ZN2GI3Dev4Gpio6setOutEj+0x76>
			BaseAddr->OUTSET = pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
 766:	e4 91       	lpm	r30, Z
 768:	15 96       	adiw	r26, 0x05	; 5
 76a:	ec 93       	st	X, r30
		else
			BaseAddr->OUTCLR = pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
	}
	return SYS_ERR_OK;
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	05 c0       	rjmp	.+10     	; 0x77a <_ZN2GI3Dev4Gpio6setOutEj+0x80>
		if (int_cfg->reverse)
			state = (~state) & 0x01;
		if (state)
			BaseAddr->OUTSET = pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
		else
			BaseAddr->OUTCLR = pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
 770:	e4 91       	lpm	r30, Z
 772:	16 96       	adiw	r26, 0x06	; 6
 774:	ec 93       	st	X, r30
 776:	fa cf       	rjmp	.-12     	; 0x76c <_ZN2GI3Dev4Gpio6setOutEj+0x72>
}
/*#####################################################*/
SysErr GI::Dev::Gpio::setOut(unsigned int value)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
 778:	8e ef       	ldi	r24, 0xFE	; 254
			BaseAddr->OUTSET = pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
		else
			BaseAddr->OUTCLR = pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
	}
	return SYS_ERR_OK;
}
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	08 95       	ret

00000780 <_ZN2GI3Dev4Gpio2inEv>:
/*#####################################################*/
signed int GI::Dev::Gpio::in()
{
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
	if (!this)
 784:	00 97       	sbiw	r24, 0x00	; 0
 786:	09 f4       	brne	.+2      	; 0x78a <_ZN2GI3Dev4Gpio2inEv+0xa>
 788:	3c c0       	rjmp	.+120    	; 0x802 <_ZN2GI3Dev4Gpio2inEv+0x82>
		return -1;
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
 78a:	dc 01       	movw	r26, r24
 78c:	11 96       	adiw	r26, 0x01	; 1
 78e:	ed 91       	ld	r30, X+
 790:	fc 91       	ld	r31, X
 792:	12 97       	sbiw	r26, 0x02	; 2
 794:	c5 85       	ldd	r28, Z+13	; 0x0d
 796:	d6 85       	ldd	r29, Z+14	; 0x0e
	PORT_t *BaseAddr = GPIO_BASE_PTRS[int_cfg->pin >> 5];
 798:	ec 85       	ldd	r30, Y+12	; 0x0c
 79a:	fd 85       	ldd	r31, Y+13	; 0x0d
 79c:	df 01       	movw	r26, r30
 79e:	25 e0       	ldi	r18, 0x05	; 5
 7a0:	b6 95       	lsr	r27
 7a2:	a7 95       	ror	r26
 7a4:	2a 95       	dec	r18
 7a6:	e1 f7       	brne	.-8      	; 0x7a0 <_ZN2GI3Dev4Gpio2inEv+0x20>
 7a8:	aa 0f       	add	r26, r26
 7aa:	bb 1f       	adc	r27, r27
 7ac:	a2 52       	subi	r26, 0x22	; 34
 7ae:	bf 4d       	sbci	r27, 0xDF	; 223
 7b0:	0d 90       	ld	r0, X+
 7b2:	bc 91       	ld	r27, X
 7b4:	a0 2d       	mov	r26, r0
	if (int_cfg->multiPin)
 7b6:	88 89       	ldd	r24, Y+16	; 0x10
 7b8:	88 23       	and	r24, r24
 7ba:	41 f0       	breq	.+16     	; 0x7cc <_ZN2GI3Dev4Gpio2inEv+0x4c>
	{
		return BaseAddr->IN & (int_cfg->pin % 8);
 7bc:	18 96       	adiw	r26, 0x08	; 8
 7be:	8c 91       	ld	r24, X
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	8e 23       	and	r24, r30
 7c4:	9f 23       	and	r25, r31
 7c6:	87 70       	andi	r24, 0x07	; 7
 7c8:	99 27       	eor	r25, r25
 7ca:	1d c0       	rjmp	.+58     	; 0x806 <_ZN2GI3Dev4Gpio2inEv+0x86>
	}
	else
	{
		if (int_cfg->reverse)
 7cc:	8e 85       	ldd	r24, Y+14	; 0x0e
 7ce:	e7 70       	andi	r30, 0x07	; 7
 7d0:	ff 27       	eor	r31, r31
 7d2:	88 23       	and	r24, r24
 7d4:	69 f0       	breq	.+26     	; 0x7f0 <_ZN2GI3Dev4Gpio2inEv+0x70>
		{
			if(BaseAddr->IN & pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]))
 7d6:	18 96       	adiw	r26, 0x08	; 8
 7d8:	8c 91       	ld	r24, X
 7da:	e4 55       	subi	r30, 0x54	; 84
 7dc:	ff 4f       	sbci	r31, 0xFF	; 255
 7de:	e4 91       	lpm	r30, Z
 7e0:	e8 23       	and	r30, r24
 7e2:	31 e0       	ldi	r19, 0x01	; 1
 7e4:	20 e0       	ldi	r18, 0x00	; 0
 7e6:	09 f0       	breq	.+2      	; 0x7ea <_ZN2GI3Dev4Gpio2inEv+0x6a>
 7e8:	30 e0       	ldi	r19, 0x00	; 0
}
/*#####################################################*/
signed int GI::Dev::Gpio::in()
{
	if (!this)
		return -1;
 7ea:	83 2f       	mov	r24, r19
 7ec:	92 2f       	mov	r25, r18
 7ee:	0b c0       	rjmp	.+22     	; 0x806 <_ZN2GI3Dev4Gpio2inEv+0x86>
				return false;
			else
				return true;
		}
		else
			return BaseAddr->IN & pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
 7f0:	18 96       	adiw	r26, 0x08	; 8
 7f2:	8c 91       	ld	r24, X
 7f4:	e4 55       	subi	r30, 0x54	; 84
 7f6:	ff 4f       	sbci	r31, 0xFF	; 255
 7f8:	e4 91       	lpm	r30, Z
 7fa:	e8 23       	and	r30, r24
 7fc:	8e 2f       	mov	r24, r30
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	02 c0       	rjmp	.+4      	; 0x806 <_ZN2GI3Dev4Gpio2inEv+0x86>
}
/*#####################################################*/
signed int GI::Dev::Gpio::in()
{
	if (!this)
		return -1;
 802:	8f ef       	ldi	r24, 0xFF	; 255
 804:	9f ef       	ldi	r25, 0xFF	; 255
				return true;
		}
		else
			return BaseAddr->IN & pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
	}
}
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	08 95       	ret

0000080c <_ZN2GI3Dev4Gpio5getInEPm>:
/*#####################################################*/
SysErr GI::Dev::Gpio::getIn(unsigned long *value)
{
 80c:	cf 93       	push	r28
 80e:	df 93       	push	r29
 810:	eb 01       	movw	r28, r22
	if (!this)
 812:	00 97       	sbiw	r24, 0x00	; 0
 814:	49 f0       	breq	.+18     	; 0x828 <_ZN2GI3Dev4Gpio5getInEPm+0x1c>
		return SYS_ERR_INVALID_HANDLER;
	*value = (unsigned int)in();
 816:	b4 df       	rcall	.-152    	; 0x780 <_ZN2GI3Dev4Gpio2inEv>
 818:	a0 e0       	ldi	r26, 0x00	; 0
 81a:	b0 e0       	ldi	r27, 0x00	; 0
 81c:	88 83       	st	Y, r24
 81e:	99 83       	std	Y+1, r25	; 0x01
 820:	aa 83       	std	Y+2, r26	; 0x02
 822:	bb 83       	std	Y+3, r27	; 0x03
	return SYS_ERR_OK;
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	01 c0       	rjmp	.+2      	; 0x82a <_ZN2GI3Dev4Gpio5getInEPm+0x1e>
}
/*#####################################################*/
SysErr GI::Dev::Gpio::getIn(unsigned long *value)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
 828:	8e ef       	ldi	r24, 0xFE	; 254
	*value = (unsigned int)in();
	return SYS_ERR_OK;
}
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	08 95       	ret

00000830 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE>:
/*#####################################################*/
SysErr GI::Dev::Gpio::setMode(CfgGpio::gpioMode_e mode)
{
 830:	cf 93       	push	r28
 832:	df 93       	push	r29
	if (!this)
 834:	00 97       	sbiw	r24, 0x00	; 0
 836:	09 f4       	brne	.+2      	; 0x83a <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0xa>
 838:	5a c0       	rjmp	.+180    	; 0x8ee <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0xbe>
		return SYS_ERR_INVALID_HANDLER;
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
 83a:	dc 01       	movw	r26, r24
 83c:	11 96       	adiw	r26, 0x01	; 1
 83e:	ed 91       	ld	r30, X+
 840:	fc 91       	ld	r31, X
 842:	12 97       	sbiw	r26, 0x02	; 2
 844:	05 84       	ldd	r0, Z+13	; 0x0d
 846:	f6 85       	ldd	r31, Z+14	; 0x0e
 848:	e0 2d       	mov	r30, r0
	PORT_t *BaseAddr = GPIO_BASE_PTRS[int_cfg->pin >> 5];
 84a:	24 85       	ldd	r18, Z+12	; 0x0c
 84c:	35 85       	ldd	r19, Z+13	; 0x0d
 84e:	d9 01       	movw	r26, r18
 850:	45 e0       	ldi	r20, 0x05	; 5
 852:	b6 95       	lsr	r27
 854:	a7 95       	ror	r26
 856:	4a 95       	dec	r20
 858:	e1 f7       	brne	.-8      	; 0x852 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x22>
 85a:	aa 0f       	add	r26, r26
 85c:	bb 1f       	adc	r27, r27
 85e:	a2 52       	subi	r26, 0x22	; 34
 860:	bf 4d       	sbci	r27, 0xDF	; 223
 862:	0d 90       	ld	r0, X+
 864:	bc 91       	ld	r27, X
 866:	a0 2d       	mov	r26, r0

	if(int_cfg->multiPin)
 868:	40 89       	ldd	r20, Z+16	; 0x10
 86a:	41 11       	cpse	r20, r1
 86c:	42 c0       	rjmp	.+132    	; 0x8f2 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0xc2>
		return SYS_ERR_INVALID_COMMAND;
	multiPinMask = 1 << (int_cfg->pin % 8);
 86e:	27 70       	andi	r18, 0x07	; 7
 870:	33 27       	eor	r19, r19
 872:	41 e0       	ldi	r20, 0x01	; 1
 874:	50 e0       	ldi	r21, 0x00	; 0
 876:	02 2e       	mov	r0, r18
 878:	02 c0       	rjmp	.+4      	; 0x87e <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x4e>
 87a:	44 0f       	add	r20, r20
 87c:	55 1f       	adc	r21, r21
 87e:	0a 94       	dec	r0
 880:	e2 f7       	brpl	.-8      	; 0x87a <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x4a>
 882:	ec 01       	movw	r28, r24
 884:	4e 83       	std	Y+6, r20	; 0x06
 886:	5f 83       	std	Y+7, r21	; 0x07
	
	volatile unsigned char *ctl_pin = &BaseAddr->PIN0CTRL;
 888:	cd 01       	movw	r24, r26
 88a:	40 96       	adiw	r24, 0x10	; 16
	switch (mode)
 88c:	61 30       	cpi	r22, 0x01	; 1
 88e:	81 f0       	breq	.+32     	; 0x8b0 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x80>
 890:	f0 f0       	brcs	.+60     	; 0x8ce <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x9e>
 892:	62 30       	cpi	r22, 0x02	; 2
 894:	39 f0       	breq	.+14     	; 0x8a4 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x74>
 896:	63 30       	cpi	r22, 0x03	; 3
 898:	61 f5       	brne	.+88     	; 0x8f2 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0xc2>
	{
	case CfgGpio::GPIO_IN_PULL_UP:
		ctl_pin[int_cfg->pin % 8] = PORT_OPC_PULLUP_gc;
 89a:	ec 01       	movw	r28, r24
 89c:	c2 0f       	add	r28, r18
 89e:	d3 1f       	adc	r29, r19
 8a0:	88 e1       	ldi	r24, 0x18	; 24
 8a2:	04 c0       	rjmp	.+8      	; 0x8ac <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x7c>
		BaseAddr->DIRCLR = pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
		break;
	case CfgGpio::GPIO_IN_PULL_DOWN:
		ctl_pin[int_cfg->pin % 8] = PORT_OPC_PULLDOWN_gc;
 8a4:	ec 01       	movw	r28, r24
 8a6:	c2 0f       	add	r28, r18
 8a8:	d3 1f       	adc	r29, r19
 8aa:	80 e1       	ldi	r24, 0x10	; 16
 8ac:	88 83       	st	Y, r24
 8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x88>
		BaseAddr->DIRCLR = pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
		break;
	case CfgGpio::GPIO_IN_FLOATING:
		ctl_pin[int_cfg->pin % 8] = PORT_OPC_TOTEM_gc;
 8b0:	ec 01       	movw	r28, r24
 8b2:	c2 0f       	add	r28, r18
 8b4:	d3 1f       	adc	r29, r19
 8b6:	18 82       	st	Y, r1
		BaseAddr->DIRCLR = pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
 8b8:	04 84       	ldd	r0, Z+12	; 0x0c
 8ba:	f5 85       	ldd	r31, Z+13	; 0x0d
 8bc:	e0 2d       	mov	r30, r0
 8be:	e7 70       	andi	r30, 0x07	; 7
 8c0:	ff 27       	eor	r31, r31
 8c2:	e4 55       	subi	r30, 0x54	; 84
 8c4:	ff 4f       	sbci	r31, 0xFF	; 255
 8c6:	e4 91       	lpm	r30, Z
 8c8:	12 96       	adiw	r26, 0x02	; 2
 8ca:	ec 93       	st	X, r30
 8cc:	0e c0       	rjmp	.+28     	; 0x8ea <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0xba>
		break;
	case CfgGpio::GPIO_OUT_PUSH_PULL:
		ctl_pin[int_cfg->pin % 8] = PORT_OPC_TOTEM_gc;
 8ce:	ec 01       	movw	r28, r24
 8d0:	c2 0f       	add	r28, r18
 8d2:	d3 1f       	adc	r29, r19
 8d4:	18 82       	st	Y, r1
		BaseAddr->DIRSET = pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
 8d6:	04 84       	ldd	r0, Z+12	; 0x0c
 8d8:	f5 85       	ldd	r31, Z+13	; 0x0d
 8da:	e0 2d       	mov	r30, r0
 8dc:	e7 70       	andi	r30, 0x07	; 7
 8de:	ff 27       	eor	r31, r31
 8e0:	e4 55       	subi	r30, 0x54	; 84
 8e2:	ff 4f       	sbci	r31, 0xFF	; 255
 8e4:	e4 91       	lpm	r30, Z
 8e6:	11 96       	adiw	r26, 0x01	; 1
 8e8:	ec 93       	st	X, r30
		break;
	default:
		return SYS_ERR_INVALID_COMMAND;

	}
	return SYS_ERR_OK;
 8ea:	80 e0       	ldi	r24, 0x00	; 0
		BaseAddr->DIRCLR = pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
		break;
	case CfgGpio::GPIO_OUT_PUSH_PULL:
		ctl_pin[int_cfg->pin % 8] = PORT_OPC_TOTEM_gc;
		BaseAddr->DIRSET = pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
		break;
 8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0xc4>
}
/*#####################################################*/
SysErr GI::Dev::Gpio::setMode(CfgGpio::gpioMode_e mode)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
 8ee:	8e ef       	ldi	r24, 0xFE	; 254
 8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0xc4>
	case CfgGpio::GPIO_OUT_PUSH_PULL:
		ctl_pin[int_cfg->pin % 8] = PORT_OPC_TOTEM_gc;
		BaseAddr->DIRSET = pgm_read_byte(&BIT_MASK_TABLE[int_cfg->pin % 8]);
		break;
	default:
		return SYS_ERR_INVALID_COMMAND;
 8f2:	8b ef       	ldi	r24, 0xFB	; 251

	}
	return SYS_ERR_OK;
}
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	08 95       	ret

000008fa <_ZN2GI3Dev4GpioC1EP10ioSettings>:
#else
		, NULL
#endif
};
/*#####################################################*/
GI::Dev::Gpio::Gpio(ioSettings *cfg)
 8fa:	0f 93       	push	r16
 8fc:	1f 93       	push	r17
 8fe:	cf 93       	push	r28
 900:	df 93       	push	r29
 902:	ec 01       	movw	r28, r24
{
	memset(this, 0, sizeof(*this));
 904:	88 e1       	ldi	r24, 0x18	; 24
 906:	de 01       	movw	r26, r28
 908:	1d 92       	st	X+, r1
 90a:	8a 95       	dec	r24
 90c:	e9 f7       	brne	.-6      	; 0x908 <_ZN2GI3Dev4GpioC1EP10ioSettings+0xe>
	if(cfg->info.ioType != ioSettings::info_s::ioType_GPIO)
 90e:	fb 01       	movw	r30, r22
 910:	80 81       	ld	r24, Z
 912:	81 30       	cpi	r24, 0x01	; 1
 914:	51 f5       	brne	.+84     	; 0x96a <_ZN2GI3Dev4GpioC1EP10ioSettings+0x70>
		return;
	this->cfg = cfg;
 916:	69 83       	std	Y+1, r22	; 0x01
 918:	7a 83       	std	Y+2, r23	; 0x02
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
 91a:	05 85       	ldd	r16, Z+13	; 0x0d
 91c:	16 85       	ldd	r17, Z+14	; 0x0e
	if(!int_cfg->multiPin)
 91e:	d8 01       	movw	r26, r16
 920:	50 96       	adiw	r26, 0x10	; 16
 922:	8c 91       	ld	r24, X
 924:	50 97       	sbiw	r26, 0x10	; 16
 926:	81 11       	cpse	r24, r1
 928:	09 c0       	rjmp	.+18     	; 0x93c <_ZN2GI3Dev4GpioC1EP10ioSettings+0x42>
	{
		setMode(int_cfg->gpioMode);
 92a:	1f 96       	adiw	r26, 0x0f	; 15
 92c:	6c 91       	ld	r22, X
 92e:	ce 01       	movw	r24, r28
 930:	7f df       	rcall	.-258    	; 0x830 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE>
		setOut(int_cfg->defValue);
 932:	f8 01       	movw	r30, r16
 934:	61 89       	ldd	r22, Z+17	; 0x11
 936:	72 89       	ldd	r23, Z+18	; 0x12
 938:	ce 01       	movw	r24, r28
 93a:	df de       	rcall	.-578    	; 0x6fa <_ZN2GI3Dev4Gpio6setOutEj>
	}
	pinNr = int_cfg->pin % 8;
 93c:	d8 01       	movw	r26, r16
 93e:	1c 96       	adiw	r26, 0x0c	; 12
 940:	8c 91       	ld	r24, X
 942:	1c 97       	sbiw	r26, 0x0c	; 12
 944:	87 70       	andi	r24, 0x07	; 7
 946:	8d 83       	std	Y+5, r24	; 0x05
	baseAddr = (void *)GPIO_BASE_PTRS[int_cfg->pin >> 5];
 948:	1c 96       	adiw	r26, 0x0c	; 12
 94a:	ed 91       	ld	r30, X+
 94c:	fc 91       	ld	r31, X
 94e:	1d 97       	sbiw	r26, 0x0d	; 13
 950:	65 e0       	ldi	r22, 0x05	; 5
 952:	f6 95       	lsr	r31
 954:	e7 95       	ror	r30
 956:	6a 95       	dec	r22
 958:	e1 f7       	brne	.-8      	; 0x952 <_ZN2GI3Dev4GpioC1EP10ioSettings+0x58>
 95a:	ee 0f       	add	r30, r30
 95c:	ff 1f       	adc	r31, r31
 95e:	e2 52       	subi	r30, 0x22	; 34
 960:	ff 4d       	sbci	r31, 0xDF	; 223
 962:	80 81       	ld	r24, Z
 964:	91 81       	ldd	r25, Z+1	; 0x01
 966:	8b 83       	std	Y+3, r24	; 0x03
 968:	9c 83       	std	Y+4, r25	; 0x04
}
 96a:	df 91       	pop	r29
 96c:	cf 91       	pop	r28
 96e:	1f 91       	pop	r17
 970:	0f 91       	pop	r16
 972:	08 95       	ret

00000974 <_ZN2GI3Dev4UartC1EP10ioSettings>:
		NULL,
#endif
		};

/*#####################################################*/
GI::Dev::Uart::Uart(ioSettings *cfg)
 974:	ff 92       	push	r15
 976:	0f 93       	push	r16
 978:	1f 93       	push	r17
 97a:	cf 93       	push	r28
 97c:	df 93       	push	r29
 97e:	ec 01       	movw	r28, r24
 980:	8b 01       	movw	r16, r22
{
	memset(this, 0, sizeof(*this));
 982:	3b e0       	ldi	r19, 0x0B	; 11
 984:	f3 2e       	mov	r15, r19
 986:	fc 01       	movw	r30, r24
 988:	8f 2d       	mov	r24, r15
 98a:	11 92       	st	Z+, r1
 98c:	8a 95       	dec	r24
 98e:	e9 f7       	brne	.-6      	; 0x98a <_ZN2GI3Dev4UartC1EP10ioSettings+0x16>
	if(cfg->info.ioType != ioSettings::info_s::ioType_UART)
 990:	fb 01       	movw	r30, r22
 992:	80 81       	ld	r24, Z
 994:	82 30       	cpi	r24, 0x02	; 2
 996:	09 f0       	breq	.+2      	; 0x99a <_ZN2GI3Dev4UartC1EP10ioSettings+0x26>
 998:	ba c0       	rjmp	.+372    	; 0xb0e <_ZN2GI3Dev4UartC1EP10ioSettings+0x19a>
	return;

	if(strncmp(cfg->info.name, (char *)"uart-", sizeof("uart-") - 1))
 99a:	45 e0       	ldi	r20, 0x05	; 5
 99c:	50 e0       	ldi	r21, 0x00	; 0
 99e:	61 e2       	ldi	r22, 0x21	; 33
 9a0:	71 e2       	ldi	r23, 0x21	; 33
 9a2:	c8 01       	movw	r24, r16
 9a4:	01 96       	adiw	r24, 0x01	; 1
 9a6:	0f d3       	rcall	.+1566   	; 0xfc6 <strncmp>
 9a8:	89 2b       	or	r24, r25
 9aa:	19 f0       	breq	.+6      	; 0x9b2 <_ZN2GI3Dev4UartC1EP10ioSettings+0x3e>
	{
		err = SYS_ERR_INVALID_PATH;
 9ac:	85 ef       	ldi	r24, 0xF5	; 245
 9ae:	88 83       	st	Y, r24
		return;
 9b0:	ae c0       	rjmp	.+348    	; 0xb0e <_ZN2GI3Dev4UartC1EP10ioSettings+0x19a>
	}
	if(!strncmp(cfg->info.name, (char *)"uart-", sizeof("uart-") - 1))
	{
		unsigned char dev_nr = cfg->info.name[sizeof("uart-") - 1] - '0';
 9b2:	f8 01       	movw	r30, r16
 9b4:	86 81       	ldd	r24, Z+6	; 0x06
 9b6:	80 53       	subi	r24, 0x30	; 48
		if(dev_nr >= UART_INTERFACE_COUNT)
 9b8:	84 30       	cpi	r24, 0x04	; 4
 9ba:	c0 f7       	brcc	.-16     	; 0x9ac <_ZN2GI3Dev4UartC1EP10ioSettings+0x38>
		{
			err = SYS_ERR_INVALID_PATH;
			return;
		}
		memset(this, 0, sizeof(*this));
 9bc:	fe 01       	movw	r30, r28
 9be:	11 92       	st	Z+, r1
 9c0:	fa 94       	dec	r15
 9c2:	e9 f7       	brne	.-6      	; 0x9be <_ZN2GI3Dev4UartC1EP10ioSettings+0x4a>
		unitNr = dev_nr;
 9c4:	88 87       	std	Y+8, r24	; 0x08
	{
		err = SYS_ERR_INVALID_PARAM;
		return;
	}

	this->cfg = cfg;
 9c6:	09 83       	std	Y+1, r16	; 0x01
 9c8:	1a 83       	std	Y+2, r17	; 0x02
	CfgUart *int_cfg = (CfgUart *)cfg->cfg;
 9ca:	f8 01       	movw	r30, r16
 9cc:	05 85       	ldd	r16, Z+13	; 0x0d
 9ce:	16 85       	ldd	r17, Z+14	; 0x0e

#if defined(__AVR_ATxmega8E5__) || defined(__AVR_ATxmega16E5__) || defined(__AVR_ATxmega32E5__)
	switch(unitNr)
 9d0:	82 30       	cpi	r24, 0x02	; 2
 9d2:	31 f1       	breq	.+76     	; 0xa20 <_ZN2GI3Dev4UartC1EP10ioSettings+0xac>
 9d4:	83 30       	cpi	r24, 0x03	; 3
 9d6:	89 f1       	breq	.+98     	; 0xa3a <_ZN2GI3Dev4UartC1EP10ioSettings+0xc6>
 9d8:	81 30       	cpi	r24, 0x01	; 1
 9da:	69 f0       	breq	.+26     	; 0x9f6 <_ZN2GI3Dev4UartC1EP10ioSettings+0x82>
	{
	case 0:
		PORTC.REMAP &= ~PORT_USART0_bm;
 9dc:	80 91 4e 06 	lds	r24, 0x064E
 9e0:	8f 7e       	andi	r24, 0xEF	; 239
 9e2:	80 93 4e 06 	sts	0x064E, r24
		{
			PORTC.DIRSET = 1<<1;
			PORTC.OUTSET = 1<<1;
		}
#endif
		PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
 9e6:	88 e1       	ldi	r24, 0x18	; 24
 9e8:	80 93 52 06 	sts	0x0652, r24
		PORTC.DIRCLR = 1<<2;
 9ec:	84 e0       	ldi	r24, 0x04	; 4
 9ee:	80 93 42 06 	sts	0x0642, r24
		PORTC.DIRSET = 1<<3;
 9f2:	88 e0       	ldi	r24, 0x08	; 8
 9f4:	0c c0       	rjmp	.+24     	; 0xa0e <_ZN2GI3Dev4UartC1EP10ioSettings+0x9a>
		PORTC.OUTSET = 1<<3;
		udata = (void *)UART_BASE_PTRS[0];
		break;
	case 1:
		PORTC.REMAP |= PORT_USART0_bm;
 9f6:	80 91 4e 06 	lds	r24, 0x064E
 9fa:	80 61       	ori	r24, 0x10	; 16
 9fc:	80 93 4e 06 	sts	0x064E, r24
		{
			PORTC.DIRSET = 1<<5;
			PORTC.OUTSET = 1<<5;
		}
#endif
		PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;
 a00:	88 e1       	ldi	r24, 0x18	; 24
 a02:	80 93 56 06 	sts	0x0656, r24
		PORTC.DIRCLR = 1<<6;
 a06:	80 e4       	ldi	r24, 0x40	; 64
 a08:	80 93 42 06 	sts	0x0642, r24
		PORTC.DIRSET = 1<<7;
 a0c:	80 e8       	ldi	r24, 0x80	; 128
 a0e:	80 93 41 06 	sts	0x0641, r24
		PORTC.OUTSET = 1<<7;
 a12:	80 93 45 06 	sts	0x0645, r24
		udata = (void *)UART_BASE_PTRS[0];
 a16:	80 91 00 21 	lds	r24, 0x2100
 a1a:	90 91 01 21 	lds	r25, 0x2101
 a1e:	21 c0       	rjmp	.+66     	; 0xa62 <_ZN2GI3Dev4UartC1EP10ioSettings+0xee>
		break;
	case 2:
		PORTD.REMAP &= ~PORT_USART0_bm;
 a20:	80 91 6e 06 	lds	r24, 0x066E
 a24:	8f 7e       	andi	r24, 0xEF	; 239
 a26:	80 93 6e 06 	sts	0x066E, r24
		{
			PORTD.DIRSET = 1<<1;
			PORTD.OUTSET = 1<<1;
		}
#endif
		PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;
 a2a:	88 e1       	ldi	r24, 0x18	; 24
 a2c:	80 93 72 06 	sts	0x0672, r24
		PORTD.DIRCLR = 1<<2;
 a30:	84 e0       	ldi	r24, 0x04	; 4
 a32:	80 93 62 06 	sts	0x0662, r24
		PORTD.DIRSET = 1<<3;
 a36:	88 e0       	ldi	r24, 0x08	; 8
 a38:	0c c0       	rjmp	.+24     	; 0xa52 <_ZN2GI3Dev4UartC1EP10ioSettings+0xde>
		PORTD.OUTSET = 1<<3;
		udata = (void *)UART_BASE_PTRS[2];
		break;
	case 3:
		PORTD.REMAP |= PORT_USART0_bm;
 a3a:	80 91 6e 06 	lds	r24, 0x066E
 a3e:	80 61       	ori	r24, 0x10	; 16
 a40:	80 93 6e 06 	sts	0x066E, r24
		{
			PORTD.DIRSET = 1<<5;
			PORTD.OUTSET = 1<<5;
		}
#endif
		PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;
 a44:	88 e1       	ldi	r24, 0x18	; 24
 a46:	80 93 76 06 	sts	0x0676, r24
		PORTD.DIRCLR = 1<<6;
 a4a:	80 e4       	ldi	r24, 0x40	; 64
 a4c:	80 93 62 06 	sts	0x0662, r24
		PORTD.DIRSET = 1<<7;
 a50:	80 e8       	ldi	r24, 0x80	; 128
 a52:	80 93 61 06 	sts	0x0661, r24
		PORTD.OUTSET = 1<<7;
 a56:	80 93 65 06 	sts	0x0665, r24
		udata = (void *)UART_BASE_PTRS[2];
 a5a:	80 91 04 21 	lds	r24, 0x2104
 a5e:	90 91 05 21 	lds	r25, 0x2105
 a62:	8d 83       	std	Y+5, r24	; 0x05
 a64:	9e 83       	std	Y+6, r25	; 0x06
#endif
	default:
		return;
	}
#endif
	unsigned int ubrr = ((FCPU / 8) / int_cfg->speed) -1;
 a66:	60 91 10 21 	lds	r22, 0x2110
 a6a:	70 91 11 21 	lds	r23, 0x2111
 a6e:	80 91 12 21 	lds	r24, 0x2112
 a72:	90 91 13 21 	lds	r25, 0x2113
 a76:	23 e0       	ldi	r18, 0x03	; 3
 a78:	96 95       	lsr	r25
 a7a:	87 95       	ror	r24
 a7c:	77 95       	ror	r23
 a7e:	67 95       	ror	r22
 a80:	2a 95       	dec	r18
 a82:	d1 f7       	brne	.-12     	; 0xa78 <_ZN2GI3Dev4UartC1EP10ioSettings+0x104>
 a84:	f8 01       	movw	r30, r16
 a86:	20 89       	ldd	r18, Z+16	; 0x10
 a88:	31 89       	ldd	r19, Z+17	; 0x11
 a8a:	42 89       	ldd	r20, Z+18	; 0x12
 a8c:	53 89       	ldd	r21, Z+19	; 0x13
 a8e:	c7 d0       	rcall	.+398    	; 0xc1e <__udivmodsi4>
 a90:	21 50       	subi	r18, 0x01	; 1
 a92:	31 09       	sbc	r19, r1
	((USART_t*)udata)->BAUDCTRLA = (unsigned char)ubrr;
 a94:	ed 81       	ldd	r30, Y+5	; 0x05
 a96:	fe 81       	ldd	r31, Y+6	; 0x06
 a98:	26 83       	std	Z+6, r18	; 0x06
	((USART_t*)udata)->BAUDCTRLB = (unsigned char)((ubrr>>8) & 0x0F);
 a9a:	ed 81       	ldd	r30, Y+5	; 0x05
 a9c:	fe 81       	ldd	r31, Y+6	; 0x06
 a9e:	83 2f       	mov	r24, r19
 aa0:	8f 70       	andi	r24, 0x0F	; 15
 aa2:	87 83       	std	Z+7, r24	; 0x07
	unsigned char tmp = 0;
	if(int_cfg->wordLen == CfgUart::WORD_LEN_5)
 aa4:	f8 01       	movw	r30, r16
 aa6:	84 89       	ldd	r24, Z+20	; 0x14
 aa8:	88 23       	and	r24, r24
 aaa:	41 f0       	breq	.+16     	; 0xabc <_ZN2GI3Dev4UartC1EP10ioSettings+0x148>
		tmp = USART_CHSIZE_5BIT_gc;
	else if(int_cfg->wordLen == CfgUart::WORD_LEN_6)
 aac:	81 30       	cpi	r24, 0x01	; 1
 aae:	41 f0       	breq	.+16     	; 0xac0 <_ZN2GI3Dev4UartC1EP10ioSettings+0x14c>
		tmp = USART_CHSIZE_6BIT_gc;
	else if(int_cfg->wordLen == CfgUart::WORD_LEN_7)
 ab0:	82 30       	cpi	r24, 0x02	; 2
 ab2:	41 f0       	breq	.+16     	; 0xac4 <_ZN2GI3Dev4UartC1EP10ioSettings+0x150>
		tmp = USART_CHSIZE_7BIT_gc;
	else if(int_cfg->wordLen == CfgUart::WORD_LEN_8)
 ab4:	84 30       	cpi	r24, 0x04	; 4
 ab6:	41 f4       	brne	.+16     	; 0xac8 <_ZN2GI3Dev4UartC1EP10ioSettings+0x154>
		tmp = USART_CHSIZE_8BIT_gc;
	else if(int_cfg->wordLen == CfgUart::WORD_LEN_9)
		tmp = USART_CHSIZE_9BIT_gc;
 ab8:	87 e0       	ldi	r24, 0x07	; 7
 aba:	07 c0       	rjmp	.+14     	; 0xaca <_ZN2GI3Dev4UartC1EP10ioSettings+0x156>
	unsigned int ubrr = ((FCPU / 8) / int_cfg->speed) -1;
	((USART_t*)udata)->BAUDCTRLA = (unsigned char)ubrr;
	((USART_t*)udata)->BAUDCTRLB = (unsigned char)((ubrr>>8) & 0x0F);
	unsigned char tmp = 0;
	if(int_cfg->wordLen == CfgUart::WORD_LEN_5)
		tmp = USART_CHSIZE_5BIT_gc;
 abc:	80 e0       	ldi	r24, 0x00	; 0
 abe:	05 c0       	rjmp	.+10     	; 0xaca <_ZN2GI3Dev4UartC1EP10ioSettings+0x156>
	else if(int_cfg->wordLen == CfgUart::WORD_LEN_6)
		tmp = USART_CHSIZE_6BIT_gc;
 ac0:	81 e0       	ldi	r24, 0x01	; 1
 ac2:	03 c0       	rjmp	.+6      	; 0xaca <_ZN2GI3Dev4UartC1EP10ioSettings+0x156>
	else if(int_cfg->wordLen == CfgUart::WORD_LEN_7)
		tmp = USART_CHSIZE_7BIT_gc;
 ac4:	82 e0       	ldi	r24, 0x02	; 2
 ac6:	01 c0       	rjmp	.+2      	; 0xaca <_ZN2GI3Dev4UartC1EP10ioSettings+0x156>
	else if(int_cfg->wordLen == CfgUart::WORD_LEN_8)
		tmp = USART_CHSIZE_8BIT_gc;
 ac8:	83 e0       	ldi	r24, 0x03	; 3
	else if(int_cfg->wordLen == CfgUart::WORD_LEN_9)
		tmp = USART_CHSIZE_9BIT_gc;
	else
		tmp = USART_CHSIZE_8BIT_gc;
		
	if(int_cfg->parity == CfgUart::PAR_EVEN)
 aca:	f8 01       	movw	r30, r16
 acc:	96 89       	ldd	r25, Z+22	; 0x16
 ace:	92 30       	cpi	r25, 0x02	; 2
 ad0:	11 f4       	brne	.+4      	; 0xad6 <_ZN2GI3Dev4UartC1EP10ioSettings+0x162>
		tmp |= USART_PMODE_EVEN_gc;
 ad2:	80 62       	ori	r24, 0x20	; 32
 ad4:	03 c0       	rjmp	.+6      	; 0xadc <_ZN2GI3Dev4UartC1EP10ioSettings+0x168>
	else if(int_cfg->parity == CfgUart::PAR_ODD)
 ad6:	91 30       	cpi	r25, 0x01	; 1
 ad8:	09 f4       	brne	.+2      	; 0xadc <_ZN2GI3Dev4UartC1EP10ioSettings+0x168>
		tmp |= USART_PMODE_ODD_gc;
 ada:	80 63       	ori	r24, 0x30	; 48
	{
		tmp |= USART_CMODE_IRDA_gc;
	}
#endif

	if(int_cfg->stopBits == CfgUart::STOP_BITS_TWO)
 adc:	f8 01       	movw	r30, r16
 ade:	95 89       	ldd	r25, Z+21	; 0x15
 ae0:	91 30       	cpi	r25, 0x01	; 1
 ae2:	09 f4       	brne	.+2      	; 0xae6 <_ZN2GI3Dev4UartC1EP10ioSettings+0x172>
		tmp |= USART_SBMODE_bm;
 ae4:	88 60       	ori	r24, 0x08	; 8
	((USART_t*)udata)->CTRLC = tmp;
 ae6:	ed 81       	ldd	r30, Y+5	; 0x05
 ae8:	fe 81       	ldd	r31, Y+6	; 0x06
 aea:	84 83       	std	Z+4, r24	; 0x04
	tmp = USART_CLK2X_bm;
	if(int_cfg->rx)
 aec:	f8 01       	movw	r30, r16
 aee:	86 85       	ldd	r24, Z+14	; 0x0e
 af0:	97 85       	ldd	r25, Z+15	; 0x0f
 af2:	89 2b       	or	r24, r25
 af4:	11 f4       	brne	.+4      	; 0xafa <_ZN2GI3Dev4UartC1EP10ioSettings+0x186>
#endif

	if(int_cfg->stopBits == CfgUart::STOP_BITS_TWO)
		tmp |= USART_SBMODE_bm;
	((USART_t*)udata)->CTRLC = tmp;
	tmp = USART_CLK2X_bm;
 af6:	24 e0       	ldi	r18, 0x04	; 4
 af8:	01 c0       	rjmp	.+2      	; 0xafc <_ZN2GI3Dev4UartC1EP10ioSettings+0x188>
	if(int_cfg->rx)
		tmp |= USART_RXEN_bm;
 afa:	24 e1       	ldi	r18, 0x14	; 20
	if(int_cfg->tx)
 afc:	f8 01       	movw	r30, r16
 afe:	84 85       	ldd	r24, Z+12	; 0x0c
 b00:	95 85       	ldd	r25, Z+13	; 0x0d
 b02:	89 2b       	or	r24, r25
 b04:	09 f0       	breq	.+2      	; 0xb08 <_ZN2GI3Dev4UartC1EP10ioSettings+0x194>
		tmp |= USART_TXEN_bm;
 b06:	28 60       	ori	r18, 0x08	; 8
	((USART_t*)udata)->CTRLB = tmp;
 b08:	ed 81       	ldd	r30, Y+5	; 0x05
 b0a:	fe 81       	ldd	r31, Y+6	; 0x06
 b0c:	23 83       	std	Z+3, r18	; 0x03
}
 b0e:	cd b7       	in	r28, 0x3d	; 61
 b10:	de b7       	in	r29, 0x3e	; 62
 b12:	e5 e0       	ldi	r30, 0x05	; 5
 b14:	d2 c0       	rjmp	.+420    	; 0xcba <__epilogue_restores__+0x1a>

00000b16 <_ZL18SystemClock_Configmmm.isra.0.constprop.1>:
	}
	else if(CORE_CLOCK_DEFAULT)
	{
		if(CORE_CLOCK_DEFAULT == 32000000)
		{
			OSC.CTRL |= OSC_RC32MEN_bm;
 b16:	80 91 50 00 	lds	r24, 0x0050
 b1a:	82 60       	ori	r24, 0x02	; 2
 b1c:	80 93 50 00 	sts	0x0050, r24
			while(!(OSC.STATUS & OSC_RC32MRDY_bm));
 b20:	80 91 51 00 	lds	r24, 0x0051
 b24:	81 ff       	sbrs	r24, 1
 b26:	fc cf       	rjmp	.-8      	; 0xb20 <_ZL18SystemClock_Configmmm.isra.0.constprop.1+0xa>
			PROTECTED_WRITE(CLK.CTRL, CLK_SCLKSEL_RC32M_gc);
 b28:	91 e0       	ldi	r25, 0x01	; 1
 b2a:	88 ed       	ldi	r24, 0xD8	; 216
 b2c:	84 bf       	out	0x34, r24	; 52
 b2e:	90 93 40 00 	sts	0x0040, r25
			CCP = CCP_IOREG_gc;
 b32:	84 bf       	out	0x34, r24	; 52
			OSC.CTRL &= ~OSC_RC2MEN_bm;
 b34:	80 91 50 00 	lds	r24, 0x0050
 b38:	8e 7f       	andi	r24, 0xFE	; 254
 b3a:	80 93 50 00 	sts	0x0050, r24
			FCPU = 32000000;
 b3e:	80 e0       	ldi	r24, 0x00	; 0
 b40:	98 e4       	ldi	r25, 0x48	; 72
 b42:	a8 ee       	ldi	r26, 0xE8	; 232
 b44:	b1 e0       	ldi	r27, 0x01	; 1
 b46:	80 93 10 21 	sts	0x2110, r24
 b4a:	90 93 11 21 	sts	0x2111, r25
 b4e:	a0 93 12 21 	sts	0x2112, r26
 b52:	b0 93 13 21 	sts	0x2113, r27
 b56:	08 95       	ret

00000b58 <_ZN2GI3Sys5ClockC1Ev>:
	//SystemClock_Config(HSI_VALUE, 0, 0);
}

void GI::Sys::Clock::setClk(unsigned long fCpu)
{
	SystemClock_Config(2000000, EXTERNAL_CLOCK_VALUE, CORE_CLOCK_DEFAULT);
 b58:	de cf       	rjmp	.-68     	; 0xb16 <_ZL18SystemClock_Configmmm.isra.0.constprop.1>
 b5a:	08 95       	ret

00000b5c <_ZN2GI3Sys5ClockD1Ev>:
GI::Sys::Clock::Clock()
{
	setClk(FCPU);
}

GI::Sys::Clock::~Clock()
 b5c:	08 95       	ret

00000b5e <_ZN2GI3Sys7SystimeC1Ev>:
{
	TimerTimeoutValue = STimerCnt + (unsigned long long)milliSec;
	while(1) {
		if(TimerTimeoutValue < STimerCnt) break;
	}
}
 b5e:	78 94       	sei
 b60:	e0 ea       	ldi	r30, 0xA0	; 160
 b62:	f0 e0       	ldi	r31, 0x00	; 0
 b64:	82 81       	ldd	r24, Z+2	; 0x02
 b66:	84 60       	ori	r24, 0x04	; 4
 b68:	98 ed       	ldi	r25, 0xD8	; 216
 b6a:	94 bf       	out	0x34, r25	; 52
 b6c:	80 93 a2 00 	sts	0x00A2, r24
 b70:	e0 e0       	ldi	r30, 0x00	; 0
 b72:	f4 e0       	ldi	r31, 0x04	; 4
 b74:	89 e0       	ldi	r24, 0x09	; 9
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	82 87       	std	Z+10, r24	; 0x0a
 b7a:	93 87       	std	Z+11, r25	; 0x0b
 b7c:	84 87       	std	Z+12, r24	; 0x0c
 b7e:	95 87       	std	Z+13, r25	; 0x0d
 b80:	81 e0       	ldi	r24, 0x01	; 1
 b82:	80 83       	st	Z, r24
 b84:	93 e0       	ldi	r25, 0x03	; 3
 b86:	92 83       	std	Z+2, r25	; 0x02
 b88:	83 83       	std	Z+3, r24	; 0x03
 b8a:	85 e0       	ldi	r24, 0x05	; 5
 b8c:	e0 e4       	ldi	r30, 0x40	; 64
 b8e:	f0 e0       	ldi	r31, 0x00	; 0
 b90:	83 83       	std	Z+3, r24	; 0x03
 b92:	08 95       	ret

00000b94 <__vector_7>:
//#####################################################
#ifdef __cplusplus
 extern "C" {
#endif
ISR(RTC_OVF_vect)
{
 b94:	1f 92       	push	r1
 b96:	0f 92       	push	r0
 b98:	0f b6       	in	r0, 0x3f	; 63
 b9a:	0f 92       	push	r0
 b9c:	11 24       	eor	r1, r1
 b9e:	2f 93       	push	r18
 ba0:	3f 93       	push	r19
 ba2:	4f 93       	push	r20
 ba4:	5f 93       	push	r21
 ba6:	6f 93       	push	r22
 ba8:	7f 93       	push	r23
 baa:	8f 93       	push	r24
 bac:	9f 93       	push	r25
 bae:	af 93       	push	r26
	STimerCnt += 10;
 bb0:	20 91 35 21 	lds	r18, 0x2135
 bb4:	30 91 36 21 	lds	r19, 0x2136
 bb8:	40 91 37 21 	lds	r20, 0x2137
 bbc:	50 91 38 21 	lds	r21, 0x2138
 bc0:	60 91 39 21 	lds	r22, 0x2139
 bc4:	70 91 3a 21 	lds	r23, 0x213A
 bc8:	80 91 3b 21 	lds	r24, 0x213B
 bcc:	90 91 3c 21 	lds	r25, 0x213C
 bd0:	aa e0       	ldi	r26, 0x0A	; 10
 bd2:	87 d0       	rcall	.+270    	; 0xce2 <__adddi3_s8>
 bd4:	20 93 35 21 	sts	0x2135, r18
 bd8:	30 93 36 21 	sts	0x2136, r19
 bdc:	40 93 37 21 	sts	0x2137, r20
 be0:	50 93 38 21 	sts	0x2138, r21
 be4:	60 93 39 21 	sts	0x2139, r22
 be8:	70 93 3a 21 	sts	0x213A, r23
 bec:	80 93 3b 21 	sts	0x213B, r24
 bf0:	90 93 3c 21 	sts	0x213C, r25
}
 bf4:	af 91       	pop	r26
 bf6:	9f 91       	pop	r25
 bf8:	8f 91       	pop	r24
 bfa:	7f 91       	pop	r23
 bfc:	6f 91       	pop	r22
 bfe:	5f 91       	pop	r21
 c00:	4f 91       	pop	r20
 c02:	3f 91       	pop	r19
 c04:	2f 91       	pop	r18
 c06:	0f 90       	pop	r0
 c08:	0f be       	out	0x3f, r0	; 63
 c0a:	0f 90       	pop	r0
 c0c:	1f 90       	pop	r1
 c0e:	18 95       	reti

00000c10 <_GLOBAL__sub_I_systime>:
 */

#include <avr/io.h>
#include <avr/interrupt.h>
#include <sys/systime.h>
GI::Sys::Systime systime = GI::Sys::Systime();
 c10:	8d e3       	ldi	r24, 0x3D	; 61
 c12:	91 e2       	ldi	r25, 0x21	; 33
 c14:	a4 cf       	rjmp	.-184    	; 0xb5e <_ZN2GI3Sys7SystimeC1Ev>
 c16:	08 95       	ret

00000c18 <_GLOBAL__sub_D_systime>:
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
}

GI::Sys::Systime::~Systime()
{
	RTC.CTRL = RTC_PRESCALER_OFF_gc;
 c18:	10 92 00 04 	sts	0x0400, r1
 c1c:	08 95       	ret

00000c1e <__udivmodsi4>:
 c1e:	a1 e2       	ldi	r26, 0x21	; 33
 c20:	1a 2e       	mov	r1, r26
 c22:	aa 1b       	sub	r26, r26
 c24:	bb 1b       	sub	r27, r27
 c26:	fd 01       	movw	r30, r26
 c28:	0d c0       	rjmp	.+26     	; 0xc44 <__udivmodsi4_ep>

00000c2a <__udivmodsi4_loop>:
 c2a:	aa 1f       	adc	r26, r26
 c2c:	bb 1f       	adc	r27, r27
 c2e:	ee 1f       	adc	r30, r30
 c30:	ff 1f       	adc	r31, r31
 c32:	a2 17       	cp	r26, r18
 c34:	b3 07       	cpc	r27, r19
 c36:	e4 07       	cpc	r30, r20
 c38:	f5 07       	cpc	r31, r21
 c3a:	20 f0       	brcs	.+8      	; 0xc44 <__udivmodsi4_ep>
 c3c:	a2 1b       	sub	r26, r18
 c3e:	b3 0b       	sbc	r27, r19
 c40:	e4 0b       	sbc	r30, r20
 c42:	f5 0b       	sbc	r31, r21

00000c44 <__udivmodsi4_ep>:
 c44:	66 1f       	adc	r22, r22
 c46:	77 1f       	adc	r23, r23
 c48:	88 1f       	adc	r24, r24
 c4a:	99 1f       	adc	r25, r25
 c4c:	1a 94       	dec	r1
 c4e:	69 f7       	brne	.-38     	; 0xc2a <__udivmodsi4_loop>
 c50:	60 95       	com	r22
 c52:	70 95       	com	r23
 c54:	80 95       	com	r24
 c56:	90 95       	com	r25
 c58:	9b 01       	movw	r18, r22
 c5a:	ac 01       	movw	r20, r24
 c5c:	bd 01       	movw	r22, r26
 c5e:	cf 01       	movw	r24, r30
 c60:	08 95       	ret

00000c62 <__tablejump2__>:
 c62:	ee 0f       	add	r30, r30
 c64:	ff 1f       	adc	r31, r31

00000c66 <__tablejump__>:
 c66:	05 90       	lpm	r0, Z+
 c68:	f4 91       	lpm	r31, Z
 c6a:	e0 2d       	mov	r30, r0
 c6c:	09 94       	ijmp

00000c6e <__prologue_saves__>:
 c6e:	2f 92       	push	r2
 c70:	3f 92       	push	r3
 c72:	4f 92       	push	r4
 c74:	5f 92       	push	r5
 c76:	6f 92       	push	r6
 c78:	7f 92       	push	r7
 c7a:	8f 92       	push	r8
 c7c:	9f 92       	push	r9
 c7e:	af 92       	push	r10
 c80:	bf 92       	push	r11
 c82:	cf 92       	push	r12
 c84:	df 92       	push	r13
 c86:	ef 92       	push	r14
 c88:	ff 92       	push	r15
 c8a:	0f 93       	push	r16
 c8c:	1f 93       	push	r17
 c8e:	cf 93       	push	r28
 c90:	df 93       	push	r29
 c92:	cd b7       	in	r28, 0x3d	; 61
 c94:	de b7       	in	r29, 0x3e	; 62
 c96:	ca 1b       	sub	r28, r26
 c98:	db 0b       	sbc	r29, r27
 c9a:	cd bf       	out	0x3d, r28	; 61
 c9c:	de bf       	out	0x3e, r29	; 62
 c9e:	09 94       	ijmp

00000ca0 <__epilogue_restores__>:
 ca0:	2a 88       	ldd	r2, Y+18	; 0x12
 ca2:	39 88       	ldd	r3, Y+17	; 0x11
 ca4:	48 88       	ldd	r4, Y+16	; 0x10
 ca6:	5f 84       	ldd	r5, Y+15	; 0x0f
 ca8:	6e 84       	ldd	r6, Y+14	; 0x0e
 caa:	7d 84       	ldd	r7, Y+13	; 0x0d
 cac:	8c 84       	ldd	r8, Y+12	; 0x0c
 cae:	9b 84       	ldd	r9, Y+11	; 0x0b
 cb0:	aa 84       	ldd	r10, Y+10	; 0x0a
 cb2:	b9 84       	ldd	r11, Y+9	; 0x09
 cb4:	c8 84       	ldd	r12, Y+8	; 0x08
 cb6:	df 80       	ldd	r13, Y+7	; 0x07
 cb8:	ee 80       	ldd	r14, Y+6	; 0x06
 cba:	fd 80       	ldd	r15, Y+5	; 0x05
 cbc:	0c 81       	ldd	r16, Y+4	; 0x04
 cbe:	1b 81       	ldd	r17, Y+3	; 0x03
 cc0:	aa 81       	ldd	r26, Y+2	; 0x02
 cc2:	b9 81       	ldd	r27, Y+1	; 0x01
 cc4:	ce 0f       	add	r28, r30
 cc6:	d1 1d       	adc	r29, r1
 cc8:	cd bf       	out	0x3d, r28	; 61
 cca:	de bf       	out	0x3e, r29	; 62
 ccc:	ed 01       	movw	r28, r26
 cce:	08 95       	ret

00000cd0 <__adddi3>:
 cd0:	2a 0d       	add	r18, r10
 cd2:	3b 1d       	adc	r19, r11
 cd4:	4c 1d       	adc	r20, r12
 cd6:	5d 1d       	adc	r21, r13
 cd8:	6e 1d       	adc	r22, r14
 cda:	7f 1d       	adc	r23, r15
 cdc:	80 1f       	adc	r24, r16
 cde:	91 1f       	adc	r25, r17
 ce0:	08 95       	ret

00000ce2 <__adddi3_s8>:
 ce2:	00 24       	eor	r0, r0
 ce4:	a7 fd       	sbrc	r26, 7
 ce6:	00 94       	com	r0
 ce8:	2a 0f       	add	r18, r26
 cea:	30 1d       	adc	r19, r0
 cec:	40 1d       	adc	r20, r0
 cee:	50 1d       	adc	r21, r0
 cf0:	60 1d       	adc	r22, r0
 cf2:	70 1d       	adc	r23, r0
 cf4:	80 1d       	adc	r24, r0
 cf6:	90 1d       	adc	r25, r0
 cf8:	08 95       	ret

00000cfa <__subdi3>:
 cfa:	2a 19       	sub	r18, r10
 cfc:	3b 09       	sbc	r19, r11
 cfe:	4c 09       	sbc	r20, r12
 d00:	5d 09       	sbc	r21, r13
 d02:	6e 09       	sbc	r22, r14
 d04:	7f 09       	sbc	r23, r15
 d06:	80 0b       	sbc	r24, r16
 d08:	91 0b       	sbc	r25, r17
 d0a:	08 95       	ret

00000d0c <__cmpdi2_s8>:
 d0c:	00 24       	eor	r0, r0
 d0e:	a7 fd       	sbrc	r26, 7
 d10:	00 94       	com	r0
 d12:	2a 17       	cp	r18, r26
 d14:	30 05       	cpc	r19, r0
 d16:	40 05       	cpc	r20, r0
 d18:	50 05       	cpc	r21, r0
 d1a:	60 05       	cpc	r22, r0
 d1c:	70 05       	cpc	r23, r0
 d1e:	80 05       	cpc	r24, r0
 d20:	90 05       	cpc	r25, r0
 d22:	08 95       	ret

00000d24 <calloc>:
 d24:	0f 93       	push	r16
 d26:	1f 93       	push	r17
 d28:	cf 93       	push	r28
 d2a:	df 93       	push	r29
 d2c:	86 9f       	mul	r24, r22
 d2e:	80 01       	movw	r16, r0
 d30:	87 9f       	mul	r24, r23
 d32:	10 0d       	add	r17, r0
 d34:	96 9f       	mul	r25, r22
 d36:	10 0d       	add	r17, r0
 d38:	11 24       	eor	r1, r1
 d3a:	c8 01       	movw	r24, r16
 d3c:	0d d0       	rcall	.+26     	; 0xd58 <malloc>
 d3e:	ec 01       	movw	r28, r24
 d40:	00 97       	sbiw	r24, 0x00	; 0
 d42:	21 f0       	breq	.+8      	; 0xd4c <calloc+0x28>
 d44:	a8 01       	movw	r20, r16
 d46:	60 e0       	ldi	r22, 0x00	; 0
 d48:	70 e0       	ldi	r23, 0x00	; 0
 d4a:	2d d1       	rcall	.+602    	; 0xfa6 <memset>
 d4c:	ce 01       	movw	r24, r28
 d4e:	df 91       	pop	r29
 d50:	cf 91       	pop	r28
 d52:	1f 91       	pop	r17
 d54:	0f 91       	pop	r16
 d56:	08 95       	ret

00000d58 <malloc>:
 d58:	cf 93       	push	r28
 d5a:	df 93       	push	r29
 d5c:	82 30       	cpi	r24, 0x02	; 2
 d5e:	91 05       	cpc	r25, r1
 d60:	10 f4       	brcc	.+4      	; 0xd66 <malloc+0xe>
 d62:	82 e0       	ldi	r24, 0x02	; 2
 d64:	90 e0       	ldi	r25, 0x00	; 0
 d66:	e0 91 40 21 	lds	r30, 0x2140
 d6a:	f0 91 41 21 	lds	r31, 0x2141
 d6e:	20 e0       	ldi	r18, 0x00	; 0
 d70:	30 e0       	ldi	r19, 0x00	; 0
 d72:	a0 e0       	ldi	r26, 0x00	; 0
 d74:	b0 e0       	ldi	r27, 0x00	; 0
 d76:	30 97       	sbiw	r30, 0x00	; 0
 d78:	39 f1       	breq	.+78     	; 0xdc8 <malloc+0x70>
 d7a:	40 81       	ld	r20, Z
 d7c:	51 81       	ldd	r21, Z+1	; 0x01
 d7e:	48 17       	cp	r20, r24
 d80:	59 07       	cpc	r21, r25
 d82:	b8 f0       	brcs	.+46     	; 0xdb2 <malloc+0x5a>
 d84:	48 17       	cp	r20, r24
 d86:	59 07       	cpc	r21, r25
 d88:	71 f4       	brne	.+28     	; 0xda6 <malloc+0x4e>
 d8a:	82 81       	ldd	r24, Z+2	; 0x02
 d8c:	93 81       	ldd	r25, Z+3	; 0x03
 d8e:	10 97       	sbiw	r26, 0x00	; 0
 d90:	29 f0       	breq	.+10     	; 0xd9c <malloc+0x44>
 d92:	12 96       	adiw	r26, 0x02	; 2
 d94:	8d 93       	st	X+, r24
 d96:	9c 93       	st	X, r25
 d98:	13 97       	sbiw	r26, 0x03	; 3
 d9a:	2c c0       	rjmp	.+88     	; 0xdf4 <malloc+0x9c>
 d9c:	80 93 40 21 	sts	0x2140, r24
 da0:	90 93 41 21 	sts	0x2141, r25
 da4:	27 c0       	rjmp	.+78     	; 0xdf4 <malloc+0x9c>
 da6:	21 15       	cp	r18, r1
 da8:	31 05       	cpc	r19, r1
 daa:	31 f0       	breq	.+12     	; 0xdb8 <malloc+0x60>
 dac:	42 17       	cp	r20, r18
 dae:	53 07       	cpc	r21, r19
 db0:	18 f0       	brcs	.+6      	; 0xdb8 <malloc+0x60>
 db2:	a9 01       	movw	r20, r18
 db4:	db 01       	movw	r26, r22
 db6:	01 c0       	rjmp	.+2      	; 0xdba <malloc+0x62>
 db8:	ef 01       	movw	r28, r30
 dba:	9a 01       	movw	r18, r20
 dbc:	bd 01       	movw	r22, r26
 dbe:	df 01       	movw	r26, r30
 dc0:	02 80       	ldd	r0, Z+2	; 0x02
 dc2:	f3 81       	ldd	r31, Z+3	; 0x03
 dc4:	e0 2d       	mov	r30, r0
 dc6:	d7 cf       	rjmp	.-82     	; 0xd76 <malloc+0x1e>
 dc8:	21 15       	cp	r18, r1
 dca:	31 05       	cpc	r19, r1
 dcc:	f9 f0       	breq	.+62     	; 0xe0c <malloc+0xb4>
 dce:	28 1b       	sub	r18, r24
 dd0:	39 0b       	sbc	r19, r25
 dd2:	24 30       	cpi	r18, 0x04	; 4
 dd4:	31 05       	cpc	r19, r1
 dd6:	80 f4       	brcc	.+32     	; 0xdf8 <malloc+0xa0>
 dd8:	8a 81       	ldd	r24, Y+2	; 0x02
 dda:	9b 81       	ldd	r25, Y+3	; 0x03
 ddc:	61 15       	cp	r22, r1
 dde:	71 05       	cpc	r23, r1
 de0:	21 f0       	breq	.+8      	; 0xdea <malloc+0x92>
 de2:	fb 01       	movw	r30, r22
 de4:	82 83       	std	Z+2, r24	; 0x02
 de6:	93 83       	std	Z+3, r25	; 0x03
 de8:	04 c0       	rjmp	.+8      	; 0xdf2 <malloc+0x9a>
 dea:	80 93 40 21 	sts	0x2140, r24
 dee:	90 93 41 21 	sts	0x2141, r25
 df2:	fe 01       	movw	r30, r28
 df4:	32 96       	adiw	r30, 0x02	; 2
 df6:	44 c0       	rjmp	.+136    	; 0xe80 <malloc+0x128>
 df8:	fe 01       	movw	r30, r28
 dfa:	e2 0f       	add	r30, r18
 dfc:	f3 1f       	adc	r31, r19
 dfe:	81 93       	st	Z+, r24
 e00:	91 93       	st	Z+, r25
 e02:	22 50       	subi	r18, 0x02	; 2
 e04:	31 09       	sbc	r19, r1
 e06:	28 83       	st	Y, r18
 e08:	39 83       	std	Y+1, r19	; 0x01
 e0a:	3a c0       	rjmp	.+116    	; 0xe80 <malloc+0x128>
 e0c:	20 91 3e 21 	lds	r18, 0x213E
 e10:	30 91 3f 21 	lds	r19, 0x213F
 e14:	23 2b       	or	r18, r19
 e16:	41 f4       	brne	.+16     	; 0xe28 <malloc+0xd0>
 e18:	20 91 02 20 	lds	r18, 0x2002
 e1c:	30 91 03 20 	lds	r19, 0x2003
 e20:	20 93 3e 21 	sts	0x213E, r18
 e24:	30 93 3f 21 	sts	0x213F, r19
 e28:	20 91 00 20 	lds	r18, 0x2000
 e2c:	30 91 01 20 	lds	r19, 0x2001
 e30:	21 15       	cp	r18, r1
 e32:	31 05       	cpc	r19, r1
 e34:	41 f4       	brne	.+16     	; 0xe46 <malloc+0xee>
 e36:	2d b7       	in	r18, 0x3d	; 61
 e38:	3e b7       	in	r19, 0x3e	; 62
 e3a:	40 91 04 20 	lds	r20, 0x2004
 e3e:	50 91 05 20 	lds	r21, 0x2005
 e42:	24 1b       	sub	r18, r20
 e44:	35 0b       	sbc	r19, r21
 e46:	e0 91 3e 21 	lds	r30, 0x213E
 e4a:	f0 91 3f 21 	lds	r31, 0x213F
 e4e:	e2 17       	cp	r30, r18
 e50:	f3 07       	cpc	r31, r19
 e52:	a0 f4       	brcc	.+40     	; 0xe7c <malloc+0x124>
 e54:	2e 1b       	sub	r18, r30
 e56:	3f 0b       	sbc	r19, r31
 e58:	28 17       	cp	r18, r24
 e5a:	39 07       	cpc	r19, r25
 e5c:	78 f0       	brcs	.+30     	; 0xe7c <malloc+0x124>
 e5e:	ac 01       	movw	r20, r24
 e60:	4e 5f       	subi	r20, 0xFE	; 254
 e62:	5f 4f       	sbci	r21, 0xFF	; 255
 e64:	24 17       	cp	r18, r20
 e66:	35 07       	cpc	r19, r21
 e68:	48 f0       	brcs	.+18     	; 0xe7c <malloc+0x124>
 e6a:	4e 0f       	add	r20, r30
 e6c:	5f 1f       	adc	r21, r31
 e6e:	40 93 3e 21 	sts	0x213E, r20
 e72:	50 93 3f 21 	sts	0x213F, r21
 e76:	81 93       	st	Z+, r24
 e78:	91 93       	st	Z+, r25
 e7a:	02 c0       	rjmp	.+4      	; 0xe80 <malloc+0x128>
 e7c:	e0 e0       	ldi	r30, 0x00	; 0
 e7e:	f0 e0       	ldi	r31, 0x00	; 0
 e80:	cf 01       	movw	r24, r30
 e82:	df 91       	pop	r29
 e84:	cf 91       	pop	r28
 e86:	08 95       	ret

00000e88 <free>:
 e88:	cf 93       	push	r28
 e8a:	df 93       	push	r29
 e8c:	00 97       	sbiw	r24, 0x00	; 0
 e8e:	09 f4       	brne	.+2      	; 0xe92 <free+0xa>
 e90:	87 c0       	rjmp	.+270    	; 0xfa0 <free+0x118>
 e92:	fc 01       	movw	r30, r24
 e94:	32 97       	sbiw	r30, 0x02	; 2
 e96:	12 82       	std	Z+2, r1	; 0x02
 e98:	13 82       	std	Z+3, r1	; 0x03
 e9a:	c0 91 40 21 	lds	r28, 0x2140
 e9e:	d0 91 41 21 	lds	r29, 0x2141
 ea2:	20 97       	sbiw	r28, 0x00	; 0
 ea4:	81 f4       	brne	.+32     	; 0xec6 <free+0x3e>
 ea6:	20 81       	ld	r18, Z
 ea8:	31 81       	ldd	r19, Z+1	; 0x01
 eaa:	28 0f       	add	r18, r24
 eac:	39 1f       	adc	r19, r25
 eae:	80 91 3e 21 	lds	r24, 0x213E
 eb2:	90 91 3f 21 	lds	r25, 0x213F
 eb6:	82 17       	cp	r24, r18
 eb8:	93 07       	cpc	r25, r19
 eba:	79 f5       	brne	.+94     	; 0xf1a <free+0x92>
 ebc:	e0 93 3e 21 	sts	0x213E, r30
 ec0:	f0 93 3f 21 	sts	0x213F, r31
 ec4:	6d c0       	rjmp	.+218    	; 0xfa0 <free+0x118>
 ec6:	de 01       	movw	r26, r28
 ec8:	20 e0       	ldi	r18, 0x00	; 0
 eca:	30 e0       	ldi	r19, 0x00	; 0
 ecc:	ae 17       	cp	r26, r30
 ece:	bf 07       	cpc	r27, r31
 ed0:	50 f4       	brcc	.+20     	; 0xee6 <free+0x5e>
 ed2:	12 96       	adiw	r26, 0x02	; 2
 ed4:	4d 91       	ld	r20, X+
 ed6:	5c 91       	ld	r21, X
 ed8:	13 97       	sbiw	r26, 0x03	; 3
 eda:	9d 01       	movw	r18, r26
 edc:	41 15       	cp	r20, r1
 ede:	51 05       	cpc	r21, r1
 ee0:	09 f1       	breq	.+66     	; 0xf24 <free+0x9c>
 ee2:	da 01       	movw	r26, r20
 ee4:	f3 cf       	rjmp	.-26     	; 0xecc <free+0x44>
 ee6:	a2 83       	std	Z+2, r26	; 0x02
 ee8:	b3 83       	std	Z+3, r27	; 0x03
 eea:	40 81       	ld	r20, Z
 eec:	51 81       	ldd	r21, Z+1	; 0x01
 eee:	84 0f       	add	r24, r20
 ef0:	95 1f       	adc	r25, r21
 ef2:	8a 17       	cp	r24, r26
 ef4:	9b 07       	cpc	r25, r27
 ef6:	71 f4       	brne	.+28     	; 0xf14 <free+0x8c>
 ef8:	8d 91       	ld	r24, X+
 efa:	9c 91       	ld	r25, X
 efc:	11 97       	sbiw	r26, 0x01	; 1
 efe:	84 0f       	add	r24, r20
 f00:	95 1f       	adc	r25, r21
 f02:	02 96       	adiw	r24, 0x02	; 2
 f04:	80 83       	st	Z, r24
 f06:	91 83       	std	Z+1, r25	; 0x01
 f08:	12 96       	adiw	r26, 0x02	; 2
 f0a:	8d 91       	ld	r24, X+
 f0c:	9c 91       	ld	r25, X
 f0e:	13 97       	sbiw	r26, 0x03	; 3
 f10:	82 83       	std	Z+2, r24	; 0x02
 f12:	93 83       	std	Z+3, r25	; 0x03
 f14:	21 15       	cp	r18, r1
 f16:	31 05       	cpc	r19, r1
 f18:	29 f4       	brne	.+10     	; 0xf24 <free+0x9c>
 f1a:	e0 93 40 21 	sts	0x2140, r30
 f1e:	f0 93 41 21 	sts	0x2141, r31
 f22:	3e c0       	rjmp	.+124    	; 0xfa0 <free+0x118>
 f24:	d9 01       	movw	r26, r18
 f26:	12 96       	adiw	r26, 0x02	; 2
 f28:	ed 93       	st	X+, r30
 f2a:	fc 93       	st	X, r31
 f2c:	13 97       	sbiw	r26, 0x03	; 3
 f2e:	4d 91       	ld	r20, X+
 f30:	5d 91       	ld	r21, X+
 f32:	a4 0f       	add	r26, r20
 f34:	b5 1f       	adc	r27, r21
 f36:	ea 17       	cp	r30, r26
 f38:	fb 07       	cpc	r31, r27
 f3a:	79 f4       	brne	.+30     	; 0xf5a <free+0xd2>
 f3c:	80 81       	ld	r24, Z
 f3e:	91 81       	ldd	r25, Z+1	; 0x01
 f40:	84 0f       	add	r24, r20
 f42:	95 1f       	adc	r25, r21
 f44:	02 96       	adiw	r24, 0x02	; 2
 f46:	d9 01       	movw	r26, r18
 f48:	8d 93       	st	X+, r24
 f4a:	9c 93       	st	X, r25
 f4c:	11 97       	sbiw	r26, 0x01	; 1
 f4e:	82 81       	ldd	r24, Z+2	; 0x02
 f50:	93 81       	ldd	r25, Z+3	; 0x03
 f52:	12 96       	adiw	r26, 0x02	; 2
 f54:	8d 93       	st	X+, r24
 f56:	9c 93       	st	X, r25
 f58:	13 97       	sbiw	r26, 0x03	; 3
 f5a:	e0 e0       	ldi	r30, 0x00	; 0
 f5c:	f0 e0       	ldi	r31, 0x00	; 0
 f5e:	8a 81       	ldd	r24, Y+2	; 0x02
 f60:	9b 81       	ldd	r25, Y+3	; 0x03
 f62:	00 97       	sbiw	r24, 0x00	; 0
 f64:	19 f0       	breq	.+6      	; 0xf6c <free+0xe4>
 f66:	fe 01       	movw	r30, r28
 f68:	ec 01       	movw	r28, r24
 f6a:	f9 cf       	rjmp	.-14     	; 0xf5e <free+0xd6>
 f6c:	ce 01       	movw	r24, r28
 f6e:	02 96       	adiw	r24, 0x02	; 2
 f70:	28 81       	ld	r18, Y
 f72:	39 81       	ldd	r19, Y+1	; 0x01
 f74:	82 0f       	add	r24, r18
 f76:	93 1f       	adc	r25, r19
 f78:	20 91 3e 21 	lds	r18, 0x213E
 f7c:	30 91 3f 21 	lds	r19, 0x213F
 f80:	28 17       	cp	r18, r24
 f82:	39 07       	cpc	r19, r25
 f84:	69 f4       	brne	.+26     	; 0xfa0 <free+0x118>
 f86:	30 97       	sbiw	r30, 0x00	; 0
 f88:	29 f4       	brne	.+10     	; 0xf94 <free+0x10c>
 f8a:	10 92 40 21 	sts	0x2140, r1
 f8e:	10 92 41 21 	sts	0x2141, r1
 f92:	02 c0       	rjmp	.+4      	; 0xf98 <free+0x110>
 f94:	12 82       	std	Z+2, r1	; 0x02
 f96:	13 82       	std	Z+3, r1	; 0x03
 f98:	c0 93 3e 21 	sts	0x213E, r28
 f9c:	d0 93 3f 21 	sts	0x213F, r29
 fa0:	df 91       	pop	r29
 fa2:	cf 91       	pop	r28
 fa4:	08 95       	ret

00000fa6 <memset>:
 fa6:	dc 01       	movw	r26, r24
 fa8:	01 c0       	rjmp	.+2      	; 0xfac <memset+0x6>
 faa:	6d 93       	st	X+, r22
 fac:	41 50       	subi	r20, 0x01	; 1
 fae:	50 40       	sbci	r21, 0x00	; 0
 fb0:	e0 f7       	brcc	.-8      	; 0xfaa <memset+0x4>
 fb2:	08 95       	ret

00000fb4 <strcmp>:
 fb4:	fb 01       	movw	r30, r22
 fb6:	dc 01       	movw	r26, r24
 fb8:	8d 91       	ld	r24, X+
 fba:	01 90       	ld	r0, Z+
 fbc:	80 19       	sub	r24, r0
 fbe:	01 10       	cpse	r0, r1
 fc0:	d9 f3       	breq	.-10     	; 0xfb8 <strcmp+0x4>
 fc2:	99 0b       	sbc	r25, r25
 fc4:	08 95       	ret

00000fc6 <strncmp>:
 fc6:	fb 01       	movw	r30, r22
 fc8:	dc 01       	movw	r26, r24
 fca:	41 50       	subi	r20, 0x01	; 1
 fcc:	50 40       	sbci	r21, 0x00	; 0
 fce:	30 f0       	brcs	.+12     	; 0xfdc <strncmp+0x16>
 fd0:	8d 91       	ld	r24, X+
 fd2:	01 90       	ld	r0, Z+
 fd4:	80 19       	sub	r24, r0
 fd6:	19 f4       	brne	.+6      	; 0xfde <strncmp+0x18>
 fd8:	00 20       	and	r0, r0
 fda:	b9 f7       	brne	.-18     	; 0xfca <strncmp+0x4>
 fdc:	88 1b       	sub	r24, r24
 fde:	99 0b       	sbc	r25, r25
 fe0:	08 95       	ret

00000fe2 <__do_global_dtors>:
 fe2:	10 e0       	ldi	r17, 0x00	; 0
 fe4:	ca eb       	ldi	r28, 0xBA	; 186
 fe6:	d0 e0       	ldi	r29, 0x00	; 0
 fe8:	03 c0       	rjmp	.+6      	; 0xff0 <__do_global_dtors+0xe>
 fea:	fe 01       	movw	r30, r28
 fec:	3c de       	rcall	.-904    	; 0xc66 <__tablejump__>
 fee:	22 96       	adiw	r28, 0x02	; 2
 ff0:	c0 3c       	cpi	r28, 0xC0	; 192
 ff2:	d1 07       	cpc	r29, r17
 ff4:	d1 f7       	brne	.-12     	; 0xfea <__do_global_dtors+0x8>
 ff6:	f8 94       	cli

00000ff8 <__stop_program>:
 ff8:	ff cf       	rjmp	.-2      	; 0xff8 <__stop_program>
