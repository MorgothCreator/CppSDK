
ExampleXmega_E5_Xplained.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00802000  000010fe  00001192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  008020dc  008020dc  0000126e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000126e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000538  00000000  00000000  0000129e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000d5aa  00000000  00000000  000017d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000022cb  00000000  00000000  0000ed80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000022a4  00000000  00000000  0001104b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f4c  00000000  00000000  000132f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000023cf  00000000  00000000  0001423c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000548a  00000000  00000000  0001660b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000468  00000000  00000000  0001ba95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
	//SysTick_Config(FCPU / 1000);
}
//#####################################################
void sysDelay(unsigned long milliSec)
{
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__dtors_end>
       4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
	TimerTimeoutValue = STimerCnt + (unsigned long long)milliSec;
       c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      60:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
	while(1) {
		if(TimerTimeoutValue < STimerCnt) break;
      64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      68:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      6c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      70:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      74:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      78:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      7c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      80:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      84:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      88:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      8c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      90:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      94:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      98:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      9c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      a0:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      a4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      a8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>

000000ac <__ctors_start>:
	}
}
      ac:	c0 02       	muls	r28, r16
      ae:	51 04       	cpc	r5, r1

000000b0 <__ctors_end>:
      b0:	c9 02       	muls	r28, r25
      b2:	56 04       	cpc	r5, r6

000000b4 <__dtors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	cd bf       	out	0x3d, r28	; 61
      bc:	df e2       	ldi	r29, 0x2F	; 47
      be:	de bf       	out	0x3e, r29	; 62

000000c0 <__do_copy_data>:
      c0:	10 e2       	ldi	r17, 0x20	; 32
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b0 e2       	ldi	r27, 0x20	; 32
      c6:	ee ef       	ldi	r30, 0xFE	; 254
      c8:	f0 e1       	ldi	r31, 0x10	; 16
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ac 3d       	cpi	r26, 0xDC	; 220
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	20 e2       	ldi	r18, 0x20	; 32
      d8:	ac ed       	ldi	r26, 0xDC	; 220
      da:	b0 e2       	ldi	r27, 0x20	; 32
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	ab 3f       	cpi	r26, 0xFB	; 251
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>

000000e6 <__do_global_ctors>:
      e6:	10 e0       	ldi	r17, 0x00	; 0
      e8:	c0 eb       	ldi	r28, 0xB0	; 176
      ea:	d0 e0       	ldi	r29, 0x00	; 0
      ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_global_ctors+0x10>
      ee:	22 97       	sbiw	r28, 0x02	; 2
      f0:	fe 01       	movw	r30, r28
      f2:	0e 94 b2 06 	call	0xd64	; 0xd64 <__tablejump__>
      f6:	cc 3a       	cpi	r28, 0xAC	; 172
      f8:	d1 07       	cpc	r29, r17
      fa:	c9 f7       	brne	.-14     	; 0xee <__do_global_ctors+0x8>
      fc:	0e 94 84 00 	call	0x108	; 0x108 <main>
     100:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__do_global_dtors>

00000104 <__bad_interrupt>:
     104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <main>:
//#include <avr/io.h>
#include <main_app.h>

int main(void)
{
	main_app();
     108:	0e 94 89 00 	call	0x112	; 0x112 <_Z8main_appv>
}
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	08 95       	ret

00000112 <_Z8main_appv>:
GI::Screen::Gfx::Window *MainWindow = NULL;
GI::Screen::Gfx::TextBox *SensorResultTextboxGlobal;
#endif

void main_app(void)
{
     112:	a7 e2       	ldi	r26, 0x27	; 39
     114:	b0 e0       	ldi	r27, 0x00	; 0
     116:	ef e8       	ldi	r30, 0x8F	; 143
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__prologue_saves__+0x1a>
	GI::Sys::Timer timer_touch = GI::Sys::Timer(20);
     11e:	04 e1       	ldi	r16, 0x14	; 20
     120:	10 e0       	ldi	r17, 0x00	; 0
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e0       	ldi	r20, 0x00	; 0
     128:	50 e0       	ldi	r21, 0x00	; 0
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	70 e0       	ldi	r23, 0x00	; 0
     12e:	ce 01       	movw	r24, r28
     130:	41 96       	adiw	r24, 0x11	; 17
     132:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN2GI3Sys5TimerC1Ey>
	GI::Sys::Timer blink_timer = GI::Sys::Timer(100);
     136:	04 e6       	ldi	r16, 0x64	; 100
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	40 e0       	ldi	r20, 0x00	; 0
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	70 e0       	ldi	r23, 0x00	; 0
     144:	ce 01       	movw	r24, r28
     146:	01 96       	adiw	r24, 0x01	; 1
     148:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_ZN2GI3Sys5TimerC1Ey>
	/*GI::Sys::Clock::changeCoreClk(25000000);
	unsigned long baud = 1200;
	terminal.ctl(GI::IO::IO_CTL_SET_SPEED, &baud);*/

#if (SHOW_SENSORS_RESULT_ON_SCREEN == 0)
	GI::IO terminal = GI::IO((char *)CONSOLE_UART_OUT);
     14c:	60 ec       	ldi	r22, 0xC0	; 192
     14e:	70 e2       	ldi	r23, 0x20	; 32
     150:	ce 01       	movw	r24, r28
     152:	81 96       	adiw	r24, 0x21	; 33
     154:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN2GI2IOC1EPc>
void main_app(void)
{
	GI::Sys::Timer timer_touch = GI::Sys::Timer(20);
	GI::Sys::Timer blink_timer = GI::Sys::Timer(100);

	bool led_state = false;
     158:	f1 2c       	mov	r15, r1
	//terminal.write((unsigned char *)buffer, bytesread);

	while(1)
	{
		//GI::Sys::Clock::sleep();
		dev.idle();
     15a:	8c ed       	ldi	r24, 0xDC	; 220
     15c:	90 e2       	ldi	r25, 0x20	; 32
     15e:	0e 94 bf 02 	call	0x57e	; 0x57e <_ZN2GI5Board4Init4idleEv>
#endif
		/*
		 * Call every 20ms the idle function of touch screen interface
		 * 	and idle function of parent window.
		 */
		if(timer_touch.tick())
     162:	ce 01       	movw	r24, r28
     164:	41 96       	adiw	r24, 0x11	; 17
     166:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN2GI3Sys5Timer4tickEv>
					pass->clearText->set((char *)"Wrong password!");
				}
			}
#endif
		}
		if(blink_timer.tick())
     16a:	ce 01       	movw	r24, r28
     16c:	01 96       	adiw	r24, 0x01	; 1
     16e:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN2GI3Sys5Timer4tickEv>
     172:	88 23       	and	r24, r24
     174:	91 f3       	breq	.-28     	; 0x15a <_Z8main_appv+0x48>
		{
			bool state;
			GI::IO::read((char *)"led-0", &state);
     176:	be 01       	movw	r22, r28
     178:	69 5d       	subi	r22, 0xD9	; 217
     17a:	7f 4f       	sbci	r23, 0xFF	; 255
     17c:	87 ec       	ldi	r24, 0xC7	; 199
     17e:	90 e2       	ldi	r25, 0x20	; 32
     180:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN2GI2IO4readEPcPb>
			if(state)
     184:	8f a1       	ldd	r24, Y+39	; 0x27
     186:	88 23       	and	r24, r24
     188:	21 f1       	breq	.+72     	; 0x1d2 <_Z8main_appv+0xc0>
			{
				if(led_state)
     18a:	ff 20       	and	r15, r15
     18c:	71 f0       	breq	.+28     	; 0x1aa <_Z8main_appv+0x98>
				{
					blink_timer.interval(780);
     18e:	0c e0       	ldi	r16, 0x0C	; 12
     190:	13 e0       	ldi	r17, 0x03	; 3
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	70 e0       	ldi	r23, 0x00	; 0
     19e:	ce 01       	movw	r24, r28
     1a0:	01 96       	adiw	r24, 0x01	; 1
     1a2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN2GI3Sys5Timer8intervalEy>
					led_state = false;
     1a6:	f1 2c       	mov	r15, r1
     1a8:	0e c0       	rjmp	.+28     	; 0x1c6 <_Z8main_appv+0xb4>
				}
				else
				{
					blink_timer.interval(180);
     1aa:	04 eb       	ldi	r16, 0xB4	; 180
     1ac:	10 e0       	ldi	r17, 0x00	; 0
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	ce 01       	movw	r24, r28
     1bc:	01 96       	adiw	r24, 0x01	; 1
     1be:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN2GI3Sys5Timer8intervalEy>
					led_state = true;
     1c2:	ff 24       	eor	r15, r15
     1c4:	f3 94       	inc	r15
				}
				GI::IO::write((char *)"led-0", false);
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	87 ec       	ldi	r24, 0xC7	; 199
     1ca:	90 e2       	ldi	r25, 0x20	; 32
     1cc:	0e 94 3c 03 	call	0x678	; 0x678 <_ZN2GI2IO5writeEPcb>
     1d0:	c4 cf       	rjmp	.-120    	; 0x15a <_Z8main_appv+0x48>
			}
			else
			{
				blink_timer.interval(20);
     1d2:	04 e1       	ldi	r16, 0x14	; 20
     1d4:	10 e0       	ldi	r17, 0x00	; 0
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	40 e0       	ldi	r20, 0x00	; 0
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	ce 01       	movw	r24, r28
     1e4:	01 96       	adiw	r24, 0x01	; 1
     1e6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN2GI3Sys5Timer8intervalEy>
				GI::IO::write((char *)"led-0", true);
     1ea:	61 e0       	ldi	r22, 0x01	; 1
     1ec:	87 ec       	ldi	r24, 0xC7	; 199
     1ee:	90 e2       	ldi	r25, 0x20	; 32
     1f0:	0e 94 3c 03 	call	0x678	; 0x678 <_ZN2GI2IO5writeEPcb>
     1f4:	b2 cf       	rjmp	.-156    	; 0x15a <_Z8main_appv+0x48>

000001f6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE>:

#include <api/init.h>
#include "dev_request.h"

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Gpio **device)
{
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	e1 e0       	ldi	r30, 0x01	; 1
     1fc:	f1 e0       	ldi	r31, 0x01	; 1
     1fe:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__prologue_saves__+0x14>
     202:	7c 01       	movw	r14, r24
     204:	6b 01       	movw	r12, r22
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.GPIO == NULL || dev.GPIO[dev_nr] == NULL || dev.GPIO[dev_nr]->cfg.name[0] == 0 || dev.GPIO[dev_nr]->cfg.name[0] == '\0')
     206:	e0 91 e2 20 	lds	r30, 0x20E2
     20a:	f0 91 e3 20 	lds	r31, 0x20E3
     20e:	30 97       	sbiw	r30, 0x00	; 0
     210:	59 f0       	breq	.+22     	; 0x228 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x32>
     212:	c0 81       	ld	r28, Z
     214:	d1 81       	ldd	r29, Z+1	; 0x01
     216:	20 97       	sbiw	r28, 0x00	; 0
     218:	39 f0       	breq	.+14     	; 0x228 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x32>
     21a:	89 81       	ldd	r24, Y+1	; 0x01
     21c:	81 11       	cpse	r24, r1
     21e:	09 c0       	rjmp	.+18     	; 0x232 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x3c>
     220:	03 c0       	rjmp	.+6      	; 0x228 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x32>
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	81 11       	cpse	r24, r1
     226:	08 c0       	rjmp	.+16     	; 0x238 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x42>
		{
			*device = NULL;
     228:	f6 01       	movw	r30, r12
     22a:	10 82       	st	Z, r1
     22c:	11 82       	std	Z+1, r1	; 0x01
			return SYS_ERR_INVALID_PATH;
     22e:	85 ef       	ldi	r24, 0xF5	; 245
     230:	15 c0       	rjmp	.+42     	; 0x25c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x66>
     232:	8f 01       	movw	r16, r30
     234:	0e 5f       	subi	r16, 0xFE	; 254
     236:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if(!strcmp(dev.GPIO[dev_nr]->cfg.name, path))
     238:	b7 01       	movw	r22, r14
     23a:	ce 01       	movw	r24, r28
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <strcmp>
     242:	89 2b       	or	r24, r25
     244:	39 f0       	breq	.+14     	; 0x254 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x5e>
SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Gpio **device)
{
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.GPIO == NULL || dev.GPIO[dev_nr] == NULL || dev.GPIO[dev_nr]->cfg.name[0] == 0 || dev.GPIO[dev_nr]->cfg.name[0] == '\0')
     246:	f8 01       	movw	r30, r16
     248:	c1 91       	ld	r28, Z+
     24a:	d1 91       	ld	r29, Z+
     24c:	8f 01       	movw	r16, r30
     24e:	20 97       	sbiw	r28, 0x00	; 0
     250:	41 f7       	brne	.-48     	; 0x222 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x2c>
     252:	ea cf       	rjmp	.-44     	; 0x228 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x32>
		}
		if(!strcmp(dev.GPIO[dev_nr]->cfg.name, path))
			break;
		dev_nr++;
	}
	*device = dev.GPIO[dev_nr];
     254:	f6 01       	movw	r30, r12
     256:	c0 83       	st	Z, r28
     258:	d1 83       	std	Z+1, r29	; 0x01
	return SYS_ERR_OK;
     25a:	80 e0       	ldi	r24, 0x00	; 0
}
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
     260:	e8 e0       	ldi	r30, 0x08	; 8
     262:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__epilogue_restores__+0x14>

00000266 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::I2c **device)
{
     266:	a0 e0       	ldi	r26, 0x00	; 0
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	e9 e3       	ldi	r30, 0x39	; 57
     26c:	f1 e0       	ldi	r31, 0x01	; 1
     26e:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__prologue_saves__+0x14>
     272:	7c 01       	movw	r14, r24
     274:	6b 01       	movw	r12, r22
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.I2C == NULL || dev.I2C[dev_nr] == NULL || dev.I2C[dev_nr]->cfg.name == NULL || dev.I2C[dev_nr]->cfg.name[0] == '\0')
     276:	e0 91 e4 20 	lds	r30, 0x20E4
     27a:	f0 91 e5 20 	lds	r31, 0x20E5
     27e:	30 97       	sbiw	r30, 0x00	; 0
     280:	89 f0       	breq	.+34     	; 0x2a4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x3e>
     282:	c0 81       	ld	r28, Z
     284:	d1 81       	ldd	r29, Z+1	; 0x01
     286:	20 97       	sbiw	r28, 0x00	; 0
     288:	69 f0       	breq	.+26     	; 0x2a4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x3e>
     28a:	ce 01       	movw	r24, r28
     28c:	44 96       	adiw	r24, 0x14	; 20
     28e:	51 f0       	breq	.+20     	; 0x2a4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x3e>
     290:	2c 89       	ldd	r18, Y+20	; 0x14
     292:	21 11       	cpse	r18, r1
     294:	0c c0       	rjmp	.+24     	; 0x2ae <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x48>
     296:	06 c0       	rjmp	.+12     	; 0x2a4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x3e>
     298:	ce 01       	movw	r24, r28
     29a:	44 96       	adiw	r24, 0x14	; 20
     29c:	19 f0       	breq	.+6      	; 0x2a4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x3e>
     29e:	2c 89       	ldd	r18, Y+20	; 0x14
     2a0:	21 11       	cpse	r18, r1
     2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x4e>
		{
			*device = NULL;
     2a4:	f6 01       	movw	r30, r12
     2a6:	10 82       	st	Z, r1
     2a8:	11 82       	std	Z+1, r1	; 0x01
			return SYS_ERR_INVALID_PATH;
     2aa:	85 ef       	ldi	r24, 0xF5	; 245
     2ac:	13 c0       	rjmp	.+38     	; 0x2d4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x6e>
     2ae:	8f 01       	movw	r16, r30
     2b0:	0e 5f       	subi	r16, 0xFE	; 254
     2b2:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if(!strcmp(dev.I2C[dev_nr]->cfg.name, path))
     2b4:	b7 01       	movw	r22, r14
     2b6:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <strcmp>
     2ba:	89 2b       	or	r24, r25
     2bc:	39 f0       	breq	.+14     	; 0x2cc <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x66>
SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::I2c **device)
{
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.I2C == NULL || dev.I2C[dev_nr] == NULL || dev.I2C[dev_nr]->cfg.name == NULL || dev.I2C[dev_nr]->cfg.name[0] == '\0')
     2be:	f8 01       	movw	r30, r16
     2c0:	c1 91       	ld	r28, Z+
     2c2:	d1 91       	ld	r29, Z+
     2c4:	8f 01       	movw	r16, r30
     2c6:	20 97       	sbiw	r28, 0x00	; 0
     2c8:	39 f7       	brne	.-50     	; 0x298 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x32>
     2ca:	ec cf       	rjmp	.-40     	; 0x2a4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x3e>
		}
		if(!strcmp(dev.I2C[dev_nr]->cfg.name, path))
			break;
		dev_nr++;
	}
	*device = dev.I2C[dev_nr];
     2cc:	f6 01       	movw	r30, r12
     2ce:	c0 83       	st	Z, r28
     2d0:	d1 83       	std	Z+1, r29	; 0x01
	return SYS_ERR_OK;
     2d2:	80 e0       	ldi	r24, 0x00	; 0
}
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	e8 e0       	ldi	r30, 0x08	; 8
     2da:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__epilogue_restores__+0x14>

000002de <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Spi **device)
{
     2de:	a0 e0       	ldi	r26, 0x00	; 0
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	e5 e7       	ldi	r30, 0x75	; 117
     2e4:	f1 e0       	ldi	r31, 0x01	; 1
     2e6:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__prologue_saves__+0x14>
     2ea:	7c 01       	movw	r14, r24
     2ec:	6b 01       	movw	r12, r22
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.SPI == NULL || dev.SPI[dev_nr] == NULL || dev.SPI[dev_nr]->cfg.name == NULL || dev.SPI[dev_nr]->cfg.name[0] == '\0')
     2ee:	e0 91 e6 20 	lds	r30, 0x20E6
     2f2:	f0 91 e7 20 	lds	r31, 0x20E7
     2f6:	30 97       	sbiw	r30, 0x00	; 0
     2f8:	89 f0       	breq	.+34     	; 0x31c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x3e>
     2fa:	c0 81       	ld	r28, Z
     2fc:	d1 81       	ldd	r29, Z+1	; 0x01
     2fe:	20 97       	sbiw	r28, 0x00	; 0
     300:	69 f0       	breq	.+26     	; 0x31c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x3e>
     302:	ce 01       	movw	r24, r28
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	51 f0       	breq	.+20     	; 0x31c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x3e>
     308:	29 81       	ldd	r18, Y+1	; 0x01
     30a:	21 11       	cpse	r18, r1
     30c:	0c c0       	rjmp	.+24     	; 0x326 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x48>
     30e:	06 c0       	rjmp	.+12     	; 0x31c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x3e>
     310:	ce 01       	movw	r24, r28
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	19 f0       	breq	.+6      	; 0x31c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x3e>
     316:	29 81       	ldd	r18, Y+1	; 0x01
     318:	21 11       	cpse	r18, r1
     31a:	08 c0       	rjmp	.+16     	; 0x32c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x4e>
		{
			*device = NULL;
     31c:	f6 01       	movw	r30, r12
     31e:	10 82       	st	Z, r1
     320:	11 82       	std	Z+1, r1	; 0x01
			return SYS_ERR_INVALID_PATH;
     322:	85 ef       	ldi	r24, 0xF5	; 245
     324:	13 c0       	rjmp	.+38     	; 0x34c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x6e>
     326:	8f 01       	movw	r16, r30
     328:	0e 5f       	subi	r16, 0xFE	; 254
     32a:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if(!strcmp(dev.SPI[dev_nr]->cfg.name, path))
     32c:	b7 01       	movw	r22, r14
     32e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <strcmp>
     332:	89 2b       	or	r24, r25
     334:	39 f0       	breq	.+14     	; 0x344 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x66>
SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Spi **device)
{
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.SPI == NULL || dev.SPI[dev_nr] == NULL || dev.SPI[dev_nr]->cfg.name == NULL || dev.SPI[dev_nr]->cfg.name[0] == '\0')
     336:	f8 01       	movw	r30, r16
     338:	c1 91       	ld	r28, Z+
     33a:	d1 91       	ld	r29, Z+
     33c:	8f 01       	movw	r16, r30
     33e:	20 97       	sbiw	r28, 0x00	; 0
     340:	39 f7       	brne	.-50     	; 0x310 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x32>
     342:	ec cf       	rjmp	.-40     	; 0x31c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x3e>
		}
		if(!strcmp(dev.SPI[dev_nr]->cfg.name, path))
			break;
		dev_nr++;
	}
	*device = dev.SPI[dev_nr];
     344:	f6 01       	movw	r30, r12
     346:	c0 83       	st	Z, r28
     348:	d1 83       	std	Z+1, r29	; 0x01
	return SYS_ERR_OK;
     34a:	80 e0       	ldi	r24, 0x00	; 0
}
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	e8 e0       	ldi	r30, 0x08	; 8
     352:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__epilogue_restores__+0x14>

00000356 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Uart **device)
{
     356:	a0 e0       	ldi	r26, 0x00	; 0
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	e1 eb       	ldi	r30, 0xB1	; 177
     35c:	f1 e0       	ldi	r31, 0x01	; 1
     35e:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__prologue_saves__+0x14>
     362:	7c 01       	movw	r14, r24
     364:	6b 01       	movw	r12, r22
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.UART == NULL || dev.UART[dev_nr] == NULL || dev.UART[dev_nr]->cfg.name == NULL || dev.UART[dev_nr]->cfg.name[0] == '\0')
     366:	e0 91 e8 20 	lds	r30, 0x20E8
     36a:	f0 91 e9 20 	lds	r31, 0x20E9
     36e:	30 97       	sbiw	r30, 0x00	; 0
     370:	89 f0       	breq	.+34     	; 0x394 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x3e>
     372:	c0 81       	ld	r28, Z
     374:	d1 81       	ldd	r29, Z+1	; 0x01
     376:	20 97       	sbiw	r28, 0x00	; 0
     378:	69 f0       	breq	.+26     	; 0x394 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x3e>
     37a:	ce 01       	movw	r24, r28
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	51 f0       	breq	.+20     	; 0x394 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x3e>
     380:	29 81       	ldd	r18, Y+1	; 0x01
     382:	21 11       	cpse	r18, r1
     384:	0c c0       	rjmp	.+24     	; 0x39e <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x48>
     386:	06 c0       	rjmp	.+12     	; 0x394 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x3e>
     388:	ce 01       	movw	r24, r28
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	19 f0       	breq	.+6      	; 0x394 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x3e>
     38e:	29 81       	ldd	r18, Y+1	; 0x01
     390:	21 11       	cpse	r18, r1
     392:	08 c0       	rjmp	.+16     	; 0x3a4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x4e>
		{
			*device = NULL;
     394:	f6 01       	movw	r30, r12
     396:	10 82       	st	Z, r1
     398:	11 82       	std	Z+1, r1	; 0x01
			return SYS_ERR_INVALID_PATH;
     39a:	85 ef       	ldi	r24, 0xF5	; 245
     39c:	13 c0       	rjmp	.+38     	; 0x3c4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x6e>
     39e:	8f 01       	movw	r16, r30
     3a0:	0e 5f       	subi	r16, 0xFE	; 254
     3a2:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if(!strcmp(dev.UART[dev_nr]->cfg.name, path))
     3a4:	b7 01       	movw	r22, r14
     3a6:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <strcmp>
     3aa:	89 2b       	or	r24, r25
     3ac:	39 f0       	breq	.+14     	; 0x3bc <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x66>
SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Uart **device)
{
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.UART == NULL || dev.UART[dev_nr] == NULL || dev.UART[dev_nr]->cfg.name == NULL || dev.UART[dev_nr]->cfg.name[0] == '\0')
     3ae:	f8 01       	movw	r30, r16
     3b0:	c1 91       	ld	r28, Z+
     3b2:	d1 91       	ld	r29, Z+
     3b4:	8f 01       	movw	r16, r30
     3b6:	20 97       	sbiw	r28, 0x00	; 0
     3b8:	39 f7       	brne	.-50     	; 0x388 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x32>
     3ba:	ec cf       	rjmp	.-40     	; 0x394 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x3e>
		}
		if(!strcmp(dev.UART[dev_nr]->cfg.name, path))
			break;
		dev_nr++;
	}
	*device = dev.UART[dev_nr];
     3bc:	f6 01       	movw	r30, r12
     3be:	c0 83       	st	Z, r28
     3c0:	d1 83       	std	Z+1, r29	; 0x01
	return SYS_ERR_OK;
     3c2:	80 e0       	ldi	r24, 0x00	; 0
}
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	e8 e0       	ldi	r30, 0x08	; 8
     3ca:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__epilogue_restores__+0x14>

000003ce <_ZN2GI5Board4InitC1Ev>:
GI::Board::Init dev = GI::Board::Init();
#if (defined(SCREEN_ENABLE) && SCREEN_INTERFACE_COUNT > 0)
GI::Dev::IntScreen *screen;
#endif

GI::Board::Init::Init()
     3ce:	a0 e0       	ldi	r26, 0x00	; 0
     3d0:	b0 e0       	ldi	r27, 0x00	; 0
     3d2:	ed ee       	ldi	r30, 0xED	; 237
     3d4:	f1 e0       	ldi	r31, 0x01	; 1
     3d6:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__prologue_saves__+0x8>
     3da:	7c 01       	movw	r14, r24
{
    memset(this, 0, sizeof(*this));
     3dc:	8e e0       	ldi	r24, 0x0E	; 14
     3de:	f7 01       	movw	r30, r14
     3e0:	11 92       	st	Z+, r1
     3e2:	8a 95       	dec	r24
     3e4:	e9 f7       	brne	.-6      	; 0x3e0 <_ZN2GI5Board4InitC1Ev+0x12>
    /*
     * Scan to get the pin table items number.
     */
    for (table_len = 0; table_len < 512; table_len++)
    {
        if (gpioCfg[table_len].name[0] == 0)
     3e6:	80 91 36 20 	lds	r24, 0x2036
     3ea:	88 23       	and	r24, r24
     3ec:	09 f4       	brne	.+2      	; 0x3f0 <_ZN2GI5Board4InitC1Ev+0x22>
     3ee:	8c c0       	rjmp	.+280    	; 0x508 <_ZN2GI5Board4InitC1Ev+0x13a>
     3f0:	eb e4       	ldi	r30, 0x4B	; 75
     3f2:	f0 e2       	ldi	r31, 0x20	; 32
    /*******************************************************************/
#if (USE_GPIO == 1)
    /*
     * Scan to get the pin table items number.
     */
    for (table_len = 0; table_len < 512; table_len++)
     3f4:	c1 e0       	ldi	r28, 0x01	; 1
     3f6:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if (gpioCfg[table_len].name[0] == 0)
     3f8:	80 81       	ld	r24, Z
     3fa:	88 23       	and	r24, r24
     3fc:	39 f0       	breq	.+14     	; 0x40c <_ZN2GI5Board4InitC1Ev+0x3e>
    /*******************************************************************/
#if (USE_GPIO == 1)
    /*
     * Scan to get the pin table items number.
     */
    for (table_len = 0; table_len < 512; table_len++)
     3fe:	21 96       	adiw	r28, 0x01	; 1
     400:	75 96       	adiw	r30, 0x15	; 21
     402:	c1 15       	cp	r28, r1
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	d8 07       	cpc	r29, r24
     408:	b9 f7       	brne	.-18     	; 0x3f8 <_ZN2GI5Board4InitC1Ev+0x2a>
     40a:	9a c0       	rjmp	.+308    	; 0x540 <_ZN2GI5Board4InitC1Ev+0x172>
            break;
    }
    /*
     * Allocate memory to store pins handlers pointers.
     */
    GPIO = (GI::Dev::Gpio **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Gpio *));
     40c:	be 01       	movw	r22, r28
     40e:	6f 5f       	subi	r22, 0xFF	; 255
     410:	7f 4f       	sbci	r23, 0xFF	; 255
     412:	66 0f       	add	r22, r22
     414:	77 1f       	adc	r23, r23
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 11 07 	call	0xe22	; 0xe22 <calloc>
     41e:	f7 01       	movw	r30, r14
     420:	86 83       	std	Z+6, r24	; 0x06
     422:	97 83       	std	Z+7, r25	; 0x07
    /*
     * Allocate create and initialize pins.
     */
    for (dev_cnt = 0; dev_cnt < table_len; dev_cnt++)
     424:	20 97       	sbiw	r28, 0x00	; 0
     426:	09 f4       	brne	.+2      	; 0x42a <_ZN2GI5Board4InitC1Ev+0x5c>
     428:	78 c0       	rjmp	.+240    	; 0x51a <_ZN2GI5Board4InitC1Ev+0x14c>
     42a:	06 e3       	ldi	r16, 0x36	; 54
     42c:	10 e2       	ldi	r17, 0x20	; 32
     42e:	c1 2c       	mov	r12, r1
     430:	d1 2c       	mov	r13, r1
     432:	60 2e       	mov	r6, r16
     434:	71 2e       	mov	r7, r17
    {
        if (gpioCfg[dev_cnt].name[0] != 0)
     436:	f8 01       	movw	r30, r16
     438:	80 81       	ld	r24, Z
     43a:	88 23       	and	r24, r24
     43c:	c1 f0       	breq	.+48     	; 0x46e <_ZN2GI5Board4InitC1Ev+0xa0>
        {
            GPIO[dev_cnt] = new GI::Dev::Gpio(&gpioCfg[dev_cnt]);
     43e:	86 e2       	ldi	r24, 0x26	; 38
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_Znwj>
     446:	5c 01       	movw	r10, r24
     448:	f7 01       	movw	r30, r14
     44a:	86 80       	ldd	r8, Z+6	; 0x06
     44c:	97 80       	ldd	r9, Z+7	; 0x07
     44e:	c6 01       	movw	r24, r12
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	88 0e       	add	r8, r24
     456:	99 1e       	adc	r9, r25
     458:	a1 14       	cp	r10, r1
     45a:	b1 04       	cpc	r11, r1
     45c:	29 f0       	breq	.+10     	; 0x468 <_ZN2GI5Board4InitC1Ev+0x9a>
     45e:	60 2f       	mov	r22, r16
     460:	71 2f       	mov	r23, r17
     462:	c5 01       	movw	r24, r10
     464:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_ZN2GI3Dev4GpioC1EP7CfgGpio>
     468:	f4 01       	movw	r30, r8
     46a:	a0 82       	st	Z, r10
     46c:	b1 82       	std	Z+1, r11	; 0x01
     */
    GPIO = (GI::Dev::Gpio **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Gpio *));
    /*
     * Allocate create and initialize pins.
     */
    for (dev_cnt = 0; dev_cnt < table_len; dev_cnt++)
     46e:	ff ef       	ldi	r31, 0xFF	; 255
     470:	cf 1a       	sub	r12, r31
     472:	df 0a       	sbc	r13, r31
     474:	0b 5e       	subi	r16, 0xEB	; 235
     476:	1f 4f       	sbci	r17, 0xFF	; 255
     478:	cc 16       	cp	r12, r28
     47a:	dd 06       	cpc	r13, r29
     47c:	d1 f6       	brne	.-76     	; 0x432 <_ZN2GI5Board4InitC1Ev+0x64>
     47e:	4d c0       	rjmp	.+154    	; 0x51a <_ZN2GI5Board4InitC1Ev+0x14c>
    /*
     * Scan to get the uarts table items number.
     */
    for (table_len = 0; table_len < 512; table_len++)
    {
        if (uartCfg[table_len].name[0] == 0)
     480:	80 81       	ld	r24, Z
     482:	88 23       	and	r24, r24
     484:	39 f0       	breq	.+14     	; 0x494 <_ZN2GI5Board4InitC1Ev+0xc6>
    /*******************************************************************/
#if (USE_UART == 1)
    /*
     * Scan to get the uarts table items number.
     */
    for (table_len = 0; table_len < 512; table_len++)
     486:	21 96       	adiw	r28, 0x01	; 1
     488:	78 96       	adiw	r30, 0x18	; 24
     48a:	c1 15       	cp	r28, r1
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	d8 07       	cpc	r29, r24
     490:	b9 f7       	brne	.-18     	; 0x480 <_ZN2GI5Board4InitC1Ev+0xb2>
     492:	63 c0       	rjmp	.+198    	; 0x55a <_ZN2GI5Board4InitC1Ev+0x18c>
            break;
    }
    /*
     * Allocate memory to store uarts handlers pointers.
     */
    UART = (GI::Dev::Uart **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Uart *));
     494:	be 01       	movw	r22, r28
     496:	6f 5f       	subi	r22, 0xFF	; 255
     498:	7f 4f       	sbci	r23, 0xFF	; 255
     49a:	66 0f       	add	r22, r22
     49c:	77 1f       	adc	r23, r23
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 11 07 	call	0xe22	; 0xe22 <calloc>
     4a6:	f7 01       	movw	r30, r14
     4a8:	84 87       	std	Z+12, r24	; 0x0c
     4aa:	95 87       	std	Z+13, r25	; 0x0d
    /*
     * Allocate create and initialize uarts.
     */
    for (dev_cnt = 0; dev_cnt < table_len; dev_cnt++)
     4ac:	20 97       	sbiw	r28, 0x00	; 0
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <_ZN2GI5Board4InitC1Ev+0xe4>
     4b0:	61 c0       	rjmp	.+194    	; 0x574 <_ZN2GI5Board4InitC1Ev+0x1a6>
     4b2:	06 e0       	ldi	r16, 0x06	; 6
     4b4:	10 e2       	ldi	r17, 0x20	; 32
     4b6:	c1 2c       	mov	r12, r1
     4b8:	d1 2c       	mov	r13, r1
     4ba:	60 2e       	mov	r6, r16
     4bc:	71 2e       	mov	r7, r17
    {
        if (uartCfg[dev_cnt].name[0] != 0)
     4be:	f8 01       	movw	r30, r16
     4c0:	80 81       	ld	r24, Z
     4c2:	88 23       	and	r24, r24
     4c4:	c1 f0       	breq	.+48     	; 0x4f6 <_ZN2GI5Board4InitC1Ev+0x128>
        {
            UART[dev_cnt] = new GI::Dev::Uart(uartCfg[dev_cnt].name);
     4c6:	8f e1       	ldi	r24, 0x1F	; 31
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_Znwj>
     4ce:	5c 01       	movw	r10, r24
     4d0:	f7 01       	movw	r30, r14
     4d2:	84 84       	ldd	r8, Z+12	; 0x0c
     4d4:	95 84       	ldd	r9, Z+13	; 0x0d
     4d6:	c6 01       	movw	r24, r12
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	88 0e       	add	r8, r24
     4de:	99 1e       	adc	r9, r25
     4e0:	a1 14       	cp	r10, r1
     4e2:	b1 04       	cpc	r11, r1
     4e4:	29 f0       	breq	.+10     	; 0x4f0 <_ZN2GI5Board4InitC1Ev+0x122>
     4e6:	60 2f       	mov	r22, r16
     4e8:	71 2f       	mov	r23, r17
     4ea:	c5 01       	movw	r24, r10
     4ec:	0e 94 fd 05 	call	0xbfa	; 0xbfa <_ZN2GI3Dev4UartC1EPKc>
     4f0:	f4 01       	movw	r30, r8
     4f2:	a0 82       	st	Z, r10
     4f4:	b1 82       	std	Z+1, r11	; 0x01
     */
    UART = (GI::Dev::Uart **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Uart *));
    /*
     * Allocate create and initialize uarts.
     */
    for (dev_cnt = 0; dev_cnt < table_len; dev_cnt++)
     4f6:	ff ef       	ldi	r31, 0xFF	; 255
     4f8:	cf 1a       	sub	r12, r31
     4fa:	df 0a       	sbc	r13, r31
     4fc:	08 5e       	subi	r16, 0xE8	; 232
     4fe:	1f 4f       	sbci	r17, 0xFF	; 255
     500:	cc 16       	cp	r12, r28
     502:	dd 06       	cpc	r13, r29
     504:	d1 f6       	brne	.-76     	; 0x4ba <_ZN2GI5Board4InitC1Ev+0xec>
     506:	36 c0       	rjmp	.+108    	; 0x574 <_ZN2GI5Board4InitC1Ev+0x1a6>
            break;
    }
    /*
     * Allocate memory to store pins handlers pointers.
     */
    GPIO = (GI::Dev::Gpio **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Gpio *));
     508:	62 e0       	ldi	r22, 0x02	; 2
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 11 07 	call	0xe22	; 0xe22 <calloc>
     514:	f7 01       	movw	r30, r14
     516:	86 83       	std	Z+6, r24	; 0x06
     518:	97 83       	std	Z+7, r25	; 0x07
    /*
     * Scan to get the uarts table items number.
     */
    for (table_len = 0; table_len < 512; table_len++)
    {
        if (uartCfg[table_len].name[0] == 0)
     51a:	80 91 06 20 	lds	r24, 0x2006
     51e:	88 23       	and	r24, r24
     520:	29 f0       	breq	.+10     	; 0x52c <_ZN2GI5Board4InitC1Ev+0x15e>
     522:	ee e1       	ldi	r30, 0x1E	; 30
     524:	f0 e2       	ldi	r31, 0x20	; 32
    /*******************************************************************/
#if (USE_UART == 1)
    /*
     * Scan to get the uarts table items number.
     */
    for (table_len = 0; table_len < 512; table_len++)
     526:	c1 e0       	ldi	r28, 0x01	; 1
     528:	d0 e0       	ldi	r29, 0x00	; 0
     52a:	aa cf       	rjmp	.-172    	; 0x480 <_ZN2GI5Board4InitC1Ev+0xb2>
            break;
    }
    /*
     * Allocate memory to store uarts handlers pointers.
     */
    UART = (GI::Dev::Uart **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Uart *));
     52c:	62 e0       	ldi	r22, 0x02	; 2
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 11 07 	call	0xe22	; 0xe22 <calloc>
     538:	f7 01       	movw	r30, r14
     53a:	84 87       	std	Z+12, r24	; 0x0c
     53c:	95 87       	std	Z+13, r25	; 0x0d
     53e:	1a c0       	rjmp	.+52     	; 0x574 <_ZN2GI5Board4InitC1Ev+0x1a6>
            break;
    }
    /*
     * Allocate memory to store pins handlers pointers.
     */
    GPIO = (GI::Dev::Gpio **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Gpio *));
     540:	be 01       	movw	r22, r28
     542:	6f 5f       	subi	r22, 0xFF	; 255
     544:	7f 4f       	sbci	r23, 0xFF	; 255
     546:	66 0f       	add	r22, r22
     548:	77 1f       	adc	r23, r23
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 11 07 	call	0xe22	; 0xe22 <calloc>
     552:	f7 01       	movw	r30, r14
     554:	86 83       	std	Z+6, r24	; 0x06
     556:	97 83       	std	Z+7, r25	; 0x07
     558:	68 cf       	rjmp	.-304    	; 0x42a <_ZN2GI5Board4InitC1Ev+0x5c>
            break;
    }
    /*
     * Allocate memory to store uarts handlers pointers.
     */
    UART = (GI::Dev::Uart **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Uart *));
     55a:	be 01       	movw	r22, r28
     55c:	6f 5f       	subi	r22, 0xFF	; 255
     55e:	7f 4f       	sbci	r23, 0xFF	; 255
     560:	66 0f       	add	r22, r22
     562:	77 1f       	adc	r23, r23
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 11 07 	call	0xe22	; 0xe22 <calloc>
     56c:	f7 01       	movw	r30, r14
     56e:	84 87       	std	Z+12, r24	; 0x0c
     570:	95 87       	std	Z+13, r25	; 0x0d
     572:	9f cf       	rjmp	.-194    	; 0x4b2 <_ZN2GI5Board4InitC1Ev+0xe4>
    ftpd_init(FTP_SERVER_PORT);
#endif
#if (USE_SNTP == 1 && USE_LWIP == 1)
    SNTP_CLIENT = new GI::App::SntpClient();
#endif
}
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	ee e0       	ldi	r30, 0x0E	; 14
     57a:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__epilogue_restores__+0x8>

0000057e <_ZN2GI5Board4Init4idleEv>:
{

}

void GI::Board::Init::idle()
{
     57e:	08 95       	ret

00000580 <_GLOBAL__sub_I_coreClk>:
#endif
#if (USE_UART == 1)
extern CfgUart uartCfg[];
#endif

GI::Sys::Clock coreClk = GI::Sys::Clock();
     580:	8a ee       	ldi	r24, 0xEA	; 234
     582:	90 e2       	ldi	r25, 0x20	; 32
     584:	0e 94 ae 06 	call	0xd5c	; 0xd5c <_ZN2GI3Sys5ClockC1Ev>
GI::Board::Init dev = GI::Board::Init();
     588:	8c ed       	ldi	r24, 0xDC	; 220
     58a:	90 e2       	ldi	r25, 0x20	; 32
     58c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_ZN2GI5Board4InitC1Ev>
     590:	08 95       	ret

00000592 <_GLOBAL__sub_D_coreClk>:
#endif
#if (USE_UART == 1)
extern CfgUart uartCfg[];
#endif

GI::Sys::Clock coreClk = GI::Sys::Clock();
     592:	8a ee       	ldi	r24, 0xEA	; 234
     594:	90 e2       	ldi	r25, 0x20	; 32
     596:	0e 94 af 06 	call	0xd5e	; 0xd5e <_ZN2GI3Sys5ClockD1Ev>
     59a:	08 95       	ret

0000059c <_ZN2GI2IOC1EPc>:
#include <api/uart.h>

#include <api/dev_request.h>

/**********************************************************************************/
GI::IO::IO(char *path)
     59c:	a8 e0       	ldi	r26, 0x08	; 8
     59e:	b0 e0       	ldi	r27, 0x00	; 0
     5a0:	e4 ed       	ldi	r30, 0xD4	; 212
     5a2:	f2 e0       	ldi	r31, 0x02	; 2
     5a4:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__prologue_saves__+0x18>
     5a8:	8c 01       	movw	r16, r24
     5aa:	7b 01       	movw	r14, r22
{
	memset(this, 0, sizeof(*this));
     5ac:	86 e0       	ldi	r24, 0x06	; 6
     5ae:	f8 01       	movw	r30, r16
     5b0:	11 92       	st	Z+, r1
     5b2:	8a 95       	dec	r24
     5b4:	e9 f7       	brne	.-6      	; 0x5b0 <_ZN2GI2IOC1EPc+0x14>
	GI::Dev::Gpio *gpioDev;
	GI::Dev::I2c *i2cdev;
	GI::Dev::Spi *spiDev;
	GI::Dev::Uart *uartDev;
	if(GI::Dev::DevRequest::request(path, &gpioDev) == SYS_ERR_OK)
     5b6:	be 01       	movw	r22, r28
     5b8:	69 5f       	subi	r22, 0xF9	; 249
     5ba:	7f 4f       	sbci	r23, 0xFF	; 255
     5bc:	c7 01       	movw	r24, r14
     5be:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE>
     5c2:	81 11       	cpse	r24, r1
     5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <_ZN2GI2IOC1EPc+0x3a>
	{
		devHandler = (void *)gpioDev;
     5c6:	8f 81       	ldd	r24, Y+7	; 0x07
     5c8:	98 85       	ldd	r25, Y+8	; 0x08
     5ca:	f8 01       	movw	r30, r16
     5cc:	82 83       	std	Z+2, r24	; 0x02
     5ce:	93 83       	std	Z+3, r25	; 0x03
		ioDevType = IO_DEV_GPIO;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	81 83       	std	Z+1, r24	; 0x01
     5d4:	34 c0       	rjmp	.+104    	; 0x63e <_ZN2GI2IOC1EPc+0xa2>
	}
	else if(GI::Dev::DevRequest::request(path, &i2cdev) == SYS_ERR_OK)
     5d6:	be 01       	movw	r22, r28
     5d8:	6b 5f       	subi	r22, 0xFB	; 251
     5da:	7f 4f       	sbci	r23, 0xFF	; 255
     5dc:	c7 01       	movw	r24, r14
     5de:	0e 94 33 01 	call	0x266	; 0x266 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE>
     5e2:	81 11       	cpse	r24, r1
     5e4:	08 c0       	rjmp	.+16     	; 0x5f6 <_ZN2GI2IOC1EPc+0x5a>
	{
		devHandler = (void *)i2cdev;
     5e6:	8d 81       	ldd	r24, Y+5	; 0x05
     5e8:	9e 81       	ldd	r25, Y+6	; 0x06
     5ea:	f8 01       	movw	r30, r16
     5ec:	82 83       	std	Z+2, r24	; 0x02
     5ee:	93 83       	std	Z+3, r25	; 0x03
		ioDevType = IO_DEV_I2C;
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	81 83       	std	Z+1, r24	; 0x01
     5f4:	24 c0       	rjmp	.+72     	; 0x63e <_ZN2GI2IOC1EPc+0xa2>
	}
	else if(GI::Dev::DevRequest::request(path, &spiDev) == SYS_ERR_OK)
     5f6:	be 01       	movw	r22, r28
     5f8:	6d 5f       	subi	r22, 0xFD	; 253
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	c7 01       	movw	r24, r14
     5fe:	0e 94 6f 01 	call	0x2de	; 0x2de <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE>
     602:	81 11       	cpse	r24, r1
     604:	08 c0       	rjmp	.+16     	; 0x616 <_ZN2GI2IOC1EPc+0x7a>
	{
		devHandler = (void *)spiDev;
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	9c 81       	ldd	r25, Y+4	; 0x04
     60a:	f8 01       	movw	r30, r16
     60c:	82 83       	std	Z+2, r24	; 0x02
     60e:	93 83       	std	Z+3, r25	; 0x03
		ioDevType = IO_DEV_SPI;
     610:	84 e0       	ldi	r24, 0x04	; 4
     612:	81 83       	std	Z+1, r24	; 0x01
     614:	14 c0       	rjmp	.+40     	; 0x63e <_ZN2GI2IOC1EPc+0xa2>
	}
	else if(GI::Dev::DevRequest::request(path, &uartDev) == SYS_ERR_OK)
     616:	be 01       	movw	r22, r28
     618:	6f 5f       	subi	r22, 0xFF	; 255
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	c7 01       	movw	r24, r14
     61e:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE>
     622:	81 11       	cpse	r24, r1
     624:	08 c0       	rjmp	.+16     	; 0x636 <_ZN2GI2IOC1EPc+0x9a>
	{
		devHandler = (void *)uartDev;
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	9a 81       	ldd	r25, Y+2	; 0x02
     62a:	f8 01       	movw	r30, r16
     62c:	82 83       	std	Z+2, r24	; 0x02
     62e:	93 83       	std	Z+3, r25	; 0x03
		ioDevType = IO_DEV_UART;
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	81 83       	std	Z+1, r24	; 0x01
     634:	04 c0       	rjmp	.+8      	; 0x63e <_ZN2GI2IOC1EPc+0xa2>
	}
	else
	{
		ioDevType = IO_DEV_NULL;
     636:	f8 01       	movw	r30, r16
     638:	11 82       	std	Z+1, r1	; 0x01
		devHandler = NULL;
     63a:	12 82       	std	Z+2, r1	; 0x02
     63c:	13 82       	std	Z+3, r1	; 0x03
	}
}
     63e:	28 96       	adiw	r28, 0x08	; 8
     640:	e6 e0       	ldi	r30, 0x06	; 6
     642:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__epilogue_restores__+0x18>

00000646 <_ZN2GI2IOD1Ev>:

GI::IO::~IO()
{
	ioDevType = IO_DEV_NULL;
     646:	fc 01       	movw	r30, r24
     648:	11 82       	std	Z+1, r1	; 0x01
	devHandler = NULL;
     64a:	12 82       	std	Z+2, r1	; 0x02
     64c:	13 82       	std	Z+3, r1	; 0x03
     64e:	08 95       	ret

00000650 <_ZN2GI2IO5writeEb>:
    }
    return SYS_ERR_NOT_IMPLEMENTED;
}

SysErr GI::IO::write(bool state)
{
     650:	fc 01       	movw	r30, r24
	if(!devHandler || !ioDevType)
     652:	82 81       	ldd	r24, Z+2	; 0x02
     654:	93 81       	ldd	r25, Z+3	; 0x03
     656:	00 97       	sbiw	r24, 0x00	; 0
     658:	49 f0       	breq	.+18     	; 0x66c <_ZN2GI2IO5writeEb+0x1c>
     65a:	21 81       	ldd	r18, Z+1	; 0x01
     65c:	22 23       	and	r18, r18
     65e:	41 f0       	breq	.+16     	; 0x670 <_ZN2GI2IO5writeEb+0x20>
		return SYS_ERR_NO_REGISTERED_DEVICE;
	switch((int)ioDevType)
     660:	21 30       	cpi	r18, 0x01	; 1
     662:	41 f4       	brne	.+16     	; 0x674 <_ZN2GI2IO5writeEb+0x24>
	{
	case IO_DEV_GPIO:
		return ((GI::Dev::Gpio *)devHandler)->setOut(state);
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN2GI3Dev4Gpio6setOutEj>
     66a:	08 95       	ret
}

SysErr GI::IO::write(bool state)
{
	if(!devHandler || !ioDevType)
		return SYS_ERR_NO_REGISTERED_DEVICE;
     66c:	8f ee       	ldi	r24, 0xEF	; 239
     66e:	08 95       	ret
     670:	8f ee       	ldi	r24, 0xEF	; 239
     672:	08 95       	ret
	switch((int)ioDevType)
	{
	case IO_DEV_GPIO:
		return ((GI::Dev::Gpio *)devHandler)->setOut(state);
	}
	return SYS_ERR_NOT_IMPLEMENTED;
     674:	88 ef       	ldi	r24, 0xF8	; 248
}
     676:	08 95       	ret

00000678 <_ZN2GI2IO5writeEPcb>:
	GI::IO tmp_io = GI::IO((char *)path);
	return tmp_io.write(string);
}

SysErr GI::IO::write(char *path, bool state)/* Bit device */
{
     678:	a6 e0       	ldi	r26, 0x06	; 6
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	e2 e4       	ldi	r30, 0x42	; 66
     67e:	f3 e0       	ldi	r31, 0x03	; 3
     680:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__prologue_saves__+0x1e>
     684:	16 2f       	mov	r17, r22
	GI::IO tmp_io = GI::IO((char *)path);
     686:	bc 01       	movw	r22, r24
     688:	ce 01       	movw	r24, r28
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN2GI2IOC1EPc>
	return tmp_io.write(state);
     690:	61 2f       	mov	r22, r17
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	0e 94 28 03 	call	0x650	; 0x650 <_ZN2GI2IO5writeEb>
     69a:	18 2f       	mov	r17, r24
     69c:	ce 01       	movw	r24, r28
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	0e 94 23 03 	call	0x646	; 0x646 <_ZN2GI2IOD1Ev>
}
     6a4:	81 2f       	mov	r24, r17
     6a6:	26 96       	adiw	r28, 0x06	; 6
     6a8:	e3 e0       	ldi	r30, 0x03	; 3
     6aa:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__epilogue_restores__+0x1e>

000006ae <_ZN2GI2IO4readEPb>:
	}
	return SYS_ERR_NOT_IMPLEMENTED;
}

SysErr GI::IO::read(bool *state)
{
     6ae:	a4 e0       	ldi	r26, 0x04	; 4
     6b0:	b0 e0       	ldi	r27, 0x00	; 0
     6b2:	ed e5       	ldi	r30, 0x5D	; 93
     6b4:	f3 e0       	ldi	r31, 0x03	; 3
     6b6:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__prologue_saves__+0x1c>
     6ba:	fc 01       	movw	r30, r24
     6bc:	8b 01       	movw	r16, r22
	if(!devHandler || !ioDevType)
     6be:	82 81       	ldd	r24, Z+2	; 0x02
     6c0:	93 81       	ldd	r25, Z+3	; 0x03
     6c2:	00 97       	sbiw	r24, 0x00	; 0
     6c4:	c9 f0       	breq	.+50     	; 0x6f8 <_ZN2GI2IO4readEPb+0x4a>
     6c6:	21 81       	ldd	r18, Z+1	; 0x01
     6c8:	22 23       	and	r18, r18
     6ca:	c1 f0       	breq	.+48     	; 0x6fc <_ZN2GI2IO4readEPb+0x4e>
		return SYS_ERR_NO_REGISTERED_DEVICE;
	switch((int)ioDevType)
     6cc:	21 30       	cpi	r18, 0x01	; 1
     6ce:	c1 f4       	brne	.+48     	; 0x700 <_ZN2GI2IO4readEPb+0x52>
	{
	case IO_DEV_GPIO:
		u32 data;
		SysErr res = ((GI::Dev::Gpio *)devHandler)->getIn(&data);
     6d0:	be 01       	movw	r22, r28
     6d2:	6f 5f       	subi	r22, 0xFF	; 255
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255
     6d6:	0e 94 44 05 	call	0xa88	; 0xa88 <_ZN2GI3Dev4Gpio5getInEPm>
		if(data)
     6da:	49 81       	ldd	r20, Y+1	; 0x01
     6dc:	5a 81       	ldd	r21, Y+2	; 0x02
     6de:	6b 81       	ldd	r22, Y+3	; 0x03
     6e0:	7c 81       	ldd	r23, Y+4	; 0x04
     6e2:	45 2b       	or	r20, r21
     6e4:	46 2b       	or	r20, r22
     6e6:	47 2b       	or	r20, r23
     6e8:	21 f0       	breq	.+8      	; 0x6f2 <_ZN2GI2IO4readEPb+0x44>
			*state = true;
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	f8 01       	movw	r30, r16
     6ee:	90 83       	st	Z, r25
     6f0:	08 c0       	rjmp	.+16     	; 0x702 <_ZN2GI2IO4readEPb+0x54>
		else
			*state = false;
     6f2:	f8 01       	movw	r30, r16
     6f4:	10 82       	st	Z, r1
     6f6:	05 c0       	rjmp	.+10     	; 0x702 <_ZN2GI2IO4readEPb+0x54>
}

SysErr GI::IO::read(bool *state)
{
	if(!devHandler || !ioDevType)
		return SYS_ERR_NO_REGISTERED_DEVICE;
     6f8:	8f ee       	ldi	r24, 0xEF	; 239
     6fa:	03 c0       	rjmp	.+6      	; 0x702 <_ZN2GI2IO4readEPb+0x54>
     6fc:	8f ee       	ldi	r24, 0xEF	; 239
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <_ZN2GI2IO4readEPb+0x54>
			*state = true;
		else
			*state = false;
		return res;
	}
	return SYS_ERR_NOT_IMPLEMENTED;
     700:	88 ef       	ldi	r24, 0xF8	; 248
}
     702:	24 96       	adiw	r28, 0x04	; 4
     704:	e4 e0       	ldi	r30, 0x04	; 4
     706:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__epilogue_restores__+0x1c>

0000070a <_ZN2GI2IO4readEPcPb>:
	GI::IO tmp_io = GI::IO((char *)path);
	return tmp_io.read(buff, len);
}

SysErr GI::IO::read(char *path, bool *state)/* Bit device */
{
     70a:	a6 e0       	ldi	r26, 0x06	; 6
     70c:	b0 e0       	ldi	r27, 0x00	; 0
     70e:	eb e8       	ldi	r30, 0x8B	; 139
     710:	f3 e0       	ldi	r31, 0x03	; 3
     712:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__prologue_saves__+0x1c>
     716:	8b 01       	movw	r16, r22
	GI::IO tmp_io = GI::IO((char *)path);
     718:	bc 01       	movw	r22, r24
     71a:	ce 01       	movw	r24, r28
     71c:	01 96       	adiw	r24, 0x01	; 1
     71e:	0e 94 ce 02 	call	0x59c	; 0x59c <_ZN2GI2IOC1EPc>
	return tmp_io.read(state);
     722:	b8 01       	movw	r22, r16
     724:	ce 01       	movw	r24, r28
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	0e 94 57 03 	call	0x6ae	; 0x6ae <_ZN2GI2IO4readEPb>
     72c:	18 2f       	mov	r17, r24
     72e:	ce 01       	movw	r24, r28
     730:	01 96       	adiw	r24, 0x01	; 1
     732:	0e 94 23 03 	call	0x646	; 0x646 <_ZN2GI2IOD1Ev>
}
     736:	81 2f       	mov	r24, r17
     738:	26 96       	adiw	r28, 0x06	; 6
     73a:	e4 e0       	ldi	r30, 0x04	; 4
     73c:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__epilogue_restores__+0x1c>

00000740 <_ZN2GI3Sys5Timer6enableEb>:
#endif
	enable(true);
}
//#####################################################
void GI::Sys::Timer::enable(bool action)
{
     740:	af 92       	push	r10
     742:	bf 92       	push	r11
     744:	cf 92       	push	r12
     746:	df 92       	push	r13
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	fc 01       	movw	r30, r24
	if (action)
     752:	66 23       	and	r22, r22
     754:	21 f1       	breq	.+72     	; 0x79e <_ZN2GI3Sys5Timer6enableEb+0x5e>
	{
		sTimmerTickValue = (sTimmerInterval + STimerCnt)&(u64)__INT64_MAX__;
     756:	20 91 ef 20 	lds	r18, 0x20EF
     75a:	30 91 f0 20 	lds	r19, 0x20F0
     75e:	40 91 f1 20 	lds	r20, 0x20F1
     762:	50 91 f2 20 	lds	r21, 0x20F2
     766:	60 91 f3 20 	lds	r22, 0x20F3
     76a:	70 91 f4 20 	lds	r23, 0x20F4
     76e:	80 91 f5 20 	lds	r24, 0x20F5
     772:	90 91 f6 20 	lds	r25, 0x20F6
     776:	a0 80       	ld	r10, Z
     778:	b1 80       	ldd	r11, Z+1	; 0x01
     77a:	c2 80       	ldd	r12, Z+2	; 0x02
     77c:	d3 80       	ldd	r13, Z+3	; 0x03
     77e:	e4 80       	ldd	r14, Z+4	; 0x04
     780:	f5 80       	ldd	r15, Z+5	; 0x05
     782:	06 81       	ldd	r16, Z+6	; 0x06
     784:	17 81       	ldd	r17, Z+7	; 0x07
     786:	0e 94 e7 06 	call	0xdce	; 0xdce <__adddi3>
     78a:	9f 77       	andi	r25, 0x7F	; 127
     78c:	20 87       	std	Z+8, r18	; 0x08
     78e:	31 87       	std	Z+9, r19	; 0x09
     790:	42 87       	std	Z+10, r20	; 0x0a
     792:	53 87       	std	Z+11, r21	; 0x0b
     794:	64 87       	std	Z+12, r22	; 0x0c
     796:	75 87       	std	Z+13, r23	; 0x0d
     798:	86 87       	std	Z+14, r24	; 0x0e
     79a:	97 87       	std	Z+15, r25	; 0x0f
     79c:	03 c0       	rjmp	.+6      	; 0x7a4 <_ZN2GI3Sys5Timer6enableEb+0x64>
	}
	else
	{
		sTimmerTickValue = sTimmerTickValue | (u64)(-__INT64_MAX__ - 1);
     79e:	87 85       	ldd	r24, Z+15	; 0x0f
     7a0:	80 68       	ori	r24, 0x80	; 128
     7a2:	87 87       	std	Z+15, r24	; 0x0f
	}
}
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	bf 90       	pop	r11
     7b2:	af 90       	pop	r10
     7b4:	08 95       	ret

000007b6 <_ZN2GI3Sys5TimerC1Ey>:
GI::Sys::Timer::Timer()
{
	memset(this, 0, sizeof(*this));
}
//#####################################################
GI::Sys::Timer::Timer(u64 interval)
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	fc 01       	movw	r30, r24
{
	memset(this, 0, sizeof(*this));
     7bc:	80 e1       	ldi	r24, 0x10	; 16
     7be:	df 01       	movw	r26, r30
     7c0:	1d 92       	st	X+, r1
     7c2:	8a 95       	dec	r24
     7c4:	e9 f7       	brne	.-6      	; 0x7c0 <_ZN2GI3Sys5TimerC1Ey+0xa>
	sTimmerInterval = interval & (u64)__INT64_MAX__;
     7c6:	7f 77       	andi	r23, 0x7F	; 127
     7c8:	00 83       	st	Z, r16
     7ca:	11 83       	std	Z+1, r17	; 0x01
     7cc:	22 83       	std	Z+2, r18	; 0x02
     7ce:	33 83       	std	Z+3, r19	; 0x03
     7d0:	44 83       	std	Z+4, r20	; 0x04
     7d2:	55 83       	std	Z+5, r21	; 0x05
     7d4:	66 83       	std	Z+6, r22	; 0x06
     7d6:	77 83       	std	Z+7, r23	; 0x07
	enable(true);
     7d8:	61 e0       	ldi	r22, 0x01	; 1
     7da:	cf 01       	movw	r24, r30
     7dc:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN2GI3Sys5Timer6enableEb>
}
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	08 95       	ret

000007e6 <_ZN2GI3Sys5Timer8intervalEy>:
{

}
//#####################################################
void GI::Sys::Timer::interval(u64 interval)
{
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	fc 01       	movw	r30, r24
#ifdef USE_RTC_100_MS
	sTimmerInterval = (interval & (u64)INT64_MAX) / 10;
#else
	sTimmerInterval = interval & (u64)__INT64_MAX__;
     7ec:	7f 77       	andi	r23, 0x7F	; 127
     7ee:	00 83       	st	Z, r16
     7f0:	11 83       	std	Z+1, r17	; 0x01
     7f2:	22 83       	std	Z+2, r18	; 0x02
     7f4:	33 83       	std	Z+3, r19	; 0x03
     7f6:	44 83       	std	Z+4, r20	; 0x04
     7f8:	55 83       	std	Z+5, r21	; 0x05
     7fa:	66 83       	std	Z+6, r22	; 0x06
     7fc:	77 83       	std	Z+7, r23	; 0x07
#endif
	enable(true);
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN2GI3Sys5Timer6enableEb>
}
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <_ZN2GI3Sys5Timer4tickEv>:
		sTimmerTickValue = sTimmerTickValue | (u64)(-__INT64_MAX__ - 1);
	}
}
//#####################################################
bool GI::Sys::Timer::tick()
{
     80a:	a0 e0       	ldi	r26, 0x00	; 0
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	eb e0       	ldi	r30, 0x0B	; 11
     810:	f4 e0       	ldi	r31, 0x04	; 4
     812:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__prologue_saves__+0x6>
     816:	fc 01       	movw	r30, r24
	if(!(sTimmerTickValue & (u64)(-__INT64_MAX__ - 1)))
     818:	50 84       	ldd	r5, Z+8	; 0x08
     81a:	61 84       	ldd	r6, Z+9	; 0x09
     81c:	72 84       	ldd	r7, Z+10	; 0x0a
     81e:	83 84       	ldd	r8, Z+11	; 0x0b
     820:	94 84       	ldd	r9, Z+12	; 0x0c
     822:	d5 85       	ldd	r29, Z+13	; 0x0d
     824:	c6 85       	ldd	r28, Z+14	; 0x0e
     826:	b7 85       	ldd	r27, Z+15	; 0x0f
     828:	25 2d       	mov	r18, r5
     82a:	36 2d       	mov	r19, r6
     82c:	47 2d       	mov	r20, r7
     82e:	58 2d       	mov	r21, r8
     830:	69 2d       	mov	r22, r9
     832:	7d 2f       	mov	r23, r29
     834:	8c 2f       	mov	r24, r28
     836:	9b 2f       	mov	r25, r27
     838:	a0 e0       	ldi	r26, 0x00	; 0
     83a:	0e 94 05 07 	call	0xe0a	; 0xe0a <__cmpdi2_s8>
     83e:	4c f1       	brlt	.+82     	; 0x892 <_ZN2GI3Sys5Timer4tickEv+0x88>
	{
		u64 Temp1 = sTimmerTickValue & (u64)__INT64_MAX__;
		u64 Temp2 = STimerCnt & (u64)__INT64_MAX__;
     840:	a0 90 ef 20 	lds	r10, 0x20EF
     844:	b0 90 f0 20 	lds	r11, 0x20F0
     848:	c0 90 f1 20 	lds	r12, 0x20F1
     84c:	d0 90 f2 20 	lds	r13, 0x20F2
     850:	e0 90 f3 20 	lds	r14, 0x20F3
     854:	f0 90 f4 20 	lds	r15, 0x20F4
     858:	00 91 f5 20 	lds	r16, 0x20F5
     85c:	10 91 f6 20 	lds	r17, 0x20F6
		u64 Temp = (Temp1 - Temp2 - 1)& (u64)(-__INT64_MAX__ - 1);
     860:	9f 77       	andi	r25, 0x7F	; 127
     862:	af ef       	ldi	r26, 0xFF	; 255
     864:	0e 94 f0 06 	call	0xde0	; 0xde0 <__adddi3_s8>
bool GI::Sys::Timer::tick()
{
	if(!(sTimmerTickValue & (u64)(-__INT64_MAX__ - 1)))
	{
		u64 Temp1 = sTimmerTickValue & (u64)__INT64_MAX__;
		u64 Temp2 = STimerCnt & (u64)__INT64_MAX__;
     868:	1f 77       	andi	r17, 0x7F	; 127
		u64 Temp = (Temp1 - Temp2 - 1)& (u64)(-__INT64_MAX__ - 1);
     86a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__subdi3>
		if(Temp)
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 78       	andi	r25, 0x80	; 128
     87e:	a0 e0       	ldi	r26, 0x00	; 0
     880:	0e 94 05 07 	call	0xe0a	; 0xe0a <__cmpdi2_s8>
     884:	41 f0       	breq	.+16     	; 0x896 <_ZN2GI3Sys5Timer4tickEv+0x8c>
		{
			enable(true);
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	cf 01       	movw	r24, r30
     88a:	0e 94 a0 03 	call	0x740	; 0x740 <_ZN2GI3Sys5Timer6enableEb>
			return true;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	03 c0       	rjmp	.+6      	; 0x898 <_ZN2GI3Sys5Timer4tickEv+0x8e>
		}
	}
	return false;
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	01 c0       	rjmp	.+2      	; 0x898 <_ZN2GI3Sys5Timer4tickEv+0x8e>
     896:	80 e0       	ldi	r24, 0x00	; 0
}
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	ef e0       	ldi	r30, 0x0F	; 15
     89e:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__epilogue_restores__+0x6>

000008a2 <_GLOBAL__sub_I_fs_err_table>:
/*typedef struct {
	char name[8];
	SysErr (*fnc)(int argc, char *argv[]);
}cmd_list;*/

static GI::StringArray hystoryTable = GI::StringArray();
     8a2:	8b ee       	ldi	r24, 0xEB	; 235
     8a4:	90 e2       	ldi	r25, 0x20	; 32
     8a6:	0e 94 69 04 	call	0x8d2	; 0x8d2 <_ZN2GI11StringArrayC1Ev>
     8aa:	08 95       	ret

000008ac <_GLOBAL__sub_D_fs_err_table>:
     8ac:	8b ee       	ldi	r24, 0xEB	; 235
     8ae:	90 e2       	ldi	r25, 0x20	; 32
     8b0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN2GI11StringArrayD1Ev>
     8b4:	08 95       	ret

000008b6 <_Znwj>:
#include <stdlib.h>

void* operator new(size_t sz) throw()
{
//    cerr << "allocating " << sz << " bytes\n";
    void* mem = malloc(sz);
     8b6:	0e 94 2d 07 	call	0xe5a	; 0xe5a <malloc>
    if (mem)
        return mem;
    else
        return NULL;
}
     8ba:	08 95       	ret

000008bc <_ZdlPv>:


void operator delete(void* ptr) throw()
{
//    cerr << "deallocating at " << ptr << endl;
    free(ptr);
     8bc:	0e 94 c5 07 	call	0xf8a	; 0xf8a <free>
     8c0:	08 95       	ret

000008c2 <_ZN2GI6StringD1Ev>:
	}
}

GI::String::~String()
{
	if (buff)
     8c2:	fc 01       	movw	r30, r24
     8c4:	80 81       	ld	r24, Z
     8c6:	91 81       	ldd	r25, Z+1	; 0x01
     8c8:	00 97       	sbiw	r24, 0x00	; 0
     8ca:	11 f0       	breq	.+4      	; 0x8d0 <_ZN2GI6StringD1Ev+0xe>
		free((void *) buff);
     8cc:	0e 94 c5 07 	call	0xf8a	; 0xf8a <free>
     8d0:	08 95       	ret

000008d2 <_ZN2GI11StringArrayC1Ev>:
	*Return = 0;
	strcpy(Return, buff + position);
	return Return;
}

GI::StringArray::StringArray()
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	ec 01       	movw	r28, r24
{
	memset(this, 0, sizeof(*this));
     8d8:	18 82       	st	Y, r1
     8da:	19 82       	std	Y+1, r1	; 0x01
     8dc:	1a 82       	std	Y+2, r1	; 0x02
     8de:	1b 82       	std	Y+3, r1	; 0x03
	array = (GI::String **)calloc(1, sizeof(GI::String *));
     8e0:	62 e0       	ldi	r22, 0x02	; 2
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 11 07 	call	0xe22	; 0xe22 <calloc>
     8ec:	88 83       	st	Y, r24
     8ee:	99 83       	std	Y+1, r25	; 0x01
}
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <_ZN2GI11StringArrayD1Ev>:

GI::StringArray::~StringArray()
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	ec 01       	movw	r28, r24
{
	if(!array)
     900:	88 81       	ld	r24, Y
     902:	99 81       	ldd	r25, Y+1	; 0x01
     904:	89 2b       	or	r24, r25
     906:	39 f1       	breq	.+78     	; 0x956 <_ZN2GI11StringArrayD1Ev+0x60>
		return;
	while(itemsCount)
     908:	2a 81       	ldd	r18, Y+2	; 0x02
     90a:	3b 81       	ldd	r19, Y+3	; 0x03
     90c:	21 15       	cp	r18, r1
     90e:	31 05       	cpc	r19, r1
     910:	e1 f0       	breq	.+56     	; 0x94a <_ZN2GI11StringArrayD1Ev+0x54>
	{
		delete array[itemsCount - 1];
     912:	21 50       	subi	r18, 0x01	; 1
     914:	30 48       	sbci	r19, 0x80	; 128
     916:	22 0f       	add	r18, r18
     918:	33 1f       	adc	r19, r19
     91a:	e8 81       	ld	r30, Y
     91c:	f9 81       	ldd	r31, Y+1	; 0x01
     91e:	e2 0f       	add	r30, r18
     920:	f3 1f       	adc	r31, r19
     922:	00 81       	ld	r16, Z
     924:	11 81       	ldd	r17, Z+1	; 0x01
     926:	01 15       	cp	r16, r1
     928:	11 05       	cpc	r17, r1
     92a:	31 f0       	breq	.+12     	; 0x938 <_ZN2GI11StringArrayD1Ev+0x42>
     92c:	c8 01       	movw	r24, r16
     92e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZN2GI6StringD1Ev>
     932:	c8 01       	movw	r24, r16
     934:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZdlPv>
		itemsCount--;
     938:	2a 81       	ldd	r18, Y+2	; 0x02
     93a:	3b 81       	ldd	r19, Y+3	; 0x03
     93c:	21 50       	subi	r18, 0x01	; 1
     93e:	31 09       	sbc	r19, r1
     940:	2a 83       	std	Y+2, r18	; 0x02
     942:	3b 83       	std	Y+3, r19	; 0x03

GI::StringArray::~StringArray()
{
	if(!array)
		return;
	while(itemsCount)
     944:	21 15       	cp	r18, r1
     946:	31 05       	cpc	r19, r1
     948:	21 f7       	brne	.-56     	; 0x912 <_ZN2GI11StringArrayD1Ev+0x1c>
	{
		delete array[itemsCount - 1];
		itemsCount--;
	}
	free(array);
     94a:	88 81       	ld	r24, Y
     94c:	99 81       	ldd	r25, Y+1	; 0x01
     94e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <free>
	array = NULL;
     952:	18 82       	st	Y, r1
     954:	19 82       	std	Y+1, r1	; 0x01
}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	08 95       	ret

00000960 <_ZN2GI3Dev4Gpio6setOutEj>:
	//HAL_GPIO_DeInit((GPIO_TypeDef *) GET_GPIO_PORT_BASE_ADDR[cfg.pin >> 5],
			//(unsigned int) (1 << (cfg.pin % 32)));
}
/*#####################################################*/
SysErr GI::Dev::Gpio::setOut(unsigned int value)
{
     960:	fc 01       	movw	r30, r24
	if (!this)
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	09 f4       	brne	.+2      	; 0x968 <_ZN2GI3Dev4Gpio6setOutEj+0x8>
     966:	52 c0       	rjmp	.+164    	; 0xa0c <_ZN2GI3Dev4Gpio6setOutEj+0xac>
		return SYS_ERR_INVALID_HANDLER;
	PORT_t *BaseAddr = GPIO_BASE_PTRS[cfg.pin >> 5];
     968:	85 85       	ldd	r24, Z+13	; 0x0d
     96a:	96 85       	ldd	r25, Z+14	; 0x0e
     96c:	dc 01       	movw	r26, r24
     96e:	b6 95       	lsr	r27
     970:	a7 95       	ror	r26
     972:	b2 95       	swap	r27
     974:	a2 95       	swap	r26
     976:	af 70       	andi	r26, 0x0F	; 15
     978:	ab 27       	eor	r26, r27
     97a:	bf 70       	andi	r27, 0x0F	; 15
     97c:	ab 27       	eor	r26, r27
     97e:	aa 0f       	add	r26, r26
     980:	bb 1f       	adc	r27, r27
     982:	ac 54       	subi	r26, 0x4C	; 76
     984:	bf 4d       	sbci	r27, 0xDF	; 223
     986:	0d 90       	ld	r0, X+
     988:	bc 91       	ld	r27, X
     98a:	a0 2d       	mov	r26, r0
	if (cfg.multiPin)
     98c:	21 89       	ldd	r18, Z+17	; 0x11
     98e:	22 23       	and	r18, r18
     990:	61 f0       	breq	.+24     	; 0x9aa <_ZN2GI3Dev4Gpio6setOutEj+0x4a>
	{
		BaseAddr->OUT = (BaseAddr->OUT & ~(cfg.pin % 32))
				| (value & (cfg.pin % 32));
     992:	14 96       	adiw	r26, 0x04	; 4
     994:	9c 91       	ld	r25, X
     996:	14 97       	sbiw	r26, 0x04	; 4
     998:	8f 71       	andi	r24, 0x1F	; 31
     99a:	68 23       	and	r22, r24
     99c:	80 95       	com	r24
     99e:	89 23       	and	r24, r25
     9a0:	68 2b       	or	r22, r24
     9a2:	14 96       	adiw	r26, 0x04	; 4
     9a4:	6c 93       	st	X, r22
		if (state)
			BaseAddr->OUTSET |= 1 << (cfg.pin % 32);
		else
			BaseAddr->OUTCLR |= 1 << (cfg.pin % 32);
	}
	return SYS_ERR_OK;
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	08 95       	ret
				| (value & (cfg.pin % 32));
	}
	else
	{
		unsigned int state = value;
		if (cfg.reverse)
     9aa:	27 85       	ldd	r18, Z+15	; 0x0f
     9ac:	22 23       	and	r18, r18
     9ae:	31 f0       	breq	.+12     	; 0x9bc <_ZN2GI3Dev4Gpio6setOutEj+0x5c>
			state = (~state) & 0x01;
     9b0:	9b 01       	movw	r18, r22
     9b2:	41 e0       	ldi	r20, 0x01	; 1
     9b4:	24 27       	eor	r18, r20
     9b6:	62 2f       	mov	r22, r18
     9b8:	61 70       	andi	r22, 0x01	; 1
     9ba:	70 e0       	ldi	r23, 0x00	; 0
		if (state)
     9bc:	67 2b       	or	r22, r23
     9be:	99 f0       	breq	.+38     	; 0x9e6 <_ZN2GI3Dev4Gpio6setOutEj+0x86>
			BaseAddr->OUTSET |= 1 << (cfg.pin % 32);
     9c0:	15 96       	adiw	r26, 0x05	; 5
     9c2:	4c 91       	ld	r20, X
     9c4:	15 97       	sbiw	r26, 0x05	; 5
     9c6:	8f 71       	andi	r24, 0x1F	; 31
     9c8:	99 27       	eor	r25, r25
     9ca:	21 e0       	ldi	r18, 0x01	; 1
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	b9 01       	movw	r22, r18
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <_ZN2GI3Dev4Gpio6setOutEj+0x76>
     9d2:	66 0f       	add	r22, r22
     9d4:	77 1f       	adc	r23, r23
     9d6:	8a 95       	dec	r24
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <_ZN2GI3Dev4Gpio6setOutEj+0x72>
     9da:	cb 01       	movw	r24, r22
     9dc:	84 2b       	or	r24, r20
     9de:	15 96       	adiw	r26, 0x05	; 5
     9e0:	8c 93       	st	X, r24
		else
			BaseAddr->OUTCLR |= 1 << (cfg.pin % 32);
	}
	return SYS_ERR_OK;
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	08 95       	ret
		if (cfg.reverse)
			state = (~state) & 0x01;
		if (state)
			BaseAddr->OUTSET |= 1 << (cfg.pin % 32);
		else
			BaseAddr->OUTCLR |= 1 << (cfg.pin % 32);
     9e6:	16 96       	adiw	r26, 0x06	; 6
     9e8:	4c 91       	ld	r20, X
     9ea:	16 97       	sbiw	r26, 0x06	; 6
     9ec:	8f 71       	andi	r24, 0x1F	; 31
     9ee:	99 27       	eor	r25, r25
     9f0:	21 e0       	ldi	r18, 0x01	; 1
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	b9 01       	movw	r22, r18
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <_ZN2GI3Dev4Gpio6setOutEj+0x9c>
     9f8:	66 0f       	add	r22, r22
     9fa:	77 1f       	adc	r23, r23
     9fc:	8a 95       	dec	r24
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <_ZN2GI3Dev4Gpio6setOutEj+0x98>
     a00:	cb 01       	movw	r24, r22
     a02:	84 2b       	or	r24, r20
     a04:	16 96       	adiw	r26, 0x06	; 6
     a06:	8c 93       	st	X, r24
	}
	return SYS_ERR_OK;
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	08 95       	ret
}
/*#####################################################*/
SysErr GI::Dev::Gpio::setOut(unsigned int value)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
     a0c:	8e ef       	ldi	r24, 0xFE	; 254
			BaseAddr->OUTSET |= 1 << (cfg.pin % 32);
		else
			BaseAddr->OUTCLR |= 1 << (cfg.pin % 32);
	}
	return SYS_ERR_OK;
}
     a0e:	08 95       	ret

00000a10 <_ZN2GI3Dev4Gpio2inEv>:
/*#####################################################*/
signed int GI::Dev::Gpio::in()
{
     a10:	fc 01       	movw	r30, r24
	if (!this)
     a12:	00 97       	sbiw	r24, 0x00	; 0
     a14:	b1 f1       	breq	.+108    	; 0xa82 <_ZN2GI3Dev4Gpio2inEv+0x72>
		return -1;
	PORT_t *BaseAddr = GPIO_BASE_PTRS[cfg.pin >> 5];
     a16:	85 85       	ldd	r24, Z+13	; 0x0d
     a18:	96 85       	ldd	r25, Z+14	; 0x0e
     a1a:	dc 01       	movw	r26, r24
     a1c:	b6 95       	lsr	r27
     a1e:	a7 95       	ror	r26
     a20:	b2 95       	swap	r27
     a22:	a2 95       	swap	r26
     a24:	af 70       	andi	r26, 0x0F	; 15
     a26:	ab 27       	eor	r26, r27
     a28:	bf 70       	andi	r27, 0x0F	; 15
     a2a:	ab 27       	eor	r26, r27
     a2c:	aa 0f       	add	r26, r26
     a2e:	bb 1f       	adc	r27, r27
     a30:	ac 54       	subi	r26, 0x4C	; 76
     a32:	bf 4d       	sbci	r27, 0xDF	; 223
     a34:	0d 90       	ld	r0, X+
     a36:	bc 91       	ld	r27, X
     a38:	a0 2d       	mov	r26, r0
	if (cfg.multiPin)
     a3a:	21 89       	ldd	r18, Z+17	; 0x11
     a3c:	22 23       	and	r18, r18
     a3e:	39 f0       	breq	.+14     	; 0xa4e <_ZN2GI3Dev4Gpio2inEv+0x3e>
	{
		return BaseAddr->DIR & (cfg.pin % 32);
     a40:	2c 91       	ld	r18, X
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	82 23       	and	r24, r18
     a46:	93 23       	and	r25, r19
     a48:	8f 71       	andi	r24, 0x1F	; 31
     a4a:	99 27       	eor	r25, r25
     a4c:	08 95       	ret
	}
	else
	{
		if (cfg.reverse)
     a4e:	27 85       	ldd	r18, Z+15	; 0x0f
     a50:	22 23       	and	r18, r18
     a52:	79 f0       	breq	.+30     	; 0xa72 <_ZN2GI3Dev4Gpio2inEv+0x62>
		{
			if(BaseAddr->IN & (cfg.pin % 32))
     a54:	18 96       	adiw	r26, 0x08	; 8
     a56:	2c 91       	ld	r18, X
     a58:	8f 71       	andi	r24, 0x1F	; 31
     a5a:	99 27       	eor	r25, r25
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	82 23       	and	r24, r18
     a60:	93 23       	and	r25, r19
     a62:	31 e0       	ldi	r19, 0x01	; 1
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	89 2b       	or	r24, r25
     a68:	09 f0       	breq	.+2      	; 0xa6c <_ZN2GI3Dev4Gpio2inEv+0x5c>
     a6a:	30 e0       	ldi	r19, 0x00	; 0
}
/*#####################################################*/
signed int GI::Dev::Gpio::in()
{
	if (!this)
		return -1;
     a6c:	83 2f       	mov	r24, r19
     a6e:	92 2f       	mov	r25, r18
     a70:	08 95       	ret
				return false;
			else
				return true;
		}
		else
			return BaseAddr->IN & (cfg.pin % 32);
     a72:	18 96       	adiw	r26, 0x08	; 8
     a74:	2c 91       	ld	r18, X
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	82 23       	and	r24, r18
     a7a:	93 23       	and	r25, r19
     a7c:	8f 71       	andi	r24, 0x1F	; 31
     a7e:	99 27       	eor	r25, r25
     a80:	08 95       	ret
}
/*#####################################################*/
signed int GI::Dev::Gpio::in()
{
	if (!this)
		return -1;
     a82:	8f ef       	ldi	r24, 0xFF	; 255
     a84:	9f ef       	ldi	r25, 0xFF	; 255
				return true;
		}
		else
			return BaseAddr->IN & (cfg.pin % 32);
	}
}
     a86:	08 95       	ret

00000a88 <_ZN2GI3Dev4Gpio5getInEPm>:
/*#####################################################*/
SysErr GI::Dev::Gpio::getIn(unsigned long *value)
{
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	eb 01       	movw	r28, r22
	if (!this)
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	51 f0       	breq	.+20     	; 0xaa6 <_ZN2GI3Dev4Gpio5getInEPm+0x1e>
		return SYS_ERR_INVALID_HANDLER;
	*value = (unsigned int)in();
     a92:	0e 94 08 05 	call	0xa10	; 0xa10 <_ZN2GI3Dev4Gpio2inEv>
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	88 83       	st	Y, r24
     a9c:	99 83       	std	Y+1, r25	; 0x01
     a9e:	aa 83       	std	Y+2, r26	; 0x02
     aa0:	bb 83       	std	Y+3, r27	; 0x03
	return SYS_ERR_OK;
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <_ZN2GI3Dev4Gpio5getInEPm+0x20>
}
/*#####################################################*/
SysErr GI::Dev::Gpio::getIn(unsigned long *value)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
     aa6:	8e ef       	ldi	r24, 0xFE	; 254
	*value = (unsigned int)in();
	return SYS_ERR_OK;
}
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE>:
/*#####################################################*/
SysErr GI::Dev::Gpio::setMode(CfgGpio::gpioMode_e mode)
{
	if (!this)
     aae:	00 97       	sbiw	r24, 0x00	; 0
     ab0:	09 f4       	brne	.+2      	; 0xab4 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x6>
     ab2:	83 c0       	rjmp	.+262    	; 0xbba <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x10c>
		return SYS_ERR_INVALID_HANDLER;
	PORT_t *BaseAddr = GPIO_BASE_PTRS[cfg.pin >> 5];
     ab4:	dc 01       	movw	r26, r24
     ab6:	1d 96       	adiw	r26, 0x0d	; 13
     ab8:	2d 91       	ld	r18, X+
     aba:	3c 91       	ld	r19, X
     abc:	1e 97       	sbiw	r26, 0x0e	; 14
     abe:	f9 01       	movw	r30, r18
     ac0:	f6 95       	lsr	r31
     ac2:	e7 95       	ror	r30
     ac4:	f2 95       	swap	r31
     ac6:	e2 95       	swap	r30
     ac8:	ef 70       	andi	r30, 0x0F	; 15
     aca:	ef 27       	eor	r30, r31
     acc:	ff 70       	andi	r31, 0x0F	; 15
     ace:	ef 27       	eor	r30, r31
     ad0:	ee 0f       	add	r30, r30
     ad2:	ff 1f       	adc	r31, r31
     ad4:	ec 54       	subi	r30, 0x4C	; 76
     ad6:	ff 4d       	sbci	r31, 0xDF	; 223
     ad8:	01 90       	ld	r0, Z+
     ada:	f0 81       	ld	r31, Z
     adc:	e0 2d       	mov	r30, r0

	/*if (cfg.multiPin == false)
		GPIO_InitStructure.Pin = 1 << (cfg.pin % 32);
	else
		GPIO_InitStructure.Pin = (cfg.pin % 32);*/
	volatile unsigned char *ctl_pin = &BaseAddr->PIN0CTRL;
     ade:	af 01       	movw	r20, r30
     ae0:	40 5f       	subi	r20, 0xF0	; 240
     ae2:	5f 4f       	sbci	r21, 0xFF	; 255

	switch (mode)
     ae4:	61 30       	cpi	r22, 0x01	; 1
     ae6:	c9 f1       	breq	.+114    	; 0xb5a <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0xac>
     ae8:	08 f4       	brcc	.+2      	; 0xaec <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x3e>
     aea:	4f c0       	rjmp	.+158    	; 0xb8a <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0xdc>
     aec:	62 30       	cpi	r22, 0x02	; 2
     aee:	e1 f0       	breq	.+56     	; 0xb28 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x7a>
     af0:	63 30       	cpi	r22, 0x03	; 3
     af2:	09 f0       	breq	.+2      	; 0xaf6 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x48>
     af4:	64 c0       	rjmp	.+200    	; 0xbbe <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x110>
	{
	case CfgGpio::GPIO_IN_PULL_UP:
		ctl_pin[cfg.pin % 8] = PORT_OPC_PULLUP_gc;
     af6:	27 70       	andi	r18, 0x07	; 7
     af8:	33 27       	eor	r19, r19
     afa:	da 01       	movw	r26, r20
     afc:	a2 0f       	add	r26, r18
     afe:	b3 1f       	adc	r27, r19
     b00:	28 e1       	ldi	r18, 0x18	; 24
     b02:	2c 93       	st	X, r18
		BaseAddr->DIRCLR = 1 << (cfg.pin % 8);
     b04:	dc 01       	movw	r26, r24
     b06:	1d 96       	adiw	r26, 0x0d	; 13
     b08:	8d 91       	ld	r24, X+
     b0a:	9c 91       	ld	r25, X
     b0c:	1e 97       	sbiw	r26, 0x0e	; 14
     b0e:	87 70       	andi	r24, 0x07	; 7
     b10:	99 27       	eor	r25, r25
     b12:	21 e0       	ldi	r18, 0x01	; 1
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	a9 01       	movw	r20, r18
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x70>
     b1a:	44 0f       	add	r20, r20
     b1c:	55 1f       	adc	r21, r21
     b1e:	8a 95       	dec	r24
     b20:	e2 f7       	brpl	.-8      	; 0xb1a <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x6c>
     b22:	42 83       	std	Z+2, r20	; 0x02
		break;
	default:
		return SYS_ERR_INVALID_COMMAND;

	}
	return SYS_ERR_OK;
     b24:	80 e0       	ldi	r24, 0x00	; 0
	switch (mode)
	{
	case CfgGpio::GPIO_IN_PULL_UP:
		ctl_pin[cfg.pin % 8] = PORT_OPC_PULLUP_gc;
		BaseAddr->DIRCLR = 1 << (cfg.pin % 8);
		break;
     b26:	08 95       	ret
	case CfgGpio::GPIO_IN_PULL_DOWN:
		ctl_pin[cfg.pin % 8] = PORT_OPC_PULLDOWN_gc;
     b28:	27 70       	andi	r18, 0x07	; 7
     b2a:	33 27       	eor	r19, r19
     b2c:	da 01       	movw	r26, r20
     b2e:	a2 0f       	add	r26, r18
     b30:	b3 1f       	adc	r27, r19
     b32:	20 e1       	ldi	r18, 0x10	; 16
     b34:	2c 93       	st	X, r18
		BaseAddr->DIRCLR = 1 << (cfg.pin % 8);
     b36:	dc 01       	movw	r26, r24
     b38:	1d 96       	adiw	r26, 0x0d	; 13
     b3a:	8d 91       	ld	r24, X+
     b3c:	9c 91       	ld	r25, X
     b3e:	1e 97       	sbiw	r26, 0x0e	; 14
     b40:	87 70       	andi	r24, 0x07	; 7
     b42:	99 27       	eor	r25, r25
     b44:	21 e0       	ldi	r18, 0x01	; 1
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	a9 01       	movw	r20, r18
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0xa2>
     b4c:	44 0f       	add	r20, r20
     b4e:	55 1f       	adc	r21, r21
     b50:	8a 95       	dec	r24
     b52:	e2 f7       	brpl	.-8      	; 0xb4c <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x9e>
     b54:	42 83       	std	Z+2, r20	; 0x02
		break;
	default:
		return SYS_ERR_INVALID_COMMAND;

	}
	return SYS_ERR_OK;
     b56:	80 e0       	ldi	r24, 0x00	; 0
		BaseAddr->DIRCLR = 1 << (cfg.pin % 8);
		break;
	case CfgGpio::GPIO_IN_PULL_DOWN:
		ctl_pin[cfg.pin % 8] = PORT_OPC_PULLDOWN_gc;
		BaseAddr->DIRCLR = 1 << (cfg.pin % 8);
		break;
     b58:	08 95       	ret
	case CfgGpio::GPIO_IN_FLOATING:
		ctl_pin[cfg.pin % 8] = PORT_OPC_TOTEM_gc;
     b5a:	27 70       	andi	r18, 0x07	; 7
     b5c:	33 27       	eor	r19, r19
     b5e:	da 01       	movw	r26, r20
     b60:	a2 0f       	add	r26, r18
     b62:	b3 1f       	adc	r27, r19
     b64:	1c 92       	st	X, r1
		BaseAddr->DIRCLR = 1 << (cfg.pin % 8);
     b66:	dc 01       	movw	r26, r24
     b68:	1d 96       	adiw	r26, 0x0d	; 13
     b6a:	8d 91       	ld	r24, X+
     b6c:	9c 91       	ld	r25, X
     b6e:	1e 97       	sbiw	r26, 0x0e	; 14
     b70:	87 70       	andi	r24, 0x07	; 7
     b72:	99 27       	eor	r25, r25
     b74:	21 e0       	ldi	r18, 0x01	; 1
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	a9 01       	movw	r20, r18
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0xd2>
     b7c:	44 0f       	add	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	8a 95       	dec	r24
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0xce>
     b84:	42 83       	std	Z+2, r20	; 0x02
		break;
	default:
		return SYS_ERR_INVALID_COMMAND;

	}
	return SYS_ERR_OK;
     b86:	80 e0       	ldi	r24, 0x00	; 0
		BaseAddr->DIRCLR = 1 << (cfg.pin % 8);
		break;
	case CfgGpio::GPIO_IN_FLOATING:
		ctl_pin[cfg.pin % 8] = PORT_OPC_TOTEM_gc;
		BaseAddr->DIRCLR = 1 << (cfg.pin % 8);
		break;
     b88:	08 95       	ret
	case CfgGpio::GPIO_OUT_PUSH_PULL:
		ctl_pin[cfg.pin % 8] = PORT_OPC_TOTEM_gc;
     b8a:	27 70       	andi	r18, 0x07	; 7
     b8c:	33 27       	eor	r19, r19
     b8e:	da 01       	movw	r26, r20
     b90:	a2 0f       	add	r26, r18
     b92:	b3 1f       	adc	r27, r19
     b94:	1c 92       	st	X, r1
		BaseAddr->DIRSET = 1 << (cfg.pin % 8);
     b96:	dc 01       	movw	r26, r24
     b98:	1d 96       	adiw	r26, 0x0d	; 13
     b9a:	8d 91       	ld	r24, X+
     b9c:	9c 91       	ld	r25, X
     b9e:	1e 97       	sbiw	r26, 0x0e	; 14
     ba0:	87 70       	andi	r24, 0x07	; 7
     ba2:	99 27       	eor	r25, r25
     ba4:	21 e0       	ldi	r18, 0x01	; 1
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	a9 01       	movw	r20, r18
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x102>
     bac:	44 0f       	add	r20, r20
     bae:	55 1f       	adc	r21, r21
     bb0:	8a 95       	dec	r24
     bb2:	e2 f7       	brpl	.-8      	; 0xbac <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0xfe>
     bb4:	41 83       	std	Z+1, r20	; 0x01
		break;
	default:
		return SYS_ERR_INVALID_COMMAND;

	}
	return SYS_ERR_OK;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
		BaseAddr->DIRCLR = 1 << (cfg.pin % 8);
		break;
	case CfgGpio::GPIO_OUT_PUSH_PULL:
		ctl_pin[cfg.pin % 8] = PORT_OPC_TOTEM_gc;
		BaseAddr->DIRSET = 1 << (cfg.pin % 8);
		break;
     bb8:	08 95       	ret
}
/*#####################################################*/
SysErr GI::Dev::Gpio::setMode(CfgGpio::gpioMode_e mode)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
     bba:	8e ef       	ldi	r24, 0xFE	; 254
     bbc:	08 95       	ret
	case CfgGpio::GPIO_OUT_PUSH_PULL:
		ctl_pin[cfg.pin % 8] = PORT_OPC_TOTEM_gc;
		BaseAddr->DIRSET = 1 << (cfg.pin % 8);
		break;
	default:
		return SYS_ERR_INVALID_COMMAND;
     bbe:	8b ef       	ldi	r24, 0xFB	; 251

	}
	return SYS_ERR_OK;
}
     bc0:	08 95       	ret

00000bc2 <_ZN2GI3Dev4GpioC1EP7CfgGpio>:
	cfg.multiPin = multiPin;
	setMode(mode);
	setOut(cfg.defValue);
}

GI::Dev::Gpio::Gpio(CfgGpio *gpioPin)
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	ec 01       	movw	r28, r24
{
	memset(this, 0, sizeof(*this));
     bc8:	86 e2       	ldi	r24, 0x26	; 38
     bca:	fe 01       	movw	r30, r28
     bcc:	11 92       	st	Z+, r1
     bce:	8a 95       	dec	r24
     bd0:	e9 f7       	brne	.-6      	; 0xbcc <_ZN2GI3Dev4GpioC1EP7CfgGpio+0xa>
	memcpy(&this->cfg, gpioPin, sizeof(CfgGpio));
     bd2:	de 01       	movw	r26, r28
     bd4:	11 96       	adiw	r26, 0x01	; 1
     bd6:	85 e1       	ldi	r24, 0x15	; 21
     bd8:	fb 01       	movw	r30, r22
     bda:	01 90       	ld	r0, Z+
     bdc:	0d 92       	st	X+, r0
     bde:	8a 95       	dec	r24
     be0:	e1 f7       	brne	.-8      	; 0xbda <_ZN2GI3Dev4GpioC1EP7CfgGpio+0x18>
	setMode(cfg.gpioMode);
     be2:	68 89       	ldd	r22, Y+16	; 0x10
     be4:	ce 01       	movw	r24, r28
     be6:	0e 94 57 05 	call	0xaae	; 0xaae <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE>
	setOut(cfg.defValue);
     bea:	6a 89       	ldd	r22, Y+18	; 0x12
     bec:	7b 89       	ldd	r23, Y+19	; 0x13
     bee:	ce 01       	movw	r24, r28
     bf0:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN2GI3Dev4Gpio6setOutEj>
}
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <_ZN2GI3Dev4UartC1EPKc>:
		&USARTF1
#endif
		};

/*#####################################################*/
GI::Dev::Uart::Uart(const char *path)
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e3 e0       	ldi	r30, 0x03	; 3
     c00:	f6 e0       	ldi	r31, 0x06	; 6
     c02:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__prologue_saves__+0x14>
     c06:	6c 01       	movw	r12, r24
     c08:	7b 01       	movw	r14, r22
{
	memset(this, 0, sizeof(*this));
     c0a:	8f e1       	ldi	r24, 0x1F	; 31
     c0c:	f6 01       	movw	r30, r12
     c0e:	11 92       	st	Z+, r1
     c10:	8a 95       	dec	r24
     c12:	e9 f7       	brne	.-6      	; 0xc0e <_ZN2GI3Dev4UartC1EPKc+0x14>
     c14:	06 e0       	ldi	r16, 0x06	; 6
     c16:	10 e2       	ldi	r17, 0x20	; 32
	unsigned int item_nr = 0;
	while(1)
	{
		if(uartCfg[item_nr].name == NULL)
     c18:	c8 01       	movw	r24, r16

/*#####################################################*/
GI::Dev::Uart::Uart(const char *path)
{
	memset(this, 0, sizeof(*this));
	unsigned int item_nr = 0;
     c1a:	c0 e0       	ldi	r28, 0x00	; 0
     c1c:	d0 e0       	ldi	r29, 0x00	; 0
     c1e:	04 c0       	rjmp	.+8      	; 0xc28 <_ZN2GI3Dev4UartC1EPKc+0x2e>
	while(1)
	{
		if(uartCfg[item_nr].name == NULL)
		{
			err = SYS_ERR_INVALID_PATH;
     c20:	85 ef       	ldi	r24, 0xF5	; 245
     c22:	f6 01       	movw	r30, r12
     c24:	80 83       	st	Z, r24
			return;
     c26:	95 c0       	rjmp	.+298    	; 0xd52 <_ZN2GI3Dev4UartC1EPKc+0x158>
		}
		if(!strcmp(uartCfg[item_nr].name, path))
     c28:	b7 01       	movw	r22, r14
     c2a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <strcmp>
     c2e:	89 2b       	or	r24, r25
     c30:	51 f0       	breq	.+20     	; 0xc46 <_ZN2GI3Dev4UartC1EPKc+0x4c>
			break;
		item_nr++;
     c32:	21 96       	adiw	r28, 0x01	; 1
     c34:	98 01       	movw	r18, r16
     c36:	28 5e       	subi	r18, 0xE8	; 232
     c38:	3f 4f       	sbci	r19, 0xFF	; 255
     c3a:	c9 01       	movw	r24, r18
{
	memset(this, 0, sizeof(*this));
	unsigned int item_nr = 0;
	while(1)
	{
		if(uartCfg[item_nr].name == NULL)
     c3c:	21 15       	cp	r18, r1
     c3e:	31 05       	cpc	r19, r1
     c40:	79 f3       	breq	.-34     	; 0xc20 <_ZN2GI3Dev4UartC1EPKc+0x26>
     c42:	89 01       	movw	r16, r18
     c44:	f1 cf       	rjmp	.-30     	; 0xc28 <_ZN2GI3Dev4UartC1EPKc+0x2e>
		if(!strcmp(uartCfg[item_nr].name, path))
			break;
		item_nr++;
	}

	if(strncmp(path, (char *)"uart-", sizeof("uart-") - 1) && strncmp(path, (char *)"usbcdc-", sizeof("usbcdc-") - 1))
     c46:	45 e0       	ldi	r20, 0x05	; 5
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	6d ec       	ldi	r22, 0xCD	; 205
     c4c:	70 e2       	ldi	r23, 0x20	; 32
     c4e:	c7 01       	movw	r24, r14
     c50:	0e 94 64 08 	call	0x10c8	; 0x10c8 <strncmp>
     c54:	89 2b       	or	r24, r25
     c56:	69 f0       	breq	.+26     	; 0xc72 <_ZN2GI3Dev4UartC1EPKc+0x78>
     c58:	47 e0       	ldi	r20, 0x07	; 7
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	63 ed       	ldi	r22, 0xD3	; 211
     c5e:	70 e2       	ldi	r23, 0x20	; 32
     c60:	c7 01       	movw	r24, r14
     c62:	0e 94 64 08 	call	0x10c8	; 0x10c8 <strncmp>
     c66:	89 2b       	or	r24, r25
     c68:	e9 f1       	breq	.+122    	; 0xce4 <_ZN2GI3Dev4UartC1EPKc+0xea>
	{
		err = SYS_ERR_INVALID_PATH;
     c6a:	85 ef       	ldi	r24, 0xF5	; 245
     c6c:	f6 01       	movw	r30, r12
     c6e:	80 83       	st	Z, r24
		return;
     c70:	70 c0       	rjmp	.+224    	; 0xd52 <_ZN2GI3Dev4UartC1EPKc+0x158>
	}
	if(!strncmp(path, (char *)"uart-", sizeof("uart-") - 1))
	{
		unsigned char dev_nr = path[sizeof("uart-") - 1] - '0';
     c72:	f7 01       	movw	r30, r14
     c74:	85 81       	ldd	r24, Z+5	; 0x05
     c76:	80 53       	subi	r24, 0x30	; 48
		if(dev_nr >= UART_INTERFACE_COUNT)
     c78:	84 30       	cpi	r24, 0x04	; 4
     c7a:	20 f0       	brcs	.+8      	; 0xc84 <_ZN2GI3Dev4UartC1EPKc+0x8a>
		{
			err = SYS_ERR_INVALID_PATH;
     c7c:	85 ef       	ldi	r24, 0xF5	; 245
     c7e:	f6 01       	movw	r30, r12
     c80:	80 83       	st	Z, r24
			return;
     c82:	67 c0       	rjmp	.+206    	; 0xd52 <_ZN2GI3Dev4UartC1EPKc+0x158>
		}
		unitNr = dev_nr;
     c84:	f6 01       	movw	r30, r12
     c86:	82 8f       	std	Z+26, r24	; 0x1a
	else
	{
		err = SYS_ERR_INVALID_PARAM;
		return;
	}
	memset(this, 0, sizeof(*this));
     c88:	8f e1       	ldi	r24, 0x1F	; 31
     c8a:	11 92       	st	Z+, r1
     c8c:	8a 95       	dec	r24
     c8e:	e9 f7       	brne	.-6      	; 0xc8a <_ZN2GI3Dev4UartC1EPKc+0x90>
	memcpy(&cfg, &uartCfg[item_nr], sizeof(CfgUart));
     c90:	fe 01       	movw	r30, r28
     c92:	ee 0f       	add	r30, r30
     c94:	ff 1f       	adc	r31, r31
     c96:	ce 0f       	add	r28, r30
     c98:	df 1f       	adc	r29, r31
     c9a:	fe 01       	movw	r30, r28
     c9c:	ee 0f       	add	r30, r30
     c9e:	ff 1f       	adc	r31, r31
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	ee 0f       	add	r30, r30
     ca6:	ff 1f       	adc	r31, r31
     ca8:	ea 5f       	subi	r30, 0xFA	; 250
     caa:	ff 4d       	sbci	r31, 0xDF	; 223
     cac:	88 e1       	ldi	r24, 0x18	; 24
     cae:	d6 01       	movw	r26, r12
     cb0:	11 96       	adiw	r26, 0x01	; 1
     cb2:	01 90       	ld	r0, Z+
     cb4:	0d 92       	st	X+, r0
     cb6:	8a 95       	dec	r24
     cb8:	e1 f7       	brne	.-8      	; 0xcb2 <_ZN2GI3Dev4UartC1EPKc+0xb8>

	udata = (void *)UART_BASE_PTRS[unitNr];
     cba:	f6 01       	movw	r30, r12
     cbc:	22 8d       	ldd	r18, Z+26	; 0x1a
     cbe:	e2 2f       	mov	r30, r18
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	e4 54       	subi	r30, 0x44	; 68
     cc8:	ff 4d       	sbci	r31, 0xDF	; 223
     cca:	80 81       	ld	r24, Z
     ccc:	91 81       	ldd	r25, Z+1	; 0x01
     cce:	f6 01       	movw	r30, r12
     cd0:	85 8f       	std	Z+29, r24	; 0x1d
     cd2:	96 8f       	std	Z+30, r25	; 0x1e
#if defined(__AVR_ATxmega8E5__) || defined(__AVR_ATxmega16E5__) || defined(__AVR_ATxmega32E5__)
	switch(unitNr)
     cd4:	21 30       	cpi	r18, 0x01	; 1
     cd6:	b9 f0       	breq	.+46     	; 0xd06 <_ZN2GI3Dev4UartC1EPKc+0x10c>
     cd8:	48 f0       	brcs	.+18     	; 0xcec <_ZN2GI3Dev4UartC1EPKc+0xf2>
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	09 f1       	breq	.+66     	; 0xd20 <_ZN2GI3Dev4UartC1EPKc+0x126>
     cde:	23 30       	cpi	r18, 0x03	; 3
     ce0:	61 f1       	breq	.+88     	; 0xd3a <_ZN2GI3Dev4UartC1EPKc+0x140>
     ce2:	37 c0       	rjmp	.+110    	; 0xd52 <_ZN2GI3Dev4UartC1EPKc+0x158>
		}
		unitNr = dev_nr;
	}
	else
	{
		err = SYS_ERR_INVALID_PARAM;
     ce4:	8a ef       	ldi	r24, 0xFA	; 250
     ce6:	f6 01       	movw	r30, r12
     ce8:	80 83       	st	Z, r24
		return;
     cea:	33 c0       	rjmp	.+102    	; 0xd52 <_ZN2GI3Dev4UartC1EPKc+0x158>
	udata = (void *)UART_BASE_PTRS[unitNr];
#if defined(__AVR_ATxmega8E5__) || defined(__AVR_ATxmega16E5__) || defined(__AVR_ATxmega32E5__)
	switch(unitNr)
	{
	case 0:
		PORTC.REMAP &= ~PORT_USART0_bm;
     cec:	e0 e4       	ldi	r30, 0x40	; 64
     cee:	f6 e0       	ldi	r31, 0x06	; 6
     cf0:	86 85       	ldd	r24, Z+14	; 0x0e
     cf2:	8f 7e       	andi	r24, 0xEF	; 239
     cf4:	86 87       	std	Z+14, r24	; 0x0e
		{
			PORTC.DIRSET = 1<<1;
			PORTC.OUTSET = 1<<1;
		}
#endif
		PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;
     cf6:	88 e1       	ldi	r24, 0x18	; 24
     cf8:	82 8b       	std	Z+18, r24	; 0x12
		PORTC.DIRCLR = 1<<2;
     cfa:	84 e0       	ldi	r24, 0x04	; 4
     cfc:	82 83       	std	Z+2, r24	; 0x02
		PORTC.DIRSET = 1<<3;
     cfe:	88 e0       	ldi	r24, 0x08	; 8
     d00:	81 83       	std	Z+1, r24	; 0x01
		PORTC.OUTSET = 1<<3;
     d02:	85 83       	std	Z+5, r24	; 0x05
		break;
     d04:	26 c0       	rjmp	.+76     	; 0xd52 <_ZN2GI3Dev4UartC1EPKc+0x158>
	case 1:
		PORTC.REMAP |= PORT_USART0_bm;
     d06:	e0 e4       	ldi	r30, 0x40	; 64
     d08:	f6 e0       	ldi	r31, 0x06	; 6
     d0a:	86 85       	ldd	r24, Z+14	; 0x0e
     d0c:	80 61       	ori	r24, 0x10	; 16
     d0e:	86 87       	std	Z+14, r24	; 0x0e
		{
			PORTC.DIRSET = 1<<5;
			PORTC.OUTSET = 1<<5;
		}
#endif
		PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;
     d10:	88 e1       	ldi	r24, 0x18	; 24
     d12:	86 8b       	std	Z+22, r24	; 0x16
		PORTC.DIRCLR = 1<<6;
     d14:	80 e4       	ldi	r24, 0x40	; 64
     d16:	82 83       	std	Z+2, r24	; 0x02
		PORTC.DIRSET = 1<<7;
     d18:	80 e8       	ldi	r24, 0x80	; 128
     d1a:	81 83       	std	Z+1, r24	; 0x01
		PORTC.OUTSET = 1<<7;
     d1c:	85 83       	std	Z+5, r24	; 0x05
		break;
     d1e:	19 c0       	rjmp	.+50     	; 0xd52 <_ZN2GI3Dev4UartC1EPKc+0x158>
	case 2:
		PORTD.REMAP &= ~PORT_USART0_bm;
     d20:	e0 e6       	ldi	r30, 0x60	; 96
     d22:	f6 e0       	ldi	r31, 0x06	; 6
     d24:	86 85       	ldd	r24, Z+14	; 0x0e
     d26:	8f 7e       	andi	r24, 0xEF	; 239
     d28:	86 87       	std	Z+14, r24	; 0x0e
		{
			PORTD.DIRSET = 1<<1;
			PORTD.OUTSET = 1<<1;
		}
#endif
		PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;
     d2a:	88 e1       	ldi	r24, 0x18	; 24
     d2c:	82 8b       	std	Z+18, r24	; 0x12
		PORTD.DIRCLR = 1<<2;
     d2e:	84 e0       	ldi	r24, 0x04	; 4
     d30:	82 83       	std	Z+2, r24	; 0x02
		PORTD.DIRSET = 1<<3;
     d32:	88 e0       	ldi	r24, 0x08	; 8
     d34:	81 83       	std	Z+1, r24	; 0x01
		PORTD.OUTSET = 1<<3;
     d36:	85 83       	std	Z+5, r24	; 0x05
		break;
     d38:	0c c0       	rjmp	.+24     	; 0xd52 <_ZN2GI3Dev4UartC1EPKc+0x158>
	case 3:
		PORTD.REMAP |= PORT_USART0_bm;
     d3a:	e0 e6       	ldi	r30, 0x60	; 96
     d3c:	f6 e0       	ldi	r31, 0x06	; 6
     d3e:	86 85       	ldd	r24, Z+14	; 0x0e
     d40:	80 61       	ori	r24, 0x10	; 16
     d42:	86 87       	std	Z+14, r24	; 0x0e
		{
			PORTD.DIRSET = 1<<5;
			PORTD.OUTSET = 1<<5;
		}
#endif
		PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;
     d44:	88 e1       	ldi	r24, 0x18	; 24
     d46:	86 8b       	std	Z+22, r24	; 0x16
		PORTD.DIRCLR = 1<<6;
     d48:	80 e4       	ldi	r24, 0x40	; 64
     d4a:	82 83       	std	Z+2, r24	; 0x02
		PORTD.DIRSET = 1<<7;
     d4c:	80 e8       	ldi	r24, 0x80	; 128
     d4e:	81 83       	std	Z+1, r24	; 0x01
		PORTD.OUTSET = 1<<7;
     d50:	85 83       	std	Z+5, r24	; 0x05
		UartConfig.bSbns = false;
	else
		UartConfig.bSbns = true;
	UART_Init(addr_table[unitNr], &UartConfig);*/

}
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	e8 e0       	ldi	r30, 0x08	; 8
     d58:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__epilogue_restores__+0x14>

00000d5c <_ZN2GI3Sys5ClockC1Ev>:

/**********************************************************************************************
* Global functions
**********************************************************************************************/

GI::Sys::Clock::Clock()
     d5c:	08 95       	ret

00000d5e <_ZN2GI3Sys5ClockD1Ev>:
{
	setClk(FCPU);
}

GI::Sys::Clock::~Clock()
     d5e:	08 95       	ret

00000d60 <__tablejump2__>:
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31

00000d64 <__tablejump__>:
     d64:	05 90       	lpm	r0, Z+
     d66:	f4 91       	lpm	r31, Z
     d68:	e0 2d       	mov	r30, r0
     d6a:	09 94       	ijmp

00000d6c <__prologue_saves__>:
     d6c:	2f 92       	push	r2
     d6e:	3f 92       	push	r3
     d70:	4f 92       	push	r4
     d72:	5f 92       	push	r5
     d74:	6f 92       	push	r6
     d76:	7f 92       	push	r7
     d78:	8f 92       	push	r8
     d7a:	9f 92       	push	r9
     d7c:	af 92       	push	r10
     d7e:	bf 92       	push	r11
     d80:	cf 92       	push	r12
     d82:	df 92       	push	r13
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	ca 1b       	sub	r28, r26
     d96:	db 0b       	sbc	r29, r27
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	09 94       	ijmp

00000d9e <__epilogue_restores__>:
     d9e:	2a 88       	ldd	r2, Y+18	; 0x12
     da0:	39 88       	ldd	r3, Y+17	; 0x11
     da2:	48 88       	ldd	r4, Y+16	; 0x10
     da4:	5f 84       	ldd	r5, Y+15	; 0x0f
     da6:	6e 84       	ldd	r6, Y+14	; 0x0e
     da8:	7d 84       	ldd	r7, Y+13	; 0x0d
     daa:	8c 84       	ldd	r8, Y+12	; 0x0c
     dac:	9b 84       	ldd	r9, Y+11	; 0x0b
     dae:	aa 84       	ldd	r10, Y+10	; 0x0a
     db0:	b9 84       	ldd	r11, Y+9	; 0x09
     db2:	c8 84       	ldd	r12, Y+8	; 0x08
     db4:	df 80       	ldd	r13, Y+7	; 0x07
     db6:	ee 80       	ldd	r14, Y+6	; 0x06
     db8:	fd 80       	ldd	r15, Y+5	; 0x05
     dba:	0c 81       	ldd	r16, Y+4	; 0x04
     dbc:	1b 81       	ldd	r17, Y+3	; 0x03
     dbe:	aa 81       	ldd	r26, Y+2	; 0x02
     dc0:	b9 81       	ldd	r27, Y+1	; 0x01
     dc2:	ce 0f       	add	r28, r30
     dc4:	d1 1d       	adc	r29, r1
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	de bf       	out	0x3e, r29	; 62
     dca:	ed 01       	movw	r28, r26
     dcc:	08 95       	ret

00000dce <__adddi3>:
     dce:	2a 0d       	add	r18, r10
     dd0:	3b 1d       	adc	r19, r11
     dd2:	4c 1d       	adc	r20, r12
     dd4:	5d 1d       	adc	r21, r13
     dd6:	6e 1d       	adc	r22, r14
     dd8:	7f 1d       	adc	r23, r15
     dda:	80 1f       	adc	r24, r16
     ddc:	91 1f       	adc	r25, r17
     dde:	08 95       	ret

00000de0 <__adddi3_s8>:
     de0:	00 24       	eor	r0, r0
     de2:	a7 fd       	sbrc	r26, 7
     de4:	00 94       	com	r0
     de6:	2a 0f       	add	r18, r26
     de8:	30 1d       	adc	r19, r0
     dea:	40 1d       	adc	r20, r0
     dec:	50 1d       	adc	r21, r0
     dee:	60 1d       	adc	r22, r0
     df0:	70 1d       	adc	r23, r0
     df2:	80 1d       	adc	r24, r0
     df4:	90 1d       	adc	r25, r0
     df6:	08 95       	ret

00000df8 <__subdi3>:
     df8:	2a 19       	sub	r18, r10
     dfa:	3b 09       	sbc	r19, r11
     dfc:	4c 09       	sbc	r20, r12
     dfe:	5d 09       	sbc	r21, r13
     e00:	6e 09       	sbc	r22, r14
     e02:	7f 09       	sbc	r23, r15
     e04:	80 0b       	sbc	r24, r16
     e06:	91 0b       	sbc	r25, r17
     e08:	08 95       	ret

00000e0a <__cmpdi2_s8>:
     e0a:	00 24       	eor	r0, r0
     e0c:	a7 fd       	sbrc	r26, 7
     e0e:	00 94       	com	r0
     e10:	2a 17       	cp	r18, r26
     e12:	30 05       	cpc	r19, r0
     e14:	40 05       	cpc	r20, r0
     e16:	50 05       	cpc	r21, r0
     e18:	60 05       	cpc	r22, r0
     e1a:	70 05       	cpc	r23, r0
     e1c:	80 05       	cpc	r24, r0
     e1e:	90 05       	cpc	r25, r0
     e20:	08 95       	ret

00000e22 <calloc>:
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	86 9f       	mul	r24, r22
     e2c:	80 01       	movw	r16, r0
     e2e:	87 9f       	mul	r24, r23
     e30:	10 0d       	add	r17, r0
     e32:	96 9f       	mul	r25, r22
     e34:	10 0d       	add	r17, r0
     e36:	11 24       	eor	r1, r1
     e38:	c8 01       	movw	r24, r16
     e3a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <malloc>
     e3e:	ec 01       	movw	r28, r24
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	29 f0       	breq	.+10     	; 0xe4e <calloc+0x2c>
     e44:	a8 01       	movw	r20, r16
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <memset>
     e4e:	ce 01       	movw	r24, r28
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	08 95       	ret

00000e5a <malloc>:
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	91 05       	cpc	r25, r1
     e62:	10 f4       	brcc	.+4      	; 0xe68 <malloc+0xe>
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	e0 91 f9 20 	lds	r30, 0x20F9
     e6c:	f0 91 fa 20 	lds	r31, 0x20FA
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	a0 e0       	ldi	r26, 0x00	; 0
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	30 97       	sbiw	r30, 0x00	; 0
     e7a:	39 f1       	breq	.+78     	; 0xeca <malloc+0x70>
     e7c:	40 81       	ld	r20, Z
     e7e:	51 81       	ldd	r21, Z+1	; 0x01
     e80:	48 17       	cp	r20, r24
     e82:	59 07       	cpc	r21, r25
     e84:	b8 f0       	brcs	.+46     	; 0xeb4 <malloc+0x5a>
     e86:	48 17       	cp	r20, r24
     e88:	59 07       	cpc	r21, r25
     e8a:	71 f4       	brne	.+28     	; 0xea8 <malloc+0x4e>
     e8c:	82 81       	ldd	r24, Z+2	; 0x02
     e8e:	93 81       	ldd	r25, Z+3	; 0x03
     e90:	10 97       	sbiw	r26, 0x00	; 0
     e92:	29 f0       	breq	.+10     	; 0xe9e <malloc+0x44>
     e94:	12 96       	adiw	r26, 0x02	; 2
     e96:	8d 93       	st	X+, r24
     e98:	9c 93       	st	X, r25
     e9a:	13 97       	sbiw	r26, 0x03	; 3
     e9c:	2c c0       	rjmp	.+88     	; 0xef6 <malloc+0x9c>
     e9e:	80 93 f9 20 	sts	0x20F9, r24
     ea2:	90 93 fa 20 	sts	0x20FA, r25
     ea6:	27 c0       	rjmp	.+78     	; 0xef6 <malloc+0x9c>
     ea8:	21 15       	cp	r18, r1
     eaa:	31 05       	cpc	r19, r1
     eac:	31 f0       	breq	.+12     	; 0xeba <malloc+0x60>
     eae:	42 17       	cp	r20, r18
     eb0:	53 07       	cpc	r21, r19
     eb2:	18 f0       	brcs	.+6      	; 0xeba <malloc+0x60>
     eb4:	a9 01       	movw	r20, r18
     eb6:	db 01       	movw	r26, r22
     eb8:	01 c0       	rjmp	.+2      	; 0xebc <malloc+0x62>
     eba:	ef 01       	movw	r28, r30
     ebc:	9a 01       	movw	r18, r20
     ebe:	bd 01       	movw	r22, r26
     ec0:	df 01       	movw	r26, r30
     ec2:	02 80       	ldd	r0, Z+2	; 0x02
     ec4:	f3 81       	ldd	r31, Z+3	; 0x03
     ec6:	e0 2d       	mov	r30, r0
     ec8:	d7 cf       	rjmp	.-82     	; 0xe78 <malloc+0x1e>
     eca:	21 15       	cp	r18, r1
     ecc:	31 05       	cpc	r19, r1
     ece:	f9 f0       	breq	.+62     	; 0xf0e <malloc+0xb4>
     ed0:	28 1b       	sub	r18, r24
     ed2:	39 0b       	sbc	r19, r25
     ed4:	24 30       	cpi	r18, 0x04	; 4
     ed6:	31 05       	cpc	r19, r1
     ed8:	80 f4       	brcc	.+32     	; 0xefa <malloc+0xa0>
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	9b 81       	ldd	r25, Y+3	; 0x03
     ede:	61 15       	cp	r22, r1
     ee0:	71 05       	cpc	r23, r1
     ee2:	21 f0       	breq	.+8      	; 0xeec <malloc+0x92>
     ee4:	fb 01       	movw	r30, r22
     ee6:	82 83       	std	Z+2, r24	; 0x02
     ee8:	93 83       	std	Z+3, r25	; 0x03
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <malloc+0x9a>
     eec:	80 93 f9 20 	sts	0x20F9, r24
     ef0:	90 93 fa 20 	sts	0x20FA, r25
     ef4:	fe 01       	movw	r30, r28
     ef6:	32 96       	adiw	r30, 0x02	; 2
     ef8:	44 c0       	rjmp	.+136    	; 0xf82 <malloc+0x128>
     efa:	fe 01       	movw	r30, r28
     efc:	e2 0f       	add	r30, r18
     efe:	f3 1f       	adc	r31, r19
     f00:	81 93       	st	Z+, r24
     f02:	91 93       	st	Z+, r25
     f04:	22 50       	subi	r18, 0x02	; 2
     f06:	31 09       	sbc	r19, r1
     f08:	28 83       	st	Y, r18
     f0a:	39 83       	std	Y+1, r19	; 0x01
     f0c:	3a c0       	rjmp	.+116    	; 0xf82 <malloc+0x128>
     f0e:	20 91 f7 20 	lds	r18, 0x20F7
     f12:	30 91 f8 20 	lds	r19, 0x20F8
     f16:	23 2b       	or	r18, r19
     f18:	41 f4       	brne	.+16     	; 0xf2a <malloc+0xd0>
     f1a:	20 91 02 20 	lds	r18, 0x2002
     f1e:	30 91 03 20 	lds	r19, 0x2003
     f22:	20 93 f7 20 	sts	0x20F7, r18
     f26:	30 93 f8 20 	sts	0x20F8, r19
     f2a:	20 91 00 20 	lds	r18, 0x2000
     f2e:	30 91 01 20 	lds	r19, 0x2001
     f32:	21 15       	cp	r18, r1
     f34:	31 05       	cpc	r19, r1
     f36:	41 f4       	brne	.+16     	; 0xf48 <malloc+0xee>
     f38:	2d b7       	in	r18, 0x3d	; 61
     f3a:	3e b7       	in	r19, 0x3e	; 62
     f3c:	40 91 04 20 	lds	r20, 0x2004
     f40:	50 91 05 20 	lds	r21, 0x2005
     f44:	24 1b       	sub	r18, r20
     f46:	35 0b       	sbc	r19, r21
     f48:	e0 91 f7 20 	lds	r30, 0x20F7
     f4c:	f0 91 f8 20 	lds	r31, 0x20F8
     f50:	e2 17       	cp	r30, r18
     f52:	f3 07       	cpc	r31, r19
     f54:	a0 f4       	brcc	.+40     	; 0xf7e <malloc+0x124>
     f56:	2e 1b       	sub	r18, r30
     f58:	3f 0b       	sbc	r19, r31
     f5a:	28 17       	cp	r18, r24
     f5c:	39 07       	cpc	r19, r25
     f5e:	78 f0       	brcs	.+30     	; 0xf7e <malloc+0x124>
     f60:	ac 01       	movw	r20, r24
     f62:	4e 5f       	subi	r20, 0xFE	; 254
     f64:	5f 4f       	sbci	r21, 0xFF	; 255
     f66:	24 17       	cp	r18, r20
     f68:	35 07       	cpc	r19, r21
     f6a:	48 f0       	brcs	.+18     	; 0xf7e <malloc+0x124>
     f6c:	4e 0f       	add	r20, r30
     f6e:	5f 1f       	adc	r21, r31
     f70:	40 93 f7 20 	sts	0x20F7, r20
     f74:	50 93 f8 20 	sts	0x20F8, r21
     f78:	81 93       	st	Z+, r24
     f7a:	91 93       	st	Z+, r25
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <malloc+0x128>
     f7e:	e0 e0       	ldi	r30, 0x00	; 0
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	cf 01       	movw	r24, r30
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	08 95       	ret

00000f8a <free>:
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	09 f4       	brne	.+2      	; 0xf94 <free+0xa>
     f92:	87 c0       	rjmp	.+270    	; 0x10a2 <free+0x118>
     f94:	fc 01       	movw	r30, r24
     f96:	32 97       	sbiw	r30, 0x02	; 2
     f98:	12 82       	std	Z+2, r1	; 0x02
     f9a:	13 82       	std	Z+3, r1	; 0x03
     f9c:	c0 91 f9 20 	lds	r28, 0x20F9
     fa0:	d0 91 fa 20 	lds	r29, 0x20FA
     fa4:	20 97       	sbiw	r28, 0x00	; 0
     fa6:	81 f4       	brne	.+32     	; 0xfc8 <free+0x3e>
     fa8:	20 81       	ld	r18, Z
     faa:	31 81       	ldd	r19, Z+1	; 0x01
     fac:	28 0f       	add	r18, r24
     fae:	39 1f       	adc	r19, r25
     fb0:	80 91 f7 20 	lds	r24, 0x20F7
     fb4:	90 91 f8 20 	lds	r25, 0x20F8
     fb8:	82 17       	cp	r24, r18
     fba:	93 07       	cpc	r25, r19
     fbc:	79 f5       	brne	.+94     	; 0x101c <free+0x92>
     fbe:	e0 93 f7 20 	sts	0x20F7, r30
     fc2:	f0 93 f8 20 	sts	0x20F8, r31
     fc6:	6d c0       	rjmp	.+218    	; 0x10a2 <free+0x118>
     fc8:	de 01       	movw	r26, r28
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	ae 17       	cp	r26, r30
     fd0:	bf 07       	cpc	r27, r31
     fd2:	50 f4       	brcc	.+20     	; 0xfe8 <free+0x5e>
     fd4:	12 96       	adiw	r26, 0x02	; 2
     fd6:	4d 91       	ld	r20, X+
     fd8:	5c 91       	ld	r21, X
     fda:	13 97       	sbiw	r26, 0x03	; 3
     fdc:	9d 01       	movw	r18, r26
     fde:	41 15       	cp	r20, r1
     fe0:	51 05       	cpc	r21, r1
     fe2:	09 f1       	breq	.+66     	; 0x1026 <free+0x9c>
     fe4:	da 01       	movw	r26, r20
     fe6:	f3 cf       	rjmp	.-26     	; 0xfce <free+0x44>
     fe8:	a2 83       	std	Z+2, r26	; 0x02
     fea:	b3 83       	std	Z+3, r27	; 0x03
     fec:	40 81       	ld	r20, Z
     fee:	51 81       	ldd	r21, Z+1	; 0x01
     ff0:	84 0f       	add	r24, r20
     ff2:	95 1f       	adc	r25, r21
     ff4:	8a 17       	cp	r24, r26
     ff6:	9b 07       	cpc	r25, r27
     ff8:	71 f4       	brne	.+28     	; 0x1016 <free+0x8c>
     ffa:	8d 91       	ld	r24, X+
     ffc:	9c 91       	ld	r25, X
     ffe:	11 97       	sbiw	r26, 0x01	; 1
    1000:	84 0f       	add	r24, r20
    1002:	95 1f       	adc	r25, r21
    1004:	02 96       	adiw	r24, 0x02	; 2
    1006:	80 83       	st	Z, r24
    1008:	91 83       	std	Z+1, r25	; 0x01
    100a:	12 96       	adiw	r26, 0x02	; 2
    100c:	8d 91       	ld	r24, X+
    100e:	9c 91       	ld	r25, X
    1010:	13 97       	sbiw	r26, 0x03	; 3
    1012:	82 83       	std	Z+2, r24	; 0x02
    1014:	93 83       	std	Z+3, r25	; 0x03
    1016:	21 15       	cp	r18, r1
    1018:	31 05       	cpc	r19, r1
    101a:	29 f4       	brne	.+10     	; 0x1026 <free+0x9c>
    101c:	e0 93 f9 20 	sts	0x20F9, r30
    1020:	f0 93 fa 20 	sts	0x20FA, r31
    1024:	3e c0       	rjmp	.+124    	; 0x10a2 <free+0x118>
    1026:	d9 01       	movw	r26, r18
    1028:	12 96       	adiw	r26, 0x02	; 2
    102a:	ed 93       	st	X+, r30
    102c:	fc 93       	st	X, r31
    102e:	13 97       	sbiw	r26, 0x03	; 3
    1030:	4d 91       	ld	r20, X+
    1032:	5d 91       	ld	r21, X+
    1034:	a4 0f       	add	r26, r20
    1036:	b5 1f       	adc	r27, r21
    1038:	ea 17       	cp	r30, r26
    103a:	fb 07       	cpc	r31, r27
    103c:	79 f4       	brne	.+30     	; 0x105c <free+0xd2>
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	84 0f       	add	r24, r20
    1044:	95 1f       	adc	r25, r21
    1046:	02 96       	adiw	r24, 0x02	; 2
    1048:	d9 01       	movw	r26, r18
    104a:	8d 93       	st	X+, r24
    104c:	9c 93       	st	X, r25
    104e:	11 97       	sbiw	r26, 0x01	; 1
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	12 96       	adiw	r26, 0x02	; 2
    1056:	8d 93       	st	X+, r24
    1058:	9c 93       	st	X, r25
    105a:	13 97       	sbiw	r26, 0x03	; 3
    105c:	e0 e0       	ldi	r30, 0x00	; 0
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	9b 81       	ldd	r25, Y+3	; 0x03
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	19 f0       	breq	.+6      	; 0x106e <free+0xe4>
    1068:	fe 01       	movw	r30, r28
    106a:	ec 01       	movw	r28, r24
    106c:	f9 cf       	rjmp	.-14     	; 0x1060 <free+0xd6>
    106e:	ce 01       	movw	r24, r28
    1070:	02 96       	adiw	r24, 0x02	; 2
    1072:	28 81       	ld	r18, Y
    1074:	39 81       	ldd	r19, Y+1	; 0x01
    1076:	82 0f       	add	r24, r18
    1078:	93 1f       	adc	r25, r19
    107a:	20 91 f7 20 	lds	r18, 0x20F7
    107e:	30 91 f8 20 	lds	r19, 0x20F8
    1082:	28 17       	cp	r18, r24
    1084:	39 07       	cpc	r19, r25
    1086:	69 f4       	brne	.+26     	; 0x10a2 <free+0x118>
    1088:	30 97       	sbiw	r30, 0x00	; 0
    108a:	29 f4       	brne	.+10     	; 0x1096 <free+0x10c>
    108c:	10 92 f9 20 	sts	0x20F9, r1
    1090:	10 92 fa 20 	sts	0x20FA, r1
    1094:	02 c0       	rjmp	.+4      	; 0x109a <free+0x110>
    1096:	12 82       	std	Z+2, r1	; 0x02
    1098:	13 82       	std	Z+3, r1	; 0x03
    109a:	c0 93 f7 20 	sts	0x20F7, r28
    109e:	d0 93 f8 20 	sts	0x20F8, r29
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	08 95       	ret

000010a8 <memset>:
    10a8:	dc 01       	movw	r26, r24
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <memset+0x6>
    10ac:	6d 93       	st	X+, r22
    10ae:	41 50       	subi	r20, 0x01	; 1
    10b0:	50 40       	sbci	r21, 0x00	; 0
    10b2:	e0 f7       	brcc	.-8      	; 0x10ac <memset+0x4>
    10b4:	08 95       	ret

000010b6 <strcmp>:
    10b6:	fb 01       	movw	r30, r22
    10b8:	dc 01       	movw	r26, r24
    10ba:	8d 91       	ld	r24, X+
    10bc:	01 90       	ld	r0, Z+
    10be:	80 19       	sub	r24, r0
    10c0:	01 10       	cpse	r0, r1
    10c2:	d9 f3       	breq	.-10     	; 0x10ba <strcmp+0x4>
    10c4:	99 0b       	sbc	r25, r25
    10c6:	08 95       	ret

000010c8 <strncmp>:
    10c8:	fb 01       	movw	r30, r22
    10ca:	dc 01       	movw	r26, r24
    10cc:	41 50       	subi	r20, 0x01	; 1
    10ce:	50 40       	sbci	r21, 0x00	; 0
    10d0:	30 f0       	brcs	.+12     	; 0x10de <strncmp+0x16>
    10d2:	8d 91       	ld	r24, X+
    10d4:	01 90       	ld	r0, Z+
    10d6:	80 19       	sub	r24, r0
    10d8:	19 f4       	brne	.+6      	; 0x10e0 <strncmp+0x18>
    10da:	00 20       	and	r0, r0
    10dc:	b9 f7       	brne	.-18     	; 0x10cc <strncmp+0x4>
    10de:	88 1b       	sub	r24, r24
    10e0:	99 0b       	sbc	r25, r25
    10e2:	08 95       	ret

000010e4 <__do_global_dtors>:
    10e4:	10 e0       	ldi	r17, 0x00	; 0
    10e6:	c0 eb       	ldi	r28, 0xB0	; 176
    10e8:	d0 e0       	ldi	r29, 0x00	; 0
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <__do_global_dtors+0x10>
    10ec:	fe 01       	movw	r30, r28
    10ee:	0e 94 b2 06 	call	0xd64	; 0xd64 <__tablejump__>
    10f2:	22 96       	adiw	r28, 0x02	; 2
    10f4:	c4 3b       	cpi	r28, 0xB4	; 180
    10f6:	d1 07       	cpc	r29, r17
    10f8:	c9 f7       	brne	.-14     	; 0x10ec <__do_global_dtors+0x8>
    10fa:	f8 94       	cli

000010fc <__stop_program>:
    10fc:	ff cf       	rjmp	.-2      	; 0x10fc <__stop_program>
