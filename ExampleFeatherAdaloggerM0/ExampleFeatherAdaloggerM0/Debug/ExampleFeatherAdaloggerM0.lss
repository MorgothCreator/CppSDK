
ExampleFeatherAdaloggerM0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007224  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000013c  20000000  00007224  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000564  20000140  00007368  00010140  2**3
                  ALLOC
  3 .stack        00000104  200006a4  000078cc  00010140  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001013c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010164  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004262b  00000000  00000000  000101bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000070e0  00000000  00000000  000527ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00017114  00000000  00000000  000598ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f50  00000000  00000000  000709de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001260  00000000  00000000  0007192e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020766  00000000  00000000  00072b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001ced7  00000000  00000000  000932f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008b568  00000000  00000000  000b01cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002ef8  00000000  00000000  0013b734  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20008000 	.word	0x20008000
       4:	0000079d 	.word	0x0000079d
       8:	00000799 	.word	0x00000799
       c:	00000799 	.word	0x00000799
	...
      2c:	00000799 	.word	0x00000799
	...
      38:	00000799 	.word	0x00000799
      3c:	0000639d 	.word	0x0000639d
      40:	00000799 	.word	0x00000799
      44:	00000799 	.word	0x00000799
      48:	00000799 	.word	0x00000799
      4c:	00000681 	.word	0x00000681
      50:	00000799 	.word	0x00000799
      54:	00000799 	.word	0x00000799
      58:	00000799 	.word	0x00000799
      5c:	00000799 	.word	0x00000799
      60:	00000799 	.word	0x00000799
      64:	00001241 	.word	0x00001241
      68:	00001251 	.word	0x00001251
      6c:	00001261 	.word	0x00001261
      70:	00001271 	.word	0x00001271
      74:	00001281 	.word	0x00001281
      78:	00001291 	.word	0x00001291
      7c:	00000799 	.word	0x00000799
      80:	00000799 	.word	0x00000799
      84:	00000799 	.word	0x00000799
      88:	00000799 	.word	0x00000799
      8c:	00000799 	.word	0x00000799
      90:	00000799 	.word	0x00000799
	...
      9c:	00000799 	.word	0x00000799
      a0:	00000799 	.word	0x00000799
      a4:	00000799 	.word	0x00000799
      a8:	00000799 	.word	0x00000799
      ac:	00000799 	.word	0x00000799

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000140 	.word	0x20000140
      d0:	00000000 	.word	0x00000000
      d4:	00007224 	.word	0x00007224

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <STACK_SIZE>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <STACK_SIZE+0x4>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <STACK_SIZE+0x8>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <STACK_SIZE+0xc>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00007224 	.word	0x00007224
     104:	20000144 	.word	0x20000144
     108:	00007224 	.word	0x00007224
     10c:	00000000 	.word	0x00000000

00000110 <_i2c_master_wait_for_sync>:
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     110:	6801      	ldr	r1, [r0, #0]
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
     112:	2207      	movs	r2, #7
     114:	69cb      	ldr	r3, [r1, #28]
     116:	421a      	tst	r2, r3
     118:	d1fc      	bne.n	114 <_i2c_master_wait_for_sync+0x4>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     11a:	4770      	bx	lr

0000011c <_i2c_master_address_response>:
     11c:	6803      	ldr	r3, [r0, #0]
     11e:	7e1a      	ldrb	r2, [r3, #24]
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
     120:	0791      	lsls	r1, r2, #30
     122:	d506      	bpl.n	132 <_i2c_master_address_response+0x16>
     124:	2202      	movs	r2, #2

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     126:	761a      	strb	r2, [r3, #24]
     128:	8b5b      	ldrh	r3, [r3, #26]
     12a:	079a      	lsls	r2, r3, #30

	/* Find and set baudrate. */
	tmp_baud = (int32_t)(div_ceil(
     12c:	d50b      	bpl.n	146 <_i2c_master_address_response+0x2a>
     12e:	2041      	movs	r0, #65	; 0x41
     130:	e00c      	b.n	14c <_i2c_master_address_response+0x30>
     132:	8b5a      	ldrh	r2, [r3, #26]
     134:	0751      	lsls	r1, r2, #29
     136:	d508      	bpl.n	14a <_i2c_master_address_response+0x2e>
     138:	6859      	ldr	r1, [r3, #4]
     13a:	22c0      	movs	r2, #192	; 0xc0
     13c:	0292      	lsls	r2, r2, #10
     13e:	430a      	orrs	r2, r1
     140:	605a      	str	r2, [r3, #4]
     142:	2018      	movs	r0, #24
     144:	e002      	b.n	14c <_i2c_master_address_response+0x30>
     146:	2000      	movs	r0, #0
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate))) - 5);
     148:	e000      	b.n	14c <_i2c_master_address_response+0x30>

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
     14a:	2000      	movs	r0, #0
     14c:	4770      	bx	lr
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
     14e:	46c0      	nop			; (mov r8, r8)

00000150 <_i2c_master_wait_for_bus>:
     150:	b530      	push	{r4, r5, lr}
     152:	6802      	ldr	r2, [r0, #0]
     154:	2300      	movs	r3, #0
     156:	2401      	movs	r4, #1
     158:	2502      	movs	r5, #2
     15a:	e004      	b.n	166 <_i2c_master_wait_for_bus+0x16>
     15c:	3301      	adds	r3, #1
     15e:	b29b      	uxth	r3, r3
     160:	8901      	ldrh	r1, [r0, #8]
     162:	4299      	cmp	r1, r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
     164:	d907      	bls.n	176 <_i2c_master_wait_for_bus+0x26>

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     166:	7e11      	ldrb	r1, [r2, #24]
     168:	4221      	tst	r1, r4
	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     16a:	d106      	bne.n	17a <_i2c_master_wait_for_bus+0x2a>
     16c:	7e11      	ldrb	r1, [r2, #24]
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
     16e:	4229      	tst	r1, r5
     170:	d0f4      	beq.n	15c <_i2c_master_wait_for_bus+0xc>
     172:	2000      	movs	r0, #0
     174:	e002      	b.n	17c <_i2c_master_wait_for_bus+0x2c>
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     176:	2012      	movs	r0, #18
     178:	e000      	b.n	17c <_i2c_master_wait_for_bus+0x2c>
     17a:	2000      	movs	r0, #0
     17c:	bd30      	pop	{r4, r5, pc}

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
     17e:	46c0      	nop			; (mov r8, r8)

00000180 <_i2c_master_send_hs_master_code>:
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     180:	b510      	push	{r4, lr}
     182:	6804      	ldr	r4, [r0, #0]
     184:	6862      	ldr	r2, [r4, #4]
     186:	2380      	movs	r3, #128	; 0x80
     188:	02db      	lsls	r3, r3, #11
     18a:	4313      	orrs	r3, r2
     18c:	6063      	str	r3, [r4, #4]
     18e:	6261      	str	r1, [r4, #36]	; 0x24
     190:	4b02      	ldr	r3, [pc, #8]	; (19c <_i2c_master_send_hs_master_code+0x1c>)
     192:	4798      	blx	r3
     194:	2301      	movs	r3, #1
     196:	7623      	strb	r3, [r4, #24]
     198:	bd10      	pop	{r4, pc}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	00000151 	.word	0x00000151

000001a0 <_i2c_master_read_packet>:
     1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1a2:	465f      	mov	r7, fp
     1a4:	4656      	mov	r6, sl
     1a6:	464d      	mov	r5, r9
     1a8:	4644      	mov	r4, r8
     1aa:	b4f0      	push	{r4, r5, r6, r7}
     1ac:	b083      	sub	sp, #12
     1ae:	1c06      	adds	r6, r0, #0
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     1b0:	1c0f      	adds	r7, r1, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1b2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     1b4:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     1b6:	682b      	ldr	r3, [r5, #0]
     1b8:	011b      	lsls	r3, r3, #4
     1ba:	0fdb      	lsrs	r3, r3, #31
     1bc:	4699      	mov	r9, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     1be:	7a4b      	ldrb	r3, [r1, #9]
     1c0:	2b00      	cmp	r3, #0
     1c2:	d002      	beq.n	1ca <_i2c_master_read_packet+0x2a>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     1c4:	7a89      	ldrb	r1, [r1, #10]
     1c6:	4b4a      	ldr	r3, [pc, #296]	; (2f0 <_i2c_master_read_packet+0x150>)
     1c8:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     1ca:	686a      	ldr	r2, [r5, #4]
     1cc:	4b49      	ldr	r3, [pc, #292]	; (2f4 <_i2c_master_read_packet+0x154>)
     1ce:	4013      	ands	r3, r2
     1d0:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     1d2:	7a3b      	ldrb	r3, [r7, #8]
     1d4:	2b00      	cmp	r3, #0
     1d6:	d022      	beq.n	21e <_i2c_master_read_packet+0x7e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     1d8:	7a7a      	ldrb	r2, [r7, #9]
     1da:	0392      	lsls	r2, r2, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     1dc:	883b      	ldrh	r3, [r7, #0]
     1de:	005b      	lsls	r3, r3, #1
     1e0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     1e2:	2280      	movs	r2, #128	; 0x80
     1e4:	0212      	lsls	r2, r2, #8
     1e6:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
     1e8:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     1ea:	1c30      	adds	r0, r6, #0
     1ec:	4b42      	ldr	r3, [pc, #264]	; (2f8 <_i2c_master_read_packet+0x158>)
     1ee:	4798      	blx	r3

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     1f0:	686a      	ldr	r2, [r5, #4]
     1f2:	4b40      	ldr	r3, [pc, #256]	; (2f4 <_i2c_master_read_packet+0x154>)
     1f4:	4013      	ands	r3, r2
     1f6:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
     1f8:	1e03      	subs	r3, r0, #0
		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
     1fa:	d170      	bne.n	2de <_i2c_master_read_packet+0x13e>
			tmp_status = _i2c_master_address_response(module);
     1fc:	1c30      	adds	r0, r6, #0
     1fe:	4b3f      	ldr	r3, [pc, #252]	; (2fc <_i2c_master_read_packet+0x15c>)
     200:	4798      	blx	r3
     202:	1e03      	subs	r3, r0, #0
		}

		if (tmp_status == STATUS_OK) {
     204:	d16b      	bne.n	2de <_i2c_master_read_packet+0x13e>
			/*
			 * Write ADDR[7:0] register to 鈥10 address[9:8] 1鈥
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     206:	7a7b      	ldrb	r3, [r7, #9]
     208:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to 鈥10 address[9:8] 1鈥
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     20a:	2201      	movs	r2, #1
     20c:	4313      	orrs	r3, r2
     20e:	883a      	ldrh	r2, [r7, #0]
     210:	0a12      	lsrs	r2, r2, #8
     212:	2178      	movs	r1, #120	; 0x78
     214:	430a      	orrs	r2, r1
     216:	0052      	lsls	r2, r2, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     218:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to 鈥10 address[9:8] 1鈥
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     21a:	626b      	str	r3, [r5, #36]	; 0x24
     21c:	e007      	b.n	22e <_i2c_master_read_packet+0x8e>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     21e:	883a      	ldrh	r2, [r7, #0]
     220:	0052      	lsls	r2, r2, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     222:	7a7b      	ldrb	r3, [r7, #9]
     224:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     226:	4313      	orrs	r3, r2
     228:	2201      	movs	r2, #1
     22a:	4313      	orrs	r3, r2
     22c:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     22e:	1c30      	adds	r0, r6, #0
     230:	4b31      	ldr	r3, [pc, #196]	; (2f8 <_i2c_master_read_packet+0x158>)
     232:	4798      	blx	r3

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     234:	686a      	ldr	r2, [r5, #4]
     236:	4b2f      	ldr	r3, [pc, #188]	; (2f4 <_i2c_master_read_packet+0x154>)
     238:	4013      	ands	r3, r2
     23a:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     23c:	1e03      	subs	r3, r0, #0
	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     23e:	d14e      	bne.n	2de <_i2c_master_read_packet+0x13e>
		tmp_status = _i2c_master_address_response(module);
     240:	1c30      	adds	r0, r6, #0
     242:	4b2e      	ldr	r3, [pc, #184]	; (2fc <_i2c_master_read_packet+0x15c>)
     244:	4798      	blx	r3
     246:	9001      	str	r0, [sp, #4]
     248:	1e03      	subs	r3, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     24a:	d148      	bne.n	2de <_i2c_master_read_packet+0x13e>
     24c:	3c01      	subs	r4, #1
     24e:	b2a4      	uxth	r4, r4
     250:	2100      	movs	r1, #0
     252:	4688      	mov	r8, r1
		/* Read data buffer. */
		while (tmp_data_length--) {
     254:	4a2a      	ldr	r2, [pc, #168]	; (300 <_i2c_master_read_packet+0x160>)
     256:	4693      	mov	fp, r2
     258:	e026      	b.n	2a8 <_i2c_master_read_packet+0x108>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     25a:	8b6b      	ldrh	r3, [r5, #26]
     25c:	0699      	lsls	r1, r3, #26
     25e:	d53d      	bpl.n	2dc <_i2c_master_read_packet+0x13c>
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (((!sclsm_flag) && (tmp_data_length == 0)) ||
     260:	464a      	mov	r2, r9
     262:	2a00      	cmp	r2, #0
     264:	d102      	bne.n	26c <_i2c_master_read_packet+0xcc>
     266:	2c00      	cmp	r4, #0
     268:	d002      	beq.n	270 <_i2c_master_read_packet+0xd0>
     26a:	e009      	b.n	280 <_i2c_master_read_packet+0xe0>
					((sclsm_flag) && (tmp_data_length == 1))) {
     26c:	2c01      	cmp	r4, #1
     26e:	d107      	bne.n	280 <_i2c_master_read_packet+0xe0>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     270:	686a      	ldr	r2, [r5, #4]
     272:	2380      	movs	r3, #128	; 0x80
     274:	02db      	lsls	r3, r3, #11
     276:	4313      	orrs	r3, r2
     278:	606b      	str	r3, [r5, #4]
     27a:	3c01      	subs	r4, #1
     27c:	b2a4      	uxth	r4, r4
     27e:	e013      	b.n	2a8 <_i2c_master_read_packet+0x108>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
     280:	1c30      	adds	r0, r6, #0
     282:	4b20      	ldr	r3, [pc, #128]	; (304 <_i2c_master_read_packet+0x164>)
     284:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
     286:	4643      	mov	r3, r8
     288:	3301      	adds	r3, #1
     28a:	b29b      	uxth	r3, r3
     28c:	469a      	mov	sl, r3
     28e:	2328      	movs	r3, #40	; 0x28
     290:	5ceb      	ldrb	r3, [r5, r3]
     292:	6879      	ldr	r1, [r7, #4]
     294:	4642      	mov	r2, r8
     296:	548b      	strb	r3, [r1, r2]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     298:	1c30      	adds	r0, r6, #0
     29a:	4b17      	ldr	r3, [pc, #92]	; (2f8 <_i2c_master_read_packet+0x158>)
     29c:	4798      	blx	r3
     29e:	3c01      	subs	r4, #1
     2a0:	b2a4      	uxth	r4, r4
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     2a2:	2800      	cmp	r0, #0
     2a4:	d103      	bne.n	2ae <_i2c_master_read_packet+0x10e>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     2a6:	46d0      	mov	r8, sl
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
     2a8:	455c      	cmp	r4, fp
     2aa:	d1d6      	bne.n	25a <_i2c_master_read_packet+0xba>
     2ac:	e001      	b.n	2b2 <_i2c_master_read_packet+0x112>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     2ae:	46d0      	mov	r8, sl
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     2b0:	9001      	str	r0, [sp, #4]
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     2b2:	7ab3      	ldrb	r3, [r6, #10]
     2b4:	2b00      	cmp	r3, #0
     2b6:	d007      	beq.n	2c8 <_i2c_master_read_packet+0x128>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
     2b8:	1c30      	adds	r0, r6, #0
     2ba:	4b12      	ldr	r3, [pc, #72]	; (304 <_i2c_master_read_packet+0x164>)
     2bc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     2be:	686a      	ldr	r2, [r5, #4]
     2c0:	23c0      	movs	r3, #192	; 0xc0
     2c2:	029b      	lsls	r3, r3, #10
     2c4:	4313      	orrs	r3, r2
     2c6:	606b      	str	r3, [r5, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     2c8:	1c30      	adds	r0, r6, #0
     2ca:	4b0e      	ldr	r3, [pc, #56]	; (304 <_i2c_master_read_packet+0x164>)
     2cc:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
     2ce:	2328      	movs	r3, #40	; 0x28
     2d0:	5cea      	ldrb	r2, [r5, r3]
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	4641      	mov	r1, r8
     2d6:	545a      	strb	r2, [r3, r1]
     2d8:	9b01      	ldr	r3, [sp, #4]
     2da:	e000      	b.n	2de <_i2c_master_read_packet+0x13e>
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     2dc:	2341      	movs	r3, #65	; 0x41
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
     2de:	1c18      	adds	r0, r3, #0
     2e0:	b003      	add	sp, #12
     2e2:	bc3c      	pop	{r2, r3, r4, r5}
     2e4:	4690      	mov	r8, r2
     2e6:	4699      	mov	r9, r3
     2e8:	46a2      	mov	sl, r4
     2ea:	46ab      	mov	fp, r5
     2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	00000181 	.word	0x00000181
     2f4:	fffbffff 	.word	0xfffbffff
     2f8:	00000151 	.word	0x00000151
     2fc:	0000011d 	.word	0x0000011d
     300:	0000ffff 	.word	0x0000ffff
     304:	00000111 	.word	0x00000111

00000308 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     308:	b5f0      	push	{r4, r5, r6, r7, lr}
     30a:	465f      	mov	r7, fp
     30c:	4656      	mov	r6, sl
     30e:	464d      	mov	r5, r9
     310:	4644      	mov	r4, r8
     312:	b4f0      	push	{r4, r5, r6, r7}
     314:	b083      	sub	sp, #12
     316:	1c06      	adds	r6, r0, #0
     318:	1c0f      	adds	r7, r1, #0
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     31a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
     31c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
     31e:	4b32      	ldr	r3, [pc, #200]	; (3e8 <_i2c_master_write_packet+0xe0>)
     320:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
     322:	7a7b      	ldrb	r3, [r7, #9]
     324:	2b00      	cmp	r3, #0
     326:	d003      	beq.n	330 <_i2c_master_write_packet+0x28>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     328:	7ab9      	ldrb	r1, [r7, #10]
     32a:	1c30      	adds	r0, r6, #0
     32c:	4b2f      	ldr	r3, [pc, #188]	; (3ec <_i2c_master_write_packet+0xe4>)
     32e:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     330:	686a      	ldr	r2, [r5, #4]
     332:	4b2f      	ldr	r3, [pc, #188]	; (3f0 <_i2c_master_write_packet+0xe8>)
     334:	4013      	ands	r3, r2
     336:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
     338:	7a3b      	ldrb	r3, [r7, #8]
     33a:	2b00      	cmp	r3, #0
     33c:	d009      	beq.n	352 <_i2c_master_write_packet+0x4a>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     33e:	7a7a      	ldrb	r2, [r7, #9]
     340:	0392      	lsls	r2, r2, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     342:	883b      	ldrh	r3, [r7, #0]
     344:	005b      	lsls	r3, r3, #1
     346:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     348:	2280      	movs	r2, #128	; 0x80
     34a:	0212      	lsls	r2, r2, #8
     34c:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     34e:	626b      	str	r3, [r5, #36]	; 0x24
     350:	e005      	b.n	35e <_i2c_master_write_packet+0x56>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     352:	7a7a      	ldrb	r2, [r7, #9]
     354:	0392      	lsls	r2, r2, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
     356:	883b      	ldrh	r3, [r7, #0]
     358:	005b      	lsls	r3, r3, #1
     35a:	4313      	orrs	r3, r2
     35c:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     35e:	1c30      	adds	r0, r6, #0
     360:	4b24      	ldr	r3, [pc, #144]	; (3f4 <_i2c_master_write_packet+0xec>)
     362:	4798      	blx	r3
     364:	1c03      	adds	r3, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
     366:	2b00      	cmp	r3, #0
     368:	d136      	bne.n	3d8 <_i2c_master_write_packet+0xd0>
		tmp_status = _i2c_master_address_response(module);
     36a:	1c30      	adds	r0, r6, #0
     36c:	4b22      	ldr	r3, [pc, #136]	; (3f8 <_i2c_master_write_packet+0xf0>)
     36e:	4798      	blx	r3
     370:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
     372:	2800      	cmp	r0, #0
     374:	d130      	bne.n	3d8 <_i2c_master_write_packet+0xd0>
     376:	46a0      	mov	r8, r4
     378:	2400      	movs	r4, #0
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     37a:	2320      	movs	r3, #32
     37c:	4699      	mov	r9, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     37e:	4a1a      	ldr	r2, [pc, #104]	; (3e8 <_i2c_master_write_packet+0xe0>)
     380:	4693      	mov	fp, r2
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     382:	4b1c      	ldr	r3, [pc, #112]	; (3f4 <_i2c_master_write_packet+0xec>)
     384:	469a      	mov	sl, r3
     386:	e011      	b.n	3ac <_i2c_master_write_packet+0xa4>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
     388:	8b6b      	ldrh	r3, [r5, #26]
     38a:	464a      	mov	r2, r9
     38c:	4213      	tst	r3, r2
     38e:	d022      	beq.n	3d6 <_i2c_master_write_packet+0xce>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
     390:	1c30      	adds	r0, r6, #0
     392:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
     394:	687b      	ldr	r3, [r7, #4]
     396:	5d1a      	ldrb	r2, [r3, r4]
     398:	2328      	movs	r3, #40	; 0x28
     39a:	54ea      	strb	r2, [r5, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     39c:	1c30      	adds	r0, r6, #0
     39e:	47d0      	blx	sl

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
     3a0:	2800      	cmp	r0, #0
     3a2:	d106      	bne.n	3b2 <_i2c_master_write_packet+0xaa>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     3a4:	8b6b      	ldrh	r3, [r5, #26]
     3a6:	3401      	adds	r4, #1
     3a8:	075a      	lsls	r2, r3, #29
     3aa:	d404      	bmi.n	3b6 <_i2c_master_write_packet+0xae>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
     3ac:	4544      	cmp	r4, r8
     3ae:	d1eb      	bne.n	388 <_i2c_master_write_packet+0x80>
     3b0:	e003      	b.n	3ba <_i2c_master_write_packet+0xb2>
			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
     3b2:	9001      	str	r0, [sp, #4]
     3b4:	e001      	b.n	3ba <_i2c_master_write_packet+0xb2>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
     3b6:	231e      	movs	r3, #30
     3b8:	9301      	str	r3, [sp, #4]
				break;
			}
		}

		if (module->send_stop) {
     3ba:	7ab3      	ldrb	r3, [r6, #10]
     3bc:	9801      	ldr	r0, [sp, #4]
     3be:	2b00      	cmp	r3, #0
     3c0:	d00a      	beq.n	3d8 <_i2c_master_write_packet+0xd0>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
     3c2:	1c30      	adds	r0, r6, #0
     3c4:	4b08      	ldr	r3, [pc, #32]	; (3e8 <_i2c_master_write_packet+0xe0>)
     3c6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     3c8:	686a      	ldr	r2, [r5, #4]
     3ca:	23c0      	movs	r3, #192	; 0xc0
     3cc:	029b      	lsls	r3, r3, #10
     3ce:	4313      	orrs	r3, r2
     3d0:	606b      	str	r3, [r5, #4]
     3d2:	9801      	ldr	r0, [sp, #4]
     3d4:	e000      	b.n	3d8 <_i2c_master_write_packet+0xd0>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
     3d6:	2041      	movs	r0, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
     3d8:	b003      	add	sp, #12
     3da:	bc3c      	pop	{r2, r3, r4, r5}
     3dc:	4690      	mov	r8, r2
     3de:	4699      	mov	r9, r3
     3e0:	46a2      	mov	sl, r4
     3e2:	46ab      	mov	fp, r5
     3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	00000111 	.word	0x00000111
     3ec:	00000181 	.word	0x00000181
     3f0:	fffbffff 	.word	0xfffbffff
     3f4:	00000151 	.word	0x00000151
     3f8:	0000011d 	.word	0x0000011d

000003fc <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     3fc:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     3fe:	2301      	movs	r3, #1
     400:	7283      	strb	r3, [r0, #10]

	return _i2c_master_read_packet(module, packet);
     402:	4b01      	ldr	r3, [pc, #4]	; (408 <i2c_master_read_packet_wait+0xc>)
     404:	4798      	blx	r3
}
     406:	bd08      	pop	{r3, pc}
     408:	000001a1 	.word	0x000001a1

0000040c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     40c:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
     40e:	2301      	movs	r3, #1
     410:	7283      	strb	r3, [r0, #10]

	return _i2c_master_write_packet(module, packet);
     412:	4b01      	ldr	r3, [pc, #4]	; (418 <i2c_master_write_packet_wait+0xc>)
     414:	4798      	blx	r3
}
     416:	bd08      	pop	{r3, pc}
     418:	00000309 	.word	0x00000309

0000041c <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     41c:	b508      	push	{r3, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
     41e:	2300      	movs	r3, #0
     420:	7283      	strb	r3, [r0, #10]

	return _i2c_master_write_packet(module, packet);
     422:	4b01      	ldr	r3, [pc, #4]	; (428 <i2c_master_write_packet_wait_no_stop+0xc>)
     424:	4798      	blx	r3
}
     426:	bd08      	pop	{r3, pc}
     428:	00000309 	.word	0x00000309

0000042c <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     42c:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     42e:	7a98      	ldrb	r0, [r3, #10]
     430:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
     432:	4770      	bx	lr

00000434 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     434:	b570      	push	{r4, r5, r6, lr}
     436:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     438:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     43a:	2208      	movs	r2, #8
     43c:	4b05      	ldr	r3, [pc, #20]	; (454 <rtc_count_enable+0x20>)
     43e:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     440:	4d05      	ldr	r5, [pc, #20]	; (458 <rtc_count_enable+0x24>)
     442:	1c20      	adds	r0, r4, #0
     444:	47a8      	blx	r5
     446:	2800      	cmp	r0, #0
     448:	d1fb      	bne.n	442 <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     44a:	8832      	ldrh	r2, [r6, #0]
     44c:	2302      	movs	r3, #2
     44e:	4313      	orrs	r3, r2
     450:	8033      	strh	r3, [r6, #0]
}
     452:	bd70      	pop	{r4, r5, r6, pc}
     454:	e000e100 	.word	0xe000e100
     458:	0000042d 	.word	0x0000042d

0000045c <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     45c:	b570      	push	{r4, r5, r6, lr}
     45e:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     460:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     462:	2108      	movs	r1, #8
     464:	2380      	movs	r3, #128	; 0x80
     466:	4a06      	ldr	r2, [pc, #24]	; (480 <rtc_count_disable+0x24>)
     468:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     46a:	4d06      	ldr	r5, [pc, #24]	; (484 <rtc_count_disable+0x28>)
     46c:	1c20      	adds	r0, r4, #0
     46e:	47a8      	blx	r5
     470:	2800      	cmp	r0, #0
     472:	d1fb      	bne.n	46c <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     474:	8833      	ldrh	r3, [r6, #0]
     476:	2202      	movs	r2, #2
     478:	4393      	bics	r3, r2
     47a:	8033      	strh	r3, [r6, #0]
}
     47c:	bd70      	pop	{r4, r5, r6, pc}
     47e:	46c0      	nop			; (mov r8, r8)
     480:	e000e100 	.word	0xe000e100
     484:	0000042d 	.word	0x0000042d

00000488 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     488:	b570      	push	{r4, r5, r6, lr}
     48a:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     48c:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     48e:	4b07      	ldr	r3, [pc, #28]	; (4ac <rtc_count_reset+0x24>)
     490:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     492:	2300      	movs	r3, #0
     494:	82a3      	strh	r3, [r4, #20]
	module->enabled_callback    = 0;
     496:	82e3      	strh	r3, [r4, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     498:	4d05      	ldr	r5, [pc, #20]	; (4b0 <rtc_count_reset+0x28>)
     49a:	1c20      	adds	r0, r4, #0
     49c:	47a8      	blx	r5
     49e:	2800      	cmp	r0, #0
     4a0:	d1fb      	bne.n	49a <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     4a2:	8832      	ldrh	r2, [r6, #0]
     4a4:	2301      	movs	r3, #1
     4a6:	4313      	orrs	r3, r2
     4a8:	8033      	strh	r3, [r6, #0]
}
     4aa:	bd70      	pop	{r4, r5, r6, pc}
     4ac:	0000045d 	.word	0x0000045d
     4b0:	0000042d 	.word	0x0000042d

000004b4 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4b6:	4647      	mov	r7, r8
     4b8:	b480      	push	{r7}
     4ba:	1c04      	adds	r4, r0, #0
     4bc:	1c0f      	adds	r7, r1, #0
     4be:	1c16      	adds	r6, r2, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     4c0:	6803      	ldr	r3, [r0, #0]
     4c2:	4698      	mov	r8, r3

	while (rtc_count_is_syncing(module)) {
     4c4:	4d11      	ldr	r5, [pc, #68]	; (50c <rtc_count_set_compare+0x58>)
     4c6:	1c20      	adds	r0, r4, #0
     4c8:	47a8      	blx	r5
     4ca:	2800      	cmp	r0, #0
     4cc:	d1fb      	bne.n	4c6 <rtc_count_set_compare+0x12>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     4ce:	7923      	ldrb	r3, [r4, #4]
     4d0:	2b00      	cmp	r3, #0
     4d2:	d00b      	beq.n	4ec <rtc_count_set_compare+0x38>

			break;

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     4d4:	201a      	movs	r0, #26
	while (rtc_count_is_syncing(module)) {
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     4d6:	2b01      	cmp	r3, #1
     4d8:	d115      	bne.n	506 <rtc_count_set_compare+0x52>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
     4da:	2017      	movs	r0, #23

	/* Set compare values based on operation mode. */
	switch (module->mode) {
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     4dc:	2e01      	cmp	r6, #1
     4de:	d812      	bhi.n	506 <rtc_count_set_compare+0x52>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     4e0:	3606      	adds	r6, #6
     4e2:	00b6      	lsls	r6, r6, #2
     4e4:	4643      	mov	r3, r8
     4e6:	50f7      	str	r7, [r6, r3]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     4e8:	2000      	movs	r0, #0
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;

			break;
     4ea:	e00c      	b.n	506 <rtc_count_set_compare+0x52>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
				return STATUS_ERR_INVALID_ARG;
     4ec:	2017      	movs	r0, #23

			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     4ee:	2e02      	cmp	r6, #2
     4f0:	d809      	bhi.n	506 <rtc_count_set_compare+0x52>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     4f2:	4b07      	ldr	r3, [pc, #28]	; (510 <rtc_count_set_compare+0x5c>)
     4f4:	429f      	cmp	r7, r3
     4f6:	d806      	bhi.n	506 <rtc_count_set_compare+0x52>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     4f8:	b2bf      	uxth	r7, r7
     4fa:	360c      	adds	r6, #12
     4fc:	0076      	lsls	r6, r6, #1
     4fe:	4643      	mov	r3, r8
     500:	52f7      	strh	r7, [r6, r3]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     502:	2000      	movs	r0, #0
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;

			break;
     504:	e7ff      	b.n	506 <rtc_count_set_compare+0x52>
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
     506:	bc04      	pop	{r2}
     508:	4690      	mov	r8, r2
     50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     50c:	0000042d 	.word	0x0000042d
     510:	0000ffff 	.word	0x0000ffff

00000514 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     514:	b5f0      	push	{r4, r5, r6, r7, lr}
     516:	b083      	sub	sp, #12
     518:	1c04      	adds	r4, r0, #0
     51a:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     51c:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     51e:	4b2f      	ldr	r3, [pc, #188]	; (5dc <rtc_count_init+0xc8>)
     520:	6999      	ldr	r1, [r3, #24]
     522:	2220      	movs	r2, #32
     524:	430a      	orrs	r2, r1
     526:	619a      	str	r2, [r3, #24]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     528:	a901      	add	r1, sp, #4
     52a:	2302      	movs	r3, #2
     52c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     52e:	2004      	movs	r0, #4
     530:	4b2b      	ldr	r3, [pc, #172]	; (5e0 <rtc_count_init+0xcc>)
     532:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     534:	2004      	movs	r0, #4
     536:	4b2b      	ldr	r3, [pc, #172]	; (5e4 <rtc_count_init+0xd0>)
     538:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     53a:	1c20      	adds	r0, r4, #0
     53c:	4b2a      	ldr	r3, [pc, #168]	; (5e8 <rtc_count_init+0xd4>)
     53e:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     540:	78b3      	ldrb	r3, [r6, #2]
     542:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     544:	7933      	ldrb	r3, [r6, #4]
     546:	7163      	strb	r3, [r4, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     548:	4b28      	ldr	r3, [pc, #160]	; (5ec <rtc_count_init+0xd8>)
     54a:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     54c:	6827      	ldr	r7, [r4, #0]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     54e:	8833      	ldrh	r3, [r6, #0]
     550:	803b      	strh	r3, [r7, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     552:	78b3      	ldrb	r3, [r6, #2]
     554:	2b00      	cmp	r3, #0
     556:	d017      	beq.n	588 <rtc_count_init+0x74>
						(enum rtc_count_compare)i);
			}
			break;
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     558:	2017      	movs	r0, #23
	Rtc *const rtc_module = module->hw;

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     55a:	2b01      	cmp	r3, #1
     55c:	d13c      	bne.n	5d8 <rtc_count_init+0xc4>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     55e:	883b      	ldrh	r3, [r7, #0]
     560:	b29b      	uxth	r3, r3
     562:	803b      	strh	r3, [r7, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     564:	78f3      	ldrb	r3, [r6, #3]
     566:	2b00      	cmp	r3, #0
     568:	d034      	beq.n	5d4 <rtc_count_init+0xc0>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     56a:	883a      	ldrh	r2, [r7, #0]
     56c:	2380      	movs	r3, #128	; 0x80
     56e:	4313      	orrs	r3, r2
     570:	803b      	strh	r3, [r7, #0]
     572:	e02f      	b.n	5d4 <rtc_count_init+0xc0>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
				while (rtc_count_is_syncing(module)) {
     574:	1c20      	adds	r0, r4, #0
     576:	47a8      	blx	r5
     578:	2800      	cmp	r0, #0
     57a:	d1fb      	bne.n	574 <rtc_count_init+0x60>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     57c:	1c20      	adds	r0, r4, #0
     57e:	68b1      	ldr	r1, [r6, #8]
     580:	2200      	movs	r2, #0
     582:	4b1b      	ldr	r3, [pc, #108]	; (5f0 <rtc_count_init+0xdc>)
     584:	4798      	blx	r3
     586:	e01b      	b.n	5c0 <rtc_count_init+0xac>
			}
			break;

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     588:	883a      	ldrh	r2, [r7, #0]
     58a:	2304      	movs	r3, #4
     58c:	4313      	orrs	r3, r2
     58e:	803b      	strh	r3, [r7, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     590:	78f3      	ldrb	r3, [r6, #3]
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     592:	2017      	movs	r0, #23
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     594:	2b00      	cmp	r3, #0
     596:	d11f      	bne.n	5d8 <rtc_count_init+0xc4>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
     598:	4d16      	ldr	r5, [pc, #88]	; (5f4 <rtc_count_init+0xe0>)
     59a:	1c20      	adds	r0, r4, #0
     59c:	47a8      	blx	r5
     59e:	2800      	cmp	r0, #0
     5a0:	d1fb      	bne.n	59a <rtc_count_init+0x86>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     5a2:	1c20      	adds	r0, r4, #0
     5a4:	68b1      	ldr	r1, [r6, #8]
     5a6:	2200      	movs	r2, #0
     5a8:	4b11      	ldr	r3, [pc, #68]	; (5f0 <rtc_count_init+0xdc>)
     5aa:	4798      	blx	r3
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
     5ac:	4d11      	ldr	r5, [pc, #68]	; (5f4 <rtc_count_init+0xe0>)
     5ae:	1c20      	adds	r0, r4, #0
     5b0:	47a8      	blx	r5
     5b2:	2800      	cmp	r0, #0
     5b4:	d1fb      	bne.n	5ae <rtc_count_init+0x9a>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     5b6:	1c20      	adds	r0, r4, #0
     5b8:	68f1      	ldr	r1, [r6, #12]
     5ba:	2201      	movs	r2, #1
     5bc:	4b0c      	ldr	r3, [pc, #48]	; (5f0 <rtc_count_init+0xdc>)
     5be:	4798      	blx	r3
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     5c0:	7933      	ldrb	r3, [r6, #4]
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     5c2:	2000      	movs	r0, #0
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     5c4:	2b00      	cmp	r3, #0
     5c6:	d007      	beq.n	5d8 <rtc_count_init+0xc4>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     5c8:	887a      	ldrh	r2, [r7, #2]
     5ca:	2380      	movs	r3, #128	; 0x80
     5cc:	01db      	lsls	r3, r3, #7
     5ce:	4313      	orrs	r3, r2
     5d0:	807b      	strh	r3, [r7, #2]
     5d2:	e001      	b.n	5d8 <rtc_count_init+0xc4>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
				while (rtc_count_is_syncing(module)) {
     5d4:	4d07      	ldr	r5, [pc, #28]	; (5f4 <rtc_count_init+0xe0>)
     5d6:	e7cd      	b.n	574 <rtc_count_init+0x60>
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
}
     5d8:	b003      	add	sp, #12
     5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5dc:	40000400 	.word	0x40000400
     5e0:	00000c61 	.word	0x00000c61
     5e4:	00000bd5 	.word	0x00000bd5
     5e8:	00000489 	.word	0x00000489
     5ec:	20000684 	.word	0x20000684
     5f0:	000004b5 	.word	0x000004b5
     5f4:	0000042d 	.word	0x0000042d

000005f8 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode.
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5fa:	1c04      	adds	r4, r0, #0
     5fc:	1c0f      	adds	r7, r1, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     5fe:	6806      	ldr	r6, [r0, #0]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     600:	7903      	ldrb	r3, [r0, #4]
		return STATUS_ERR_UNSUPPORTED_DEV;
     602:	2015      	movs	r0, #21
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     604:	2b00      	cmp	r3, #0
     606:	d105      	bne.n	614 <rtc_count_set_period+0x1c>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}

	while (rtc_count_is_syncing(module)) {
     608:	4d03      	ldr	r5, [pc, #12]	; (618 <rtc_count_set_period+0x20>)
     60a:	1c20      	adds	r0, r4, #0
     60c:	47a8      	blx	r5
     60e:	2800      	cmp	r0, #0
     610:	d1fb      	bne.n	60a <rtc_count_set_period+0x12>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     612:	82b7      	strh	r7, [r6, #20]

	return STATUS_OK;
}
     614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     616:	46c0      	nop			; (mov r8, r8)
     618:	0000042d 	.word	0x0000042d

0000061c <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     61c:	2a02      	cmp	r2, #2
     61e:	d00b      	beq.n	638 <rtc_count_register_callback+0x1c>
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     620:	7903      	ldrb	r3, [r0, #4]
     622:	2b00      	cmp	r3, #0
     624:	d005      	beq.n	632 <rtc_count_register_callback+0x16>
     626:	2b01      	cmp	r3, #1
     628:	d112      	bne.n	650 <rtc_count_register_callback+0x34>
     62a:	2317      	movs	r3, #23
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP32) {
     62c:	2a01      	cmp	r2, #1
     62e:	d810      	bhi.n	652 <rtc_count_register_callback+0x36>
     630:	e002      	b.n	638 <rtc_count_register_callback+0x1c>
     632:	2317      	movs	r3, #23
			}

			break;
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP16) {
     634:	2a02      	cmp	r2, #2
     636:	d80c      	bhi.n	652 <rtc_count_register_callback+0x36>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     638:	1c93      	adds	r3, r2, #2
     63a:	009b      	lsls	r3, r3, #2
     63c:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     63e:	8a83      	ldrh	r3, [r0, #20]
     640:	2101      	movs	r1, #1
     642:	4091      	lsls	r1, r2
     644:	1c0a      	adds	r2, r1, #0
     646:	431a      	orrs	r2, r3
     648:	b292      	uxth	r2, r2
     64a:	8282      	strh	r2, [r0, #20]
     64c:	2300      	movs	r3, #0
     64e:	e000      	b.n	652 <rtc_count_register_callback+0x36>
			if (callback_type > RTC_NUM_OF_COMP16) {
				status = STATUS_ERR_INVALID_ARG;
			}
			break;
		default:
			status = STATUS_ERR_INVALID_ARG;
     650:	2317      	movs	r3, #23
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
	}

	return status;
}
     652:	1c18      	adds	r0, r3, #0
     654:	4770      	bx	lr
     656:	46c0      	nop			; (mov r8, r8)

00000658 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     658:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     65a:	6803      	ldr	r3, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     65c:	2902      	cmp	r1, #2
     65e:	d102      	bne.n	666 <rtc_count_enable_callback+0xe>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     660:	2280      	movs	r2, #128	; 0x80
     662:	71da      	strb	r2, [r3, #7]
     664:	e004      	b.n	670 <rtc_count_enable_callback+0x18>
	} else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << callback_type);
     666:	2201      	movs	r2, #1
     668:	408a      	lsls	r2, r1
     66a:	2403      	movs	r4, #3
     66c:	4022      	ands	r2, r4
     66e:	71da      	strb	r2, [r3, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     670:	8ac3      	ldrh	r3, [r0, #22]
     672:	2201      	movs	r2, #1
     674:	408a      	lsls	r2, r1
     676:	1c11      	adds	r1, r2, #0
     678:	4319      	orrs	r1, r3
     67a:	b289      	uxth	r1, r1
     67c:	82c1      	strh	r1, [r0, #22]
}
     67e:	bd10      	pop	{r4, pc}

00000680 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     680:	b510      	push	{r4, lr}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
     682:	4b12      	ldr	r3, [pc, #72]	; (6cc <RTC_Handler+0x4c>)
     684:	681b      	ldr	r3, [r3, #0]

	Rtc *const rtc_module = module->hw;
     686:	681c      	ldr	r4, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     688:	8ada      	ldrh	r2, [r3, #22]
	callback_mask &= module->registered_callback;
     68a:	8a99      	ldrh	r1, [r3, #20]
     68c:	1c08      	adds	r0, r1, #0
     68e:	4010      	ands	r0, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     690:	7a22      	ldrb	r2, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     692:	79e1      	ldrb	r1, [r4, #7]
     694:	400a      	ands	r2, r1

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     696:	09d1      	lsrs	r1, r2, #7
     698:	d006      	beq.n	6a8 <RTC_Handler+0x28>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     69a:	0741      	lsls	r1, r0, #29
     69c:	d501      	bpl.n	6a2 <RTC_Handler+0x22>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     69e:	691b      	ldr	r3, [r3, #16]
     6a0:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     6a2:	2380      	movs	r3, #128	; 0x80
     6a4:	7223      	strb	r3, [r4, #8]
     6a6:	e010      	b.n	6ca <RTC_Handler+0x4a>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     6a8:	07d1      	lsls	r1, r2, #31
     6aa:	d506      	bpl.n	6ba <RTC_Handler+0x3a>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     6ac:	07c2      	lsls	r2, r0, #31
     6ae:	d501      	bpl.n	6b4 <RTC_Handler+0x34>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     6b0:	689b      	ldr	r3, [r3, #8]
     6b2:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     6b4:	2301      	movs	r3, #1
     6b6:	7223      	strb	r3, [r4, #8]
     6b8:	e007      	b.n	6ca <RTC_Handler+0x4a>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     6ba:	0791      	lsls	r1, r2, #30
     6bc:	d505      	bpl.n	6ca <RTC_Handler+0x4a>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     6be:	0782      	lsls	r2, r0, #30
     6c0:	d501      	bpl.n	6c6 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     6c2:	68db      	ldr	r3, [r3, #12]
     6c4:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     6c6:	2302      	movs	r3, #2
     6c8:	7223      	strb	r3, [r4, #8]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
     6ca:	bd10      	pop	{r4, pc}
     6cc:	20000684 	.word	0x20000684

000006d0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6d2:	465f      	mov	r7, fp
     6d4:	4656      	mov	r6, sl
     6d6:	464d      	mov	r5, r9
     6d8:	4644      	mov	r4, r8
     6da:	b4f0      	push	{r4, r5, r6, r7}
     6dc:	1c06      	adds	r6, r0, #0
     6de:	468b      	mov	fp, r1
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     6e0:	2017      	movs	r0, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
     6e2:	2a00      	cmp	r2, #0
     6e4:	d04f      	beq.n	786 <spi_write_buffer_wait+0xb6>
     6e6:	e044      	b.n	772 <spi_write_buffer_wait+0xa2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6e8:	6832      	ldr	r2, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     6ea:	7e13      	ldrb	r3, [r2, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
     6ec:	4223      	tst	r3, r4
     6ee:	d0fc      	beq.n	6ea <spi_write_buffer_wait+0x1a>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     6f0:	1c43      	adds	r3, r0, #1
     6f2:	b29b      	uxth	r3, r3
     6f4:	469a      	mov	sl, r3
     6f6:	4659      	mov	r1, fp
     6f8:	5c09      	ldrb	r1, [r1, r0]
     6fa:	4689      	mov	r9, r1

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     6fc:	79b3      	ldrb	r3, [r6, #6]
     6fe:	2b01      	cmp	r3, #1
     700:	d001      	beq.n	706 <spi_write_buffer_wait+0x36>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     702:	4650      	mov	r0, sl
     704:	e007      	b.n	716 <spi_write_buffer_wait+0x46>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     706:	3002      	adds	r0, #2
     708:	b280      	uxth	r0, r0
     70a:	465b      	mov	r3, fp
     70c:	4453      	add	r3, sl
     70e:	781b      	ldrb	r3, [r3, #0]
     710:	021b      	lsls	r3, r3, #8
     712:	4319      	orrs	r1, r3
     714:	4689      	mov	r9, r1
     716:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     718:	4223      	tst	r3, r4
     71a:	d003      	beq.n	724 <spi_write_buffer_wait+0x54>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     71c:	464b      	mov	r3, r9
     71e:	05db      	lsls	r3, r3, #23
     720:	0ddb      	lsrs	r3, r3, #23
     722:	6293      	str	r3, [r2, #40]	; 0x28
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
     724:	79f3      	ldrb	r3, [r6, #7]
     726:	2b00      	cmp	r3, #0
     728:	d014      	beq.n	754 <spi_write_buffer_wait+0x84>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     72a:	6832      	ldr	r2, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     72c:	7e13      	ldrb	r3, [r2, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
     72e:	422b      	tst	r3, r5
     730:	d0fc      	beq.n	72c <spi_write_buffer_wait+0x5c>
     732:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     734:	422b      	tst	r3, r5
     736:	d00d      	beq.n	754 <spi_write_buffer_wait+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     738:	8b53      	ldrh	r3, [r2, #26]
     73a:	422b      	tst	r3, r5
     73c:	d004      	beq.n	748 <spi_write_buffer_wait+0x78>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     73e:	8b51      	ldrh	r1, [r2, #26]
     740:	4643      	mov	r3, r8
     742:	4319      	orrs	r1, r3
     744:	b28b      	uxth	r3, r1
     746:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     748:	79b3      	ldrb	r3, [r6, #6]
     74a:	2b01      	cmp	r3, #1
     74c:	d101      	bne.n	752 <spi_write_buffer_wait+0x82>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     74e:	6a93      	ldr	r3, [r2, #40]	; 0x28
     750:	e000      	b.n	754 <spi_write_buffer_wait+0x84>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     752:	6a93      	ldr	r3, [r2, #40]	; 0x28

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
     754:	3f01      	subs	r7, #1
     756:	b2bf      	uxth	r7, r7
     758:	4567      	cmp	r7, ip
     75a:	d1c5      	bne.n	6e8 <spi_write_buffer_wait+0x18>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     75c:	7973      	ldrb	r3, [r6, #5]
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     75e:	2000      	movs	r0, #0
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
     760:	2b01      	cmp	r3, #1
     762:	d110      	bne.n	786 <spi_write_buffer_wait+0xb6>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     764:	6831      	ldr	r1, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     766:	2202      	movs	r2, #2
     768:	7e0b      	ldrb	r3, [r1, #24]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
     76a:	4213      	tst	r3, r2
     76c:	d0fc      	beq.n	768 <spi_write_buffer_wait+0x98>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
     76e:	2000      	movs	r0, #0
     770:	e009      	b.n	786 <spi_write_buffer_wait+0xb6>

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
     772:	3a01      	subs	r2, #1
     774:	b297      	uxth	r7, r2
     776:	2000      	movs	r0, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     778:	2401      	movs	r4, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     77a:	2504      	movs	r5, #4

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     77c:	2104      	movs	r1, #4
     77e:	4688      	mov	r8, r1
     780:	4b04      	ldr	r3, [pc, #16]	; (794 <spi_write_buffer_wait+0xc4>)
     782:	469c      	mov	ip, r3
     784:	e7b0      	b.n	6e8 <spi_write_buffer_wait+0x18>
			}
		}
	}
#  endif
	return STATUS_OK;
}
     786:	bc3c      	pop	{r2, r3, r4, r5}
     788:	4690      	mov	r8, r2
     78a:	4699      	mov	r9, r3
     78c:	46a2      	mov	sl, r4
     78e:	46ab      	mov	fp, r5
     790:	bdf0      	pop	{r4, r5, r6, r7, pc}
     792:	46c0      	nop			; (mov r8, r8)
     794:	0000ffff 	.word	0x0000ffff

00000798 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     798:	e7fe      	b.n	798 <Dummy_Handler>
     79a:	46c0      	nop			; (mov r8, r8)

0000079c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     79c:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     79e:	4b19      	ldr	r3, [pc, #100]	; (804 <Reset_Handler+0x68>)
     7a0:	4a19      	ldr	r2, [pc, #100]	; (808 <Reset_Handler+0x6c>)
     7a2:	429a      	cmp	r2, r3
     7a4:	d003      	beq.n	7ae <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     7a6:	4b19      	ldr	r3, [pc, #100]	; (80c <Reset_Handler+0x70>)
     7a8:	4a16      	ldr	r2, [pc, #88]	; (804 <Reset_Handler+0x68>)
     7aa:	429a      	cmp	r2, r3
     7ac:	d304      	bcc.n	7b8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     7ae:	4b18      	ldr	r3, [pc, #96]	; (810 <Reset_Handler+0x74>)
     7b0:	4a18      	ldr	r2, [pc, #96]	; (814 <Reset_Handler+0x78>)
     7b2:	429a      	cmp	r2, r3
     7b4:	d310      	bcc.n	7d8 <Reset_Handler+0x3c>
     7b6:	e01b      	b.n	7f0 <Reset_Handler+0x54>
     7b8:	4b17      	ldr	r3, [pc, #92]	; (818 <Reset_Handler+0x7c>)
     7ba:	4814      	ldr	r0, [pc, #80]	; (80c <Reset_Handler+0x70>)
     7bc:	3003      	adds	r0, #3
     7be:	1ac0      	subs	r0, r0, r3
     7c0:	0880      	lsrs	r0, r0, #2
     7c2:	3001      	adds	r0, #1
     7c4:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     7c6:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
     7c8:	490e      	ldr	r1, [pc, #56]	; (804 <Reset_Handler+0x68>)
     7ca:	4a0f      	ldr	r2, [pc, #60]	; (808 <Reset_Handler+0x6c>)
     7cc:	58d4      	ldr	r4, [r2, r3]
     7ce:	50cc      	str	r4, [r1, r3]
     7d0:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     7d2:	4283      	cmp	r3, r0
     7d4:	d1fa      	bne.n	7cc <Reset_Handler+0x30>
     7d6:	e7ea      	b.n	7ae <Reset_Handler+0x12>
     7d8:	4b0e      	ldr	r3, [pc, #56]	; (814 <Reset_Handler+0x78>)
     7da:	1d1a      	adds	r2, r3, #4
     7dc:	490c      	ldr	r1, [pc, #48]	; (810 <Reset_Handler+0x74>)
     7de:	3103      	adds	r1, #3
     7e0:	1a89      	subs	r1, r1, r2
     7e2:	0889      	lsrs	r1, r1, #2
     7e4:	0089      	lsls	r1, r1, #2
     7e6:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
     7e8:	2100      	movs	r1, #0
     7ea:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     7ec:	4293      	cmp	r3, r2
     7ee:	d1fc      	bne.n	7ea <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     7f0:	4b0a      	ldr	r3, [pc, #40]	; (81c <Reset_Handler+0x80>)
     7f2:	21ff      	movs	r1, #255	; 0xff
     7f4:	4a0a      	ldr	r2, [pc, #40]	; (820 <Reset_Handler+0x84>)
     7f6:	438a      	bics	r2, r1
     7f8:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
     7fa:	4b0a      	ldr	r3, [pc, #40]	; (824 <Reset_Handler+0x88>)
     7fc:	4798      	blx	r3

        /* Branch to main function */
        main();
     7fe:	4b0a      	ldr	r3, [pc, #40]	; (828 <Reset_Handler+0x8c>)
     800:	4798      	blx	r3
     802:	e7fe      	b.n	802 <Reset_Handler+0x66>
     804:	20000000 	.word	0x20000000
     808:	00007224 	.word	0x00007224
     80c:	2000013c 	.word	0x2000013c
     810:	200006a4 	.word	0x200006a4
     814:	20000140 	.word	0x20000140
     818:	20000004 	.word	0x20000004
     81c:	e000ed00 	.word	0xe000ed00
     820:	00000000 	.word	0x00000000
     824:	0000657d 	.word	0x0000657d
     828:	00001829 	.word	0x00001829

0000082c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     82c:	b508      	push	{r3, lr}
	switch (clock_source) {
     82e:	2808      	cmp	r0, #8
     830:	d834      	bhi.n	89c <system_clock_source_get_hz+0x70>
     832:	0080      	lsls	r0, r0, #2
     834:	4b1b      	ldr	r3, [pc, #108]	; (8a4 <system_clock_source_get_hz+0x78>)
     836:	581b      	ldr	r3, [r3, r0]
     838:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     83a:	2080      	movs	r0, #128	; 0x80
     83c:	0200      	lsls	r0, r0, #8
     83e:	e030      	b.n	8a2 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     840:	4b19      	ldr	r3, [pc, #100]	; (8a8 <system_clock_source_get_hz+0x7c>)
     842:	6918      	ldr	r0, [r3, #16]
     844:	e02d      	b.n	8a2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     846:	4b19      	ldr	r3, [pc, #100]	; (8ac <system_clock_source_get_hz+0x80>)
     848:	6a18      	ldr	r0, [r3, #32]
     84a:	0580      	lsls	r0, r0, #22
     84c:	0f80      	lsrs	r0, r0, #30
     84e:	4b18      	ldr	r3, [pc, #96]	; (8b0 <system_clock_source_get_hz+0x84>)
     850:	40c3      	lsrs	r3, r0
     852:	1c18      	adds	r0, r3, #0
     854:	e025      	b.n	8a2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     856:	4b14      	ldr	r3, [pc, #80]	; (8a8 <system_clock_source_get_hz+0x7c>)
     858:	6958      	ldr	r0, [r3, #20]
     85a:	e022      	b.n	8a2 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     85c:	4b12      	ldr	r3, [pc, #72]	; (8a8 <system_clock_source_get_hz+0x7c>)
     85e:	681b      	ldr	r3, [r3, #0]
     860:	2002      	movs	r0, #2
     862:	4018      	ands	r0, r3
     864:	d01d      	beq.n	8a2 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     866:	4911      	ldr	r1, [pc, #68]	; (8ac <system_clock_source_get_hz+0x80>)
     868:	2210      	movs	r2, #16
     86a:	68cb      	ldr	r3, [r1, #12]
     86c:	421a      	tst	r2, r3
     86e:	d0fc      	beq.n	86a <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     870:	4b0d      	ldr	r3, [pc, #52]	; (8a8 <system_clock_source_get_hz+0x7c>)
     872:	681b      	ldr	r3, [r3, #0]
     874:	075a      	lsls	r2, r3, #29
     876:	d513      	bpl.n	8a0 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     878:	2000      	movs	r0, #0
     87a:	4b0e      	ldr	r3, [pc, #56]	; (8b4 <system_clock_source_get_hz+0x88>)
     87c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     87e:	4b0a      	ldr	r3, [pc, #40]	; (8a8 <system_clock_source_get_hz+0x7c>)
     880:	689b      	ldr	r3, [r3, #8]
     882:	041b      	lsls	r3, r3, #16
     884:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     886:	4358      	muls	r0, r3
     888:	e00b      	b.n	8a2 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     88a:	2350      	movs	r3, #80	; 0x50
     88c:	4a07      	ldr	r2, [pc, #28]	; (8ac <system_clock_source_get_hz+0x80>)
     88e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     890:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     892:	075a      	lsls	r2, r3, #29
     894:	d505      	bpl.n	8a2 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     896:	4b04      	ldr	r3, [pc, #16]	; (8a8 <system_clock_source_get_hz+0x7c>)
     898:	68d8      	ldr	r0, [r3, #12]
     89a:	e002      	b.n	8a2 <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
     89c:	2000      	movs	r0, #0
     89e:	e000      	b.n	8a2 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     8a0:	4805      	ldr	r0, [pc, #20]	; (8b8 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
     8a2:	bd08      	pop	{r3, pc}
     8a4:	000068d4 	.word	0x000068d4
     8a8:	2000015c 	.word	0x2000015c
     8ac:	40000800 	.word	0x40000800
     8b0:	007a1200 	.word	0x007a1200
     8b4:	00000c7d 	.word	0x00000c7d
     8b8:	02dc6c00 	.word	0x02dc6c00

000008bc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     8bc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     8be:	4b0c      	ldr	r3, [pc, #48]	; (8f0 <system_clock_source_osc8m_set_config+0x34>)
     8c0:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     8c2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     8c4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     8c6:	7840      	ldrb	r0, [r0, #1]
     8c8:	2201      	movs	r2, #1
     8ca:	4010      	ands	r0, r2
     8cc:	0180      	lsls	r0, r0, #6
     8ce:	2640      	movs	r6, #64	; 0x40
     8d0:	43b4      	bics	r4, r6
     8d2:	4304      	orrs	r4, r0
     8d4:	402a      	ands	r2, r5
     8d6:	01d0      	lsls	r0, r2, #7
     8d8:	2280      	movs	r2, #128	; 0x80
     8da:	4394      	bics	r4, r2
     8dc:	1c22      	adds	r2, r4, #0
     8de:	4302      	orrs	r2, r0
     8e0:	2003      	movs	r0, #3
     8e2:	4001      	ands	r1, r0
     8e4:	0209      	lsls	r1, r1, #8
     8e6:	4803      	ldr	r0, [pc, #12]	; (8f4 <system_clock_source_osc8m_set_config+0x38>)
     8e8:	4002      	ands	r2, r0
     8ea:	430a      	orrs	r2, r1
     8ec:	621a      	str	r2, [r3, #32]
}
     8ee:	bd70      	pop	{r4, r5, r6, pc}
     8f0:	40000800 	.word	0x40000800
     8f4:	fffffcff 	.word	0xfffffcff

000008f8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     8f8:	2808      	cmp	r0, #8
     8fa:	d843      	bhi.n	984 <system_clock_source_enable+0x8c>
     8fc:	0080      	lsls	r0, r0, #2
     8fe:	4b22      	ldr	r3, [pc, #136]	; (988 <system_clock_source_enable+0x90>)
     900:	581b      	ldr	r3, [r3, r0]
     902:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     904:	2000      	movs	r0, #0
     906:	e03e      	b.n	986 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     908:	4b20      	ldr	r3, [pc, #128]	; (98c <system_clock_source_enable+0x94>)
     90a:	6a19      	ldr	r1, [r3, #32]
     90c:	2202      	movs	r2, #2
     90e:	430a      	orrs	r2, r1
     910:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
     912:	2000      	movs	r0, #0
     914:	e037      	b.n	986 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     916:	4b1d      	ldr	r3, [pc, #116]	; (98c <system_clock_source_enable+0x94>)
     918:	6999      	ldr	r1, [r3, #24]
     91a:	2202      	movs	r2, #2
     91c:	430a      	orrs	r2, r1
     91e:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     920:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
     922:	e030      	b.n	986 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     924:	4b19      	ldr	r3, [pc, #100]	; (98c <system_clock_source_enable+0x94>)
     926:	8a19      	ldrh	r1, [r3, #16]
     928:	2202      	movs	r2, #2
     92a:	430a      	orrs	r2, r1
     92c:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     92e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
     930:	e029      	b.n	986 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     932:	4b16      	ldr	r3, [pc, #88]	; (98c <system_clock_source_enable+0x94>)
     934:	8a99      	ldrh	r1, [r3, #20]
     936:	2202      	movs	r2, #2
     938:	430a      	orrs	r2, r1
     93a:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     93c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
     93e:	e022      	b.n	986 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     940:	4b13      	ldr	r3, [pc, #76]	; (990 <system_clock_source_enable+0x98>)
     942:	6819      	ldr	r1, [r3, #0]
     944:	2202      	movs	r2, #2
     946:	430a      	orrs	r2, r1
     948:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     94a:	681a      	ldr	r2, [r3, #0]
     94c:	4b11      	ldr	r3, [pc, #68]	; (994 <system_clock_source_enable+0x9c>)
     94e:	401a      	ands	r2, r3
     950:	4b0e      	ldr	r3, [pc, #56]	; (98c <system_clock_source_enable+0x94>)
     952:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     954:	1c19      	adds	r1, r3, #0
     956:	2210      	movs	r2, #16
     958:	68cb      	ldr	r3, [r1, #12]
     95a:	421a      	tst	r2, r3
     95c:	d0fc      	beq.n	958 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     95e:	4a0c      	ldr	r2, [pc, #48]	; (990 <system_clock_source_enable+0x98>)
     960:	6891      	ldr	r1, [r2, #8]
     962:	4b0a      	ldr	r3, [pc, #40]	; (98c <system_clock_source_enable+0x94>)
     964:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     966:	6851      	ldr	r1, [r2, #4]
     968:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     96a:	6812      	ldr	r2, [r2, #0]
     96c:	b292      	uxth	r2, r2
     96e:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     970:	2000      	movs	r0, #0
     972:	e008      	b.n	986 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     974:	4a05      	ldr	r2, [pc, #20]	; (98c <system_clock_source_enable+0x94>)
     976:	2344      	movs	r3, #68	; 0x44
     978:	5cd0      	ldrb	r0, [r2, r3]
     97a:	2102      	movs	r1, #2
     97c:	4301      	orrs	r1, r0
     97e:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     980:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
     982:	e000      	b.n	986 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     984:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     986:	4770      	bx	lr
     988:	000068f8 	.word	0x000068f8
     98c:	40000800 	.word	0x40000800
     990:	2000015c 	.word	0x2000015c
     994:	0000ff7f 	.word	0x0000ff7f

00000998 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     998:	b530      	push	{r4, r5, lr}
     99a:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     99c:	22c2      	movs	r2, #194	; 0xc2
     99e:	00d2      	lsls	r2, r2, #3
     9a0:	4b19      	ldr	r3, [pc, #100]	; (a08 <system_clock_init+0x70>)
     9a2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     9a4:	4b19      	ldr	r3, [pc, #100]	; (a0c <system_clock_init+0x74>)
     9a6:	685a      	ldr	r2, [r3, #4]
     9a8:	211e      	movs	r1, #30
     9aa:	438a      	bics	r2, r1
     9ac:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     9ae:	2301      	movs	r3, #1
     9b0:	466a      	mov	r2, sp
     9b2:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     9b4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     9b6:	4d16      	ldr	r5, [pc, #88]	; (a10 <system_clock_init+0x78>)
     9b8:	b2e0      	uxtb	r0, r4
     9ba:	4669      	mov	r1, sp
     9bc:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     9be:	3401      	adds	r4, #1
     9c0:	2c25      	cmp	r4, #37	; 0x25
     9c2:	d1f9      	bne.n	9b8 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
     9c4:	a803      	add	r0, sp, #12
     9c6:	2400      	movs	r4, #0
     9c8:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     9ca:	2501      	movs	r5, #1
     9cc:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     9ce:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     9d0:	4b10      	ldr	r3, [pc, #64]	; (a14 <system_clock_init+0x7c>)
     9d2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     9d4:	2006      	movs	r0, #6
     9d6:	4b10      	ldr	r3, [pc, #64]	; (a18 <system_clock_init+0x80>)
     9d8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     9da:	4b10      	ldr	r3, [pc, #64]	; (a1c <system_clock_init+0x84>)
     9dc:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
     9de:	4b10      	ldr	r3, [pc, #64]	; (a20 <system_clock_init+0x88>)
     9e0:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
     9e2:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     9e4:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     9e6:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     9e8:	466b      	mov	r3, sp
     9ea:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     9ec:	2306      	movs	r3, #6
     9ee:	466a      	mov	r2, sp
     9f0:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     9f2:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     9f4:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     9f6:	2000      	movs	r0, #0
     9f8:	4669      	mov	r1, sp
     9fa:	4b0a      	ldr	r3, [pc, #40]	; (a24 <system_clock_init+0x8c>)
     9fc:	4798      	blx	r3
     9fe:	2000      	movs	r0, #0
     a00:	4b09      	ldr	r3, [pc, #36]	; (a28 <system_clock_init+0x90>)
     a02:	4798      	blx	r3
#endif
}
     a04:	b005      	add	sp, #20
     a06:	bd30      	pop	{r4, r5, pc}
     a08:	40000800 	.word	0x40000800
     a0c:	41004000 	.word	0x41004000
     a10:	00000c61 	.word	0x00000c61
     a14:	000008bd 	.word	0x000008bd
     a18:	000008f9 	.word	0x000008f9
     a1c:	00000a2d 	.word	0x00000a2d
     a20:	40000400 	.word	0x40000400
     a24:	00000a51 	.word	0x00000a51
     a28:	00000b05 	.word	0x00000b05

00000a2c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     a2c:	4b06      	ldr	r3, [pc, #24]	; (a48 <system_gclk_init+0x1c>)
     a2e:	6999      	ldr	r1, [r3, #24]
     a30:	2208      	movs	r2, #8
     a32:	430a      	orrs	r2, r1
     a34:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     a36:	2201      	movs	r2, #1
     a38:	4b04      	ldr	r3, [pc, #16]	; (a4c <system_gclk_init+0x20>)
     a3a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     a3c:	1c19      	adds	r1, r3, #0
     a3e:	780b      	ldrb	r3, [r1, #0]
     a40:	4213      	tst	r3, r2
     a42:	d1fc      	bne.n	a3e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     a44:	4770      	bx	lr
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	40000400 	.word	0x40000400
     a4c:	40000c00 	.word	0x40000c00

00000a50 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a52:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     a54:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     a56:	780d      	ldrb	r5, [r1, #0]
     a58:	022d      	lsls	r5, r5, #8
     a5a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     a5c:	784b      	ldrb	r3, [r1, #1]
     a5e:	2b00      	cmp	r3, #0
     a60:	d002      	beq.n	a68 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     a62:	2380      	movs	r3, #128	; 0x80
     a64:	02db      	lsls	r3, r3, #11
     a66:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     a68:	7a4b      	ldrb	r3, [r1, #9]
     a6a:	2b00      	cmp	r3, #0
     a6c:	d002      	beq.n	a74 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     a6e:	2380      	movs	r3, #128	; 0x80
     a70:	031b      	lsls	r3, r3, #12
     a72:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     a74:	684c      	ldr	r4, [r1, #4]
     a76:	2c01      	cmp	r4, #1
     a78:	d917      	bls.n	aaa <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     a7a:	1e63      	subs	r3, r4, #1
     a7c:	421c      	tst	r4, r3
     a7e:	d10f      	bne.n	aa0 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     a80:	2c02      	cmp	r4, #2
     a82:	d906      	bls.n	a92 <system_gclk_gen_set_config+0x42>
     a84:	2302      	movs	r3, #2
     a86:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     a88:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
     a8a:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     a8c:	429c      	cmp	r4, r3
     a8e:	d8fb      	bhi.n	a88 <system_gclk_gen_set_config+0x38>
     a90:	e000      	b.n	a94 <system_gclk_gen_set_config+0x44>
     a92:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     a94:	0217      	lsls	r7, r2, #8
     a96:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     a98:	2380      	movs	r3, #128	; 0x80
     a9a:	035b      	lsls	r3, r3, #13
     a9c:	431d      	orrs	r5, r3
     a9e:	e004      	b.n	aaa <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     aa0:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
     aa2:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     aa4:	2380      	movs	r3, #128	; 0x80
     aa6:	029b      	lsls	r3, r3, #10
     aa8:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     aaa:	7a0b      	ldrb	r3, [r1, #8]
     aac:	2b00      	cmp	r3, #0
     aae:	d002      	beq.n	ab6 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     ab0:	2380      	movs	r3, #128	; 0x80
     ab2:	039b      	lsls	r3, r3, #14
     ab4:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ab6:	4a0f      	ldr	r2, [pc, #60]	; (af4 <system_gclk_gen_set_config+0xa4>)
     ab8:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
     aba:	b25b      	sxtb	r3, r3
     abc:	2b00      	cmp	r3, #0
     abe:	dbfb      	blt.n	ab8 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     ac0:	4b0d      	ldr	r3, [pc, #52]	; (af8 <system_gclk_gen_set_config+0xa8>)
     ac2:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     ac4:	4b0d      	ldr	r3, [pc, #52]	; (afc <system_gclk_gen_set_config+0xac>)
     ac6:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ac8:	4a0a      	ldr	r2, [pc, #40]	; (af4 <system_gclk_gen_set_config+0xa4>)
     aca:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     acc:	b25b      	sxtb	r3, r3
     ace:	2b00      	cmp	r3, #0
     ad0:	dbfb      	blt.n	aca <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     ad2:	4b08      	ldr	r3, [pc, #32]	; (af4 <system_gclk_gen_set_config+0xa4>)
     ad4:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ad6:	1c1a      	adds	r2, r3, #0
     ad8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
     ada:	b25b      	sxtb	r3, r3
     adc:	2b00      	cmp	r3, #0
     ade:	dbfb      	blt.n	ad8 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     ae0:	4b04      	ldr	r3, [pc, #16]	; (af4 <system_gclk_gen_set_config+0xa4>)
     ae2:	6859      	ldr	r1, [r3, #4]
     ae4:	2280      	movs	r2, #128	; 0x80
     ae6:	0252      	lsls	r2, r2, #9
     ae8:	400a      	ands	r2, r1
     aea:	4315      	orrs	r5, r2
     aec:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     aee:	4b04      	ldr	r3, [pc, #16]	; (b00 <system_gclk_gen_set_config+0xb0>)
     af0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     af4:	40000c00 	.word	0x40000c00
     af8:	00000d75 	.word	0x00000d75
     afc:	40000c08 	.word	0x40000c08
     b00:	00000db5 	.word	0x00000db5

00000b04 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     b04:	b510      	push	{r4, lr}
     b06:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     b08:	4a0b      	ldr	r2, [pc, #44]	; (b38 <system_gclk_gen_enable+0x34>)
     b0a:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     b0c:	b25b      	sxtb	r3, r3
     b0e:	2b00      	cmp	r3, #0
     b10:	dbfb      	blt.n	b0a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     b12:	4b0a      	ldr	r3, [pc, #40]	; (b3c <system_gclk_gen_enable+0x38>)
     b14:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     b16:	4b0a      	ldr	r3, [pc, #40]	; (b40 <system_gclk_gen_enable+0x3c>)
     b18:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     b1a:	4a07      	ldr	r2, [pc, #28]	; (b38 <system_gclk_gen_enable+0x34>)
     b1c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     b1e:	b25b      	sxtb	r3, r3
     b20:	2b00      	cmp	r3, #0
     b22:	dbfb      	blt.n	b1c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     b24:	4b04      	ldr	r3, [pc, #16]	; (b38 <system_gclk_gen_enable+0x34>)
     b26:	6859      	ldr	r1, [r3, #4]
     b28:	2280      	movs	r2, #128	; 0x80
     b2a:	0252      	lsls	r2, r2, #9
     b2c:	430a      	orrs	r2, r1
     b2e:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     b30:	4b04      	ldr	r3, [pc, #16]	; (b44 <system_gclk_gen_enable+0x40>)
     b32:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     b34:	bd10      	pop	{r4, pc}
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	40000c00 	.word	0x40000c00
     b3c:	00000d75 	.word	0x00000d75
     b40:	40000c04 	.word	0x40000c04
     b44:	00000db5 	.word	0x00000db5

00000b48 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     b48:	b570      	push	{r4, r5, r6, lr}
     b4a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     b4c:	4a1a      	ldr	r2, [pc, #104]	; (bb8 <system_gclk_gen_get_hz+0x70>)
     b4e:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     b50:	b25b      	sxtb	r3, r3
     b52:	2b00      	cmp	r3, #0
     b54:	dbfb      	blt.n	b4e <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     b56:	4b19      	ldr	r3, [pc, #100]	; (bbc <system_gclk_gen_get_hz+0x74>)
     b58:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     b5a:	4b19      	ldr	r3, [pc, #100]	; (bc0 <system_gclk_gen_get_hz+0x78>)
     b5c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     b5e:	4a16      	ldr	r2, [pc, #88]	; (bb8 <system_gclk_gen_get_hz+0x70>)
     b60:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     b62:	b25b      	sxtb	r3, r3
     b64:	2b00      	cmp	r3, #0
     b66:	dbfb      	blt.n	b60 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     b68:	4e13      	ldr	r6, [pc, #76]	; (bb8 <system_gclk_gen_get_hz+0x70>)
     b6a:	6870      	ldr	r0, [r6, #4]
     b6c:	04c0      	lsls	r0, r0, #19
     b6e:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
     b70:	4b14      	ldr	r3, [pc, #80]	; (bc4 <system_gclk_gen_get_hz+0x7c>)
     b72:	4798      	blx	r3
     b74:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     b76:	4b12      	ldr	r3, [pc, #72]	; (bc0 <system_gclk_gen_get_hz+0x78>)
     b78:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     b7a:	6876      	ldr	r6, [r6, #4]
     b7c:	02f6      	lsls	r6, r6, #11
     b7e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     b80:	4b11      	ldr	r3, [pc, #68]	; (bc8 <system_gclk_gen_get_hz+0x80>)
     b82:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     b84:	4a0c      	ldr	r2, [pc, #48]	; (bb8 <system_gclk_gen_get_hz+0x70>)
     b86:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
     b88:	b25b      	sxtb	r3, r3
     b8a:	2b00      	cmp	r3, #0
     b8c:	dbfb      	blt.n	b86 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     b8e:	4b0a      	ldr	r3, [pc, #40]	; (bb8 <system_gclk_gen_get_hz+0x70>)
     b90:	689c      	ldr	r4, [r3, #8]
     b92:	0a24      	lsrs	r4, r4, #8
     b94:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     b96:	4b0d      	ldr	r3, [pc, #52]	; (bcc <system_gclk_gen_get_hz+0x84>)
     b98:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     b9a:	2e00      	cmp	r6, #0
     b9c:	d107      	bne.n	bae <system_gclk_gen_get_hz+0x66>
     b9e:	2c01      	cmp	r4, #1
     ba0:	d907      	bls.n	bb2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     ba2:	1c28      	adds	r0, r5, #0
     ba4:	1c21      	adds	r1, r4, #0
     ba6:	4b0a      	ldr	r3, [pc, #40]	; (bd0 <system_gclk_gen_get_hz+0x88>)
     ba8:	4798      	blx	r3
     baa:	1c05      	adds	r5, r0, #0
     bac:	e001      	b.n	bb2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     bae:	3401      	adds	r4, #1
     bb0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     bb2:	1c28      	adds	r0, r5, #0
     bb4:	bd70      	pop	{r4, r5, r6, pc}
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	40000c00 	.word	0x40000c00
     bbc:	00000d75 	.word	0x00000d75
     bc0:	40000c04 	.word	0x40000c04
     bc4:	0000082d 	.word	0x0000082d
     bc8:	40000c08 	.word	0x40000c08
     bcc:	00000db5 	.word	0x00000db5
     bd0:	00006461 	.word	0x00006461

00000bd4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     bd4:	b510      	push	{r4, lr}
     bd6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     bd8:	4b06      	ldr	r3, [pc, #24]	; (bf4 <system_gclk_chan_enable+0x20>)
     bda:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     bdc:	4b06      	ldr	r3, [pc, #24]	; (bf8 <system_gclk_chan_enable+0x24>)
     bde:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <system_gclk_chan_enable+0x28>)
     be2:	8859      	ldrh	r1, [r3, #2]
     be4:	2280      	movs	r2, #128	; 0x80
     be6:	01d2      	lsls	r2, r2, #7
     be8:	430a      	orrs	r2, r1
     bea:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     bec:	4b04      	ldr	r3, [pc, #16]	; (c00 <system_gclk_chan_enable+0x2c>)
     bee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     bf0:	bd10      	pop	{r4, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	00000d75 	.word	0x00000d75
     bf8:	40000c02 	.word	0x40000c02
     bfc:	40000c00 	.word	0x40000c00
     c00:	00000db5 	.word	0x00000db5

00000c04 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     c04:	b510      	push	{r4, lr}
     c06:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     c08:	4b0f      	ldr	r3, [pc, #60]	; (c48 <system_gclk_chan_disable+0x44>)
     c0a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     c0c:	4b0f      	ldr	r3, [pc, #60]	; (c4c <system_gclk_chan_disable+0x48>)
     c0e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     c10:	4b0f      	ldr	r3, [pc, #60]	; (c50 <system_gclk_chan_disable+0x4c>)
     c12:	8858      	ldrh	r0, [r3, #2]
     c14:	0500      	lsls	r0, r0, #20
     c16:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     c18:	8859      	ldrh	r1, [r3, #2]
     c1a:	4a0e      	ldr	r2, [pc, #56]	; (c54 <system_gclk_chan_disable+0x50>)
     c1c:	400a      	ands	r2, r1
     c1e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     c20:	8859      	ldrh	r1, [r3, #2]
     c22:	4a0d      	ldr	r2, [pc, #52]	; (c58 <system_gclk_chan_disable+0x54>)
     c24:	400a      	ands	r2, r1
     c26:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     c28:	1c19      	adds	r1, r3, #0
     c2a:	2280      	movs	r2, #128	; 0x80
     c2c:	01d2      	lsls	r2, r2, #7
     c2e:	884b      	ldrh	r3, [r1, #2]
     c30:	4213      	tst	r3, r2
     c32:	d1fc      	bne.n	c2e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     c34:	4b06      	ldr	r3, [pc, #24]	; (c50 <system_gclk_chan_disable+0x4c>)
     c36:	0201      	lsls	r1, r0, #8
     c38:	8858      	ldrh	r0, [r3, #2]
     c3a:	4a06      	ldr	r2, [pc, #24]	; (c54 <system_gclk_chan_disable+0x50>)
     c3c:	4002      	ands	r2, r0
     c3e:	430a      	orrs	r2, r1
     c40:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     c42:	4b06      	ldr	r3, [pc, #24]	; (c5c <system_gclk_chan_disable+0x58>)
     c44:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     c46:	bd10      	pop	{r4, pc}
     c48:	00000d75 	.word	0x00000d75
     c4c:	40000c02 	.word	0x40000c02
     c50:	40000c00 	.word	0x40000c00
     c54:	fffff0ff 	.word	0xfffff0ff
     c58:	ffffbfff 	.word	0xffffbfff
     c5c:	00000db5 	.word	0x00000db5

00000c60 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
     c60:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     c62:	780c      	ldrb	r4, [r1, #0]
     c64:	0224      	lsls	r4, r4, #8
     c66:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
     c68:	4b02      	ldr	r3, [pc, #8]	; (c74 <system_gclk_chan_set_config+0x14>)
     c6a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     c6c:	b2a4      	uxth	r4, r4
     c6e:	4b02      	ldr	r3, [pc, #8]	; (c78 <system_gclk_chan_set_config+0x18>)
     c70:	805c      	strh	r4, [r3, #2]
}
     c72:	bd10      	pop	{r4, pc}
     c74:	00000c05 	.word	0x00000c05
     c78:	40000c00 	.word	0x40000c00

00000c7c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     c7c:	b510      	push	{r4, lr}
     c7e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     c80:	4b06      	ldr	r3, [pc, #24]	; (c9c <system_gclk_chan_get_hz+0x20>)
     c82:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     c84:	4b06      	ldr	r3, [pc, #24]	; (ca0 <system_gclk_chan_get_hz+0x24>)
     c86:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     c88:	4b06      	ldr	r3, [pc, #24]	; (ca4 <system_gclk_chan_get_hz+0x28>)
     c8a:	885c      	ldrh	r4, [r3, #2]
     c8c:	0524      	lsls	r4, r4, #20
     c8e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     c90:	4b05      	ldr	r3, [pc, #20]	; (ca8 <system_gclk_chan_get_hz+0x2c>)
     c92:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     c94:	1c20      	adds	r0, r4, #0
     c96:	4b05      	ldr	r3, [pc, #20]	; (cac <system_gclk_chan_get_hz+0x30>)
     c98:	4798      	blx	r3
}
     c9a:	bd10      	pop	{r4, pc}
     c9c:	00000d75 	.word	0x00000d75
     ca0:	40000c02 	.word	0x40000c02
     ca4:	40000c00 	.word	0x40000c00
     ca8:	00000db5 	.word	0x00000db5
     cac:	00000b49 	.word	0x00000b49

00000cb0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     cb0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     cb2:	78d3      	ldrb	r3, [r2, #3]
     cb4:	2b00      	cmp	r3, #0
     cb6:	d11e      	bne.n	cf6 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     cb8:	7813      	ldrb	r3, [r2, #0]
     cba:	2b80      	cmp	r3, #128	; 0x80
     cbc:	d004      	beq.n	cc8 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     cbe:	061b      	lsls	r3, r3, #24
     cc0:	2480      	movs	r4, #128	; 0x80
     cc2:	0264      	lsls	r4, r4, #9
     cc4:	4323      	orrs	r3, r4
     cc6:	e000      	b.n	cca <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     cc8:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     cca:	7854      	ldrb	r4, [r2, #1]
     ccc:	2502      	movs	r5, #2
     cce:	43ac      	bics	r4, r5
     cd0:	d10a      	bne.n	ce8 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     cd2:	7894      	ldrb	r4, [r2, #2]
     cd4:	2c00      	cmp	r4, #0
     cd6:	d103      	bne.n	ce0 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
     cd8:	2480      	movs	r4, #128	; 0x80
     cda:	02a4      	lsls	r4, r4, #10
     cdc:	4323      	orrs	r3, r4
     cde:	e002      	b.n	ce6 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     ce0:	24c0      	movs	r4, #192	; 0xc0
     ce2:	02e4      	lsls	r4, r4, #11
     ce4:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     ce6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     ce8:	7854      	ldrb	r4, [r2, #1]
     cea:	3c01      	subs	r4, #1
     cec:	2c01      	cmp	r4, #1
     cee:	d804      	bhi.n	cfa <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     cf0:	4c11      	ldr	r4, [pc, #68]	; (d38 <_system_pinmux_config+0x88>)
     cf2:	4023      	ands	r3, r4
     cf4:	e001      	b.n	cfa <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
     cf6:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     cf8:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     cfa:	040d      	lsls	r5, r1, #16
     cfc:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     cfe:	24a0      	movs	r4, #160	; 0xa0
     d00:	05e4      	lsls	r4, r4, #23
     d02:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     d04:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     d06:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
     d08:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     d0a:	24d0      	movs	r4, #208	; 0xd0
     d0c:	0624      	lsls	r4, r4, #24
     d0e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     d10:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     d12:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     d14:	78d4      	ldrb	r4, [r2, #3]
     d16:	2c00      	cmp	r4, #0
     d18:	d10c      	bne.n	d34 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     d1a:	035c      	lsls	r4, r3, #13
     d1c:	d505      	bpl.n	d2a <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     d1e:	7893      	ldrb	r3, [r2, #2]
     d20:	2b01      	cmp	r3, #1
     d22:	d101      	bne.n	d28 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
     d24:	6181      	str	r1, [r0, #24]
     d26:	e000      	b.n	d2a <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
     d28:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     d2a:	7853      	ldrb	r3, [r2, #1]
     d2c:	3b01      	subs	r3, #1
     d2e:	2b01      	cmp	r3, #1
     d30:	d800      	bhi.n	d34 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
     d32:	6081      	str	r1, [r0, #8]
		}
	}
}
     d34:	bd30      	pop	{r4, r5, pc}
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	fffbffff 	.word	0xfffbffff

00000d3c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     d3c:	b508      	push	{r3, lr}
     d3e:	1c03      	adds	r3, r0, #0
     d40:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d42:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d44:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d46:	2900      	cmp	r1, #0
     d48:	d103      	bne.n	d52 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     d4a:	0958      	lsrs	r0, r3, #5
     d4c:	01c0      	lsls	r0, r0, #7
     d4e:	4904      	ldr	r1, [pc, #16]	; (d60 <system_pinmux_pin_set_config+0x24>)
     d50:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     d52:	211f      	movs	r1, #31
     d54:	400b      	ands	r3, r1
     d56:	2101      	movs	r1, #1
     d58:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
     d5a:	4b02      	ldr	r3, [pc, #8]	; (d64 <system_pinmux_pin_set_config+0x28>)
     d5c:	4798      	blx	r3
}
     d5e:	bd08      	pop	{r3, pc}
     d60:	41004400 	.word	0x41004400
     d64:	00000cb1 	.word	0x00000cb1

00000d68 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     d68:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     d6a:	4b01      	ldr	r3, [pc, #4]	; (d70 <system_init+0x8>)
     d6c:	4798      	blx	r3
}
     d6e:	bd08      	pop	{r3, pc}
     d70:	00000999 	.word	0x00000999

00000d74 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     d74:	4b0c      	ldr	r3, [pc, #48]	; (da8 <cpu_irq_enter_critical+0x34>)
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	2b00      	cmp	r3, #0
     d7a:	d110      	bne.n	d9e <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     d7c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     d80:	2b00      	cmp	r3, #0
     d82:	d109      	bne.n	d98 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     d84:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     d86:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     d8a:	2200      	movs	r2, #0
     d8c:	4b07      	ldr	r3, [pc, #28]	; (dac <cpu_irq_enter_critical+0x38>)
     d8e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     d90:	2201      	movs	r2, #1
     d92:	4b07      	ldr	r3, [pc, #28]	; (db0 <cpu_irq_enter_critical+0x3c>)
     d94:	701a      	strb	r2, [r3, #0]
     d96:	e002      	b.n	d9e <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     d98:	2200      	movs	r2, #0
     d9a:	4b05      	ldr	r3, [pc, #20]	; (db0 <cpu_irq_enter_critical+0x3c>)
     d9c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     d9e:	4b02      	ldr	r3, [pc, #8]	; (da8 <cpu_irq_enter_critical+0x34>)
     da0:	681a      	ldr	r2, [r3, #0]
     da2:	3201      	adds	r2, #1
     da4:	601a      	str	r2, [r3, #0]
}
     da6:	4770      	bx	lr
     da8:	20000174 	.word	0x20000174
     dac:	20000004 	.word	0x20000004
     db0:	20000178 	.word	0x20000178

00000db4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     db4:	4b08      	ldr	r3, [pc, #32]	; (dd8 <cpu_irq_leave_critical+0x24>)
     db6:	681a      	ldr	r2, [r3, #0]
     db8:	3a01      	subs	r2, #1
     dba:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     dbc:	681b      	ldr	r3, [r3, #0]
     dbe:	2b00      	cmp	r3, #0
     dc0:	d109      	bne.n	dd6 <cpu_irq_leave_critical+0x22>
     dc2:	4b06      	ldr	r3, [pc, #24]	; (ddc <cpu_irq_leave_critical+0x28>)
     dc4:	781b      	ldrb	r3, [r3, #0]
     dc6:	2b00      	cmp	r3, #0
     dc8:	d005      	beq.n	dd6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     dca:	2201      	movs	r2, #1
     dcc:	4b04      	ldr	r3, [pc, #16]	; (de0 <cpu_irq_leave_critical+0x2c>)
     dce:	701a      	strb	r2, [r3, #0]
     dd0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     dd4:	b662      	cpsie	i
	}
}
     dd6:	4770      	bx	lr
     dd8:	20000174 	.word	0x20000174
     ddc:	20000178 	.word	0x20000178
     de0:	20000004 	.word	0x20000004

00000de4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     de4:	b510      	push	{r4, lr}
     de6:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     de8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     dea:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     dec:	4299      	cmp	r1, r3
     dee:	d30c      	bcc.n	e0a <_sercom_get_sync_baud_val+0x26>
     df0:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     df2:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     df4:	1c60      	adds	r0, r4, #1
     df6:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     df8:	428b      	cmp	r3, r1
     dfa:	d801      	bhi.n	e00 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     dfc:	1c04      	adds	r4, r0, #0
     dfe:	e7f8      	b.n	df2 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e00:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     e02:	2cff      	cmp	r4, #255	; 0xff
     e04:	d801      	bhi.n	e0a <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     e06:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     e08:	2000      	movs	r0, #0
	}
}
     e0a:	bd10      	pop	{r4, pc}
     e0c:	0000      	movs	r0, r0
	...

00000e10 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     e10:	b5f0      	push	{r4, r5, r6, r7, lr}
     e12:	465f      	mov	r7, fp
     e14:	4656      	mov	r6, sl
     e16:	464d      	mov	r5, r9
     e18:	4644      	mov	r4, r8
     e1a:	b4f0      	push	{r4, r5, r6, r7}
     e1c:	b087      	sub	sp, #28
     e1e:	1c06      	adds	r6, r0, #0
     e20:	1c0d      	adds	r5, r1, #0
     e22:	9204      	str	r2, [sp, #16]
     e24:	aa10      	add	r2, sp, #64	; 0x40
     e26:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     e28:	1c32      	adds	r2, r6, #0
     e2a:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e2c:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     e2e:	428a      	cmp	r2, r1
     e30:	d900      	bls.n	e34 <_sercom_get_async_baud_val+0x24>
     e32:	e0b3      	b.n	f9c <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     e34:	2b00      	cmp	r3, #0
     e36:	d14b      	bne.n	ed0 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     e38:	2100      	movs	r1, #0
     e3a:	1c32      	adds	r2, r6, #0
     e3c:	4c5e      	ldr	r4, [pc, #376]	; (fb8 <_sercom_get_async_baud_val+0x1a8>)
     e3e:	47a0      	blx	r4
     e40:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     e42:	1c2e      	adds	r6, r5, #0
     e44:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     e46:	2000      	movs	r0, #0
     e48:	2100      	movs	r1, #0
     e4a:	2200      	movs	r2, #0
     e4c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     e4e:	243f      	movs	r4, #63	; 0x3f
     e50:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     e52:	2501      	movs	r5, #1
     e54:	46a8      	mov	r8, r5
     e56:	9002      	str	r0, [sp, #8]
     e58:	9103      	str	r1, [sp, #12]
     e5a:	4661      	mov	r1, ip
     e5c:	3920      	subs	r1, #32
     e5e:	d403      	bmi.n	e68 <_sercom_get_async_baud_val+0x58>
     e60:	4640      	mov	r0, r8
     e62:	4088      	lsls	r0, r1
     e64:	4681      	mov	r9, r0
     e66:	e005      	b.n	e74 <_sercom_get_async_baud_val+0x64>
     e68:	2120      	movs	r1, #32
     e6a:	4665      	mov	r5, ip
     e6c:	1b4c      	subs	r4, r1, r5
     e6e:	4640      	mov	r0, r8
     e70:	40e0      	lsrs	r0, r4
     e72:	4681      	mov	r9, r0
     e74:	4641      	mov	r1, r8
     e76:	4664      	mov	r4, ip
     e78:	40a1      	lsls	r1, r4
     e7a:	468a      	mov	sl, r1

		r = r << 1;
     e7c:	1c10      	adds	r0, r2, #0
     e7e:	1c19      	adds	r1, r3, #0
     e80:	1880      	adds	r0, r0, r2
     e82:	4159      	adcs	r1, r3
     e84:	1c02      	adds	r2, r0, #0
     e86:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     e88:	465d      	mov	r5, fp
     e8a:	464c      	mov	r4, r9
     e8c:	4225      	tst	r5, r4
     e8e:	d002      	beq.n	e96 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     e90:	4642      	mov	r2, r8
     e92:	4302      	orrs	r2, r0
     e94:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     e96:	429f      	cmp	r7, r3
     e98:	d80c      	bhi.n	eb4 <_sercom_get_async_baud_val+0xa4>
     e9a:	d101      	bne.n	ea0 <_sercom_get_async_baud_val+0x90>
     e9c:	4296      	cmp	r6, r2
     e9e:	d809      	bhi.n	eb4 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     ea0:	1b92      	subs	r2, r2, r6
     ea2:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     ea4:	4650      	mov	r0, sl
     ea6:	9d02      	ldr	r5, [sp, #8]
     ea8:	4328      	orrs	r0, r5
     eaa:	4649      	mov	r1, r9
     eac:	9c03      	ldr	r4, [sp, #12]
     eae:	4321      	orrs	r1, r4
     eb0:	9002      	str	r0, [sp, #8]
     eb2:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     eb4:	4665      	mov	r5, ip
     eb6:	3d01      	subs	r5, #1
     eb8:	46ac      	mov	ip, r5
     eba:	d2ce      	bcs.n	e5a <_sercom_get_async_baud_val+0x4a>
     ebc:	9802      	ldr	r0, [sp, #8]
     ebe:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     ec0:	4b3c      	ldr	r3, [pc, #240]	; (fb4 <_sercom_get_async_baud_val+0x1a4>)
     ec2:	4a3b      	ldr	r2, [pc, #236]	; (fb0 <_sercom_get_async_baud_val+0x1a0>)
     ec4:	1a12      	subs	r2, r2, r0
     ec6:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     ec8:	0c12      	lsrs	r2, r2, #16
     eca:	041b      	lsls	r3, r3, #16
     ecc:	431a      	orrs	r2, r3
     ece:	e062      	b.n	f96 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     ed0:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     ed2:	2b01      	cmp	r3, #1
     ed4:	d15f      	bne.n	f96 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     ed6:	0f4f      	lsrs	r7, r1, #29
     ed8:	46b9      	mov	r9, r7
     eda:	00cd      	lsls	r5, r1, #3
     edc:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     ede:	2100      	movs	r1, #0
     ee0:	1c32      	adds	r2, r6, #0
     ee2:	2300      	movs	r3, #0
     ee4:	4c34      	ldr	r4, [pc, #208]	; (fb8 <_sercom_get_async_baud_val+0x1a8>)
     ee6:	47a0      	blx	r4
     ee8:	1c06      	adds	r6, r0, #0
     eea:	1c0f      	adds	r7, r1, #0
     eec:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     eee:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     ef0:	9602      	str	r6, [sp, #8]
     ef2:	9703      	str	r7, [sp, #12]
     ef4:	469a      	mov	sl, r3
     ef6:	4650      	mov	r0, sl
     ef8:	b2c0      	uxtb	r0, r0
     efa:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     efc:	2100      	movs	r1, #0
     efe:	4688      	mov	r8, r1
     f00:	2200      	movs	r2, #0
     f02:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     f04:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     f06:	1c27      	adds	r7, r4, #0
     f08:	3f20      	subs	r7, #32
     f0a:	d403      	bmi.n	f14 <_sercom_get_async_baud_val+0x104>
     f0c:	1c2e      	adds	r6, r5, #0
     f0e:	40be      	lsls	r6, r7
     f10:	9601      	str	r6, [sp, #4]
     f12:	e004      	b.n	f1e <_sercom_get_async_baud_val+0x10e>
     f14:	2020      	movs	r0, #32
     f16:	1b07      	subs	r7, r0, r4
     f18:	1c29      	adds	r1, r5, #0
     f1a:	40f9      	lsrs	r1, r7
     f1c:	9101      	str	r1, [sp, #4]
     f1e:	1c2e      	adds	r6, r5, #0
     f20:	40a6      	lsls	r6, r4
     f22:	9600      	str	r6, [sp, #0]

		r = r << 1;
     f24:	1c10      	adds	r0, r2, #0
     f26:	1c19      	adds	r1, r3, #0
     f28:	1880      	adds	r0, r0, r2
     f2a:	4159      	adcs	r1, r3
     f2c:	1c02      	adds	r2, r0, #0
     f2e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     f30:	465f      	mov	r7, fp
     f32:	4037      	ands	r7, r6
     f34:	46bc      	mov	ip, r7
     f36:	9e01      	ldr	r6, [sp, #4]
     f38:	464f      	mov	r7, r9
     f3a:	403e      	ands	r6, r7
     f3c:	4667      	mov	r7, ip
     f3e:	433e      	orrs	r6, r7
     f40:	d002      	beq.n	f48 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     f42:	1c2a      	adds	r2, r5, #0
     f44:	4302      	orrs	r2, r0
     f46:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     f48:	9803      	ldr	r0, [sp, #12]
     f4a:	4298      	cmp	r0, r3
     f4c:	d80b      	bhi.n	f66 <_sercom_get_async_baud_val+0x156>
     f4e:	d102      	bne.n	f56 <_sercom_get_async_baud_val+0x146>
     f50:	9902      	ldr	r1, [sp, #8]
     f52:	4291      	cmp	r1, r2
     f54:	d807      	bhi.n	f66 <_sercom_get_async_baud_val+0x156>
			r = r - d;
     f56:	9e02      	ldr	r6, [sp, #8]
     f58:	9f03      	ldr	r7, [sp, #12]
     f5a:	1b92      	subs	r2, r2, r6
     f5c:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     f5e:	4647      	mov	r7, r8
     f60:	9800      	ldr	r0, [sp, #0]
     f62:	4307      	orrs	r7, r0
     f64:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     f66:	3c01      	subs	r4, #1
     f68:	d2cd      	bcs.n	f06 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     f6a:	4641      	mov	r1, r8
     f6c:	4652      	mov	r2, sl
     f6e:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     f70:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     f72:	4c12      	ldr	r4, [pc, #72]	; (fbc <_sercom_get_async_baud_val+0x1ac>)
     f74:	42a3      	cmp	r3, r4
     f76:	d908      	bls.n	f8a <_sercom_get_async_baud_val+0x17a>
     f78:	9a05      	ldr	r2, [sp, #20]
     f7a:	3201      	adds	r2, #1
     f7c:	b2d2      	uxtb	r2, r2
     f7e:	9205      	str	r2, [sp, #20]
     f80:	2601      	movs	r6, #1
     f82:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     f84:	4657      	mov	r7, sl
     f86:	2f08      	cmp	r7, #8
     f88:	d1b5      	bne.n	ef6 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f8a:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     f8c:	9805      	ldr	r0, [sp, #20]
     f8e:	2808      	cmp	r0, #8
     f90:	d004      	beq.n	f9c <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     f92:	0342      	lsls	r2, r0, #13
     f94:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     f96:	9c04      	ldr	r4, [sp, #16]
     f98:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     f9a:	2400      	movs	r4, #0
}
     f9c:	1c20      	adds	r0, r4, #0
     f9e:	b007      	add	sp, #28
     fa0:	bc3c      	pop	{r2, r3, r4, r5}
     fa2:	4690      	mov	r8, r2
     fa4:	4699      	mov	r9, r3
     fa6:	46a2      	mov	sl, r4
     fa8:	46ab      	mov	fp, r5
     faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fac:	46c0      	nop			; (mov r8, r8)
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	00000000 	.word	0x00000000
     fb4:	00000001 	.word	0x00000001
     fb8:	00006501 	.word	0x00006501
     fbc:	00001fff 	.word	0x00001fff

00000fc0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     fc0:	b510      	push	{r4, lr}
     fc2:	b082      	sub	sp, #8
     fc4:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     fc6:	4b0f      	ldr	r3, [pc, #60]	; (1004 <sercom_set_gclk_generator+0x44>)
     fc8:	781b      	ldrb	r3, [r3, #0]
     fca:	2b00      	cmp	r3, #0
     fcc:	d001      	beq.n	fd2 <sercom_set_gclk_generator+0x12>
     fce:	2900      	cmp	r1, #0
     fd0:	d00d      	beq.n	fee <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     fd2:	a901      	add	r1, sp, #4
     fd4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     fd6:	2013      	movs	r0, #19
     fd8:	4b0b      	ldr	r3, [pc, #44]	; (1008 <sercom_set_gclk_generator+0x48>)
     fda:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     fdc:	2013      	movs	r0, #19
     fde:	4b0b      	ldr	r3, [pc, #44]	; (100c <sercom_set_gclk_generator+0x4c>)
     fe0:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     fe2:	4b08      	ldr	r3, [pc, #32]	; (1004 <sercom_set_gclk_generator+0x44>)
     fe4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     fe6:	2201      	movs	r2, #1
     fe8:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     fea:	2000      	movs	r0, #0
     fec:	e007      	b.n	ffe <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     fee:	4b05      	ldr	r3, [pc, #20]	; (1004 <sercom_set_gclk_generator+0x44>)
     ff0:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     ff2:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     ff4:	1b14      	subs	r4, r2, r4
     ff6:	1e62      	subs	r2, r4, #1
     ff8:	4194      	sbcs	r4, r2
     ffa:	4264      	negs	r4, r4
     ffc:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     ffe:	b002      	add	sp, #8
    1000:	bd10      	pop	{r4, pc}
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	2000017c 	.word	0x2000017c
    1008:	00000c61 	.word	0x00000c61
    100c:	00000bd5 	.word	0x00000bd5

00001010 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1010:	4b44      	ldr	r3, [pc, #272]	; (1124 <_sercom_get_default_pad+0x114>)
    1012:	4298      	cmp	r0, r3
    1014:	d033      	beq.n	107e <_sercom_get_default_pad+0x6e>
    1016:	d806      	bhi.n	1026 <_sercom_get_default_pad+0x16>
    1018:	4b43      	ldr	r3, [pc, #268]	; (1128 <_sercom_get_default_pad+0x118>)
    101a:	4298      	cmp	r0, r3
    101c:	d00d      	beq.n	103a <_sercom_get_default_pad+0x2a>
    101e:	4b43      	ldr	r3, [pc, #268]	; (112c <_sercom_get_default_pad+0x11c>)
    1020:	4298      	cmp	r0, r3
    1022:	d01b      	beq.n	105c <_sercom_get_default_pad+0x4c>
    1024:	e06f      	b.n	1106 <_sercom_get_default_pad+0xf6>
    1026:	4b42      	ldr	r3, [pc, #264]	; (1130 <_sercom_get_default_pad+0x120>)
    1028:	4298      	cmp	r0, r3
    102a:	d04a      	beq.n	10c2 <_sercom_get_default_pad+0xb2>
    102c:	4b41      	ldr	r3, [pc, #260]	; (1134 <_sercom_get_default_pad+0x124>)
    102e:	4298      	cmp	r0, r3
    1030:	d058      	beq.n	10e4 <_sercom_get_default_pad+0xd4>
    1032:	4b41      	ldr	r3, [pc, #260]	; (1138 <_sercom_get_default_pad+0x128>)
    1034:	4298      	cmp	r0, r3
    1036:	d166      	bne.n	1106 <_sercom_get_default_pad+0xf6>
    1038:	e032      	b.n	10a0 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    103a:	2901      	cmp	r1, #1
    103c:	d065      	beq.n	110a <_sercom_get_default_pad+0xfa>
    103e:	2900      	cmp	r1, #0
    1040:	d004      	beq.n	104c <_sercom_get_default_pad+0x3c>
    1042:	2902      	cmp	r1, #2
    1044:	d006      	beq.n	1054 <_sercom_get_default_pad+0x44>
    1046:	2903      	cmp	r1, #3
    1048:	d006      	beq.n	1058 <_sercom_get_default_pad+0x48>
    104a:	e001      	b.n	1050 <_sercom_get_default_pad+0x40>
    104c:	483b      	ldr	r0, [pc, #236]	; (113c <_sercom_get_default_pad+0x12c>)
    104e:	e067      	b.n	1120 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1050:	2000      	movs	r0, #0
    1052:	e065      	b.n	1120 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1054:	483a      	ldr	r0, [pc, #232]	; (1140 <_sercom_get_default_pad+0x130>)
    1056:	e063      	b.n	1120 <_sercom_get_default_pad+0x110>
    1058:	483a      	ldr	r0, [pc, #232]	; (1144 <_sercom_get_default_pad+0x134>)
    105a:	e061      	b.n	1120 <_sercom_get_default_pad+0x110>
    105c:	2901      	cmp	r1, #1
    105e:	d056      	beq.n	110e <_sercom_get_default_pad+0xfe>
    1060:	2900      	cmp	r1, #0
    1062:	d004      	beq.n	106e <_sercom_get_default_pad+0x5e>
    1064:	2902      	cmp	r1, #2
    1066:	d006      	beq.n	1076 <_sercom_get_default_pad+0x66>
    1068:	2903      	cmp	r1, #3
    106a:	d006      	beq.n	107a <_sercom_get_default_pad+0x6a>
    106c:	e001      	b.n	1072 <_sercom_get_default_pad+0x62>
    106e:	2003      	movs	r0, #3
    1070:	e056      	b.n	1120 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1072:	2000      	movs	r0, #0
    1074:	e054      	b.n	1120 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1076:	4834      	ldr	r0, [pc, #208]	; (1148 <_sercom_get_default_pad+0x138>)
    1078:	e052      	b.n	1120 <_sercom_get_default_pad+0x110>
    107a:	4834      	ldr	r0, [pc, #208]	; (114c <_sercom_get_default_pad+0x13c>)
    107c:	e050      	b.n	1120 <_sercom_get_default_pad+0x110>
    107e:	2901      	cmp	r1, #1
    1080:	d047      	beq.n	1112 <_sercom_get_default_pad+0x102>
    1082:	2900      	cmp	r1, #0
    1084:	d004      	beq.n	1090 <_sercom_get_default_pad+0x80>
    1086:	2902      	cmp	r1, #2
    1088:	d006      	beq.n	1098 <_sercom_get_default_pad+0x88>
    108a:	2903      	cmp	r1, #3
    108c:	d006      	beq.n	109c <_sercom_get_default_pad+0x8c>
    108e:	e001      	b.n	1094 <_sercom_get_default_pad+0x84>
    1090:	482f      	ldr	r0, [pc, #188]	; (1150 <_sercom_get_default_pad+0x140>)
    1092:	e045      	b.n	1120 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1094:	2000      	movs	r0, #0
    1096:	e043      	b.n	1120 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1098:	482e      	ldr	r0, [pc, #184]	; (1154 <_sercom_get_default_pad+0x144>)
    109a:	e041      	b.n	1120 <_sercom_get_default_pad+0x110>
    109c:	482e      	ldr	r0, [pc, #184]	; (1158 <_sercom_get_default_pad+0x148>)
    109e:	e03f      	b.n	1120 <_sercom_get_default_pad+0x110>
    10a0:	2901      	cmp	r1, #1
    10a2:	d038      	beq.n	1116 <_sercom_get_default_pad+0x106>
    10a4:	2900      	cmp	r1, #0
    10a6:	d004      	beq.n	10b2 <_sercom_get_default_pad+0xa2>
    10a8:	2902      	cmp	r1, #2
    10aa:	d006      	beq.n	10ba <_sercom_get_default_pad+0xaa>
    10ac:	2903      	cmp	r1, #3
    10ae:	d006      	beq.n	10be <_sercom_get_default_pad+0xae>
    10b0:	e001      	b.n	10b6 <_sercom_get_default_pad+0xa6>
    10b2:	482a      	ldr	r0, [pc, #168]	; (115c <_sercom_get_default_pad+0x14c>)
    10b4:	e034      	b.n	1120 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    10b6:	2000      	movs	r0, #0
    10b8:	e032      	b.n	1120 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10ba:	4829      	ldr	r0, [pc, #164]	; (1160 <_sercom_get_default_pad+0x150>)
    10bc:	e030      	b.n	1120 <_sercom_get_default_pad+0x110>
    10be:	4829      	ldr	r0, [pc, #164]	; (1164 <_sercom_get_default_pad+0x154>)
    10c0:	e02e      	b.n	1120 <_sercom_get_default_pad+0x110>
    10c2:	2901      	cmp	r1, #1
    10c4:	d029      	beq.n	111a <_sercom_get_default_pad+0x10a>
    10c6:	2900      	cmp	r1, #0
    10c8:	d004      	beq.n	10d4 <_sercom_get_default_pad+0xc4>
    10ca:	2902      	cmp	r1, #2
    10cc:	d006      	beq.n	10dc <_sercom_get_default_pad+0xcc>
    10ce:	2903      	cmp	r1, #3
    10d0:	d006      	beq.n	10e0 <_sercom_get_default_pad+0xd0>
    10d2:	e001      	b.n	10d8 <_sercom_get_default_pad+0xc8>
    10d4:	4824      	ldr	r0, [pc, #144]	; (1168 <_sercom_get_default_pad+0x158>)
    10d6:	e023      	b.n	1120 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    10d8:	2000      	movs	r0, #0
    10da:	e021      	b.n	1120 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10dc:	4823      	ldr	r0, [pc, #140]	; (116c <_sercom_get_default_pad+0x15c>)
    10de:	e01f      	b.n	1120 <_sercom_get_default_pad+0x110>
    10e0:	4823      	ldr	r0, [pc, #140]	; (1170 <_sercom_get_default_pad+0x160>)
    10e2:	e01d      	b.n	1120 <_sercom_get_default_pad+0x110>
    10e4:	2901      	cmp	r1, #1
    10e6:	d01a      	beq.n	111e <_sercom_get_default_pad+0x10e>
    10e8:	2900      	cmp	r1, #0
    10ea:	d004      	beq.n	10f6 <_sercom_get_default_pad+0xe6>
    10ec:	2902      	cmp	r1, #2
    10ee:	d006      	beq.n	10fe <_sercom_get_default_pad+0xee>
    10f0:	2903      	cmp	r1, #3
    10f2:	d006      	beq.n	1102 <_sercom_get_default_pad+0xf2>
    10f4:	e001      	b.n	10fa <_sercom_get_default_pad+0xea>
    10f6:	481f      	ldr	r0, [pc, #124]	; (1174 <_sercom_get_default_pad+0x164>)
    10f8:	e012      	b.n	1120 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    10fa:	2000      	movs	r0, #0
    10fc:	e010      	b.n	1120 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10fe:	481e      	ldr	r0, [pc, #120]	; (1178 <_sercom_get_default_pad+0x168>)
    1100:	e00e      	b.n	1120 <_sercom_get_default_pad+0x110>
    1102:	481e      	ldr	r0, [pc, #120]	; (117c <_sercom_get_default_pad+0x16c>)
    1104:	e00c      	b.n	1120 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1106:	2000      	movs	r0, #0
    1108:	e00a      	b.n	1120 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    110a:	481d      	ldr	r0, [pc, #116]	; (1180 <_sercom_get_default_pad+0x170>)
    110c:	e008      	b.n	1120 <_sercom_get_default_pad+0x110>
    110e:	481d      	ldr	r0, [pc, #116]	; (1184 <_sercom_get_default_pad+0x174>)
    1110:	e006      	b.n	1120 <_sercom_get_default_pad+0x110>
    1112:	481d      	ldr	r0, [pc, #116]	; (1188 <_sercom_get_default_pad+0x178>)
    1114:	e004      	b.n	1120 <_sercom_get_default_pad+0x110>
    1116:	481d      	ldr	r0, [pc, #116]	; (118c <_sercom_get_default_pad+0x17c>)
    1118:	e002      	b.n	1120 <_sercom_get_default_pad+0x110>
    111a:	481d      	ldr	r0, [pc, #116]	; (1190 <_sercom_get_default_pad+0x180>)
    111c:	e000      	b.n	1120 <_sercom_get_default_pad+0x110>
    111e:	481d      	ldr	r0, [pc, #116]	; (1194 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    1120:	4770      	bx	lr
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	42001000 	.word	0x42001000
    1128:	42000800 	.word	0x42000800
    112c:	42000c00 	.word	0x42000c00
    1130:	42001800 	.word	0x42001800
    1134:	42001c00 	.word	0x42001c00
    1138:	42001400 	.word	0x42001400
    113c:	00040003 	.word	0x00040003
    1140:	00060003 	.word	0x00060003
    1144:	00070003 	.word	0x00070003
    1148:	001e0003 	.word	0x001e0003
    114c:	001f0003 	.word	0x001f0003
    1150:	00080003 	.word	0x00080003
    1154:	000a0003 	.word	0x000a0003
    1158:	000b0003 	.word	0x000b0003
    115c:	00100003 	.word	0x00100003
    1160:	00120003 	.word	0x00120003
    1164:	00130003 	.word	0x00130003
    1168:	000c0003 	.word	0x000c0003
    116c:	000e0003 	.word	0x000e0003
    1170:	000f0003 	.word	0x000f0003
    1174:	00160003 	.word	0x00160003
    1178:	00180003 	.word	0x00180003
    117c:	00190003 	.word	0x00190003
    1180:	00050003 	.word	0x00050003
    1184:	00010003 	.word	0x00010003
    1188:	00090003 	.word	0x00090003
    118c:	00110003 	.word	0x00110003
    1190:	000d0003 	.word	0x000d0003
    1194:	00170003 	.word	0x00170003

00001198 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1198:	b570      	push	{r4, r5, r6, lr}
    119a:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    119c:	4a0c      	ldr	r2, [pc, #48]	; (11d0 <_sercom_get_sercom_inst_index+0x38>)
    119e:	466b      	mov	r3, sp
    11a0:	ca70      	ldmia	r2!, {r4, r5, r6}
    11a2:	c370      	stmia	r3!, {r4, r5, r6}
    11a4:	ca32      	ldmia	r2!, {r1, r4, r5}
    11a6:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    11a8:	9e00      	ldr	r6, [sp, #0]
    11aa:	4286      	cmp	r6, r0
    11ac:	d006      	beq.n	11bc <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11ae:	2301      	movs	r3, #1
    11b0:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    11b2:	4669      	mov	r1, sp
    11b4:	5852      	ldr	r2, [r2, r1]
    11b6:	4282      	cmp	r2, r0
    11b8:	d103      	bne.n	11c2 <_sercom_get_sercom_inst_index+0x2a>
    11ba:	e000      	b.n	11be <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11bc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    11be:	b2d8      	uxtb	r0, r3
    11c0:	e003      	b.n	11ca <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11c2:	3301      	adds	r3, #1
    11c4:	2b06      	cmp	r3, #6
    11c6:	d1f3      	bne.n	11b0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    11c8:	2000      	movs	r0, #0
}
    11ca:	b006      	add	sp, #24
    11cc:	bd70      	pop	{r4, r5, r6, pc}
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	0000691c 	.word	0x0000691c

000011d4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    11d4:	4770      	bx	lr
    11d6:	46c0      	nop			; (mov r8, r8)

000011d8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    11d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    11da:	4b0a      	ldr	r3, [pc, #40]	; (1204 <_sercom_set_handler+0x2c>)
    11dc:	781b      	ldrb	r3, [r3, #0]
    11de:	2b00      	cmp	r3, #0
    11e0:	d10c      	bne.n	11fc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11e2:	4f09      	ldr	r7, [pc, #36]	; (1208 <_sercom_set_handler+0x30>)
    11e4:	4e09      	ldr	r6, [pc, #36]	; (120c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    11e6:	4d0a      	ldr	r5, [pc, #40]	; (1210 <_sercom_set_handler+0x38>)
    11e8:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11ea:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    11ec:	195a      	adds	r2, r3, r5
    11ee:	6014      	str	r4, [r2, #0]
    11f0:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11f2:	2b18      	cmp	r3, #24
    11f4:	d1f9      	bne.n	11ea <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    11f6:	2201      	movs	r2, #1
    11f8:	4b02      	ldr	r3, [pc, #8]	; (1204 <_sercom_set_handler+0x2c>)
    11fa:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    11fc:	0080      	lsls	r0, r0, #2
    11fe:	4b02      	ldr	r3, [pc, #8]	; (1208 <_sercom_set_handler+0x30>)
    1200:	50c1      	str	r1, [r0, r3]
}
    1202:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1204:	20000180 	.word	0x20000180
    1208:	20000184 	.word	0x20000184
    120c:	000011d5 	.word	0x000011d5
    1210:	20000688 	.word	0x20000688

00001214 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1214:	b510      	push	{r4, lr}
    1216:	b082      	sub	sp, #8
    1218:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    121a:	4668      	mov	r0, sp
    121c:	4905      	ldr	r1, [pc, #20]	; (1234 <_sercom_get_interrupt_vector+0x20>)
    121e:	2206      	movs	r2, #6
    1220:	4b05      	ldr	r3, [pc, #20]	; (1238 <_sercom_get_interrupt_vector+0x24>)
    1222:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1224:	1c20      	adds	r0, r4, #0
    1226:	4b05      	ldr	r3, [pc, #20]	; (123c <_sercom_get_interrupt_vector+0x28>)
    1228:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    122a:	466b      	mov	r3, sp
    122c:	5618      	ldrsb	r0, [r3, r0]
}
    122e:	b002      	add	sp, #8
    1230:	bd10      	pop	{r4, pc}
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	00006934 	.word	0x00006934
    1238:	000065f1 	.word	0x000065f1
    123c:	00001199 	.word	0x00001199

00001240 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1240:	b508      	push	{r3, lr}
    1242:	4b02      	ldr	r3, [pc, #8]	; (124c <SERCOM0_Handler+0xc>)
    1244:	681b      	ldr	r3, [r3, #0]
    1246:	2000      	movs	r0, #0
    1248:	4798      	blx	r3
    124a:	bd08      	pop	{r3, pc}
    124c:	20000184 	.word	0x20000184

00001250 <SERCOM1_Handler>:
    1250:	b508      	push	{r3, lr}
    1252:	4b02      	ldr	r3, [pc, #8]	; (125c <SERCOM1_Handler+0xc>)
    1254:	685b      	ldr	r3, [r3, #4]
    1256:	2001      	movs	r0, #1
    1258:	4798      	blx	r3
    125a:	bd08      	pop	{r3, pc}
    125c:	20000184 	.word	0x20000184

00001260 <SERCOM2_Handler>:
    1260:	b508      	push	{r3, lr}
    1262:	4b02      	ldr	r3, [pc, #8]	; (126c <SERCOM2_Handler+0xc>)
    1264:	689b      	ldr	r3, [r3, #8]
    1266:	2002      	movs	r0, #2
    1268:	4798      	blx	r3
    126a:	bd08      	pop	{r3, pc}
    126c:	20000184 	.word	0x20000184

00001270 <SERCOM3_Handler>:
    1270:	b508      	push	{r3, lr}
    1272:	4b02      	ldr	r3, [pc, #8]	; (127c <SERCOM3_Handler+0xc>)
    1274:	68db      	ldr	r3, [r3, #12]
    1276:	2003      	movs	r0, #3
    1278:	4798      	blx	r3
    127a:	bd08      	pop	{r3, pc}
    127c:	20000184 	.word	0x20000184

00001280 <SERCOM4_Handler>:
    1280:	b508      	push	{r3, lr}
    1282:	4b02      	ldr	r3, [pc, #8]	; (128c <SERCOM4_Handler+0xc>)
    1284:	691b      	ldr	r3, [r3, #16]
    1286:	2004      	movs	r0, #4
    1288:	4798      	blx	r3
    128a:	bd08      	pop	{r3, pc}
    128c:	20000184 	.word	0x20000184

00001290 <SERCOM5_Handler>:
    1290:	b508      	push	{r3, lr}
    1292:	4b02      	ldr	r3, [pc, #8]	; (129c <SERCOM5_Handler+0xc>)
    1294:	695b      	ldr	r3, [r3, #20]
    1296:	2005      	movs	r0, #5
    1298:	4798      	blx	r3
    129a:	bd08      	pop	{r3, pc}
    129c:	20000184 	.word	0x20000184

000012a0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    12a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12a2:	465f      	mov	r7, fp
    12a4:	4656      	mov	r6, sl
    12a6:	464d      	mov	r5, r9
    12a8:	4644      	mov	r4, r8
    12aa:	b4f0      	push	{r4, r5, r6, r7}
    12ac:	b091      	sub	sp, #68	; 0x44
    12ae:	1c05      	adds	r5, r0, #0
    12b0:	1c0c      	adds	r4, r1, #0
    12b2:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    12b4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12b6:	1c08      	adds	r0, r1, #0
    12b8:	4bad      	ldr	r3, [pc, #692]	; (1570 <usart_init+0x2d0>)
    12ba:	4798      	blx	r3
    12bc:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    12be:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    12c0:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    12c2:	07d9      	lsls	r1, r3, #31
    12c4:	d500      	bpl.n	12c8 <usart_init+0x28>
    12c6:	e14b      	b.n	1560 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    12c8:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    12ca:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    12cc:	079f      	lsls	r7, r3, #30
    12ce:	d500      	bpl.n	12d2 <usart_init+0x32>
    12d0:	e146      	b.n	1560 <usart_init+0x2c0>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    12d2:	4ba8      	ldr	r3, [pc, #672]	; (1574 <usart_init+0x2d4>)
    12d4:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    12d6:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    12d8:	2701      	movs	r7, #1
    12da:	408f      	lsls	r7, r1
    12dc:	1c39      	adds	r1, r7, #0
    12de:	4301      	orrs	r1, r0
    12e0:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    12e2:	a90f      	add	r1, sp, #60	; 0x3c
    12e4:	272d      	movs	r7, #45	; 0x2d
    12e6:	5df3      	ldrb	r3, [r6, r7]
    12e8:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    12ea:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    12ec:	b2d2      	uxtb	r2, r2
    12ee:	4690      	mov	r8, r2
    12f0:	1c10      	adds	r0, r2, #0
    12f2:	4ba1      	ldr	r3, [pc, #644]	; (1578 <usart_init+0x2d8>)
    12f4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    12f6:	4640      	mov	r0, r8
    12f8:	4ba0      	ldr	r3, [pc, #640]	; (157c <usart_init+0x2dc>)
    12fa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    12fc:	5df0      	ldrb	r0, [r6, r7]
    12fe:	2100      	movs	r1, #0
    1300:	4b9f      	ldr	r3, [pc, #636]	; (1580 <usart_init+0x2e0>)
    1302:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1304:	7af3      	ldrb	r3, [r6, #11]
    1306:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    1308:	2324      	movs	r3, #36	; 0x24
    130a:	5cf3      	ldrb	r3, [r6, r3]
    130c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    130e:	2325      	movs	r3, #37	; 0x25
    1310:	5cf3      	ldrb	r3, [r6, r3]
    1312:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1314:	7ef3      	ldrb	r3, [r6, #27]
    1316:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1318:	7f33      	ldrb	r3, [r6, #28]
    131a:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    131c:	6829      	ldr	r1, [r5, #0]
    131e:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1320:	1c08      	adds	r0, r1, #0
    1322:	4b93      	ldr	r3, [pc, #588]	; (1570 <usart_init+0x2d0>)
    1324:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1326:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    1328:	2200      	movs	r2, #0
    132a:	466b      	mov	r3, sp
    132c:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    132e:	8a32      	ldrh	r2, [r6, #16]
    1330:	9202      	str	r2, [sp, #8]
    1332:	2380      	movs	r3, #128	; 0x80
    1334:	01db      	lsls	r3, r3, #7
    1336:	429a      	cmp	r2, r3
    1338:	d021      	beq.n	137e <usart_init+0xde>
    133a:	2380      	movs	r3, #128	; 0x80
    133c:	01db      	lsls	r3, r3, #7
    133e:	429a      	cmp	r2, r3
    1340:	d804      	bhi.n	134c <usart_init+0xac>
    1342:	2380      	movs	r3, #128	; 0x80
    1344:	019b      	lsls	r3, r3, #6
    1346:	429a      	cmp	r2, r3
    1348:	d011      	beq.n	136e <usart_init+0xce>
    134a:	e008      	b.n	135e <usart_init+0xbe>
    134c:	23c0      	movs	r3, #192	; 0xc0
    134e:	01db      	lsls	r3, r3, #7
    1350:	9f02      	ldr	r7, [sp, #8]
    1352:	429f      	cmp	r7, r3
    1354:	d00f      	beq.n	1376 <usart_init+0xd6>
    1356:	2380      	movs	r3, #128	; 0x80
    1358:	021b      	lsls	r3, r3, #8
    135a:	429f      	cmp	r7, r3
    135c:	d003      	beq.n	1366 <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    135e:	2710      	movs	r7, #16
    1360:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1362:	2700      	movs	r7, #0
    1364:	e00e      	b.n	1384 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1366:	2703      	movs	r7, #3
    1368:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    136a:	2700      	movs	r7, #0
    136c:	e00a      	b.n	1384 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    136e:	2710      	movs	r7, #16
    1370:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1372:	2701      	movs	r7, #1
    1374:	e006      	b.n	1384 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1376:	2708      	movs	r7, #8
    1378:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    137a:	2701      	movs	r7, #1
    137c:	e002      	b.n	1384 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    137e:	2708      	movs	r7, #8
    1380:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1382:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1384:	6831      	ldr	r1, [r6, #0]
    1386:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
    1388:	68f2      	ldr	r2, [r6, #12]
    138a:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    138c:	6973      	ldr	r3, [r6, #20]
    138e:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1390:	7e31      	ldrb	r1, [r6, #24]
    1392:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1394:	2326      	movs	r3, #38	; 0x26
    1396:	5cf3      	ldrb	r3, [r6, r3]
    1398:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    139a:	6873      	ldr	r3, [r6, #4]
    139c:	2b00      	cmp	r3, #0
    139e:	d013      	beq.n	13c8 <usart_init+0x128>
    13a0:	2280      	movs	r2, #128	; 0x80
    13a2:	0552      	lsls	r2, r2, #21
    13a4:	4293      	cmp	r3, r2
    13a6:	d12e      	bne.n	1406 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    13a8:	2327      	movs	r3, #39	; 0x27
    13aa:	5cf3      	ldrb	r3, [r6, r3]
    13ac:	2b00      	cmp	r3, #0
    13ae:	d12e      	bne.n	140e <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    13b0:	6a37      	ldr	r7, [r6, #32]
    13b2:	b2c0      	uxtb	r0, r0
    13b4:	4b73      	ldr	r3, [pc, #460]	; (1584 <usart_init+0x2e4>)
    13b6:	4798      	blx	r3
    13b8:	1c01      	adds	r1, r0, #0
    13ba:	1c38      	adds	r0, r7, #0
    13bc:	466a      	mov	r2, sp
    13be:	3226      	adds	r2, #38	; 0x26
    13c0:	4b71      	ldr	r3, [pc, #452]	; (1588 <usart_init+0x2e8>)
    13c2:	4798      	blx	r3
    13c4:	1c03      	adds	r3, r0, #0
    13c6:	e01f      	b.n	1408 <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    13c8:	2327      	movs	r3, #39	; 0x27
    13ca:	5cf3      	ldrb	r3, [r6, r3]
    13cc:	2b00      	cmp	r3, #0
    13ce:	d00a      	beq.n	13e6 <usart_init+0x146>
				status_code =
    13d0:	9a06      	ldr	r2, [sp, #24]
    13d2:	9200      	str	r2, [sp, #0]
    13d4:	6a30      	ldr	r0, [r6, #32]
    13d6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    13d8:	466a      	mov	r2, sp
    13da:	3226      	adds	r2, #38	; 0x26
    13dc:	1c3b      	adds	r3, r7, #0
    13de:	4f6b      	ldr	r7, [pc, #428]	; (158c <usart_init+0x2ec>)
    13e0:	47b8      	blx	r7
    13e2:	1c03      	adds	r3, r0, #0
    13e4:	e010      	b.n	1408 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    13e6:	6a31      	ldr	r1, [r6, #32]
    13e8:	9107      	str	r1, [sp, #28]
    13ea:	b2c0      	uxtb	r0, r0
    13ec:	4b65      	ldr	r3, [pc, #404]	; (1584 <usart_init+0x2e4>)
    13ee:	4798      	blx	r3
    13f0:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    13f2:	9a06      	ldr	r2, [sp, #24]
    13f4:	9200      	str	r2, [sp, #0]
    13f6:	9807      	ldr	r0, [sp, #28]
    13f8:	466a      	mov	r2, sp
    13fa:	3226      	adds	r2, #38	; 0x26
    13fc:	1c3b      	adds	r3, r7, #0
    13fe:	4f63      	ldr	r7, [pc, #396]	; (158c <usart_init+0x2ec>)
    1400:	47b8      	blx	r7
    1402:	1c03      	adds	r3, r0, #0
    1404:	e000      	b.n	1408 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    1406:	2300      	movs	r3, #0
    1408:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    140a:	d000      	beq.n	140e <usart_init+0x16e>
    140c:	e0a8      	b.n	1560 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    140e:	7e73      	ldrb	r3, [r6, #25]
    1410:	2b00      	cmp	r3, #0
    1412:	d002      	beq.n	141a <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1414:	7eb3      	ldrb	r3, [r6, #26]
    1416:	4641      	mov	r1, r8
    1418:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    141a:	682a      	ldr	r2, [r5, #0]
    141c:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    141e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1420:	2b00      	cmp	r3, #0
    1422:	d1fc      	bne.n	141e <usart_init+0x17e>
    1424:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1426:	466b      	mov	r3, sp
    1428:	3326      	adds	r3, #38	; 0x26
    142a:	881b      	ldrh	r3, [r3, #0]
    142c:	4642      	mov	r2, r8
    142e:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1430:	464b      	mov	r3, r9
    1432:	9f03      	ldr	r7, [sp, #12]
    1434:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
    1436:	9f04      	ldr	r7, [sp, #16]
    1438:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    143a:	6871      	ldr	r1, [r6, #4]
    143c:	430b      	orrs	r3, r1
		config->sample_rate |
    143e:	9f02      	ldr	r7, [sp, #8]
    1440:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1442:	4652      	mov	r2, sl
    1444:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1446:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1448:	4659      	mov	r1, fp
    144a:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    144c:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    144e:	2327      	movs	r3, #39	; 0x27
    1450:	5cf3      	ldrb	r3, [r6, r3]
    1452:	2b00      	cmp	r3, #0
    1454:	d101      	bne.n	145a <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1456:	2304      	movs	r3, #4
    1458:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    145a:	7e71      	ldrb	r1, [r6, #25]
    145c:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    145e:	7f33      	ldrb	r3, [r6, #28]
    1460:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1462:	4319      	orrs	r1, r3
    1464:	7af2      	ldrb	r2, [r6, #11]
    1466:	7ab3      	ldrb	r3, [r6, #10]
    1468:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    146a:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    146c:	7f73      	ldrb	r3, [r6, #29]
    146e:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1470:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1472:	2324      	movs	r3, #36	; 0x24
    1474:	5cf3      	ldrb	r3, [r6, r3]
    1476:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1478:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    147a:	2325      	movs	r3, #37	; 0x25
    147c:	5cf3      	ldrb	r3, [r6, r3]
    147e:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1480:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1482:	8933      	ldrh	r3, [r6, #8]
    1484:	2bff      	cmp	r3, #255	; 0xff
    1486:	d00b      	beq.n	14a0 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1488:	7ef2      	ldrb	r2, [r6, #27]
    148a:	2a00      	cmp	r2, #0
    148c:	d003      	beq.n	1496 <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    148e:	22a0      	movs	r2, #160	; 0xa0
    1490:	04d2      	lsls	r2, r2, #19
    1492:	4317      	orrs	r7, r2
    1494:	e002      	b.n	149c <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1496:	2280      	movs	r2, #128	; 0x80
    1498:	0452      	lsls	r2, r2, #17
    149a:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    149c:	4319      	orrs	r1, r3
    149e:	e005      	b.n	14ac <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    14a0:	7ef3      	ldrb	r3, [r6, #27]
    14a2:	2b00      	cmp	r3, #0
    14a4:	d002      	beq.n	14ac <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    14a6:	2380      	movs	r3, #128	; 0x80
    14a8:	04db      	lsls	r3, r3, #19
    14aa:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    14ac:	232c      	movs	r3, #44	; 0x2c
    14ae:	5cf3      	ldrb	r3, [r6, r3]
    14b0:	2b00      	cmp	r3, #0
    14b2:	d103      	bne.n	14bc <usart_init+0x21c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    14b4:	4b36      	ldr	r3, [pc, #216]	; (1590 <usart_init+0x2f0>)
    14b6:	789b      	ldrb	r3, [r3, #2]
    14b8:	079a      	lsls	r2, r3, #30
    14ba:	d501      	bpl.n	14c0 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    14bc:	2380      	movs	r3, #128	; 0x80
    14be:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    14c0:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    14c2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    14c4:	2b00      	cmp	r3, #0
    14c6:	d1fc      	bne.n	14c2 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    14c8:	4643      	mov	r3, r8
    14ca:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    14cc:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    14ce:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    14d0:	2b00      	cmp	r3, #0
    14d2:	d1fc      	bne.n	14ce <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    14d4:	4641      	mov	r1, r8
    14d6:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    14d8:	ab0e      	add	r3, sp, #56	; 0x38
    14da:	2280      	movs	r2, #128	; 0x80
    14dc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    14de:	2200      	movs	r2, #0
    14e0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    14e2:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    14e4:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    14e6:	6b32      	ldr	r2, [r6, #48]	; 0x30
    14e8:	920a      	str	r2, [sp, #40]	; 0x28
    14ea:	6b73      	ldr	r3, [r6, #52]	; 0x34
    14ec:	930b      	str	r3, [sp, #44]	; 0x2c
    14ee:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    14f0:	970c      	str	r7, [sp, #48]	; 0x30
    14f2:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
    14f4:	960d      	str	r6, [sp, #52]	; 0x34
    14f6:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    14f8:	ae0e      	add	r6, sp, #56	; 0x38
    14fa:	b2f9      	uxtb	r1, r7
    14fc:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    14fe:	aa0a      	add	r2, sp, #40	; 0x28
    1500:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1502:	2800      	cmp	r0, #0
    1504:	d102      	bne.n	150c <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1506:	1c20      	adds	r0, r4, #0
    1508:	4a22      	ldr	r2, [pc, #136]	; (1594 <usart_init+0x2f4>)
    150a:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    150c:	1c43      	adds	r3, r0, #1
    150e:	d005      	beq.n	151c <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1510:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1512:	0c00      	lsrs	r0, r0, #16
    1514:	b2c0      	uxtb	r0, r0
    1516:	1c31      	adds	r1, r6, #0
    1518:	4a1f      	ldr	r2, [pc, #124]	; (1598 <usart_init+0x2f8>)
    151a:	4790      	blx	r2
    151c:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    151e:	2f04      	cmp	r7, #4
    1520:	d1eb      	bne.n	14fa <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    1522:	2300      	movs	r3, #0
    1524:	60eb      	str	r3, [r5, #12]
    1526:	612b      	str	r3, [r5, #16]
    1528:	616b      	str	r3, [r5, #20]
    152a:	61ab      	str	r3, [r5, #24]
    152c:	61eb      	str	r3, [r5, #28]
    152e:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1530:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1532:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1534:	2200      	movs	r2, #0
    1536:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1538:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    153a:	2330      	movs	r3, #48	; 0x30
    153c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    153e:	2331      	movs	r3, #49	; 0x31
    1540:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1542:	2332      	movs	r3, #50	; 0x32
    1544:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1546:	2333      	movs	r3, #51	; 0x33
    1548:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    154a:	6828      	ldr	r0, [r5, #0]
    154c:	4b08      	ldr	r3, [pc, #32]	; (1570 <usart_init+0x2d0>)
    154e:	4798      	blx	r3
    1550:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1552:	4912      	ldr	r1, [pc, #72]	; (159c <usart_init+0x2fc>)
    1554:	4b12      	ldr	r3, [pc, #72]	; (15a0 <usart_init+0x300>)
    1556:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1558:	00a4      	lsls	r4, r4, #2
    155a:	4b12      	ldr	r3, [pc, #72]	; (15a4 <usart_init+0x304>)
    155c:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    155e:	2000      	movs	r0, #0
}
    1560:	b011      	add	sp, #68	; 0x44
    1562:	bc3c      	pop	{r2, r3, r4, r5}
    1564:	4690      	mov	r8, r2
    1566:	4699      	mov	r9, r3
    1568:	46a2      	mov	sl, r4
    156a:	46ab      	mov	fp, r5
    156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    156e:	46c0      	nop			; (mov r8, r8)
    1570:	00001199 	.word	0x00001199
    1574:	40000400 	.word	0x40000400
    1578:	00000c61 	.word	0x00000c61
    157c:	00000bd5 	.word	0x00000bd5
    1580:	00000fc1 	.word	0x00000fc1
    1584:	00000c7d 	.word	0x00000c7d
    1588:	00000de5 	.word	0x00000de5
    158c:	00000e11 	.word	0x00000e11
    1590:	41002000 	.word	0x41002000
    1594:	00001011 	.word	0x00001011
    1598:	00000d3d 	.word	0x00000d3d
    159c:	00001645 	.word	0x00001645
    15a0:	000011d9 	.word	0x000011d9
    15a4:	20000688 	.word	0x20000688

000015a8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    15a8:	b510      	push	{r4, lr}
    15aa:	1c03      	adds	r3, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    15ac:	6802      	ldr	r2, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    15ae:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    15b0:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    15b2:	2c00      	cmp	r4, #0
    15b4:	d009      	beq.n	15ca <usart_write_wait+0x22>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    15b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    15b8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    15ba:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    15bc:	2b00      	cmp	r3, #0
    15be:	d104      	bne.n	15ca <usart_write_wait+0x22>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    15c0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    15c2:	2b00      	cmp	r3, #0
    15c4:	d1fc      	bne.n	15c0 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    15c6:	8511      	strh	r1, [r2, #40]	; 0x28

	//while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
	//	/* Wait until data is sent */
	//}

	return STATUS_OK;
    15c8:	2000      	movs	r0, #0
}
    15ca:	bd10      	pop	{r4, pc}

000015cc <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    15cc:	b510      	push	{r4, lr}
    15ce:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    15d0:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    15d2:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    15d4:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    15d6:	2a00      	cmp	r2, #0
    15d8:	d033      	beq.n	1642 <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    15da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    15dc:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    15de:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    15e0:	2b00      	cmp	r3, #0
    15e2:	d12e      	bne.n	1642 <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    15e4:	7e23      	ldrb	r3, [r4, #24]
    15e6:	075a      	lsls	r2, r3, #29
    15e8:	d52b      	bpl.n	1642 <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    15ea:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    15ec:	2b00      	cmp	r3, #0
    15ee:	d1fc      	bne.n	15ea <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    15f0:	8b63      	ldrh	r3, [r4, #26]
    15f2:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    15f4:	069a      	lsls	r2, r3, #26
    15f6:	d021      	beq.n	163c <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    15f8:	079a      	lsls	r2, r3, #30
    15fa:	d503      	bpl.n	1604 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    15fc:	2302      	movs	r3, #2
    15fe:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    1600:	201a      	movs	r0, #26
    1602:	e01e      	b.n	1642 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1604:	075a      	lsls	r2, r3, #29
    1606:	d503      	bpl.n	1610 <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1608:	2304      	movs	r3, #4
    160a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    160c:	201e      	movs	r0, #30
    160e:	e018      	b.n	1642 <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1610:	07da      	lsls	r2, r3, #31
    1612:	d503      	bpl.n	161c <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1614:	2301      	movs	r3, #1
    1616:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    1618:	2013      	movs	r0, #19
    161a:	e012      	b.n	1642 <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    161c:	06da      	lsls	r2, r3, #27
    161e:	d505      	bpl.n	162c <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1620:	8b62      	ldrh	r2, [r4, #26]
    1622:	2310      	movs	r3, #16
    1624:	4313      	orrs	r3, r2
    1626:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    1628:	2042      	movs	r0, #66	; 0x42
    162a:	e00a      	b.n	1642 <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    162c:	069a      	lsls	r2, r3, #26
    162e:	d505      	bpl.n	163c <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1630:	8b62      	ldrh	r2, [r4, #26]
    1632:	2320      	movs	r3, #32
    1634:	4313      	orrs	r3, r2
    1636:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1638:	2041      	movs	r0, #65	; 0x41
    163a:	e002      	b.n	1642 <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    163c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    163e:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1640:	2000      	movs	r0, #0
}
    1642:	bd10      	pop	{r4, pc}

00001644 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1646:	0080      	lsls	r0, r0, #2
    1648:	4b64      	ldr	r3, [pc, #400]	; (17dc <_usart_interrupt_handler+0x198>)
    164a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    164c:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    164e:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1650:	2b00      	cmp	r3, #0
    1652:	d1fc      	bne.n	164e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1654:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1656:	7da6      	ldrb	r6, [r4, #22]
    1658:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    165a:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    165c:	5ceb      	ldrb	r3, [r5, r3]
    165e:	2230      	movs	r2, #48	; 0x30
    1660:	5caf      	ldrb	r7, [r5, r2]
    1662:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1664:	07f1      	lsls	r1, r6, #31
    1666:	d520      	bpl.n	16aa <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    1668:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    166a:	b29b      	uxth	r3, r3
    166c:	2b00      	cmp	r3, #0
    166e:	d01a      	beq.n	16a6 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1670:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1672:	781a      	ldrb	r2, [r3, #0]
    1674:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1676:	1c59      	adds	r1, r3, #1
    1678:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    167a:	7969      	ldrb	r1, [r5, #5]
    167c:	2901      	cmp	r1, #1
    167e:	d104      	bne.n	168a <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1680:	7859      	ldrb	r1, [r3, #1]
    1682:	0209      	lsls	r1, r1, #8
    1684:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1686:	3302      	adds	r3, #2
    1688:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    168a:	05d3      	lsls	r3, r2, #23
    168c:	0ddb      	lsrs	r3, r3, #23
    168e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1690:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1692:	3b01      	subs	r3, #1
    1694:	b29b      	uxth	r3, r3
    1696:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1698:	2b00      	cmp	r3, #0
    169a:	d106      	bne.n	16aa <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    169c:	2301      	movs	r3, #1
    169e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    16a0:	2302      	movs	r3, #2
    16a2:	75a3      	strb	r3, [r4, #22]
    16a4:	e001      	b.n	16aa <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    16a6:	2301      	movs	r3, #1
    16a8:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    16aa:	07b2      	lsls	r2, r6, #30
    16ac:	d509      	bpl.n	16c2 <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    16ae:	2302      	movs	r3, #2
    16b0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    16b2:	2200      	movs	r2, #0
    16b4:	2333      	movs	r3, #51	; 0x33
    16b6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    16b8:	07fb      	lsls	r3, r7, #31
    16ba:	d502      	bpl.n	16c2 <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    16bc:	1c28      	adds	r0, r5, #0
    16be:	68e9      	ldr	r1, [r5, #12]
    16c0:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    16c2:	0772      	lsls	r2, r6, #29
    16c4:	d56a      	bpl.n	179c <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    16c6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    16c8:	b29b      	uxth	r3, r3
    16ca:	2b00      	cmp	r3, #0
    16cc:	d064      	beq.n	1798 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16ce:	8b63      	ldrh	r3, [r4, #26]
    16d0:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    16d2:	0719      	lsls	r1, r3, #28
    16d4:	d402      	bmi.n	16dc <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16d6:	223f      	movs	r2, #63	; 0x3f
    16d8:	4013      	ands	r3, r2
    16da:	e001      	b.n	16e0 <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    16dc:	2237      	movs	r2, #55	; 0x37
    16de:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    16e0:	2b00      	cmp	r3, #0
    16e2:	d037      	beq.n	1754 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    16e4:	079a      	lsls	r2, r3, #30
    16e6:	d507      	bpl.n	16f8 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    16e8:	221a      	movs	r2, #26
    16ea:	2332      	movs	r3, #50	; 0x32
    16ec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    16ee:	8b62      	ldrh	r2, [r4, #26]
    16f0:	2302      	movs	r3, #2
    16f2:	4313      	orrs	r3, r2
    16f4:	8363      	strh	r3, [r4, #26]
    16f6:	e027      	b.n	1748 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    16f8:	0759      	lsls	r1, r3, #29
    16fa:	d507      	bpl.n	170c <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    16fc:	221e      	movs	r2, #30
    16fe:	2332      	movs	r3, #50	; 0x32
    1700:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    1702:	8b62      	ldrh	r2, [r4, #26]
    1704:	2304      	movs	r3, #4
    1706:	4313      	orrs	r3, r2
    1708:	8363      	strh	r3, [r4, #26]
    170a:	e01d      	b.n	1748 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    170c:	07da      	lsls	r2, r3, #31
    170e:	d507      	bpl.n	1720 <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1710:	2213      	movs	r2, #19
    1712:	2332      	movs	r3, #50	; 0x32
    1714:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1716:	8b62      	ldrh	r2, [r4, #26]
    1718:	2301      	movs	r3, #1
    171a:	4313      	orrs	r3, r2
    171c:	8363      	strh	r3, [r4, #26]
    171e:	e013      	b.n	1748 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1720:	06d9      	lsls	r1, r3, #27
    1722:	d507      	bpl.n	1734 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1724:	2242      	movs	r2, #66	; 0x42
    1726:	2332      	movs	r3, #50	; 0x32
    1728:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    172a:	8b62      	ldrh	r2, [r4, #26]
    172c:	2310      	movs	r3, #16
    172e:	4313      	orrs	r3, r2
    1730:	8363      	strh	r3, [r4, #26]
    1732:	e009      	b.n	1748 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1734:	2220      	movs	r2, #32
    1736:	421a      	tst	r2, r3
    1738:	d006      	beq.n	1748 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    173a:	2241      	movs	r2, #65	; 0x41
    173c:	2332      	movs	r3, #50	; 0x32
    173e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1740:	8b62      	ldrh	r2, [r4, #26]
    1742:	2320      	movs	r3, #32
    1744:	4313      	orrs	r3, r2
    1746:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1748:	077a      	lsls	r2, r7, #29
    174a:	d527      	bpl.n	179c <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    174c:	1c28      	adds	r0, r5, #0
    174e:	696b      	ldr	r3, [r5, #20]
    1750:	4798      	blx	r3
    1752:	e023      	b.n	179c <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1754:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1756:	05d2      	lsls	r2, r2, #23
    1758:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    175a:	b2d3      	uxtb	r3, r2
    175c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    175e:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1760:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1762:	1c59      	adds	r1, r3, #1
    1764:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1766:	7969      	ldrb	r1, [r5, #5]
    1768:	2901      	cmp	r1, #1
    176a:	d104      	bne.n	1776 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    176c:	0a12      	lsrs	r2, r2, #8
    176e:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1770:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1772:	3301      	adds	r3, #1
    1774:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1776:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1778:	3b01      	subs	r3, #1
    177a:	b29b      	uxth	r3, r3
    177c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    177e:	2b00      	cmp	r3, #0
    1780:	d10c      	bne.n	179c <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1782:	2304      	movs	r3, #4
    1784:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1786:	2200      	movs	r2, #0
    1788:	2332      	movs	r3, #50	; 0x32
    178a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    178c:	07ba      	lsls	r2, r7, #30
    178e:	d505      	bpl.n	179c <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1790:	1c28      	adds	r0, r5, #0
    1792:	692b      	ldr	r3, [r5, #16]
    1794:	4798      	blx	r3
    1796:	e001      	b.n	179c <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1798:	2304      	movs	r3, #4
    179a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    179c:	06f1      	lsls	r1, r6, #27
    179e:	d507      	bpl.n	17b0 <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    17a0:	2310      	movs	r3, #16
    17a2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    17a4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    17a6:	06fa      	lsls	r2, r7, #27
    17a8:	d502      	bpl.n	17b0 <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    17aa:	1c28      	adds	r0, r5, #0
    17ac:	69eb      	ldr	r3, [r5, #28]
    17ae:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    17b0:	06b1      	lsls	r1, r6, #26
    17b2:	d507      	bpl.n	17c4 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    17b4:	2320      	movs	r3, #32
    17b6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    17b8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    17ba:	073a      	lsls	r2, r7, #28
    17bc:	d502      	bpl.n	17c4 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    17be:	1c28      	adds	r0, r5, #0
    17c0:	69ab      	ldr	r3, [r5, #24]
    17c2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    17c4:	0731      	lsls	r1, r6, #28
    17c6:	d507      	bpl.n	17d8 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    17c8:	2308      	movs	r3, #8
    17ca:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    17cc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    17ce:	06ba      	lsls	r2, r7, #26
    17d0:	d502      	bpl.n	17d8 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    17d2:	6a2b      	ldr	r3, [r5, #32]
    17d4:	1c28      	adds	r0, r5, #0
    17d6:	4798      	blx	r3
		}
	}
#endif
}
    17d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17da:	46c0      	nop			; (mov r8, r8)
    17dc:	20000688 	.word	0x20000688

000017e0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    17e0:	b500      	push	{lr}
    17e2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    17e4:	ab01      	add	r3, sp, #4
    17e6:	2280      	movs	r2, #128	; 0x80
    17e8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    17ea:	780a      	ldrb	r2, [r1, #0]
    17ec:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    17ee:	784a      	ldrb	r2, [r1, #1]
    17f0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    17f2:	788a      	ldrb	r2, [r1, #2]
    17f4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    17f6:	1c19      	adds	r1, r3, #0
    17f8:	4b01      	ldr	r3, [pc, #4]	; (1800 <port_pin_set_config+0x20>)
    17fa:	4798      	blx	r3
}
    17fc:	b003      	add	sp, #12
    17fe:	bd00      	pop	{pc}
    1800:	00000d3d 	.word	0x00000d3d

00001804 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1804:	4b06      	ldr	r3, [pc, #24]	; (1820 <_sbrk+0x1c>)
    1806:	681b      	ldr	r3, [r3, #0]
    1808:	2b00      	cmp	r3, #0
    180a:	d102      	bne.n	1812 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    180c:	4a05      	ldr	r2, [pc, #20]	; (1824 <_sbrk+0x20>)
    180e:	4b04      	ldr	r3, [pc, #16]	; (1820 <_sbrk+0x1c>)
    1810:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    1812:	4a03      	ldr	r2, [pc, #12]	; (1820 <_sbrk+0x1c>)
    1814:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    1816:	1818      	adds	r0, r3, r0
    1818:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    181a:	1c18      	adds	r0, r3, #0
    181c:	4770      	bx	lr
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	2000019c 	.word	0x2000019c
    1824:	200007a8 	.word	0x200007a8

00001828 <main>:
#include "sam.h"

#include <main_app.h>

int main(void)
{
    1828:	b508      	push	{r3, lr}
	main_app();
    182a:	4b02      	ldr	r3, [pc, #8]	; (1834 <main+0xc>)
    182c:	4798      	blx	r3
}
    182e:	2000      	movs	r0, #0
    1830:	bd08      	pop	{r3, pc}
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	00001839 	.word	0x00001839

00001838 <_Z8main_appv>:
GI::Screen::Gfx::Window *MainWindow = NULL;
GI::Screen::Gfx::TextBox *SensorResultTextboxGlobal;
#endif

void main_app(void)
{
    1838:	b5f0      	push	{r4, r5, r6, r7, lr}
    183a:	4647      	mov	r7, r8
    183c:	b480      	push	{r7}
    183e:	b094      	sub	sp, #80	; 0x50
	GI::Sys::Timer timer_touch = GI::Sys::Timer(20);
    1840:	a804      	add	r0, sp, #16
    1842:	2214      	movs	r2, #20
    1844:	2300      	movs	r3, #0
    1846:	4c28      	ldr	r4, [pc, #160]	; (18e8 <_Z8main_appv+0xb0>)
    1848:	47a0      	blx	r4
	GI::Sys::Timer blink_timer = GI::Sys::Timer(100);
    184a:	a808      	add	r0, sp, #32
    184c:	2264      	movs	r2, #100	; 0x64
    184e:	2300      	movs	r3, #0
    1850:	47a0      	blx	r4
#if (_USE_L3GD20 == 1)
	GI::Sensor::L3gd20 l3gd20_0 = GI::Sensor::L3gd20((char *)"spi-4.1");
#endif

#if (USE_UART == 1 && USE_TERMINAL == 1)
	Cmd term = Cmd((char *)CONSOLE_UART_IN, (char *)CONSOLE_UART_OUT, (char *)CONSOLE_UART_ERR);
    1852:	4c26      	ldr	r4, [pc, #152]	; (18ec <_Z8main_appv+0xb4>)
    1854:	a80d      	add	r0, sp, #52	; 0x34
    1856:	1c21      	adds	r1, r4, #0
    1858:	1c22      	adds	r2, r4, #0
    185a:	1c23      	adds	r3, r4, #0
    185c:	4d24      	ldr	r5, [pc, #144]	; (18f0 <_Z8main_appv+0xb8>)
    185e:	47a8      	blx	r5
	/*GI::Sys::Clock::changeCoreClk(25000000);
	unsigned long baud = 1200;
	terminal.ctl(GI::IO::IO_CTL_SET_SPEED, &baud);*/

#if (SHOW_SENSORS_RESULT_ON_SCREEN == 0)
	GI::IO terminal = GI::IO((char *)CONSOLE_UART_OUT);
    1860:	a801      	add	r0, sp, #4
    1862:	1c21      	adds	r1, r4, #0
    1864:	4b23      	ldr	r3, [pc, #140]	; (18f4 <_Z8main_appv+0xbc>)
    1866:	4798      	blx	r3
void main_app(void)
{
	GI::Sys::Timer timer_touch = GI::Sys::Timer(20);
	GI::Sys::Timer blink_timer = GI::Sys::Timer(100);

	bool led_state = false;
    1868:	2300      	movs	r3, #0
    186a:	4698      	mov	r8, r3
	//terminal.write((unsigned char *)buffer, bytesread);

	while(1)
	{
		//GI::Sys::Clock::sleep();
		dev.idle();
    186c:	4f22      	ldr	r7, [pc, #136]	; (18f8 <_Z8main_appv+0xc0>)
    186e:	4e23      	ldr	r6, [pc, #140]	; (18fc <_Z8main_appv+0xc4>)
#if (USE_UART == 1 && USE_TERMINAL == 1)
		term.idle();
    1870:	4d23      	ldr	r5, [pc, #140]	; (1900 <_Z8main_appv+0xc8>)
	//terminal.write((unsigned char *)buffer, bytesread);

	while(1)
	{
		//GI::Sys::Clock::sleep();
		dev.idle();
    1872:	1c38      	adds	r0, r7, #0
    1874:	47b0      	blx	r6
#if (USE_UART == 1 && USE_TERMINAL == 1)
		term.idle();
    1876:	a80d      	add	r0, sp, #52	; 0x34
    1878:	47a8      	blx	r5
#endif
		/*
		 * Call every 20ms the idle function of touch screen interface
		 * 	and idle function of parent window.
		 */
		if(timer_touch.tick())
    187a:	a804      	add	r0, sp, #16
    187c:	4c21      	ldr	r4, [pc, #132]	; (1904 <_Z8main_appv+0xcc>)
    187e:	47a0      	blx	r4
					pass->clearText->set((char *)"Wrong password!");
				}
			}
#endif
		}
		if(blink_timer.tick())
    1880:	a808      	add	r0, sp, #32
    1882:	47a0      	blx	r4
    1884:	2800      	cmp	r0, #0
    1886:	d0f4      	beq.n	1872 <_Z8main_appv+0x3a>
		{
			bool state;
			GI::IO::read((char *)"led-0", &state);
    1888:	466c      	mov	r4, sp
    188a:	3403      	adds	r4, #3
    188c:	481e      	ldr	r0, [pc, #120]	; (1908 <_Z8main_appv+0xd0>)
    188e:	1c21      	adds	r1, r4, #0
    1890:	4b1e      	ldr	r3, [pc, #120]	; (190c <_Z8main_appv+0xd4>)
    1892:	4798      	blx	r3
			if(state)
    1894:	7823      	ldrb	r3, [r4, #0]
    1896:	2b00      	cmp	r3, #0
    1898:	d016      	beq.n	18c8 <_Z8main_appv+0x90>
			{
				if(led_state)
    189a:	4643      	mov	r3, r8
    189c:	2b00      	cmp	r3, #0
    189e:	d007      	beq.n	18b0 <_Z8main_appv+0x78>
				{
					blink_timer.interval(780);
    18a0:	a808      	add	r0, sp, #32
    18a2:	4b10      	ldr	r3, [pc, #64]	; (18e4 <_Z8main_appv+0xac>)
    18a4:	4a0e      	ldr	r2, [pc, #56]	; (18e0 <_Z8main_appv+0xa8>)
    18a6:	491a      	ldr	r1, [pc, #104]	; (1910 <_Z8main_appv+0xd8>)
    18a8:	4788      	blx	r1
					led_state = false;
    18aa:	2300      	movs	r3, #0
    18ac:	4698      	mov	r8, r3
    18ae:	e006      	b.n	18be <_Z8main_appv+0x86>
				}
				else
				{
					blink_timer.interval(180);
    18b0:	a808      	add	r0, sp, #32
    18b2:	22b4      	movs	r2, #180	; 0xb4
    18b4:	2300      	movs	r3, #0
    18b6:	4916      	ldr	r1, [pc, #88]	; (1910 <_Z8main_appv+0xd8>)
    18b8:	4788      	blx	r1
					led_state = true;
    18ba:	2301      	movs	r3, #1
    18bc:	4698      	mov	r8, r3
				}
				GI::IO::write((char *)"led-0", false);
    18be:	4812      	ldr	r0, [pc, #72]	; (1908 <_Z8main_appv+0xd0>)
    18c0:	2100      	movs	r1, #0
    18c2:	4b14      	ldr	r3, [pc, #80]	; (1914 <_Z8main_appv+0xdc>)
    18c4:	4798      	blx	r3
    18c6:	e7d4      	b.n	1872 <_Z8main_appv+0x3a>
			}
			else
			{
				blink_timer.interval(20);
    18c8:	a808      	add	r0, sp, #32
    18ca:	2214      	movs	r2, #20
    18cc:	2300      	movs	r3, #0
    18ce:	4910      	ldr	r1, [pc, #64]	; (1910 <_Z8main_appv+0xd8>)
    18d0:	4788      	blx	r1
				GI::IO::write((char *)"led-0", true);
    18d2:	480d      	ldr	r0, [pc, #52]	; (1908 <_Z8main_appv+0xd0>)
    18d4:	2101      	movs	r1, #1
    18d6:	4b0f      	ldr	r3, [pc, #60]	; (1914 <_Z8main_appv+0xdc>)
    18d8:	4798      	blx	r3
    18da:	e7ca      	b.n	1872 <_Z8main_appv+0x3a>
    18dc:	46c0      	nop			; (mov r8, r8)
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	0000030c 	.word	0x0000030c
    18e4:	00000000 	.word	0x00000000
    18e8:	00001f6d 	.word	0x00001f6d
    18ec:	0000693c 	.word	0x0000693c
    18f0:	000023e5 	.word	0x000023e5
    18f4:	00001c59 	.word	0x00001c59
    18f8:	200001a0 	.word	0x200001a0
    18fc:	00001c0d 	.word	0x00001c0d
    1900:	00002529 	.word	0x00002529
    1904:	00001fb1 	.word	0x00001fb1
    1908:	00006944 	.word	0x00006944
    190c:	00001f09 	.word	0x00001f09
    1910:	00001f99 	.word	0x00001f99
    1914:	00001e01 	.word	0x00001e01

00001918 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE>:

#include <api/init.h>
#include "dev_request.h"

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Gpio **device)
{
    1918:	b5f0      	push	{r4, r5, r6, r7, lr}
    191a:	4647      	mov	r7, r8
    191c:	b480      	push	{r7}
    191e:	1c06      	adds	r6, r0, #0
    1920:	4688      	mov	r8, r1
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.GPIO == NULL || dev.GPIO[dev_nr] == NULL || dev.GPIO[dev_nr]->cfg.name[0] == 0 || dev.GPIO[dev_nr]->cfg.name[0] == '\0')
    1922:	4b13      	ldr	r3, [pc, #76]	; (1970 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x58>)
    1924:	68dd      	ldr	r5, [r3, #12]
    1926:	2d00      	cmp	r5, #0
    1928:	d00a      	beq.n	1940 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x28>
    192a:	682c      	ldr	r4, [r5, #0]
    192c:	2c00      	cmp	r4, #0
    192e:	d007      	beq.n	1940 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x28>
    1930:	7923      	ldrb	r3, [r4, #4]
    1932:	2b00      	cmp	r3, #0
    1934:	d109      	bne.n	194a <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x32>
    1936:	e003      	b.n	1940 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x28>
    1938:	3504      	adds	r5, #4
    193a:	7923      	ldrb	r3, [r4, #4]
    193c:	2b00      	cmp	r3, #0
    193e:	d106      	bne.n	194e <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x36>
		{
			*device = NULL;
    1940:	2300      	movs	r3, #0
    1942:	4642      	mov	r2, r8
    1944:	6013      	str	r3, [r2, #0]
			return SYS_ERR_INVALID_PATH;
    1946:	20f5      	movs	r0, #245	; 0xf5
    1948:	e00d      	b.n	1966 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x4e>
    194a:	3504      	adds	r5, #4
		}
		if(!strcmp(dev.GPIO[dev_nr]->cfg.name, path))
    194c:	4f09      	ldr	r7, [pc, #36]	; (1974 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x5c>)
    194e:	1d20      	adds	r0, r4, #4
    1950:	1c31      	adds	r1, r6, #0
    1952:	47b8      	blx	r7
    1954:	2800      	cmp	r0, #0
    1956:	d003      	beq.n	1960 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x48>
SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Gpio **device)
{
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.GPIO == NULL || dev.GPIO[dev_nr] == NULL || dev.GPIO[dev_nr]->cfg.name[0] == 0 || dev.GPIO[dev_nr]->cfg.name[0] == '\0')
    1958:	682c      	ldr	r4, [r5, #0]
    195a:	2c00      	cmp	r4, #0
    195c:	d1ec      	bne.n	1938 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x20>
    195e:	e7ef      	b.n	1940 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x28>
		}
		if(!strcmp(dev.GPIO[dev_nr]->cfg.name, path))
			break;
		dev_nr++;
	}
	*device = dev.GPIO[dev_nr];
    1960:	4643      	mov	r3, r8
    1962:	601c      	str	r4, [r3, #0]
	return SYS_ERR_OK;
    1964:	2000      	movs	r0, #0
    1966:	b240      	sxtb	r0, r0
}
    1968:	bc04      	pop	{r2}
    196a:	4690      	mov	r8, r2
    196c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	200001a0 	.word	0x200001a0
    1974:	000067ef 	.word	0x000067ef

00001978 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::I2c **device)
{
    1978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    197a:	464f      	mov	r7, r9
    197c:	4646      	mov	r6, r8
    197e:	b4c0      	push	{r6, r7}
    1980:	1c06      	adds	r6, r0, #0
    1982:	4689      	mov	r9, r1
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.I2C == NULL || dev.I2C[dev_nr] == NULL || dev.I2C[dev_nr]->cfg.name == NULL || dev.I2C[dev_nr]->cfg.name[0] == '\0')
    1984:	4b18      	ldr	r3, [pc, #96]	; (19e8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x70>)
    1986:	691d      	ldr	r5, [r3, #16]
    1988:	2d00      	cmp	r5, #0
    198a:	d014      	beq.n	19b6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x3e>
    198c:	682c      	ldr	r4, [r5, #0]
    198e:	2c00      	cmp	r4, #0
    1990:	d011      	beq.n	19b6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x3e>
    1992:	1c20      	adds	r0, r4, #0
    1994:	3024      	adds	r0, #36	; 0x24
    1996:	2800      	cmp	r0, #0
    1998:	d00d      	beq.n	19b6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x3e>
    199a:	2324      	movs	r3, #36	; 0x24
    199c:	5ce3      	ldrb	r3, [r4, r3]
    199e:	2b00      	cmp	r3, #0
    19a0:	d10e      	bne.n	19c0 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x48>
    19a2:	e008      	b.n	19b6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x3e>
    19a4:	1c20      	adds	r0, r4, #0
    19a6:	3024      	adds	r0, #36	; 0x24
    19a8:	2800      	cmp	r0, #0
    19aa:	d004      	beq.n	19b6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x3e>
    19ac:	3504      	adds	r5, #4
    19ae:	4642      	mov	r2, r8
    19b0:	5ca3      	ldrb	r3, [r4, r2]
    19b2:	2b00      	cmp	r3, #0
    19b4:	d108      	bne.n	19c8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x50>
		{
			*device = NULL;
    19b6:	2300      	movs	r3, #0
    19b8:	464a      	mov	r2, r9
    19ba:	6013      	str	r3, [r2, #0]
			return SYS_ERR_INVALID_PATH;
    19bc:	20f5      	movs	r0, #245	; 0xf5
    19be:	e00e      	b.n	19de <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x66>
    19c0:	3504      	adds	r5, #4
		}
		if(!strcmp(dev.I2C[dev_nr]->cfg.name, path))
    19c2:	4f0a      	ldr	r7, [pc, #40]	; (19ec <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x74>)
SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::I2c **device)
{
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.I2C == NULL || dev.I2C[dev_nr] == NULL || dev.I2C[dev_nr]->cfg.name == NULL || dev.I2C[dev_nr]->cfg.name[0] == '\0')
    19c4:	2324      	movs	r3, #36	; 0x24
    19c6:	4698      	mov	r8, r3
		{
			*device = NULL;
			return SYS_ERR_INVALID_PATH;
		}
		if(!strcmp(dev.I2C[dev_nr]->cfg.name, path))
    19c8:	1c31      	adds	r1, r6, #0
    19ca:	47b8      	blx	r7
    19cc:	2800      	cmp	r0, #0
    19ce:	d003      	beq.n	19d8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x60>
SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::I2c **device)
{
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.I2C == NULL || dev.I2C[dev_nr] == NULL || dev.I2C[dev_nr]->cfg.name == NULL || dev.I2C[dev_nr]->cfg.name[0] == '\0')
    19d0:	682c      	ldr	r4, [r5, #0]
    19d2:	2c00      	cmp	r4, #0
    19d4:	d1e6      	bne.n	19a4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x2c>
    19d6:	e7ee      	b.n	19b6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x3e>
		}
		if(!strcmp(dev.I2C[dev_nr]->cfg.name, path))
			break;
		dev_nr++;
	}
	*device = dev.I2C[dev_nr];
    19d8:	464a      	mov	r2, r9
    19da:	6014      	str	r4, [r2, #0]
	return SYS_ERR_OK;
    19dc:	2000      	movs	r0, #0
    19de:	b240      	sxtb	r0, r0
}
    19e0:	bc0c      	pop	{r2, r3}
    19e2:	4690      	mov	r8, r2
    19e4:	4699      	mov	r9, r3
    19e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19e8:	200001a0 	.word	0x200001a0
    19ec:	000067ef 	.word	0x000067ef

000019f0 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Spi **device)
{
    19f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19f2:	4647      	mov	r7, r8
    19f4:	b480      	push	{r7}
    19f6:	1c06      	adds	r6, r0, #0
    19f8:	4688      	mov	r8, r1
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.SPI == NULL || dev.SPI[dev_nr] == NULL || dev.SPI[dev_nr]->cfg.name == NULL || dev.SPI[dev_nr]->cfg.name[0] == '\0')
    19fa:	4b15      	ldr	r3, [pc, #84]	; (1a50 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x60>)
    19fc:	695d      	ldr	r5, [r3, #20]
    19fe:	2d00      	cmp	r5, #0
    1a00:	d010      	beq.n	1a24 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x34>
    1a02:	682c      	ldr	r4, [r5, #0]
    1a04:	2c00      	cmp	r4, #0
    1a06:	d00d      	beq.n	1a24 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x34>
    1a08:	1d20      	adds	r0, r4, #4
    1a0a:	2800      	cmp	r0, #0
    1a0c:	d00a      	beq.n	1a24 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x34>
    1a0e:	7923      	ldrb	r3, [r4, #4]
    1a10:	2b00      	cmp	r3, #0
    1a12:	d10c      	bne.n	1a2e <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x3e>
    1a14:	e006      	b.n	1a24 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x34>
    1a16:	1d20      	adds	r0, r4, #4
    1a18:	2800      	cmp	r0, #0
    1a1a:	d003      	beq.n	1a24 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x34>
    1a1c:	3504      	adds	r5, #4
    1a1e:	7923      	ldrb	r3, [r4, #4]
    1a20:	2b00      	cmp	r3, #0
    1a22:	d106      	bne.n	1a32 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x42>
		{
			*device = NULL;
    1a24:	2300      	movs	r3, #0
    1a26:	4642      	mov	r2, r8
    1a28:	6013      	str	r3, [r2, #0]
			return SYS_ERR_INVALID_PATH;
    1a2a:	20f5      	movs	r0, #245	; 0xf5
    1a2c:	e00c      	b.n	1a48 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x58>
    1a2e:	3504      	adds	r5, #4
		}
		if(!strcmp(dev.SPI[dev_nr]->cfg.name, path))
    1a30:	4f08      	ldr	r7, [pc, #32]	; (1a54 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x64>)
    1a32:	1c31      	adds	r1, r6, #0
    1a34:	47b8      	blx	r7
    1a36:	2800      	cmp	r0, #0
    1a38:	d003      	beq.n	1a42 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x52>
SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Spi **device)
{
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.SPI == NULL || dev.SPI[dev_nr] == NULL || dev.SPI[dev_nr]->cfg.name == NULL || dev.SPI[dev_nr]->cfg.name[0] == '\0')
    1a3a:	682c      	ldr	r4, [r5, #0]
    1a3c:	2c00      	cmp	r4, #0
    1a3e:	d1ea      	bne.n	1a16 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x26>
    1a40:	e7f0      	b.n	1a24 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x34>
		}
		if(!strcmp(dev.SPI[dev_nr]->cfg.name, path))
			break;
		dev_nr++;
	}
	*device = dev.SPI[dev_nr];
    1a42:	4643      	mov	r3, r8
    1a44:	601c      	str	r4, [r3, #0]
	return SYS_ERR_OK;
    1a46:	2000      	movs	r0, #0
    1a48:	b240      	sxtb	r0, r0
}
    1a4a:	bc04      	pop	{r2}
    1a4c:	4690      	mov	r8, r2
    1a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a50:	200001a0 	.word	0x200001a0
    1a54:	000067ef 	.word	0x000067ef

00001a58 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Uart **device)
{
    1a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a5a:	4647      	mov	r7, r8
    1a5c:	b480      	push	{r7}
    1a5e:	1c06      	adds	r6, r0, #0
    1a60:	4688      	mov	r8, r1
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.UART == NULL || dev.UART[dev_nr] == NULL || dev.UART[dev_nr]->cfg.name == NULL || dev.UART[dev_nr]->cfg.name[0] == '\0')
    1a62:	4b15      	ldr	r3, [pc, #84]	; (1ab8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x60>)
    1a64:	699d      	ldr	r5, [r3, #24]
    1a66:	2d00      	cmp	r5, #0
    1a68:	d010      	beq.n	1a8c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x34>
    1a6a:	682c      	ldr	r4, [r5, #0]
    1a6c:	2c00      	cmp	r4, #0
    1a6e:	d00d      	beq.n	1a8c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x34>
    1a70:	1d20      	adds	r0, r4, #4
    1a72:	2800      	cmp	r0, #0
    1a74:	d00a      	beq.n	1a8c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x34>
    1a76:	7923      	ldrb	r3, [r4, #4]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d10c      	bne.n	1a96 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x3e>
    1a7c:	e006      	b.n	1a8c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x34>
    1a7e:	1d20      	adds	r0, r4, #4
    1a80:	2800      	cmp	r0, #0
    1a82:	d003      	beq.n	1a8c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x34>
    1a84:	3504      	adds	r5, #4
    1a86:	7923      	ldrb	r3, [r4, #4]
    1a88:	2b00      	cmp	r3, #0
    1a8a:	d106      	bne.n	1a9a <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x42>
		{
			*device = NULL;
    1a8c:	2300      	movs	r3, #0
    1a8e:	4642      	mov	r2, r8
    1a90:	6013      	str	r3, [r2, #0]
			return SYS_ERR_INVALID_PATH;
    1a92:	20f5      	movs	r0, #245	; 0xf5
    1a94:	e00c      	b.n	1ab0 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x58>
    1a96:	3504      	adds	r5, #4
		}
		if(!strcmp(dev.UART[dev_nr]->cfg.name, path))
    1a98:	4f08      	ldr	r7, [pc, #32]	; (1abc <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x64>)
    1a9a:	1c31      	adds	r1, r6, #0
    1a9c:	47b8      	blx	r7
    1a9e:	2800      	cmp	r0, #0
    1aa0:	d003      	beq.n	1aaa <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x52>
SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Uart **device)
{
	unsigned int dev_nr = 0;
	while(1)
	{
		if(dev.UART == NULL || dev.UART[dev_nr] == NULL || dev.UART[dev_nr]->cfg.name == NULL || dev.UART[dev_nr]->cfg.name[0] == '\0')
    1aa2:	682c      	ldr	r4, [r5, #0]
    1aa4:	2c00      	cmp	r4, #0
    1aa6:	d1ea      	bne.n	1a7e <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x26>
    1aa8:	e7f0      	b.n	1a8c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x34>
		}
		if(!strcmp(dev.UART[dev_nr]->cfg.name, path))
			break;
		dev_nr++;
	}
	*device = dev.UART[dev_nr];
    1aaa:	4643      	mov	r3, r8
    1aac:	601c      	str	r4, [r3, #0]
	return SYS_ERR_OK;
    1aae:	2000      	movs	r0, #0
    1ab0:	b240      	sxtb	r0, r0
}
    1ab2:	bc04      	pop	{r2}
    1ab4:	4690      	mov	r8, r2
    1ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ab8:	200001a0 	.word	0x200001a0
    1abc:	000067ef 	.word	0x000067ef

00001ac0 <_ZN2GI5Board4InitD1Ev>:
}

GI::Board::Init::~Init()
{

}
    1ac0:	4770      	bx	lr
    1ac2:	46c0      	nop			; (mov r8, r8)

00001ac4 <_ZN2GI5Board4InitC1Ev>:
GI::Board::Init dev = GI::Board::Init();
#if (defined(SCREEN_ENABLE) && SCREEN_INTERFACE_COUNT > 0)
GI::Dev::IntScreen *screen;
#endif

GI::Board::Init::Init()
    1ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ac6:	4657      	mov	r7, sl
    1ac8:	464e      	mov	r6, r9
    1aca:	4645      	mov	r5, r8
    1acc:	b4e0      	push	{r5, r6, r7}
    1ace:	4681      	mov	r9, r0
{
    memset(this, 0, sizeof(*this));
    1ad0:	2100      	movs	r1, #0
    1ad2:	221c      	movs	r2, #28
    1ad4:	4b44      	ldr	r3, [pc, #272]	; (1be8 <_ZN2GI5Board4InitC1Ev+0x124>)
    1ad6:	4798      	blx	r3
    {
#if __AVR_XMEGA__
		if (pgm_read_byte(&gpioCfg[table_len]->name[0]) == 0)
			break;
#else
        if (gpioCfg[table_len].name[0] == 0)
    1ad8:	4b44      	ldr	r3, [pc, #272]	; (1bec <_ZN2GI5Board4InitC1Ev+0x128>)
    1ada:	781b      	ldrb	r3, [r3, #0]
    1adc:	2b00      	cmp	r3, #0
    1ade:	d057      	beq.n	1b90 <_ZN2GI5Board4InitC1Ev+0xcc>
    1ae0:	4b43      	ldr	r3, [pc, #268]	; (1bf0 <_ZN2GI5Board4InitC1Ev+0x12c>)
    /*******************************************************************/
#if (USE_GPIO == 1)
    /*
     * Scan to get the pin table items number.
     */
    for (table_len = 0; table_len < 512; table_len++)
    1ae2:	2401      	movs	r4, #1
    1ae4:	2180      	movs	r1, #128	; 0x80
    1ae6:	0089      	lsls	r1, r1, #2
    {
#if __AVR_XMEGA__
		if (pgm_read_byte(&gpioCfg[table_len]->name[0]) == 0)
			break;
#else
        if (gpioCfg[table_len].name[0] == 0)
    1ae8:	781a      	ldrb	r2, [r3, #0]
    1aea:	2a00      	cmp	r2, #0
    1aec:	d004      	beq.n	1af8 <_ZN2GI5Board4InitC1Ev+0x34>
    /*******************************************************************/
#if (USE_GPIO == 1)
    /*
     * Scan to get the pin table items number.
     */
    for (table_len = 0; table_len < 512; table_len++)
    1aee:	3401      	adds	r4, #1
    1af0:	3318      	adds	r3, #24
    1af2:	428c      	cmp	r4, r1
    1af4:	d1f8      	bne.n	1ae8 <_ZN2GI5Board4InitC1Ev+0x24>
    1af6:	e061      	b.n	1bbc <_ZN2GI5Board4InitC1Ev+0xf8>
#endif
    }
    /*
     * Allocate memory to store pins handlers pointers.
     */
    GPIO = (GI::Dev::Gpio **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Gpio *));
    1af8:	1c61      	adds	r1, r4, #1
    1afa:	0089      	lsls	r1, r1, #2
    1afc:	2001      	movs	r0, #1
    1afe:	4b3d      	ldr	r3, [pc, #244]	; (1bf4 <_ZN2GI5Board4InitC1Ev+0x130>)
    1b00:	4798      	blx	r3
    1b02:	4649      	mov	r1, r9
    1b04:	60c8      	str	r0, [r1, #12]
    /*
     * Allocate create and initialize pins.
     */
    for (dev_cnt = 0; dev_cnt < table_len; dev_cnt++)
    1b06:	2c00      	cmp	r4, #0
    1b08:	d048      	beq.n	1b9c <_ZN2GI5Board4InitC1Ev+0xd8>
    1b0a:	4d38      	ldr	r5, [pc, #224]	; (1bec <_ZN2GI5Board4InitC1Ev+0x128>)
    1b0c:	2600      	movs	r6, #0
    {
#if __AVR_XMEGA__
        if (pgm_read_byte(&gpioCfg[dev_cnt]->name[0]) != 0)
#else
        if (gpioCfg[dev_cnt].name[0] != 0)
    1b0e:	782b      	ldrb	r3, [r5, #0]
    1b10:	2b00      	cmp	r3, #0
    1b12:	d00e      	beq.n	1b32 <_ZN2GI5Board4InitC1Ev+0x6e>
#if __AVR_XMEGA__
			CfgGpio tmp;
			memcpy_P(&tmp, gpioCfg[dev_cnt], sizeof(CfgGpio));
            GPIO[dev_cnt] = new GI::Dev::Gpio(&tmp);
#else
            GPIO[dev_cnt] = new GI::Dev::Gpio(&gpioCfg[dev_cnt]);
    1b14:	203c      	movs	r0, #60	; 0x3c
    1b16:	4a38      	ldr	r2, [pc, #224]	; (1bf8 <_ZN2GI5Board4InitC1Ev+0x134>)
    1b18:	4790      	blx	r2
    1b1a:	4682      	mov	sl, r0
    1b1c:	00b3      	lsls	r3, r6, #2
    1b1e:	4649      	mov	r1, r9
    1b20:	68c9      	ldr	r1, [r1, #12]
    1b22:	18cf      	adds	r7, r1, r3
    1b24:	2800      	cmp	r0, #0
    1b26:	d002      	beq.n	1b2e <_ZN2GI5Board4InitC1Ev+0x6a>
    1b28:	1c29      	adds	r1, r5, #0
    1b2a:	4a34      	ldr	r2, [pc, #208]	; (1bfc <_ZN2GI5Board4InitC1Ev+0x138>)
    1b2c:	4790      	blx	r2
    1b2e:	4653      	mov	r3, sl
    1b30:	603b      	str	r3, [r7, #0]
     */
    GPIO = (GI::Dev::Gpio **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Gpio *));
    /*
     * Allocate create and initialize pins.
     */
    for (dev_cnt = 0; dev_cnt < table_len; dev_cnt++)
    1b32:	3601      	adds	r6, #1
    1b34:	3518      	adds	r5, #24
    1b36:	42a6      	cmp	r6, r4
    1b38:	d1e9      	bne.n	1b0e <_ZN2GI5Board4InitC1Ev+0x4a>
    1b3a:	e02f      	b.n	1b9c <_ZN2GI5Board4InitC1Ev+0xd8>
    /*
     * Scan to get the uarts table items number.
     */
    for (table_len = 0; table_len < 512; table_len++)
    {
        if (uartCfg[table_len].name[0] == 0)
    1b3c:	781a      	ldrb	r2, [r3, #0]
    1b3e:	2a00      	cmp	r2, #0
    1b40:	d004      	beq.n	1b4c <_ZN2GI5Board4InitC1Ev+0x88>
    /*******************************************************************/
#if (USE_UART == 1)
    /*
     * Scan to get the uarts table items number.
     */
    for (table_len = 0; table_len < 512; table_len++)
    1b42:	3401      	adds	r4, #1
    1b44:	331c      	adds	r3, #28
    1b46:	428c      	cmp	r4, r1
    1b48:	d1f8      	bne.n	1b3c <_ZN2GI5Board4InitC1Ev+0x78>
    1b4a:	e03f      	b.n	1bcc <_ZN2GI5Board4InitC1Ev+0x108>
            break;
    }
    /*
     * Allocate memory to store uarts handlers pointers.
     */
    UART = (GI::Dev::Uart **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Uart *));
    1b4c:	1c61      	adds	r1, r4, #1
    1b4e:	0089      	lsls	r1, r1, #2
    1b50:	2001      	movs	r0, #1
    1b52:	4b28      	ldr	r3, [pc, #160]	; (1bf4 <_ZN2GI5Board4InitC1Ev+0x130>)
    1b54:	4798      	blx	r3
    1b56:	4649      	mov	r1, r9
    1b58:	6188      	str	r0, [r1, #24]
    /*
     * Allocate create and initialize uarts.
     */
    for (dev_cnt = 0; dev_cnt < table_len; dev_cnt++)
    1b5a:	2c00      	cmp	r4, #0
    1b5c:	d03e      	beq.n	1bdc <_ZN2GI5Board4InitC1Ev+0x118>
    1b5e:	4d28      	ldr	r5, [pc, #160]	; (1c00 <_ZN2GI5Board4InitC1Ev+0x13c>)
    1b60:	2700      	movs	r7, #0
    {
        if (uartCfg[dev_cnt].name[0] != 0)
    1b62:	782b      	ldrb	r3, [r5, #0]
    1b64:	2b00      	cmp	r3, #0
    1b66:	d00e      	beq.n	1b86 <_ZN2GI5Board4InitC1Ev+0xc2>
        {
            UART[dev_cnt] = new GI::Dev::Uart(uartCfg[dev_cnt].name);
    1b68:	202c      	movs	r0, #44	; 0x2c
    1b6a:	4a23      	ldr	r2, [pc, #140]	; (1bf8 <_ZN2GI5Board4InitC1Ev+0x134>)
    1b6c:	4790      	blx	r2
    1b6e:	4682      	mov	sl, r0
    1b70:	00bb      	lsls	r3, r7, #2
    1b72:	4649      	mov	r1, r9
    1b74:	6989      	ldr	r1, [r1, #24]
    1b76:	18ce      	adds	r6, r1, r3
    1b78:	2800      	cmp	r0, #0
    1b7a:	d002      	beq.n	1b82 <_ZN2GI5Board4InitC1Ev+0xbe>
    1b7c:	1c29      	adds	r1, r5, #0
    1b7e:	4a21      	ldr	r2, [pc, #132]	; (1c04 <_ZN2GI5Board4InitC1Ev+0x140>)
    1b80:	4790      	blx	r2
    1b82:	4653      	mov	r3, sl
    1b84:	6033      	str	r3, [r6, #0]
     */
    UART = (GI::Dev::Uart **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Uart *));
    /*
     * Allocate create and initialize uarts.
     */
    for (dev_cnt = 0; dev_cnt < table_len; dev_cnt++)
    1b86:	3701      	adds	r7, #1
    1b88:	351c      	adds	r5, #28
    1b8a:	42a7      	cmp	r7, r4
    1b8c:	d1e9      	bne.n	1b62 <_ZN2GI5Board4InitC1Ev+0x9e>
    1b8e:	e025      	b.n	1bdc <_ZN2GI5Board4InitC1Ev+0x118>
#endif
    }
    /*
     * Allocate memory to store pins handlers pointers.
     */
    GPIO = (GI::Dev::Gpio **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Gpio *));
    1b90:	2001      	movs	r0, #1
    1b92:	2104      	movs	r1, #4
    1b94:	4b17      	ldr	r3, [pc, #92]	; (1bf4 <_ZN2GI5Board4InitC1Ev+0x130>)
    1b96:	4798      	blx	r3
    1b98:	4649      	mov	r1, r9
    1b9a:	60c8      	str	r0, [r1, #12]
    /*
     * Scan to get the uarts table items number.
     */
    for (table_len = 0; table_len < 512; table_len++)
    {
        if (uartCfg[table_len].name[0] == 0)
    1b9c:	4b18      	ldr	r3, [pc, #96]	; (1c00 <_ZN2GI5Board4InitC1Ev+0x13c>)
    1b9e:	781b      	ldrb	r3, [r3, #0]
    1ba0:	2b00      	cmp	r3, #0
    1ba2:	d004      	beq.n	1bae <_ZN2GI5Board4InitC1Ev+0xea>
    1ba4:	4b18      	ldr	r3, [pc, #96]	; (1c08 <_ZN2GI5Board4InitC1Ev+0x144>)
    /*******************************************************************/
#if (USE_UART == 1)
    /*
     * Scan to get the uarts table items number.
     */
    for (table_len = 0; table_len < 512; table_len++)
    1ba6:	2401      	movs	r4, #1
    1ba8:	2180      	movs	r1, #128	; 0x80
    1baa:	0089      	lsls	r1, r1, #2
    1bac:	e7c6      	b.n	1b3c <_ZN2GI5Board4InitC1Ev+0x78>
            break;
    }
    /*
     * Allocate memory to store uarts handlers pointers.
     */
    UART = (GI::Dev::Uart **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Uart *));
    1bae:	2001      	movs	r0, #1
    1bb0:	2104      	movs	r1, #4
    1bb2:	4b10      	ldr	r3, [pc, #64]	; (1bf4 <_ZN2GI5Board4InitC1Ev+0x130>)
    1bb4:	4798      	blx	r3
    1bb6:	464a      	mov	r2, r9
    1bb8:	6190      	str	r0, [r2, #24]
    1bba:	e00f      	b.n	1bdc <_ZN2GI5Board4InitC1Ev+0x118>
#endif
    }
    /*
     * Allocate memory to store pins handlers pointers.
     */
    GPIO = (GI::Dev::Gpio **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Gpio *));
    1bbc:	1c61      	adds	r1, r4, #1
    1bbe:	0089      	lsls	r1, r1, #2
    1bc0:	2001      	movs	r0, #1
    1bc2:	4b0c      	ldr	r3, [pc, #48]	; (1bf4 <_ZN2GI5Board4InitC1Ev+0x130>)
    1bc4:	4798      	blx	r3
    1bc6:	464b      	mov	r3, r9
    1bc8:	60d8      	str	r0, [r3, #12]
    1bca:	e79e      	b.n	1b0a <_ZN2GI5Board4InitC1Ev+0x46>
            break;
    }
    /*
     * Allocate memory to store uarts handlers pointers.
     */
    UART = (GI::Dev::Uart **) calloc(1, (table_len + 1) * sizeof(GI::Dev::Uart *));
    1bcc:	1c61      	adds	r1, r4, #1
    1bce:	0089      	lsls	r1, r1, #2
    1bd0:	2001      	movs	r0, #1
    1bd2:	4b08      	ldr	r3, [pc, #32]	; (1bf4 <_ZN2GI5Board4InitC1Ev+0x130>)
    1bd4:	4798      	blx	r3
    1bd6:	4649      	mov	r1, r9
    1bd8:	6188      	str	r0, [r1, #24]
    1bda:	e7c0      	b.n	1b5e <_ZN2GI5Board4InitC1Ev+0x9a>
    ftpd_init(FTP_SERVER_PORT);
#endif
#if (USE_SNTP == 1 && USE_LWIP == 1)
    SNTP_CLIENT = new GI::App::SntpClient();
#endif
}
    1bdc:	4648      	mov	r0, r9
    1bde:	bc1c      	pop	{r2, r3, r4}
    1be0:	4690      	mov	r8, r2
    1be2:	4699      	mov	r9, r3
    1be4:	46a2      	mov	sl, r4
    1be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1be8:	00006635 	.word	0x00006635
    1bec:	20000090 	.word	0x20000090
    1bf0:	200000a8 	.word	0x200000a8
    1bf4:	00006545 	.word	0x00006545
    1bf8:	00005741 	.word	0x00005741
    1bfc:	00005e99 	.word	0x00005e99
    1c00:	20000058 	.word	0x20000058
    1c04:	00006029 	.word	0x00006029
    1c08:	20000074 	.word	0x20000074

00001c0c <_ZN2GI5Board4Init4idleEv>:
    MMCSD[0]->idle(0);
#endif
#if (USE_LWIP == 1)
    LWIP[0]->idle(0);
#endif
}
    1c0c:	4770      	bx	lr
    1c0e:	46c0      	nop			; (mov r8, r8)

00001c10 <_GLOBAL__sub_I_coreClk>:
    1c10:	b570      	push	{r4, r5, r6, lr}

#if (USE_UART == 1)
extern CfgUart uartCfg[];
#endif

GI::Sys::Clock coreClk = GI::Sys::Clock();
    1c12:	4c09      	ldr	r4, [pc, #36]	; (1c38 <_GLOBAL__sub_I_coreClk+0x28>)
    1c14:	1c20      	adds	r0, r4, #0
    1c16:	4b09      	ldr	r3, [pc, #36]	; (1c3c <_GLOBAL__sub_I_coreClk+0x2c>)
    1c18:	4798      	blx	r3
    1c1a:	4d09      	ldr	r5, [pc, #36]	; (1c40 <_GLOBAL__sub_I_coreClk+0x30>)
    1c1c:	1c20      	adds	r0, r4, #0
    1c1e:	4909      	ldr	r1, [pc, #36]	; (1c44 <_GLOBAL__sub_I_coreClk+0x34>)
    1c20:	1c2a      	adds	r2, r5, #0
    1c22:	4c09      	ldr	r4, [pc, #36]	; (1c48 <_GLOBAL__sub_I_coreClk+0x38>)
    1c24:	47a0      	blx	r4
GI::Board::Init dev = GI::Board::Init();
    1c26:	4e09      	ldr	r6, [pc, #36]	; (1c4c <_GLOBAL__sub_I_coreClk+0x3c>)
    1c28:	1c30      	adds	r0, r6, #0
    1c2a:	4b09      	ldr	r3, [pc, #36]	; (1c50 <_GLOBAL__sub_I_coreClk+0x40>)
    1c2c:	4798      	blx	r3
    1c2e:	1c30      	adds	r0, r6, #0
    1c30:	4908      	ldr	r1, [pc, #32]	; (1c54 <_GLOBAL__sub_I_coreClk+0x44>)
    1c32:	1c2a      	adds	r2, r5, #0
    1c34:	47a0      	blx	r4
    MMCSD[0]->idle(0);
#endif
#if (USE_LWIP == 1)
    LWIP[0]->idle(0);
#endif
}
    1c36:	bd70      	pop	{r4, r5, r6, pc}
    1c38:	200001bc 	.word	0x200001bc
    1c3c:	00006389 	.word	0x00006389
    1c40:	20000000 	.word	0x20000000
    1c44:	00006399 	.word	0x00006399
    1c48:	00006451 	.word	0x00006451
    1c4c:	200001a0 	.word	0x200001a0
    1c50:	00001ac5 	.word	0x00001ac5
    1c54:	00001ac1 	.word	0x00001ac1

00001c58 <_ZN2GI2IOC1EPc>:
#include <api/uart.h>

#include <api/dev_request.h>

/**********************************************************************************/
GI::IO::IO(char *path)
    1c58:	b530      	push	{r4, r5, lr}
    1c5a:	b085      	sub	sp, #20
    1c5c:	1c04      	adds	r4, r0, #0
    1c5e:	1c0d      	adds	r5, r1, #0
{
	memset(this, 0, sizeof(*this));
    1c60:	2300      	movs	r3, #0
    1c62:	7003      	strb	r3, [r0, #0]
    1c64:	7043      	strb	r3, [r0, #1]
    1c66:	7083      	strb	r3, [r0, #2]
    1c68:	70c3      	strb	r3, [r0, #3]
    1c6a:	7103      	strb	r3, [r0, #4]
    1c6c:	7143      	strb	r3, [r0, #5]
    1c6e:	7183      	strb	r3, [r0, #6]
    1c70:	71c3      	strb	r3, [r0, #7]
    1c72:	7203      	strb	r3, [r0, #8]
    1c74:	7243      	strb	r3, [r0, #9]
    1c76:	7283      	strb	r3, [r0, #10]
    1c78:	72c3      	strb	r3, [r0, #11]
	GI::Dev::Gpio *gpioDev;
	GI::Dev::I2c *i2cdev;
	GI::Dev::Spi *spiDev;
	GI::Dev::Uart *uartDev;
	if(GI::Dev::DevRequest::request(path, &gpioDev) == SYS_ERR_OK)
    1c7a:	1c08      	adds	r0, r1, #0
    1c7c:	4669      	mov	r1, sp
    1c7e:	4b18      	ldr	r3, [pc, #96]	; (1ce0 <_ZN2GI2IOC1EPc+0x88>)
    1c80:	4798      	blx	r3
    1c82:	2800      	cmp	r0, #0
    1c84:	d104      	bne.n	1c90 <_ZN2GI2IOC1EPc+0x38>
	{
		devHandler = (void *)gpioDev;
    1c86:	9b00      	ldr	r3, [sp, #0]
    1c88:	6063      	str	r3, [r4, #4]
		ioDevType = IO_DEV_GPIO;
    1c8a:	2301      	movs	r3, #1
    1c8c:	7063      	strb	r3, [r4, #1]
    1c8e:	e023      	b.n	1cd8 <_ZN2GI2IOC1EPc+0x80>
	}
	else if(GI::Dev::DevRequest::request(path, &i2cdev) == SYS_ERR_OK)
    1c90:	1c28      	adds	r0, r5, #0
    1c92:	a901      	add	r1, sp, #4
    1c94:	4b13      	ldr	r3, [pc, #76]	; (1ce4 <_ZN2GI2IOC1EPc+0x8c>)
    1c96:	4798      	blx	r3
    1c98:	2800      	cmp	r0, #0
    1c9a:	d104      	bne.n	1ca6 <_ZN2GI2IOC1EPc+0x4e>
	{
		devHandler = (void *)i2cdev;
    1c9c:	9b01      	ldr	r3, [sp, #4]
    1c9e:	6063      	str	r3, [r4, #4]
		ioDevType = IO_DEV_I2C;
    1ca0:	2303      	movs	r3, #3
    1ca2:	7063      	strb	r3, [r4, #1]
    1ca4:	e018      	b.n	1cd8 <_ZN2GI2IOC1EPc+0x80>
	}
	else if(GI::Dev::DevRequest::request(path, &spiDev) == SYS_ERR_OK)
    1ca6:	1c28      	adds	r0, r5, #0
    1ca8:	a902      	add	r1, sp, #8
    1caa:	4b0f      	ldr	r3, [pc, #60]	; (1ce8 <_ZN2GI2IOC1EPc+0x90>)
    1cac:	4798      	blx	r3
    1cae:	2800      	cmp	r0, #0
    1cb0:	d104      	bne.n	1cbc <_ZN2GI2IOC1EPc+0x64>
	{
		devHandler = (void *)spiDev;
    1cb2:	9b02      	ldr	r3, [sp, #8]
    1cb4:	6063      	str	r3, [r4, #4]
		ioDevType = IO_DEV_SPI;
    1cb6:	2304      	movs	r3, #4
    1cb8:	7063      	strb	r3, [r4, #1]
    1cba:	e00d      	b.n	1cd8 <_ZN2GI2IOC1EPc+0x80>
	}
	else if(GI::Dev::DevRequest::request(path, &uartDev) == SYS_ERR_OK)
    1cbc:	1c28      	adds	r0, r5, #0
    1cbe:	a903      	add	r1, sp, #12
    1cc0:	4b0a      	ldr	r3, [pc, #40]	; (1cec <_ZN2GI2IOC1EPc+0x94>)
    1cc2:	4798      	blx	r3
    1cc4:	2800      	cmp	r0, #0
    1cc6:	d104      	bne.n	1cd2 <_ZN2GI2IOC1EPc+0x7a>
	{
		devHandler = (void *)uartDev;
    1cc8:	9b03      	ldr	r3, [sp, #12]
    1cca:	6063      	str	r3, [r4, #4]
		ioDevType = IO_DEV_UART;
    1ccc:	2302      	movs	r3, #2
    1cce:	7063      	strb	r3, [r4, #1]
    1cd0:	e002      	b.n	1cd8 <_ZN2GI2IOC1EPc+0x80>
	}
	else
	{
		ioDevType = IO_DEV_NULL;
    1cd2:	2300      	movs	r3, #0
    1cd4:	7063      	strb	r3, [r4, #1]
		devHandler = NULL;
    1cd6:	6063      	str	r3, [r4, #4]
	}
}
    1cd8:	1c20      	adds	r0, r4, #0
    1cda:	b005      	add	sp, #20
    1cdc:	bd30      	pop	{r4, r5, pc}
    1cde:	46c0      	nop			; (mov r8, r8)
    1ce0:	00001919 	.word	0x00001919
    1ce4:	00001979 	.word	0x00001979
    1ce8:	000019f1 	.word	0x000019f1
    1cec:	00001a59 	.word	0x00001a59

00001cf0 <_ZN2GI2IOD1Ev>:

GI::IO::~IO()
{
	ioDevType = IO_DEV_NULL;
    1cf0:	2300      	movs	r3, #0
    1cf2:	7043      	strb	r3, [r0, #1]
	devHandler = NULL;
    1cf4:	6043      	str	r3, [r0, #4]
}
    1cf6:	4770      	bx	lr

00001cf8 <_ZN2GI2IO5writeEPhj>:
    }
    return lend_send;
}
/**********************************************************************************/
int GI::IO::write(unsigned char *buff, unsigned int len)
{
    1cf8:	b570      	push	{r4, r5, r6, lr}
    1cfa:	1c0e      	adds	r6, r1, #0
    1cfc:	1c13      	adds	r3, r2, #0
	if(!devHandler || !ioDevType || !buff)
    1cfe:	6845      	ldr	r5, [r0, #4]
    1d00:	2d00      	cmp	r5, #0
    1d02:	d019      	beq.n	1d38 <_ZN2GI2IO5writeEPhj+0x40>
    1d04:	7844      	ldrb	r4, [r0, #1]
    1d06:	2c00      	cmp	r4, #0
    1d08:	d019      	beq.n	1d3e <_ZN2GI2IO5writeEPhj+0x46>
    1d0a:	2900      	cmp	r1, #0
    1d0c:	d01a      	beq.n	1d44 <_ZN2GI2IO5writeEPhj+0x4c>
		return SYS_ERR_NO_REGISTERED_DEVICE;
	switch((int)ioDevType)
    1d0e:	2c03      	cmp	r4, #3
    1d10:	d004      	beq.n	1d1c <_ZN2GI2IO5writeEPhj+0x24>
    1d12:	2c04      	cmp	r4, #4
    1d14:	d008      	beq.n	1d28 <_ZN2GI2IO5writeEPhj+0x30>
    1d16:	2c02      	cmp	r4, #2
    1d18:	d117      	bne.n	1d4a <_ZN2GI2IO5writeEPhj+0x52>
    1d1a:	e009      	b.n	1d30 <_ZN2GI2IO5writeEPhj+0x38>
	{
	case IO_DEV_I2C:
		return ((GI::Dev::I2c *)devHandler)->writeBytes(slaveAddr, buff, len);
    1d1c:	7a01      	ldrb	r1, [r0, #8]
    1d1e:	1c28      	adds	r0, r5, #0
    1d20:	1c32      	adds	r2, r6, #0
    1d22:	4c0b      	ldr	r4, [pc, #44]	; (1d50 <_ZN2GI2IO5writeEPhj+0x58>)
    1d24:	47a0      	blx	r4
    1d26:	e012      	b.n	1d4e <_ZN2GI2IO5writeEPhj+0x56>
	case IO_DEV_SPI:
		return ((GI::Dev::Spi *)devHandler)->writeBytes(buff, len);
    1d28:	1c28      	adds	r0, r5, #0
    1d2a:	4b0a      	ldr	r3, [pc, #40]	; (1d54 <_ZN2GI2IO5writeEPhj+0x5c>)
    1d2c:	4798      	blx	r3
    1d2e:	e00e      	b.n	1d4e <_ZN2GI2IO5writeEPhj+0x56>
	case IO_DEV_UART:
		return ((GI::Dev::Uart *)devHandler)->write((char *)buff, len);
    1d30:	1c28      	adds	r0, r5, #0
    1d32:	4b09      	ldr	r3, [pc, #36]	; (1d58 <_ZN2GI2IO5writeEPhj+0x60>)
    1d34:	4798      	blx	r3
    1d36:	e00a      	b.n	1d4e <_ZN2GI2IO5writeEPhj+0x56>
}
/**********************************************************************************/
int GI::IO::write(unsigned char *buff, unsigned int len)
{
	if(!devHandler || !ioDevType || !buff)
		return SYS_ERR_NO_REGISTERED_DEVICE;
    1d38:	2011      	movs	r0, #17
    1d3a:	4240      	negs	r0, r0
    1d3c:	e007      	b.n	1d4e <_ZN2GI2IO5writeEPhj+0x56>
    1d3e:	2011      	movs	r0, #17
    1d40:	4240      	negs	r0, r0
    1d42:	e004      	b.n	1d4e <_ZN2GI2IO5writeEPhj+0x56>
    1d44:	2011      	movs	r0, #17
    1d46:	4240      	negs	r0, r0
    1d48:	e001      	b.n	1d4e <_ZN2GI2IO5writeEPhj+0x56>
	case IO_DEV_SPI:
		return ((GI::Dev::Spi *)devHandler)->writeBytes(buff, len);
	case IO_DEV_UART:
		return ((GI::Dev::Uart *)devHandler)->write((char *)buff, len);
	}
	return SYS_ERR_NOT_IMPLEMENTED;
    1d4a:	2008      	movs	r0, #8
    1d4c:	4240      	negs	r0, r0
}
    1d4e:	bd70      	pop	{r4, r5, r6, pc}
    1d50:	00005f51 	.word	0x00005f51
    1d54:	00005f85 	.word	0x00005f85
    1d58:	00006351 	.word	0x00006351

00001d5c <_ZN2GI2IO5writeEPh>:

int GI::IO::write(unsigned char *buff)
{
    1d5c:	b508      	push	{r3, lr}
    if(!devHandler || !ioDevType || !buff)
    1d5e:	6842      	ldr	r2, [r0, #4]
    1d60:	2a00      	cmp	r2, #0
    1d62:	d00a      	beq.n	1d7a <_ZN2GI2IO5writeEPh+0x1e>
    1d64:	7843      	ldrb	r3, [r0, #1]
    1d66:	2b00      	cmp	r3, #0
    1d68:	d00a      	beq.n	1d80 <_ZN2GI2IO5writeEPh+0x24>
    1d6a:	2900      	cmp	r1, #0
    1d6c:	d00b      	beq.n	1d86 <_ZN2GI2IO5writeEPh+0x2a>
        return SYS_ERR_NO_REGISTERED_DEVICE;
    switch((int)ioDevType)
    1d6e:	2b02      	cmp	r3, #2
    1d70:	d10c      	bne.n	1d8c <_ZN2GI2IO5writeEPh+0x30>
    {
    case IO_DEV_UART:
        return ((GI::Dev::Uart *)devHandler)->print((char *)buff);
    1d72:	1c10      	adds	r0, r2, #0
    1d74:	4b07      	ldr	r3, [pc, #28]	; (1d94 <_ZN2GI2IO5writeEPh+0x38>)
    1d76:	4798      	blx	r3
    1d78:	e00a      	b.n	1d90 <_ZN2GI2IO5writeEPh+0x34>
}

int GI::IO::write(unsigned char *buff)
{
    if(!devHandler || !ioDevType || !buff)
        return SYS_ERR_NO_REGISTERED_DEVICE;
    1d7a:	2011      	movs	r0, #17
    1d7c:	4240      	negs	r0, r0
    1d7e:	e007      	b.n	1d90 <_ZN2GI2IO5writeEPh+0x34>
    1d80:	2011      	movs	r0, #17
    1d82:	4240      	negs	r0, r0
    1d84:	e004      	b.n	1d90 <_ZN2GI2IO5writeEPh+0x34>
    1d86:	2011      	movs	r0, #17
    1d88:	4240      	negs	r0, r0
    1d8a:	e001      	b.n	1d90 <_ZN2GI2IO5writeEPh+0x34>
    switch((int)ioDevType)
    {
    case IO_DEV_UART:
        return ((GI::Dev::Uart *)devHandler)->print((char *)buff);
    }
    return SYS_ERR_NOT_IMPLEMENTED;
    1d8c:	2008      	movs	r0, #8
    1d8e:	4240      	negs	r0, r0
}
    1d90:	bd08      	pop	{r3, pc}
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	00006321 	.word	0x00006321

00001d98 <_ZN2GI2IO5writeEPc>:

int GI::IO::write(char *buff)
{
    1d98:	b508      	push	{r3, lr}
    if(!devHandler || !ioDevType || !buff)
    1d9a:	6842      	ldr	r2, [r0, #4]
    1d9c:	2a00      	cmp	r2, #0
    1d9e:	d00a      	beq.n	1db6 <_ZN2GI2IO5writeEPc+0x1e>
    1da0:	7843      	ldrb	r3, [r0, #1]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d00a      	beq.n	1dbc <_ZN2GI2IO5writeEPc+0x24>
    1da6:	2900      	cmp	r1, #0
    1da8:	d00b      	beq.n	1dc2 <_ZN2GI2IO5writeEPc+0x2a>
        return SYS_ERR_NO_REGISTERED_DEVICE;
    switch((int)ioDevType)
    1daa:	2b02      	cmp	r3, #2
    1dac:	d10c      	bne.n	1dc8 <_ZN2GI2IO5writeEPc+0x30>
    {
    case IO_DEV_UART:
        return ((GI::Dev::Uart *)devHandler)->print((char *)buff);
    1dae:	1c10      	adds	r0, r2, #0
    1db0:	4b07      	ldr	r3, [pc, #28]	; (1dd0 <_ZN2GI2IO5writeEPc+0x38>)
    1db2:	4798      	blx	r3
    1db4:	e00a      	b.n	1dcc <_ZN2GI2IO5writeEPc+0x34>
}

int GI::IO::write(char *buff)
{
    if(!devHandler || !ioDevType || !buff)
        return SYS_ERR_NO_REGISTERED_DEVICE;
    1db6:	2011      	movs	r0, #17
    1db8:	4240      	negs	r0, r0
    1dba:	e007      	b.n	1dcc <_ZN2GI2IO5writeEPc+0x34>
    1dbc:	2011      	movs	r0, #17
    1dbe:	4240      	negs	r0, r0
    1dc0:	e004      	b.n	1dcc <_ZN2GI2IO5writeEPc+0x34>
    1dc2:	2011      	movs	r0, #17
    1dc4:	4240      	negs	r0, r0
    1dc6:	e001      	b.n	1dcc <_ZN2GI2IO5writeEPc+0x34>
    switch((int)ioDevType)
    {
    case IO_DEV_UART:
        return ((GI::Dev::Uart *)devHandler)->print((char *)buff);
    }
    return SYS_ERR_NOT_IMPLEMENTED;
    1dc8:	2008      	movs	r0, #8
    1dca:	4240      	negs	r0, r0
}
    1dcc:	bd08      	pop	{r3, pc}
    1dce:	46c0      	nop			; (mov r8, r8)
    1dd0:	00006321 	.word	0x00006321

00001dd4 <_ZN2GI2IO5writeEb>:
    }
    return SYS_ERR_NOT_IMPLEMENTED;
}

SysErr GI::IO::write(bool state)
{
    1dd4:	b508      	push	{r3, lr}
	if(!devHandler || !ioDevType)
    1dd6:	6842      	ldr	r2, [r0, #4]
    1dd8:	2a00      	cmp	r2, #0
    1dda:	d008      	beq.n	1dee <_ZN2GI2IO5writeEb+0x1a>
    1ddc:	7843      	ldrb	r3, [r0, #1]
    1dde:	2b00      	cmp	r3, #0
    1de0:	d007      	beq.n	1df2 <_ZN2GI2IO5writeEb+0x1e>
		return SYS_ERR_NO_REGISTERED_DEVICE;
	switch((int)ioDevType)
    1de2:	2b01      	cmp	r3, #1
    1de4:	d107      	bne.n	1df6 <_ZN2GI2IO5writeEb+0x22>
	{
	case IO_DEV_GPIO:
		return ((GI::Dev::Gpio *)devHandler)->setOut(state);
    1de6:	1c10      	adds	r0, r2, #0
    1de8:	4b04      	ldr	r3, [pc, #16]	; (1dfc <_ZN2GI2IO5writeEb+0x28>)
    1dea:	4798      	blx	r3
    1dec:	e004      	b.n	1df8 <_ZN2GI2IO5writeEb+0x24>
}

SysErr GI::IO::write(bool state)
{
	if(!devHandler || !ioDevType)
		return SYS_ERR_NO_REGISTERED_DEVICE;
    1dee:	20ef      	movs	r0, #239	; 0xef
    1df0:	e002      	b.n	1df8 <_ZN2GI2IO5writeEb+0x24>
    1df2:	20ef      	movs	r0, #239	; 0xef
    1df4:	e000      	b.n	1df8 <_ZN2GI2IO5writeEb+0x24>
	switch((int)ioDevType)
	{
	case IO_DEV_GPIO:
		return ((GI::Dev::Gpio *)devHandler)->setOut(state);
	}
	return SYS_ERR_NOT_IMPLEMENTED;
    1df6:	20f8      	movs	r0, #248	; 0xf8
    1df8:	b240      	sxtb	r0, r0
}
    1dfa:	bd08      	pop	{r3, pc}
    1dfc:	00005d6d 	.word	0x00005d6d

00001e00 <_ZN2GI2IO5writeEPcb>:
	GI::IO tmp_io = GI::IO((char *)path);
	return tmp_io.write(string);
}

SysErr GI::IO::write(char *path, bool state)/* Bit device */
{
    1e00:	b510      	push	{r4, lr}
    1e02:	b084      	sub	sp, #16
    1e04:	1c03      	adds	r3, r0, #0
    1e06:	1c0c      	adds	r4, r1, #0
	GI::IO tmp_io = GI::IO((char *)path);
    1e08:	a801      	add	r0, sp, #4
    1e0a:	1c19      	adds	r1, r3, #0
    1e0c:	4b06      	ldr	r3, [pc, #24]	; (1e28 <_ZN2GI2IO5writeEPcb+0x28>)
    1e0e:	4798      	blx	r3
	return tmp_io.write(state);
    1e10:	a801      	add	r0, sp, #4
    1e12:	1c21      	adds	r1, r4, #0
    1e14:	4b05      	ldr	r3, [pc, #20]	; (1e2c <_ZN2GI2IO5writeEPcb+0x2c>)
    1e16:	4798      	blx	r3
    1e18:	1c04      	adds	r4, r0, #0
    1e1a:	a801      	add	r0, sp, #4
    1e1c:	4b04      	ldr	r3, [pc, #16]	; (1e30 <_ZN2GI2IO5writeEPcb+0x30>)
    1e1e:	4798      	blx	r3
}
    1e20:	1c20      	adds	r0, r4, #0
    1e22:	b004      	add	sp, #16
    1e24:	bd10      	pop	{r4, pc}
    1e26:	46c0      	nop			; (mov r8, r8)
    1e28:	00001c59 	.word	0x00001c59
    1e2c:	00001dd5 	.word	0x00001dd5
    1e30:	00001cf1 	.word	0x00001cf1

00001e34 <_ZN2GI2IO5writeEc>:
	}
	return SYS_ERR_NOT_IMPLEMENTED;
}

SysErr GI::IO::write(char data)
{
    1e34:	b500      	push	{lr}
    1e36:	b083      	sub	sp, #12
    1e38:	466b      	mov	r3, sp
    1e3a:	71d9      	strb	r1, [r3, #7]
	if(!devHandler || !ioDevType)
    1e3c:	6842      	ldr	r2, [r0, #4]
    1e3e:	2a00      	cmp	r2, #0
    1e40:	d00f      	beq.n	1e62 <_ZN2GI2IO5writeEc+0x2e>
    1e42:	7843      	ldrb	r3, [r0, #1]
    1e44:	2b00      	cmp	r3, #0
    1e46:	d00e      	beq.n	1e66 <_ZN2GI2IO5writeEc+0x32>
		return SYS_ERR_NO_REGISTERED_DEVICE;
	switch((int)ioDevType)
    1e48:	2b02      	cmp	r3, #2
    1e4a:	d10e      	bne.n	1e6a <_ZN2GI2IO5writeEc+0x36>
	{
	case IO_DEV_UART:
		if(((GI::Dev::Uart *)devHandler)->write((char *)&data, 1) != 1)
    1e4c:	1c10      	adds	r0, r2, #0
    1e4e:	4669      	mov	r1, sp
    1e50:	3107      	adds	r1, #7
    1e52:	2201      	movs	r2, #1
    1e54:	4b07      	ldr	r3, [pc, #28]	; (1e74 <_ZN2GI2IO5writeEc+0x40>)
    1e56:	4798      	blx	r3
			return SYS_ERR_BUSY;
		else
			return SYS_ERR_OK;
    1e58:	2300      	movs	r3, #0
	if(!devHandler || !ioDevType)
		return SYS_ERR_NO_REGISTERED_DEVICE;
	switch((int)ioDevType)
	{
	case IO_DEV_UART:
		if(((GI::Dev::Uart *)devHandler)->write((char *)&data, 1) != 1)
    1e5a:	2801      	cmp	r0, #1
    1e5c:	d006      	beq.n	1e6c <_ZN2GI2IO5writeEc+0x38>
			return SYS_ERR_BUSY;
    1e5e:	23f2      	movs	r3, #242	; 0xf2
    1e60:	e004      	b.n	1e6c <_ZN2GI2IO5writeEc+0x38>
}

SysErr GI::IO::write(char data)
{
	if(!devHandler || !ioDevType)
		return SYS_ERR_NO_REGISTERED_DEVICE;
    1e62:	23ef      	movs	r3, #239	; 0xef
    1e64:	e002      	b.n	1e6c <_ZN2GI2IO5writeEc+0x38>
    1e66:	23ef      	movs	r3, #239	; 0xef
    1e68:	e000      	b.n	1e6c <_ZN2GI2IO5writeEc+0x38>
		if(((GI::Dev::Uart *)devHandler)->write((char *)&data, 1) != 1)
			return SYS_ERR_BUSY;
		else
			return SYS_ERR_OK;
	}
	return SYS_ERR_NOT_IMPLEMENTED;
    1e6a:	23f8      	movs	r3, #248	; 0xf8
    1e6c:	b258      	sxtb	r0, r3
}
    1e6e:	b003      	add	sp, #12
    1e70:	bd00      	pop	{pc}
    1e72:	46c0      	nop			; (mov r8, r8)
    1e74:	00006351 	.word	0x00006351

00001e78 <_ZN2GI2IO4readEPb>:
	}
	return SYS_ERR_NOT_IMPLEMENTED;
}

SysErr GI::IO::read(bool *state)
{
    1e78:	b510      	push	{r4, lr}
    1e7a:	b082      	sub	sp, #8
    1e7c:	1c0c      	adds	r4, r1, #0
	if(!devHandler || !ioDevType)
    1e7e:	6842      	ldr	r2, [r0, #4]
    1e80:	2a00      	cmp	r2, #0
    1e82:	d011      	beq.n	1ea8 <_ZN2GI2IO4readEPb+0x30>
    1e84:	7843      	ldrb	r3, [r0, #1]
    1e86:	2b00      	cmp	r3, #0
    1e88:	d010      	beq.n	1eac <_ZN2GI2IO4readEPb+0x34>
		return SYS_ERR_NO_REGISTERED_DEVICE;
	switch((int)ioDevType)
    1e8a:	2b01      	cmp	r3, #1
    1e8c:	d110      	bne.n	1eb0 <_ZN2GI2IO4readEPb+0x38>
	{
	case IO_DEV_GPIO:
		u32 data;
		SysErr res = ((GI::Dev::Gpio *)devHandler)->getIn(&data);
    1e8e:	1c10      	adds	r0, r2, #0
    1e90:	a901      	add	r1, sp, #4
    1e92:	4b09      	ldr	r3, [pc, #36]	; (1eb8 <_ZN2GI2IO4readEPb+0x40>)
    1e94:	4798      	blx	r3
		if(data)
    1e96:	9b01      	ldr	r3, [sp, #4]
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d002      	beq.n	1ea2 <_ZN2GI2IO4readEPb+0x2a>
			*state = true;
    1e9c:	2301      	movs	r3, #1
    1e9e:	7023      	strb	r3, [r4, #0]
    1ea0:	e007      	b.n	1eb2 <_ZN2GI2IO4readEPb+0x3a>
		else
			*state = false;
    1ea2:	2300      	movs	r3, #0
    1ea4:	7023      	strb	r3, [r4, #0]
    1ea6:	e004      	b.n	1eb2 <_ZN2GI2IO4readEPb+0x3a>
}

SysErr GI::IO::read(bool *state)
{
	if(!devHandler || !ioDevType)
		return SYS_ERR_NO_REGISTERED_DEVICE;
    1ea8:	20ef      	movs	r0, #239	; 0xef
    1eaa:	e002      	b.n	1eb2 <_ZN2GI2IO4readEPb+0x3a>
    1eac:	20ef      	movs	r0, #239	; 0xef
    1eae:	e000      	b.n	1eb2 <_ZN2GI2IO4readEPb+0x3a>
			*state = true;
		else
			*state = false;
		return res;
	}
	return SYS_ERR_NOT_IMPLEMENTED;
    1eb0:	20f8      	movs	r0, #248	; 0xf8
    1eb2:	b240      	sxtb	r0, r0
}
    1eb4:	b002      	add	sp, #8
    1eb6:	bd10      	pop	{r4, pc}
    1eb8:	00005e1d 	.word	0x00005e1d

00001ebc <_ZN2GI2IO4readEPm>:

SysErr GI::IO::read(u32 *data)
{
    1ebc:	b510      	push	{r4, lr}
    1ebe:	1c0c      	adds	r4, r1, #0
	if(!devHandler || !ioDevType)
    1ec0:	6842      	ldr	r2, [r0, #4]
    1ec2:	2a00      	cmp	r2, #0
    1ec4:	d013      	beq.n	1eee <_ZN2GI2IO4readEPm+0x32>
    1ec6:	7843      	ldrb	r3, [r0, #1]
    1ec8:	2b00      	cmp	r3, #0
    1eca:	d012      	beq.n	1ef2 <_ZN2GI2IO4readEPm+0x36>
		return SYS_ERR_NO_REGISTERED_DEVICE;
	signed short tmp = -1;
	switch((int)ioDevType)
    1ecc:	2b01      	cmp	r3, #1
    1ece:	d002      	beq.n	1ed6 <_ZN2GI2IO4readEPm+0x1a>
    1ed0:	2b02      	cmp	r3, #2
    1ed2:	d004      	beq.n	1ede <_ZN2GI2IO4readEPm+0x22>
    1ed4:	e00f      	b.n	1ef6 <_ZN2GI2IO4readEPm+0x3a>
	{
	case IO_DEV_GPIO:
		return ((GI::Dev::Gpio *)devHandler)->getIn(data);
    1ed6:	1c10      	adds	r0, r2, #0
    1ed8:	4b09      	ldr	r3, [pc, #36]	; (1f00 <_ZN2GI2IO4readEPm+0x44>)
    1eda:	4798      	blx	r3
    1edc:	e00e      	b.n	1efc <_ZN2GI2IO4readEPm+0x40>
	case IO_DEV_UART:
		tmp = ((GI::Dev::Uart *)devHandler)->getCharNb();
    1ede:	1c10      	adds	r0, r2, #0
    1ee0:	4b08      	ldr	r3, [pc, #32]	; (1f04 <_ZN2GI2IO4readEPm+0x48>)
    1ee2:	4798      	blx	r3
		if(tmp == -1)
    1ee4:	1c43      	adds	r3, r0, #1
    1ee6:	d008      	beq.n	1efa <_ZN2GI2IO4readEPm+0x3e>
			return SYS_ERR_NOT_RECEIVED;
		else
		{
			*data = tmp;
    1ee8:	6020      	str	r0, [r4, #0]
			return SYS_ERR_OK;
    1eea:	2000      	movs	r0, #0
    1eec:	e006      	b.n	1efc <_ZN2GI2IO4readEPm+0x40>
}

SysErr GI::IO::read(u32 *data)
{
	if(!devHandler || !ioDevType)
		return SYS_ERR_NO_REGISTERED_DEVICE;
    1eee:	20ef      	movs	r0, #239	; 0xef
    1ef0:	e004      	b.n	1efc <_ZN2GI2IO4readEPm+0x40>
    1ef2:	20ef      	movs	r0, #239	; 0xef
    1ef4:	e002      	b.n	1efc <_ZN2GI2IO4readEPm+0x40>
		{
			*data = tmp;
			return SYS_ERR_OK;
		}
	}
	return SYS_ERR_NOT_IMPLEMENTED;
    1ef6:	20f8      	movs	r0, #248	; 0xf8
    1ef8:	e000      	b.n	1efc <_ZN2GI2IO4readEPm+0x40>
	case IO_DEV_GPIO:
		return ((GI::Dev::Gpio *)devHandler)->getIn(data);
	case IO_DEV_UART:
		tmp = ((GI::Dev::Uart *)devHandler)->getCharNb();
		if(tmp == -1)
			return SYS_ERR_NOT_RECEIVED;
    1efa:	20e7      	movs	r0, #231	; 0xe7
    1efc:	b240      	sxtb	r0, r0
			*data = tmp;
			return SYS_ERR_OK;
		}
	}
	return SYS_ERR_NOT_IMPLEMENTED;
}
    1efe:	bd10      	pop	{r4, pc}
    1f00:	00005e1d 	.word	0x00005e1d
    1f04:	000062c5 	.word	0x000062c5

00001f08 <_ZN2GI2IO4readEPcPb>:
	GI::IO tmp_io = GI::IO((char *)path);
	return tmp_io.read(buff, len);
}

SysErr GI::IO::read(char *path, bool *state)/* Bit device */
{
    1f08:	b510      	push	{r4, lr}
    1f0a:	b084      	sub	sp, #16
    1f0c:	1c03      	adds	r3, r0, #0
    1f0e:	1c0c      	adds	r4, r1, #0
	GI::IO tmp_io = GI::IO((char *)path);
    1f10:	a801      	add	r0, sp, #4
    1f12:	1c19      	adds	r1, r3, #0
    1f14:	4b06      	ldr	r3, [pc, #24]	; (1f30 <_ZN2GI2IO4readEPcPb+0x28>)
    1f16:	4798      	blx	r3
	return tmp_io.read(state);
    1f18:	a801      	add	r0, sp, #4
    1f1a:	1c21      	adds	r1, r4, #0
    1f1c:	4b05      	ldr	r3, [pc, #20]	; (1f34 <_ZN2GI2IO4readEPcPb+0x2c>)
    1f1e:	4798      	blx	r3
    1f20:	1c04      	adds	r4, r0, #0
    1f22:	a801      	add	r0, sp, #4
    1f24:	4b04      	ldr	r3, [pc, #16]	; (1f38 <_ZN2GI2IO4readEPcPb+0x30>)
    1f26:	4798      	blx	r3
}
    1f28:	1c20      	adds	r0, r4, #0
    1f2a:	b004      	add	sp, #16
    1f2c:	bd10      	pop	{r4, pc}
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	00001c59 	.word	0x00001c59
    1f34:	00001e79 	.word	0x00001e79
    1f38:	00001cf1 	.word	0x00001cf1

00001f3c <_ZN2GI3Sys5Timer6enableEb>:
#endif
	enable(true);
}
//#####################################################
void GI::Sys::Timer::enable(bool action)
{
    1f3c:	b530      	push	{r4, r5, lr}
	if (action)
    1f3e:	2900      	cmp	r1, #0
    1f40:	d00b      	beq.n	1f5a <_ZN2GI3Sys5Timer6enableEb+0x1e>
	{
		sTimmerTickValue = (sTimmerInterval + STimerCnt)&(u64)__INT64_MAX__;
    1f42:	4b09      	ldr	r3, [pc, #36]	; (1f68 <_ZN2GI3Sys5Timer6enableEb+0x2c>)
    1f44:	681a      	ldr	r2, [r3, #0]
    1f46:	685b      	ldr	r3, [r3, #4]
    1f48:	6804      	ldr	r4, [r0, #0]
    1f4a:	6845      	ldr	r5, [r0, #4]
    1f4c:	1912      	adds	r2, r2, r4
    1f4e:	416b      	adcs	r3, r5
    1f50:	6082      	str	r2, [r0, #8]
    1f52:	005b      	lsls	r3, r3, #1
    1f54:	085b      	lsrs	r3, r3, #1
    1f56:	60c3      	str	r3, [r0, #12]
    1f58:	e004      	b.n	1f64 <_ZN2GI3Sys5Timer6enableEb+0x28>
	}
	else
	{
		sTimmerTickValue = sTimmerTickValue | (u64)(-__INT64_MAX__ - 1);
    1f5a:	2380      	movs	r3, #128	; 0x80
    1f5c:	061b      	lsls	r3, r3, #24
    1f5e:	68c5      	ldr	r5, [r0, #12]
    1f60:	432b      	orrs	r3, r5
    1f62:	60c3      	str	r3, [r0, #12]
	}
}
    1f64:	bd30      	pop	{r4, r5, pc}
    1f66:	46c0      	nop			; (mov r8, r8)
    1f68:	20000658 	.word	0x20000658

00001f6c <_ZN2GI3Sys5TimerC1Ey>:
GI::Sys::Timer::Timer()
{
	memset(this, 0, sizeof(*this));
}
//#####################################################
GI::Sys::Timer::Timer(u64 interval)
    1f6c:	b570      	push	{r4, r5, r6, lr}
    1f6e:	1c04      	adds	r4, r0, #0
    1f70:	1c16      	adds	r6, r2, #0
    1f72:	1c1d      	adds	r5, r3, #0
{
	memset(this, 0, sizeof(*this));
    1f74:	2100      	movs	r1, #0
    1f76:	2210      	movs	r2, #16
    1f78:	4b05      	ldr	r3, [pc, #20]	; (1f90 <_ZN2GI3Sys5TimerC1Ey+0x24>)
    1f7a:	4798      	blx	r3
	sTimmerInterval = interval & (u64)__INT64_MAX__;
    1f7c:	6026      	str	r6, [r4, #0]
    1f7e:	006d      	lsls	r5, r5, #1
    1f80:	086d      	lsrs	r5, r5, #1
    1f82:	6065      	str	r5, [r4, #4]
	enable(true);
    1f84:	1c20      	adds	r0, r4, #0
    1f86:	2101      	movs	r1, #1
    1f88:	4b02      	ldr	r3, [pc, #8]	; (1f94 <_ZN2GI3Sys5TimerC1Ey+0x28>)
    1f8a:	4798      	blx	r3
}
    1f8c:	1c20      	adds	r0, r4, #0
    1f8e:	bd70      	pop	{r4, r5, r6, pc}
    1f90:	00006635 	.word	0x00006635
    1f94:	00001f3d 	.word	0x00001f3d

00001f98 <_ZN2GI3Sys5Timer8intervalEy>:
{

}
//#####################################################
void GI::Sys::Timer::interval(u64 interval)
{
    1f98:	b508      	push	{r3, lr}
#ifdef USE_RTC_100_MS
	sTimmerInterval = (interval & (u64)INT64_MAX) / 10;
#else
	sTimmerInterval = interval & (u64)__INT64_MAX__;
    1f9a:	6002      	str	r2, [r0, #0]
    1f9c:	005b      	lsls	r3, r3, #1
    1f9e:	085b      	lsrs	r3, r3, #1
    1fa0:	6043      	str	r3, [r0, #4]
#endif
	enable(true);
    1fa2:	2101      	movs	r1, #1
    1fa4:	4b01      	ldr	r3, [pc, #4]	; (1fac <_ZN2GI3Sys5Timer8intervalEy+0x14>)
    1fa6:	4798      	blx	r3
}
    1fa8:	bd08      	pop	{r3, pc}
    1faa:	46c0      	nop			; (mov r8, r8)
    1fac:	00001f3d 	.word	0x00001f3d

00001fb0 <_ZN2GI3Sys5Timer4tickEv>:
		sTimmerTickValue = sTimmerTickValue | (u64)(-__INT64_MAX__ - 1);
	}
}
//#####################################################
bool GI::Sys::Timer::tick()
{
    1fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(!(sTimmerTickValue & (u64)(-__INT64_MAX__ - 1)))
    1fb2:	6886      	ldr	r6, [r0, #8]
    1fb4:	68c1      	ldr	r1, [r0, #12]
    1fb6:	2900      	cmp	r1, #0
    1fb8:	db19      	blt.n	1fee <_ZN2GI3Sys5Timer4tickEv+0x3e>
	{
		u64 Temp1 = sTimmerTickValue & (u64)__INT64_MAX__;
		u64 Temp2 = STimerCnt & (u64)__INT64_MAX__;
    1fba:	4b0e      	ldr	r3, [pc, #56]	; (1ff4 <_ZN2GI3Sys5Timer4tickEv+0x44>)
    1fbc:	681c      	ldr	r4, [r3, #0]
    1fbe:	685d      	ldr	r5, [r3, #4]
//#####################################################
bool GI::Sys::Timer::tick()
{
	if(!(sTimmerTickValue & (u64)(-__INT64_MAX__ - 1)))
	{
		u64 Temp1 = sTimmerTickValue & (u64)__INT64_MAX__;
    1fc0:	1c32      	adds	r2, r6, #0
    1fc2:	0049      	lsls	r1, r1, #1
    1fc4:	084b      	lsrs	r3, r1, #1
		u64 Temp2 = STimerCnt & (u64)__INT64_MAX__;
		u64 Temp = (Temp1 - Temp2 - 1)& (u64)(-__INT64_MAX__ - 1);
    1fc6:	2601      	movs	r6, #1
    1fc8:	4276      	negs	r6, r6
    1fca:	17f7      	asrs	r7, r6, #31
    1fcc:	18b6      	adds	r6, r6, r2
    1fce:	415f      	adcs	r7, r3
bool GI::Sys::Timer::tick()
{
	if(!(sTimmerTickValue & (u64)(-__INT64_MAX__ - 1)))
	{
		u64 Temp1 = sTimmerTickValue & (u64)__INT64_MAX__;
		u64 Temp2 = STimerCnt & (u64)__INT64_MAX__;
    1fd0:	1c22      	adds	r2, r4, #0
    1fd2:	0069      	lsls	r1, r5, #1
    1fd4:	084b      	lsrs	r3, r1, #1
		u64 Temp = (Temp1 - Temp2 - 1)& (u64)(-__INT64_MAX__ - 1);
    1fd6:	1c34      	adds	r4, r6, #0
    1fd8:	1c3d      	adds	r5, r7, #0
    1fda:	1aa4      	subs	r4, r4, r2
    1fdc:	419d      	sbcs	r5, r3
		{
			enable(true);
			return true;
		}
	}
	return false;
    1fde:	2200      	movs	r2, #0
	if(!(sTimmerTickValue & (u64)(-__INT64_MAX__ - 1)))
	{
		u64 Temp1 = sTimmerTickValue & (u64)__INT64_MAX__;
		u64 Temp2 = STimerCnt & (u64)__INT64_MAX__;
		u64 Temp = (Temp1 - Temp2 - 1)& (u64)(-__INT64_MAX__ - 1);
		if(Temp)
    1fe0:	2d00      	cmp	r5, #0
    1fe2:	da05      	bge.n	1ff0 <_ZN2GI3Sys5Timer4tickEv+0x40>
		{
			enable(true);
    1fe4:	2101      	movs	r1, #1
    1fe6:	4b04      	ldr	r3, [pc, #16]	; (1ff8 <_ZN2GI3Sys5Timer4tickEv+0x48>)
    1fe8:	4798      	blx	r3
			return true;
    1fea:	2201      	movs	r2, #1
    1fec:	e000      	b.n	1ff0 <_ZN2GI3Sys5Timer4tickEv+0x40>
		}
	}
	return false;
    1fee:	2200      	movs	r2, #0
}
    1ff0:	1c10      	adds	r0, r2, #0
    1ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ff4:	20000658 	.word	0x20000658
    1ff8:	00001f3d 	.word	0x00001f3d

00001ffc <_ZN3Cmd3catEiPPc>:
#endif
#include <lib/fs/fat.h>
#include "cmd.h"

SysErr Cmd::cat(int argc, char *argv[])
{
    1ffc:	b570      	push	{r4, r5, r6, lr}
    1ffe:	4c45      	ldr	r4, [pc, #276]	; (2114 <_ZN3Cmd3catEiPPc+0x118>)
    2000:	44a5      	add	sp, r4
    2002:	1c04      	adds	r4, r0, #0
    2004:	1c15      	adds	r5, r2, #0
	int argc_cnt = 0;
	GI::String input = GI::String();
    2006:	4668      	mov	r0, sp
    2008:	4b43      	ldr	r3, [pc, #268]	; (2118 <_ZN3Cmd3catEiPPc+0x11c>)
    200a:	4798      	blx	r3
	input.set(argv[argc_cnt]);
    200c:	6829      	ldr	r1, [r5, #0]
    200e:	4668      	mov	r0, sp
    2010:	4b42      	ldr	r3, [pc, #264]	; (211c <_ZN3Cmd3catEiPPc+0x120>)
    2012:	4798      	blx	r3

	int cnt = input.length - 1;
    2014:	9b01      	ldr	r3, [sp, #4]
    2016:	3b01      	subs	r3, #1
    2018:	1c1a      	adds	r2, r3, #0
	while(cnt != -1)
    201a:	1c59      	adds	r1, r3, #1
    201c:	d009      	beq.n	2032 <_ZN3Cmd3catEiPPc+0x36>
	{
		if(input.buff[cnt] == '/')
    201e:	9900      	ldr	r1, [sp, #0]
    2020:	5ccb      	ldrb	r3, [r1, r3]
    2022:	2b2f      	cmp	r3, #47	; 0x2f
    2024:	d103      	bne.n	202e <_ZN3Cmd3catEiPPc+0x32>
    2026:	e004      	b.n	2032 <_ZN3Cmd3catEiPPc+0x36>
    2028:	5c8b      	ldrb	r3, [r1, r2]
    202a:	2b2f      	cmp	r3, #47	; 0x2f
    202c:	d001      	beq.n	2032 <_ZN3Cmd3catEiPPc+0x36>
	int argc_cnt = 0;
	GI::String input = GI::String();
	input.set(argv[argc_cnt]);

	int cnt = input.length - 1;
	while(cnt != -1)
    202e:	3a01      	subs	r2, #1
    2030:	d2fa      	bcs.n	2028 <_ZN3Cmd3catEiPPc+0x2c>
		if(input.buff[cnt] == '/')
			break;
		cnt--;
	}
	char *tmp_filename;
	GI::String filename = GI::String((tmp_filename = input.subString(cnt + 1)));
    2032:	1c56      	adds	r6, r2, #1
    2034:	4668      	mov	r0, sp
    2036:	1c31      	adds	r1, r6, #0
    2038:	4b39      	ldr	r3, [pc, #228]	; (2120 <_ZN3Cmd3catEiPPc+0x124>)
    203a:	4798      	blx	r3
    203c:	1c05      	adds	r5, r0, #0
    203e:	a804      	add	r0, sp, #16
    2040:	1c29      	adds	r1, r5, #0
    2042:	4b38      	ldr	r3, [pc, #224]	; (2124 <_ZN3Cmd3catEiPPc+0x128>)
    2044:	4798      	blx	r3
	if(tmp_filename)
    2046:	2d00      	cmp	r5, #0
    2048:	d002      	beq.n	2050 <_ZN3Cmd3catEiPPc+0x54>
		free(tmp_filename);
    204a:	1c28      	adds	r0, r5, #0
    204c:	4b36      	ldr	r3, [pc, #216]	; (2128 <_ZN3Cmd3catEiPPc+0x12c>)
    204e:	4798      	blx	r3
	char *tmp_path;
	GI::String directory = GI::String((tmp_path = input.subString(0, cnt + 1)));
    2050:	4668      	mov	r0, sp
    2052:	2100      	movs	r1, #0
    2054:	1c32      	adds	r2, r6, #0
    2056:	4b35      	ldr	r3, [pc, #212]	; (212c <_ZN3Cmd3catEiPPc+0x130>)
    2058:	4798      	blx	r3
    205a:	1c05      	adds	r5, r0, #0
    205c:	a808      	add	r0, sp, #32
    205e:	1c29      	adds	r1, r5, #0
    2060:	4b30      	ldr	r3, [pc, #192]	; (2124 <_ZN3Cmd3catEiPPc+0x128>)
    2062:	4798      	blx	r3
	if(tmp_path)
    2064:	2d00      	cmp	r5, #0
    2066:	d002      	beq.n	206e <_ZN3Cmd3catEiPPc+0x72>
		free(tmp_path);
    2068:	1c28      	adds	r0, r5, #0
    206a:	4b2f      	ldr	r3, [pc, #188]	; (2128 <_ZN3Cmd3catEiPPc+0x12c>)
    206c:	4798      	blx	r3

	GI::String directory_with_path = GI::String(path->buff);
    206e:	6863      	ldr	r3, [r4, #4]
    2070:	6819      	ldr	r1, [r3, #0]
    2072:	a80c      	add	r0, sp, #48	; 0x30
    2074:	4b2b      	ldr	r3, [pc, #172]	; (2124 <_ZN3Cmd3catEiPPc+0x128>)
    2076:	4798      	blx	r3

	SysErr err = cdInt(&directory_with_path, &directory);
    2078:	1c20      	adds	r0, r4, #0
    207a:	a90c      	add	r1, sp, #48	; 0x30
    207c:	aa08      	add	r2, sp, #32
    207e:	4b2c      	ldr	r3, [pc, #176]	; (2130 <_ZN3Cmd3catEiPPc+0x134>)
    2080:	4798      	blx	r3
	if(err != SYS_ERR_OK)
    2082:	2800      	cmp	r0, #0
    2084:	d005      	beq.n	2092 <_ZN3Cmd3catEiPPc+0x96>
#if __AVR_XMEGA__
		char tmp[sizeof("Invalid path.\n\r")];
		strcpy_P(tmp, PSTR("Invalid path.\n\r"));
		errPath->write(tmp);
#else
		errPath->write((char *)"Invalid path.\n\r");
    2086:	6920      	ldr	r0, [r4, #16]
    2088:	492a      	ldr	r1, [pc, #168]	; (2134 <_ZN3Cmd3catEiPPc+0x138>)
    208a:	4b2b      	ldr	r3, [pc, #172]	; (2138 <_ZN3Cmd3catEiPPc+0x13c>)
    208c:	4798      	blx	r3
#endif
		return SYS_ERR_INVALID_PATH;
    208e:	25f5      	movs	r5, #245	; 0xf5
    2090:	e031      	b.n	20f6 <_ZN3Cmd3catEiPPc+0xfa>
	}
	file file_read = file();
    2092:	a818      	add	r0, sp, #96	; 0x60
    2094:	2100      	movs	r1, #0
    2096:	2292      	movs	r2, #146	; 0x92
    2098:	0092      	lsls	r2, r2, #2
    209a:	4b28      	ldr	r3, [pc, #160]	; (213c <_ZN3Cmd3catEiPPc+0x140>)
    209c:	4798      	blx	r3
	if(directory_with_path.length)
    209e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    20a0:	2b00      	cmp	r3, #0
    20a2:	d008      	beq.n	20b6 <_ZN3Cmd3catEiPPc+0xba>
	{
		directory_with_path.append((char)'/');
    20a4:	a80c      	add	r0, sp, #48	; 0x30
    20a6:	212f      	movs	r1, #47	; 0x2f
    20a8:	4b25      	ldr	r3, [pc, #148]	; (2140 <_ZN3Cmd3catEiPPc+0x144>)
    20aa:	4798      	blx	r3
		directory_with_path.append(&filename);
    20ac:	a80c      	add	r0, sp, #48	; 0x30
    20ae:	a904      	add	r1, sp, #16
    20b0:	4b24      	ldr	r3, [pc, #144]	; (2144 <_ZN3Cmd3catEiPPc+0x148>)
    20b2:	4798      	blx	r3
    20b4:	e003      	b.n	20be <_ZN3Cmd3catEiPPc+0xc2>
	}
	else
		directory_with_path.set(&filename);
    20b6:	a80c      	add	r0, sp, #48	; 0x30
    20b8:	a904      	add	r1, sp, #16
    20ba:	4b23      	ldr	r3, [pc, #140]	; (2148 <_ZN3Cmd3catEiPPc+0x14c>)
    20bc:	4798      	blx	r3


	FRESULT res = file_read.fopen(directory_with_path.buff, FA_READ);
    20be:	a818      	add	r0, sp, #96	; 0x60
    20c0:	990c      	ldr	r1, [sp, #48]	; 0x30
    20c2:	2201      	movs	r2, #1
    20c4:	4b21      	ldr	r3, [pc, #132]	; (214c <_ZN3Cmd3catEiPPc+0x150>)
    20c6:	4798      	blx	r3
    20c8:	1e01      	subs	r1, r0, #0
	if(!res)
    20ca:	d110      	bne.n	20ee <_ZN3Cmd3catEiPPc+0xf2>
	{
		unsigned char buff[32];
		unsigned int bytes_read;
		while((bytes_read = file_read.fread(buff, 32)))
    20cc:	4d20      	ldr	r5, [pc, #128]	; (2150 <_ZN3Cmd3catEiPPc+0x154>)
		{
			outPath->write((unsigned char *)buff, bytes_read);
    20ce:	4e21      	ldr	r6, [pc, #132]	; (2154 <_ZN3Cmd3catEiPPc+0x158>)
    20d0:	e002      	b.n	20d8 <_ZN3Cmd3catEiPPc+0xdc>
    20d2:	68e0      	ldr	r0, [r4, #12]
    20d4:	a910      	add	r1, sp, #64	; 0x40
    20d6:	47b0      	blx	r6
	FRESULT res = file_read.fopen(directory_with_path.buff, FA_READ);
	if(!res)
	{
		unsigned char buff[32];
		unsigned int bytes_read;
		while((bytes_read = file_read.fread(buff, 32)))
    20d8:	a818      	add	r0, sp, #96	; 0x60
    20da:	a910      	add	r1, sp, #64	; 0x40
    20dc:	2220      	movs	r2, #32
    20de:	47a8      	blx	r5
    20e0:	1e02      	subs	r2, r0, #0
    20e2:	d1f6      	bne.n	20d2 <_ZN3Cmd3catEiPPc+0xd6>
		{
			outPath->write((unsigned char *)buff, bytes_read);
		}
		file_read.fclose();
    20e4:	a818      	add	r0, sp, #96	; 0x60
    20e6:	4b1c      	ldr	r3, [pc, #112]	; (2158 <_ZN3Cmd3catEiPPc+0x15c>)
    20e8:	4798      	blx	r3
	else
	{
		printError(res);
	}

	return SYS_ERR_OK;
    20ea:	2500      	movs	r5, #0
    20ec:	e003      	b.n	20f6 <_ZN3Cmd3catEiPPc+0xfa>
		}
		file_read.fclose();
	}
	else
	{
		printError(res);
    20ee:	1c20      	adds	r0, r4, #0
    20f0:	4b1a      	ldr	r3, [pc, #104]	; (215c <_ZN3Cmd3catEiPPc+0x160>)
    20f2:	4798      	blx	r3
	}

	return SYS_ERR_OK;
    20f4:	2500      	movs	r5, #0
	char *tmp_path;
	GI::String directory = GI::String((tmp_path = input.subString(0, cnt + 1)));
	if(tmp_path)
		free(tmp_path);

	GI::String directory_with_path = GI::String(path->buff);
    20f6:	a80c      	add	r0, sp, #48	; 0x30
    20f8:	4c19      	ldr	r4, [pc, #100]	; (2160 <_ZN3Cmd3catEiPPc+0x164>)
    20fa:	47a0      	blx	r4
	char *tmp_filename;
	GI::String filename = GI::String((tmp_filename = input.subString(cnt + 1)));
	if(tmp_filename)
		free(tmp_filename);
	char *tmp_path;
	GI::String directory = GI::String((tmp_path = input.subString(0, cnt + 1)));
    20fc:	a808      	add	r0, sp, #32
    20fe:	47a0      	blx	r4
		if(input.buff[cnt] == '/')
			break;
		cnt--;
	}
	char *tmp_filename;
	GI::String filename = GI::String((tmp_filename = input.subString(cnt + 1)));
    2100:	a804      	add	r0, sp, #16
    2102:	47a0      	blx	r4
	else
	{
		printError(res);
	}

	return SYS_ERR_OK;
    2104:	4668      	mov	r0, sp
    2106:	47a0      	blx	r4
    2108:	b268      	sxtb	r0, r5
}
    210a:	23aa      	movs	r3, #170	; 0xaa
    210c:	009b      	lsls	r3, r3, #2
    210e:	449d      	add	sp, r3
    2110:	bd70      	pop	{r4, r5, r6, pc}
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	fffffd58 	.word	0xfffffd58
    2118:	00005759 	.word	0x00005759
    211c:	00005831 	.word	0x00005831
    2120:	000059c5 	.word	0x000059c5
    2124:	00005785 	.word	0x00005785
    2128:	000065dd 	.word	0x000065dd
    212c:	00005975 	.word	0x00005975
    2130:	00002165 	.word	0x00002165
    2134:	0000694c 	.word	0x0000694c
    2138:	00001d99 	.word	0x00001d99
    213c:	00006635 	.word	0x00006635
    2140:	000058f1 	.word	0x000058f1
    2144:	000058b1 	.word	0x000058b1
    2148:	00005875 	.word	0x00005875
    214c:	00002931 	.word	0x00002931
    2150:	00002949 	.word	0x00002949
    2154:	00001cf9 	.word	0x00001cf9
    2158:	0000293d 	.word	0x0000293d
    215c:	0000273d 	.word	0x0000273d
    2160:	0000580d 	.word	0x0000580d

00002164 <_ZN3Cmd5cdIntEPN2GI6StringES2_>:
	}
	return SYS_ERR_OK;
}

SysErr Cmd::cdInt(GI::String *_path, GI::String *input)
{
    2164:	b5f0      	push	{r4, r5, r6, r7, lr}
    2166:	b09b      	sub	sp, #108	; 0x6c
    2168:	1c07      	adds	r7, r0, #0
    216a:	1c0e      	adds	r6, r1, #0
    216c:	1c14      	adds	r4, r2, #0
	GI::String tmpInput = GI::String();
    216e:	4668      	mov	r0, sp
    2170:	4b71      	ldr	r3, [pc, #452]	; (2338 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1d4>)
    2172:	4798      	blx	r3
	if((input->length >=1 && input->buff[0] == '/') || (input->length >=2 && (input->buff[0] == '\\' && input->buff[1] == '\\')))
    2174:	6863      	ldr	r3, [r4, #4]
    2176:	2b00      	cmp	r3, #0
    2178:	d100      	bne.n	217c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x18>
    217a:	e0a2      	b.n	22c2 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x15e>
    217c:	6821      	ldr	r1, [r4, #0]
    217e:	780a      	ldrb	r2, [r1, #0]
    2180:	2a2f      	cmp	r2, #47	; 0x2f
    2182:	d007      	beq.n	2194 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x30>
    2184:	2b01      	cmp	r3, #1
    2186:	d94d      	bls.n	2224 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0xc0>
    2188:	2a5c      	cmp	r2, #92	; 0x5c
    218a:	d14b      	bne.n	2224 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0xc0>
    218c:	784a      	ldrb	r2, [r1, #1]
    218e:	2a5c      	cmp	r2, #92	; 0x5c
    2190:	d000      	beq.n	2194 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x30>
    2192:	e0c8      	b.n	2326 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1c2>
	{
		char *tmp;
		tmpInput.set((tmp = input->subString(1)));
    2194:	1c20      	adds	r0, r4, #0
    2196:	2101      	movs	r1, #1
    2198:	4b68      	ldr	r3, [pc, #416]	; (233c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1d8>)
    219a:	4798      	blx	r3
    219c:	1c04      	adds	r4, r0, #0
    219e:	4668      	mov	r0, sp
    21a0:	1c21      	adds	r1, r4, #0
    21a2:	4b67      	ldr	r3, [pc, #412]	; (2340 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1dc>)
    21a4:	4798      	blx	r3
		if(tmp)
    21a6:	2c00      	cmp	r4, #0
    21a8:	d002      	beq.n	21b0 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x4c>
			free(tmp);
    21aa:	1c20      	adds	r0, r4, #0
    21ac:	4b65      	ldr	r3, [pc, #404]	; (2344 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1e0>)
    21ae:	4798      	blx	r3
		dir tmp_dir = dir();
    21b0:	a808      	add	r0, sp, #32
    21b2:	2100      	movs	r1, #0
    21b4:	2248      	movs	r2, #72	; 0x48
    21b6:	4b64      	ldr	r3, [pc, #400]	; (2348 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1e4>)
    21b8:	4798      	blx	r3
		if(tmp_dir.fopendir(tmpInput.buff) == FR_OK)
    21ba:	a808      	add	r0, sp, #32
    21bc:	9900      	ldr	r1, [sp, #0]
    21be:	4b63      	ldr	r3, [pc, #396]	; (234c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1e8>)
    21c0:	4798      	blx	r3
    21c2:	2800      	cmp	r0, #0
    21c4:	d108      	bne.n	21d8 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x74>
		{
			tmp_dir.fclosedir();
    21c6:	a808      	add	r0, sp, #32
    21c8:	4b61      	ldr	r3, [pc, #388]	; (2350 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1ec>)
    21ca:	4798      	blx	r3
			_path->set(&tmpInput);
    21cc:	1c30      	adds	r0, r6, #0
    21ce:	4669      	mov	r1, sp
    21d0:	4b60      	ldr	r3, [pc, #384]	; (2354 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1f0>)
    21d2:	4798      	blx	r3
		}
		else
			return SYS_ERR_INVALID_PATH;
	}

	return SYS_ERR_OK;
    21d4:	2500      	movs	r5, #0
    21d6:	e0a1      	b.n	231c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1b8>
		{
			tmp_dir.fclosedir();
			_path->set(&tmpInput);
		}
		else
			return SYS_ERR_INVALID_PATH;
    21d8:	25f5      	movs	r5, #245	; 0xf5
    21da:	e09f      	b.n	231c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1b8>
	}
	else
	if(input->length >=2 && input->buff[0] == '\\' && input->buff[1] == '\\')
	{
		char *tmp;
		tmpInput.set((tmp = input->subString(2)));
    21dc:	1c20      	adds	r0, r4, #0
    21de:	2102      	movs	r1, #2
    21e0:	4b56      	ldr	r3, [pc, #344]	; (233c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1d8>)
    21e2:	4798      	blx	r3
    21e4:	1c04      	adds	r4, r0, #0
    21e6:	4668      	mov	r0, sp
    21e8:	1c21      	adds	r1, r4, #0
    21ea:	4b55      	ldr	r3, [pc, #340]	; (2340 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1dc>)
    21ec:	4798      	blx	r3
		if(tmp)
    21ee:	2c00      	cmp	r4, #0
    21f0:	d002      	beq.n	21f8 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x94>
			free(tmp);
    21f2:	1c20      	adds	r0, r4, #0
    21f4:	4b53      	ldr	r3, [pc, #332]	; (2344 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1e0>)
    21f6:	4798      	blx	r3
		dir tmp_dir = dir();
    21f8:	a808      	add	r0, sp, #32
    21fa:	2100      	movs	r1, #0
    21fc:	2248      	movs	r2, #72	; 0x48
    21fe:	4b52      	ldr	r3, [pc, #328]	; (2348 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1e4>)
    2200:	4798      	blx	r3
		if(tmp_dir.fopendir(tmpInput.buff) == FR_OK)
    2202:	a808      	add	r0, sp, #32
    2204:	9900      	ldr	r1, [sp, #0]
    2206:	4b51      	ldr	r3, [pc, #324]	; (234c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1e8>)
    2208:	4798      	blx	r3
    220a:	2800      	cmp	r0, #0
    220c:	d108      	bne.n	2220 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0xbc>
		{
			tmp_dir.fclosedir();
    220e:	a808      	add	r0, sp, #32
    2210:	4b4f      	ldr	r3, [pc, #316]	; (2350 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1ec>)
    2212:	4798      	blx	r3
			_path->set(&tmpInput);
    2214:	1c30      	adds	r0, r6, #0
    2216:	4669      	mov	r1, sp
    2218:	4b4e      	ldr	r3, [pc, #312]	; (2354 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1f0>)
    221a:	4798      	blx	r3
		}
		else
			return SYS_ERR_INVALID_PATH;
	}

	return SYS_ERR_OK;
    221c:	2500      	movs	r5, #0
    221e:	e07d      	b.n	231c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1b8>
		{
			tmp_dir.fclosedir();
			_path->set(&tmpInput);
		}
		else
			return SYS_ERR_INVALID_PATH;
    2220:	25f5      	movs	r5, #245	; 0xf5
    2222:	e07b      	b.n	231c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1b8>
	if(input->length >=2 && input->buff[0] == '\\' && input->buff[1] != '\\')
	{
		return SYS_ERR_INVALID_PATH;
	}
	else
	if(input->length >=3 && input->buff[0] == '.' && input->buff[1] == '.' && input->buff[2] == '/')
    2224:	2b02      	cmp	r3, #2
    2226:	d94c      	bls.n	22c2 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x15e>
    2228:	6822      	ldr	r2, [r4, #0]
    222a:	7811      	ldrb	r1, [r2, #0]
    222c:	292e      	cmp	r1, #46	; 0x2e
    222e:	d148      	bne.n	22c2 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x15e>
    2230:	7851      	ldrb	r1, [r2, #1]
    2232:	292e      	cmp	r1, #46	; 0x2e
    2234:	d145      	bne.n	22c2 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x15e>
    2236:	7892      	ldrb	r2, [r2, #2]
    2238:	2a2f      	cmp	r2, #47	; 0x2f
    223a:	d142      	bne.n	22c2 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x15e>
	{
		if(_path->length)
    223c:	6873      	ldr	r3, [r6, #4]
		}
		else
			return SYS_ERR_INVALID_PATH;
	}

	return SYS_ERR_OK;
    223e:	2500      	movs	r5, #0
		return SYS_ERR_INVALID_PATH;
	}
	else
	if(input->length >=3 && input->buff[0] == '.' && input->buff[1] == '.' && input->buff[2] == '/')
	{
		if(_path->length)
    2240:	2b00      	cmp	r3, #0
    2242:	d06b      	beq.n	231c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1b8>
		{
			int cnt = _path->length - 1;
    2244:	3b01      	subs	r3, #1
    2246:	1c1a      	adds	r2, r3, #0
			while(cnt != -1)
    2248:	1c59      	adds	r1, r3, #1
    224a:	d009      	beq.n	2260 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0xfc>
			{
				if(_path->buff[cnt] == '/')
    224c:	6831      	ldr	r1, [r6, #0]
    224e:	5ccb      	ldrb	r3, [r1, r3]
    2250:	2b2f      	cmp	r3, #47	; 0x2f
    2252:	d103      	bne.n	225c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0xf8>
    2254:	e004      	b.n	2260 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0xfc>
    2256:	5c8b      	ldrb	r3, [r1, r2]
    2258:	2b2f      	cmp	r3, #47	; 0x2f
    225a:	d001      	beq.n	2260 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0xfc>
	if(input->length >=3 && input->buff[0] == '.' && input->buff[1] == '.' && input->buff[2] == '/')
	{
		if(_path->length)
		{
			int cnt = _path->length - 1;
			while(cnt != -1)
    225c:	3a01      	subs	r2, #1
    225e:	d2fa      	bcs.n	2256 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0xf2>
				if(_path->buff[cnt] == '/')
					break;
				cnt--;
			}
			char *tmp;
			tmpInput.set((tmp = _path->subString(0, cnt)));
    2260:	1c30      	adds	r0, r6, #0
    2262:	2100      	movs	r1, #0
    2264:	4b3c      	ldr	r3, [pc, #240]	; (2358 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1f4>)
    2266:	4798      	blx	r3
    2268:	1c05      	adds	r5, r0, #0
    226a:	4668      	mov	r0, sp
    226c:	1c29      	adds	r1, r5, #0
    226e:	4b34      	ldr	r3, [pc, #208]	; (2340 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1dc>)
    2270:	4798      	blx	r3
			if(tmp)
    2272:	2d00      	cmp	r5, #0
    2274:	d002      	beq.n	227c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x118>
				free(tmp);
    2276:	1c28      	adds	r0, r5, #0
    2278:	4b32      	ldr	r3, [pc, #200]	; (2344 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1e0>)
    227a:	4798      	blx	r3
			dir tmp_dir = dir();
    227c:	a808      	add	r0, sp, #32
    227e:	2100      	movs	r1, #0
    2280:	2248      	movs	r2, #72	; 0x48
    2282:	4b31      	ldr	r3, [pc, #196]	; (2348 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1e4>)
    2284:	4798      	blx	r3
			if(tmp_dir.fopendir(tmpInput.buff) == FR_OK)
    2286:	a808      	add	r0, sp, #32
    2288:	9900      	ldr	r1, [sp, #0]
    228a:	4b30      	ldr	r3, [pc, #192]	; (234c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1e8>)
    228c:	4798      	blx	r3
    228e:	2800      	cmp	r0, #0
    2290:	d115      	bne.n	22be <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x15a>
			{
				tmp_dir.fclosedir();
    2292:	a808      	add	r0, sp, #32
    2294:	4b2e      	ldr	r3, [pc, #184]	; (2350 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1ec>)
    2296:	4798      	blx	r3
				_path->set(&tmpInput);
    2298:	1c30      	adds	r0, r6, #0
    229a:	4669      	mov	r1, sp
    229c:	4b2d      	ldr	r3, [pc, #180]	; (2354 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1f0>)
    229e:	4798      	blx	r3
				GI::String _tmpInput = GI::String(input->buff + 3);
    22a0:	6821      	ldr	r1, [r4, #0]
    22a2:	3103      	adds	r1, #3
    22a4:	a804      	add	r0, sp, #16
    22a6:	4b2d      	ldr	r3, [pc, #180]	; (235c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1f8>)
    22a8:	4798      	blx	r3
				cdInt(_path, &_tmpInput);
    22aa:	1c38      	adds	r0, r7, #0
    22ac:	1c31      	adds	r1, r6, #0
    22ae:	aa04      	add	r2, sp, #16
    22b0:	f7ff ff58 	bl	2164 <_ZN3Cmd5cdIntEPN2GI6StringES2_>
    22b4:	a804      	add	r0, sp, #16
    22b6:	4b2a      	ldr	r3, [pc, #168]	; (2360 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1fc>)
    22b8:	4798      	blx	r3
		}
		else
			return SYS_ERR_INVALID_PATH;
	}

	return SYS_ERR_OK;
    22ba:	2500      	movs	r5, #0
    22bc:	e02e      	b.n	231c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1b8>
				_path->set(&tmpInput);
				GI::String _tmpInput = GI::String(input->buff + 3);
				cdInt(_path, &_tmpInput);
			}
			else
				return SYS_ERR_INVALID_PATH;
    22be:	25f5      	movs	r5, #245	; 0xf5
    22c0:	e02c      	b.n	231c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1b8>
		}
	}
	else
	{
		if(!input->length)
			return SYS_ERR_OK;
    22c2:	2500      	movs	r5, #0
				return SYS_ERR_INVALID_PATH;
		}
	}
	else
	{
		if(!input->length)
    22c4:	2b00      	cmp	r3, #0
    22c6:	d029      	beq.n	231c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1b8>
			return SYS_ERR_OK;
		if(_path->length)
    22c8:	6873      	ldr	r3, [r6, #4]
    22ca:	2b00      	cmp	r3, #0
    22cc:	d00c      	beq.n	22e8 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x184>
		{
			tmpInput.set(_path);
    22ce:	4668      	mov	r0, sp
    22d0:	1c31      	adds	r1, r6, #0
    22d2:	4b20      	ldr	r3, [pc, #128]	; (2354 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1f0>)
    22d4:	4798      	blx	r3
			tmpInput.append((char)'/');
    22d6:	4668      	mov	r0, sp
    22d8:	212f      	movs	r1, #47	; 0x2f
    22da:	4b22      	ldr	r3, [pc, #136]	; (2364 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x200>)
    22dc:	4798      	blx	r3
			tmpInput.append(input);
    22de:	4668      	mov	r0, sp
    22e0:	1c21      	adds	r1, r4, #0
    22e2:	4b21      	ldr	r3, [pc, #132]	; (2368 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x204>)
    22e4:	4798      	blx	r3
    22e6:	e003      	b.n	22f0 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x18c>
		}
		else
			tmpInput.set(input);
    22e8:	4668      	mov	r0, sp
    22ea:	1c21      	adds	r1, r4, #0
    22ec:	4b19      	ldr	r3, [pc, #100]	; (2354 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1f0>)
    22ee:	4798      	blx	r3
		dir tmp_dir = dir();
    22f0:	a808      	add	r0, sp, #32
    22f2:	2100      	movs	r1, #0
    22f4:	2248      	movs	r2, #72	; 0x48
    22f6:	4b14      	ldr	r3, [pc, #80]	; (2348 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1e4>)
    22f8:	4798      	blx	r3
		if(tmp_dir.fopendir(tmpInput.buff) == FR_OK)
    22fa:	a808      	add	r0, sp, #32
    22fc:	9900      	ldr	r1, [sp, #0]
    22fe:	4b13      	ldr	r3, [pc, #76]	; (234c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1e8>)
    2300:	4798      	blx	r3
		{
			tmp_dir.fclosedir();
			_path->set(&tmpInput);
		}
		else
			return SYS_ERR_INVALID_PATH;
    2302:	25f5      	movs	r5, #245	; 0xf5
			tmpInput.append(input);
		}
		else
			tmpInput.set(input);
		dir tmp_dir = dir();
		if(tmp_dir.fopendir(tmpInput.buff) == FR_OK)
    2304:	2800      	cmp	r0, #0
    2306:	d109      	bne.n	231c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1b8>
		{
			tmp_dir.fclosedir();
    2308:	a808      	add	r0, sp, #32
    230a:	4b11      	ldr	r3, [pc, #68]	; (2350 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1ec>)
    230c:	4798      	blx	r3
			_path->set(&tmpInput);
    230e:	1c30      	adds	r0, r6, #0
    2310:	4669      	mov	r1, sp
    2312:	4b10      	ldr	r3, [pc, #64]	; (2354 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1f0>)
    2314:	4798      	blx	r3
		}
		else
			return SYS_ERR_INVALID_PATH;
	}

	return SYS_ERR_OK;
    2316:	2500      	movs	r5, #0
    2318:	e000      	b.n	231c <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1b8>
			return SYS_ERR_INVALID_PATH;
	}
	else
	if(input->length >=2 && input->buff[0] == '\\' && input->buff[1] != '\\')
	{
		return SYS_ERR_INVALID_PATH;
    231a:	25f5      	movs	r5, #245	; 0xf5
		}
		else
			return SYS_ERR_INVALID_PATH;
	}

	return SYS_ERR_OK;
    231c:	4668      	mov	r0, sp
    231e:	4b10      	ldr	r3, [pc, #64]	; (2360 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1fc>)
    2320:	4798      	blx	r3
    2322:	b268      	sxtb	r0, r5
    2324:	e006      	b.n	2334 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1d0>
		}
		else
			return SYS_ERR_INVALID_PATH;
	}
	else
	if(input->length >=2 && input->buff[0] == '\\' && input->buff[1] == '\\')
    2326:	784a      	ldrb	r2, [r1, #1]
    2328:	2a5c      	cmp	r2, #92	; 0x5c
    232a:	d100      	bne.n	232e <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1ca>
    232c:	e756      	b.n	21dc <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x78>
		}
		else
			return SYS_ERR_INVALID_PATH;
	}
	else
	if(input->length >=2 && input->buff[0] == '\\' && input->buff[1] != '\\')
    232e:	d100      	bne.n	2332 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1ce>
    2330:	e778      	b.n	2224 <_ZN3Cmd5cdIntEPN2GI6StringES2_+0xc0>
    2332:	e7f2      	b.n	231a <_ZN3Cmd5cdIntEPN2GI6StringES2_+0x1b6>
		else
			return SYS_ERR_INVALID_PATH;
	}

	return SYS_ERR_OK;
}
    2334:	b01b      	add	sp, #108	; 0x6c
    2336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2338:	00005759 	.word	0x00005759
    233c:	000059c5 	.word	0x000059c5
    2340:	00005831 	.word	0x00005831
    2344:	000065dd 	.word	0x000065dd
    2348:	00006635 	.word	0x00006635
    234c:	00002965 	.word	0x00002965
    2350:	00002971 	.word	0x00002971
    2354:	00005875 	.word	0x00005875
    2358:	00005975 	.word	0x00005975
    235c:	00005785 	.word	0x00005785
    2360:	0000580d 	.word	0x0000580d
    2364:	000058f1 	.word	0x000058f1
    2368:	000058b1 	.word	0x000058b1

0000236c <_ZN3Cmd2cdEiPPc>:
#endif
#include <lib/fs/fat.h>
#include "cmd.h"

SysErr Cmd::cd(int argc, char *argv[])
{
    236c:	b5f0      	push	{r4, r5, r6, r7, lr}
    236e:	464f      	mov	r7, r9
    2370:	4646      	mov	r6, r8
    2372:	b4c0      	push	{r6, r7}
    2374:	b085      	sub	sp, #20
    2376:	1c05      	adds	r5, r0, #0
    2378:	1c0f      	adds	r7, r1, #0
    237a:	1c16      	adds	r6, r2, #0
	int argc_cnt = 0;
	SysErr err = SYS_ERR_OK;
	GI::String input = GI::String();
    237c:	4668      	mov	r0, sp
    237e:	4b13      	ldr	r3, [pc, #76]	; (23cc <_ZN3Cmd2cdEiPPc+0x60>)
    2380:	4798      	blx	r3
	for(; argc_cnt < argc; argc_cnt++)
    2382:	2f00      	cmp	r7, #0
    2384:	dd17      	ble.n	23b6 <_ZN3Cmd2cdEiPPc+0x4a>
#include <lib/fs/fat.h>
#include "cmd.h"

SysErr Cmd::cd(int argc, char *argv[])
{
	int argc_cnt = 0;
    2386:	2400      	movs	r4, #0
	SysErr err = SYS_ERR_OK;
	GI::String input = GI::String();
	for(; argc_cnt < argc; argc_cnt++)
	{
		input.set(argv[argc_cnt]);
    2388:	4b11      	ldr	r3, [pc, #68]	; (23d0 <_ZN3Cmd2cdEiPPc+0x64>)
    238a:	4699      	mov	r9, r3
		err = cdInt(path, &input);
    238c:	4b11      	ldr	r3, [pc, #68]	; (23d4 <_ZN3Cmd2cdEiPPc+0x68>)
    238e:	4698      	mov	r8, r3
	int argc_cnt = 0;
	SysErr err = SYS_ERR_OK;
	GI::String input = GI::String();
	for(; argc_cnt < argc; argc_cnt++)
	{
		input.set(argv[argc_cnt]);
    2390:	ce02      	ldmia	r6!, {r1}
    2392:	4668      	mov	r0, sp
    2394:	47c8      	blx	r9
		err = cdInt(path, &input);
    2396:	1c28      	adds	r0, r5, #0
    2398:	6869      	ldr	r1, [r5, #4]
    239a:	466a      	mov	r2, sp
    239c:	47c0      	blx	r8
SysErr Cmd::cd(int argc, char *argv[])
{
	int argc_cnt = 0;
	SysErr err = SYS_ERR_OK;
	GI::String input = GI::String();
	for(; argc_cnt < argc; argc_cnt++)
    239e:	3401      	adds	r4, #1
    23a0:	42bc      	cmp	r4, r7
    23a2:	d1f5      	bne.n	2390 <_ZN3Cmd2cdEiPPc+0x24>
#else
		errPath->write((char *)"Invalid path.\n\r");
#endif
		return SYS_ERR_INVALID_PATH;
	}
	return SYS_ERR_OK;
    23a4:	2400      	movs	r4, #0
	for(; argc_cnt < argc; argc_cnt++)
	{
		input.set(argv[argc_cnt]);
		err = cdInt(path, &input);
	}
	if(err != SYS_ERR_OK)
    23a6:	2800      	cmp	r0, #0
    23a8:	d006      	beq.n	23b8 <_ZN3Cmd2cdEiPPc+0x4c>
#if __AVR_XMEGA__
		char tmp[sizeof("Invalid path.\n\r")];
		strcpy_P(tmp, PSTR("Invalid path.\n\r"));
		errPath->write(tmp);
#else
		errPath->write((char *)"Invalid path.\n\r");
    23aa:	6928      	ldr	r0, [r5, #16]
    23ac:	490a      	ldr	r1, [pc, #40]	; (23d8 <_ZN3Cmd2cdEiPPc+0x6c>)
    23ae:	4b0b      	ldr	r3, [pc, #44]	; (23dc <_ZN3Cmd2cdEiPPc+0x70>)
    23b0:	4798      	blx	r3
#endif
		return SYS_ERR_INVALID_PATH;
    23b2:	24f5      	movs	r4, #245	; 0xf5
    23b4:	e000      	b.n	23b8 <_ZN3Cmd2cdEiPPc+0x4c>
	}
	return SYS_ERR_OK;
    23b6:	2400      	movs	r4, #0
    23b8:	4668      	mov	r0, sp
    23ba:	4b09      	ldr	r3, [pc, #36]	; (23e0 <_ZN3Cmd2cdEiPPc+0x74>)
    23bc:	4798      	blx	r3
    23be:	b260      	sxtb	r0, r4
}
    23c0:	b005      	add	sp, #20
    23c2:	bc0c      	pop	{r2, r3}
    23c4:	4690      	mov	r8, r2
    23c6:	4699      	mov	r9, r3
    23c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	00005759 	.word	0x00005759
    23d0:	00005831 	.word	0x00005831
    23d4:	00002165 	.word	0x00002165
    23d8:	0000694c 	.word	0x0000694c
    23dc:	00001d99 	.word	0x00001d99
    23e0:	0000580d 	.word	0x0000580d

000023e4 <_ZN3CmdC1EPcS0_S0_>:
}cmd_list;*/

static GI::StringArray hystoryTable = GI::StringArray();


Cmd::Cmd(char *inPath, char *outPath, char *errPath)
    23e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23e6:	464f      	mov	r7, r9
    23e8:	4646      	mov	r6, r8
    23ea:	b4c0      	push	{r6, r7}
    23ec:	1c04      	adds	r4, r0, #0
    23ee:	1c0e      	adds	r6, r1, #0
    23f0:	4691      	mov	r9, r2
    23f2:	4698      	mov	r8, r3
{
	memset(this, 0, sizeof(*this));
    23f4:	2100      	movs	r1, #0
    23f6:	221c      	movs	r2, #28
    23f8:	4b12      	ldr	r3, [pc, #72]	; (2444 <_ZN3CmdC1EPcS0_S0_+0x60>)
    23fa:	4798      	blx	r3
	this->inPath = new GI::IO(inPath);
    23fc:	200c      	movs	r0, #12
    23fe:	4d12      	ldr	r5, [pc, #72]	; (2448 <_ZN3CmdC1EPcS0_S0_+0x64>)
    2400:	47a8      	blx	r5
    2402:	1c07      	adds	r7, r0, #0
    2404:	1c31      	adds	r1, r6, #0
    2406:	4e11      	ldr	r6, [pc, #68]	; (244c <_ZN3CmdC1EPcS0_S0_+0x68>)
    2408:	47b0      	blx	r6
    240a:	60a7      	str	r7, [r4, #8]
	this->outPath = new GI::IO(outPath);
    240c:	200c      	movs	r0, #12
    240e:	47a8      	blx	r5
    2410:	1c07      	adds	r7, r0, #0
    2412:	4649      	mov	r1, r9
    2414:	47b0      	blx	r6
    2416:	60e7      	str	r7, [r4, #12]
	this->errPath = new GI::IO(errPath);
    2418:	200c      	movs	r0, #12
    241a:	47a8      	blx	r5
    241c:	1c07      	adds	r7, r0, #0
    241e:	4641      	mov	r1, r8
    2420:	47b0      	blx	r6
    2422:	6127      	str	r7, [r4, #16]
	path = new GI::String();
    2424:	2010      	movs	r0, #16
    2426:	47a8      	blx	r5
    2428:	1c07      	adds	r7, r0, #0
    242a:	4e09      	ldr	r6, [pc, #36]	; (2450 <_ZN3CmdC1EPcS0_S0_+0x6c>)
    242c:	47b0      	blx	r6
    242e:	6067      	str	r7, [r4, #4]
	input = new GI::String();
    2430:	2010      	movs	r0, #16
    2432:	47a8      	blx	r5
    2434:	1c05      	adds	r5, r0, #0
    2436:	47b0      	blx	r6
    2438:	6025      	str	r5, [r4, #0]
}
    243a:	1c20      	adds	r0, r4, #0
    243c:	bc0c      	pop	{r2, r3}
    243e:	4690      	mov	r8, r2
    2440:	4699      	mov	r9, r3
    2442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2444:	00006635 	.word	0x00006635
    2448:	00005741 	.word	0x00005741
    244c:	00001c59 	.word	0x00001c59
    2450:	00005759 	.word	0x00005759

00002454 <_ZN3Cmd10hystoryAddEPN2GI6StringE>:
	}
	return SYS_ERR_OK;
}

SysErr Cmd::hystoryAdd(GI::String *input)
{
    2454:	b5f0      	push	{r4, r5, r6, r7, lr}
    2456:	4657      	mov	r7, sl
    2458:	464e      	mov	r6, r9
    245a:	4645      	mov	r5, r8
    245c:	b4e0      	push	{r5, r6, r7}
    245e:	4682      	mov	sl, r0
    2460:	4689      	mov	r9, r1
	unsigned int cnt = 0;
	if(hystoryTable.itemsCount)
    2462:	4b15      	ldr	r3, [pc, #84]	; (24b8 <_ZN3Cmd10hystoryAddEPN2GI6StringE+0x64>)
    2464:	685e      	ldr	r6, [r3, #4]
    2466:	2e00      	cmp	r6, #0
    2468:	d019      	beq.n	249e <_ZN3Cmd10hystoryAddEPN2GI6StringE+0x4a>
	{
		for(; cnt < hystoryTable.itemsCount; cnt++)
		{
			if(!strcmp(hystoryTable.array[cnt]->buff, input->buff))
    246a:	680a      	ldr	r2, [r1, #0]
    246c:	4690      	mov	r8, r2
    246e:	681d      	ldr	r5, [r3, #0]
    2470:	2400      	movs	r4, #0
    2472:	4f12      	ldr	r7, [pc, #72]	; (24bc <_ZN3Cmd10hystoryAddEPN2GI6StringE+0x68>)
    2474:	682b      	ldr	r3, [r5, #0]
    2476:	6818      	ldr	r0, [r3, #0]
    2478:	4641      	mov	r1, r8
    247a:	47b8      	blx	r7
    247c:	2800      	cmp	r0, #0
    247e:	d104      	bne.n	248a <_ZN3Cmd10hystoryAddEPN2GI6StringE+0x36>
			{
				hystoryTable.remove(cnt);
    2480:	480d      	ldr	r0, [pc, #52]	; (24b8 <_ZN3Cmd10hystoryAddEPN2GI6StringE+0x64>)
    2482:	1c21      	adds	r1, r4, #0
    2484:	4b0e      	ldr	r3, [pc, #56]	; (24c0 <_ZN3Cmd10hystoryAddEPN2GI6StringE+0x6c>)
    2486:	4798      	blx	r3
				break;
    2488:	e003      	b.n	2492 <_ZN3Cmd10hystoryAddEPN2GI6StringE+0x3e>
SysErr Cmd::hystoryAdd(GI::String *input)
{
	unsigned int cnt = 0;
	if(hystoryTable.itemsCount)
	{
		for(; cnt < hystoryTable.itemsCount; cnt++)
    248a:	3401      	adds	r4, #1
    248c:	3504      	adds	r5, #4
    248e:	42b4      	cmp	r4, r6
    2490:	d1f0      	bne.n	2474 <_ZN3Cmd10hystoryAddEPN2GI6StringE+0x20>
			{
				hystoryTable.remove(cnt);
				break;
			}
		}
		hystoryTable.insert(input, 0);
    2492:	4809      	ldr	r0, [pc, #36]	; (24b8 <_ZN3Cmd10hystoryAddEPN2GI6StringE+0x64>)
    2494:	4649      	mov	r1, r9
    2496:	2200      	movs	r2, #0
    2498:	4b0a      	ldr	r3, [pc, #40]	; (24c4 <_ZN3Cmd10hystoryAddEPN2GI6StringE+0x70>)
    249a:	4798      	blx	r3
    249c:	e002      	b.n	24a4 <_ZN3Cmd10hystoryAddEPN2GI6StringE+0x50>
	}
	else
		hystoryTable.add(input);
    249e:	4806      	ldr	r0, [pc, #24]	; (24b8 <_ZN3Cmd10hystoryAddEPN2GI6StringE+0x64>)
    24a0:	4b09      	ldr	r3, [pc, #36]	; (24c8 <_ZN3Cmd10hystoryAddEPN2GI6StringE+0x74>)
    24a2:	4798      	blx	r3
	hystoryPtr = 0;
    24a4:	2300      	movs	r3, #0
    24a6:	4652      	mov	r2, sl
    24a8:	6153      	str	r3, [r2, #20]
	return SYS_ERR_OK;
}
    24aa:	2000      	movs	r0, #0
    24ac:	bc1c      	pop	{r2, r3, r4}
    24ae:	4690      	mov	r8, r2
    24b0:	4699      	mov	r9, r3
    24b2:	46a2      	mov	sl, r4
    24b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24b6:	46c0      	nop			; (mov r8, r8)
    24b8:	200001c0 	.word	0x200001c0
    24bc:	000067ef 	.word	0x000067ef
    24c0:	00005c15 	.word	0x00005c15
    24c4:	00005b6d 	.word	0x00005b6d
    24c8:	00005a7d 	.word	0x00005a7d

000024cc <_ZN3Cmd9hystoryUpEPN2GI6StringE>:

SysErr Cmd::hystoryUp(GI::String *out)
{
    24cc:	b538      	push	{r3, r4, r5, lr}
    24ce:	1c04      	adds	r4, r0, #0
	out->set(hystoryTable.array[hystoryPtr]);
    24d0:	4d08      	ldr	r5, [pc, #32]	; (24f4 <_ZN3Cmd9hystoryUpEPN2GI6StringE+0x28>)
    24d2:	6942      	ldr	r2, [r0, #20]
    24d4:	0093      	lsls	r3, r2, #2
    24d6:	682a      	ldr	r2, [r5, #0]
    24d8:	589b      	ldr	r3, [r3, r2]
    24da:	1c08      	adds	r0, r1, #0
    24dc:	1c19      	adds	r1, r3, #0
    24de:	4b06      	ldr	r3, [pc, #24]	; (24f8 <_ZN3Cmd9hystoryUpEPN2GI6StringE+0x2c>)
    24e0:	4798      	blx	r3
	if(hystoryPtr < hystoryTable.itemsCount - 1)
    24e2:	6963      	ldr	r3, [r4, #20]
    24e4:	686a      	ldr	r2, [r5, #4]
    24e6:	3a01      	subs	r2, #1
    24e8:	4293      	cmp	r3, r2
    24ea:	d201      	bcs.n	24f0 <_ZN3Cmd9hystoryUpEPN2GI6StringE+0x24>
		hystoryPtr++;
    24ec:	3301      	adds	r3, #1
    24ee:	6163      	str	r3, [r4, #20]
	return SYS_ERR_OK;
}
    24f0:	2000      	movs	r0, #0
    24f2:	bd38      	pop	{r3, r4, r5, pc}
    24f4:	200001c0 	.word	0x200001c0
    24f8:	00005875 	.word	0x00005875

000024fc <_ZN3Cmd9hystoryDnEPN2GI6StringE>:

SysErr Cmd::hystoryDn(GI::String *out)
{
    24fc:	b510      	push	{r4, lr}
    24fe:	1c04      	adds	r4, r0, #0
	out->set(hystoryTable.array[hystoryPtr]);
    2500:	4b07      	ldr	r3, [pc, #28]	; (2520 <_ZN3Cmd9hystoryDnEPN2GI6StringE+0x24>)
    2502:	681b      	ldr	r3, [r3, #0]
    2504:	6940      	ldr	r0, [r0, #20]
    2506:	0082      	lsls	r2, r0, #2
    2508:	58d3      	ldr	r3, [r2, r3]
    250a:	1c08      	adds	r0, r1, #0
    250c:	1c19      	adds	r1, r3, #0
    250e:	4b05      	ldr	r3, [pc, #20]	; (2524 <_ZN3Cmd9hystoryDnEPN2GI6StringE+0x28>)
    2510:	4798      	blx	r3
	if(hystoryPtr > 0)
    2512:	6963      	ldr	r3, [r4, #20]
    2514:	2b00      	cmp	r3, #0
    2516:	d001      	beq.n	251c <_ZN3Cmd9hystoryDnEPN2GI6StringE+0x20>
		hystoryPtr--;
    2518:	3b01      	subs	r3, #1
    251a:	6163      	str	r3, [r4, #20]
	return SYS_ERR_OK;
}
    251c:	2000      	movs	r0, #0
    251e:	bd10      	pop	{r4, pc}
    2520:	200001c0 	.word	0x200001c0
    2524:	00005875 	.word	0x00005875

00002528 <_ZN3Cmd4idleEv>:
	delete path;
	delete input;
}

SysErr Cmd::idle()
{
    2528:	b5f0      	push	{r4, r5, r6, r7, lr}
    252a:	b083      	sub	sp, #12
    252c:	1c04      	adds	r4, r0, #0
	unsigned long tmp_term_char = 0;
    252e:	2300      	movs	r3, #0
    2530:	9300      	str	r3, [sp, #0]
	while(inPath->read(&tmp_term_char) == SYS_ERR_OK)
    2532:	4e68      	ldr	r6, [pc, #416]	; (26d4 <_ZN3Cmd4idleEv+0x1ac>)
    2534:	e0c5      	b.n	26c2 <_ZN3Cmd4idleEv+0x19a>
	{
		if(tmp_term_char == 0x7F)
    2536:	9900      	ldr	r1, [sp, #0]
    2538:	297f      	cmp	r1, #127	; 0x7f
    253a:	d117      	bne.n	256c <_ZN3Cmd4idleEv+0x44>
		{
			unsigned int str_len;
			for(str_len = 0; str_len < input->length; str_len++)
    253c:	6820      	ldr	r0, [r4, #0]
    253e:	6843      	ldr	r3, [r0, #4]
    2540:	2b00      	cmp	r3, #0
    2542:	d009      	beq.n	2558 <_ZN3Cmd4idleEv+0x30>
    2544:	2500      	movs	r5, #0
			{
				outPath->write((char)0x7F);
    2546:	4f64      	ldr	r7, [pc, #400]	; (26d8 <_ZN3Cmd4idleEv+0x1b0>)
    2548:	68e0      	ldr	r0, [r4, #12]
    254a:	217f      	movs	r1, #127	; 0x7f
    254c:	47b8      	blx	r7
	while(inPath->read(&tmp_term_char) == SYS_ERR_OK)
	{
		if(tmp_term_char == 0x7F)
		{
			unsigned int str_len;
			for(str_len = 0; str_len < input->length; str_len++)
    254e:	3501      	adds	r5, #1
    2550:	6820      	ldr	r0, [r4, #0]
    2552:	6843      	ldr	r3, [r0, #4]
    2554:	42ab      	cmp	r3, r5
    2556:	d8f7      	bhi.n	2548 <_ZN3Cmd4idleEv+0x20>
			{
				outPath->write((char)0x7F);
			}
			input->append((char) tmp_term_char);
    2558:	9b00      	ldr	r3, [sp, #0]
    255a:	b2d9      	uxtb	r1, r3
    255c:	4b5f      	ldr	r3, [pc, #380]	; (26dc <_ZN3Cmd4idleEv+0x1b4>)
    255e:	4798      	blx	r3
			outPath->write((unsigned char *)input->buff);
    2560:	6823      	ldr	r3, [r4, #0]
    2562:	6819      	ldr	r1, [r3, #0]
    2564:	68e0      	ldr	r0, [r4, #12]
    2566:	4b5e      	ldr	r3, [pc, #376]	; (26e0 <_ZN3Cmd4idleEv+0x1b8>)
    2568:	4798      	blx	r3
    256a:	e0aa      	b.n	26c2 <_ZN3Cmd4idleEv+0x19a>
		}
		else if(tmp_term_char ==27)
    256c:	291b      	cmp	r1, #27
    256e:	d102      	bne.n	2576 <_ZN3Cmd4idleEv+0x4e>
		{
			escape_received = true;
    2570:	2301      	movs	r3, #1
    2572:	7623      	strb	r3, [r4, #24]
			return SYS_ERR_OK;
    2574:	e0ab      	b.n	26ce <_ZN3Cmd4idleEv+0x1a6>
		}
		else if(escape_received && tmp_term_char ==91)
    2576:	7e23      	ldrb	r3, [r4, #24]
    2578:	2b00      	cmp	r3, #0
    257a:	d02f      	beq.n	25dc <_ZN3Cmd4idleEv+0xb4>
    257c:	295b      	cmp	r1, #91	; 0x5b
    257e:	d102      	bne.n	2586 <_ZN3Cmd4idleEv+0x5e>
		{
			escape_second_char = tmp_term_char;
    2580:	235b      	movs	r3, #91	; 0x5b
    2582:	7663      	strb	r3, [r4, #25]
			return SYS_ERR_OK;
    2584:	e0a3      	b.n	26ce <_ZN3Cmd4idleEv+0x1a6>
		}
		else if(escape_received && escape_second_char == 91)
    2586:	7e63      	ldrb	r3, [r4, #25]
    2588:	2b5b      	cmp	r3, #91	; 0x5b
    258a:	d127      	bne.n	25dc <_ZN3Cmd4idleEv+0xb4>
		{
			unsigned int cnt = 0;
			for(; cnt < input->length; cnt++)
    258c:	6821      	ldr	r1, [r4, #0]
    258e:	684b      	ldr	r3, [r1, #4]
    2590:	2b00      	cmp	r3, #0
    2592:	d009      	beq.n	25a8 <_ZN3Cmd4idleEv+0x80>
    2594:	2500      	movs	r5, #0
				outPath->write((char)0x7F);
    2596:	4e50      	ldr	r6, [pc, #320]	; (26d8 <_ZN3Cmd4idleEv+0x1b0>)
    2598:	68e0      	ldr	r0, [r4, #12]
    259a:	217f      	movs	r1, #127	; 0x7f
    259c:	47b0      	blx	r6
			return SYS_ERR_OK;
		}
		else if(escape_received && escape_second_char == 91)
		{
			unsigned int cnt = 0;
			for(; cnt < input->length; cnt++)
    259e:	3501      	adds	r5, #1
    25a0:	6821      	ldr	r1, [r4, #0]
    25a2:	684b      	ldr	r3, [r1, #4]
    25a4:	42ab      	cmp	r3, r5
    25a6:	d8f7      	bhi.n	2598 <_ZN3Cmd4idleEv+0x70>
				outPath->write((char)0x7F);
			if(tmp_term_char == 65)
    25a8:	9b00      	ldr	r3, [sp, #0]
    25aa:	2b41      	cmp	r3, #65	; 0x41
    25ac:	d108      	bne.n	25c0 <_ZN3Cmd4idleEv+0x98>
			{
				hystoryUp(input);
    25ae:	1c20      	adds	r0, r4, #0
    25b0:	4b4c      	ldr	r3, [pc, #304]	; (26e4 <_ZN3Cmd4idleEv+0x1bc>)
    25b2:	4798      	blx	r3
				outPath->write((unsigned char *)input->buff);
    25b4:	6823      	ldr	r3, [r4, #0]
    25b6:	6819      	ldr	r1, [r3, #0]
    25b8:	68e0      	ldr	r0, [r4, #12]
    25ba:	4b49      	ldr	r3, [pc, #292]	; (26e0 <_ZN3Cmd4idleEv+0x1b8>)
    25bc:	4798      	blx	r3
    25be:	e009      	b.n	25d4 <_ZN3Cmd4idleEv+0xac>
			}
			else if(tmp_term_char == 66)
    25c0:	2b42      	cmp	r3, #66	; 0x42
    25c2:	d107      	bne.n	25d4 <_ZN3Cmd4idleEv+0xac>
			{
				//if(hystoryPtr != 0)
				//{
					hystoryDn(input);
    25c4:	1c20      	adds	r0, r4, #0
    25c6:	4b48      	ldr	r3, [pc, #288]	; (26e8 <_ZN3Cmd4idleEv+0x1c0>)
    25c8:	4798      	blx	r3
					outPath->write((unsigned char *)input->buff);
    25ca:	6823      	ldr	r3, [r4, #0]
    25cc:	6819      	ldr	r1, [r3, #0]
    25ce:	68e0      	ldr	r0, [r4, #12]
    25d0:	4b43      	ldr	r3, [pc, #268]	; (26e0 <_ZN3Cmd4idleEv+0x1b8>)
    25d2:	4798      	blx	r3
				//}
			}
			escape_received = false;
    25d4:	2300      	movs	r3, #0
    25d6:	7623      	strb	r3, [r4, #24]
			escape_second_char = 0;
    25d8:	7663      	strb	r3, [r4, #25]
			return SYS_ERR_OK;
    25da:	e078      	b.n	26ce <_ZN3Cmd4idleEv+0x1a6>
		}
		else if(tmp_term_char != 0x0D)
    25dc:	290d      	cmp	r1, #13
    25de:	d00c      	beq.n	25fa <_ZN3Cmd4idleEv+0xd2>
		{
			input->append((char) tmp_term_char);
    25e0:	b2c9      	uxtb	r1, r1
    25e2:	6820      	ldr	r0, [r4, #0]
    25e4:	4b3d      	ldr	r3, [pc, #244]	; (26dc <_ZN3Cmd4idleEv+0x1b4>)
    25e6:	4798      	blx	r3
			outPath->write((char)tmp_term_char);
    25e8:	9b00      	ldr	r3, [sp, #0]
    25ea:	b2d9      	uxtb	r1, r3
    25ec:	68e0      	ldr	r0, [r4, #12]
    25ee:	4b3a      	ldr	r3, [pc, #232]	; (26d8 <_ZN3Cmd4idleEv+0x1b0>)
    25f0:	4798      	blx	r3
			escape_received = false;
    25f2:	2300      	movs	r3, #0
    25f4:	7623      	strb	r3, [r4, #24]
			escape_second_char = 0;
    25f6:	7663      	strb	r3, [r4, #25]
    25f8:	e063      	b.n	26c2 <_ZN3Cmd4idleEv+0x19a>
		}
		else
		{
			outPath->write((unsigned char *)"\n\r");
    25fa:	68e0      	ldr	r0, [r4, #12]
    25fc:	493b      	ldr	r1, [pc, #236]	; (26ec <_ZN3Cmd4idleEv+0x1c4>)
    25fe:	4b38      	ldr	r3, [pc, #224]	; (26e0 <_ZN3Cmd4idleEv+0x1b8>)
    2600:	4798      	blx	r3
			GI::StringArray *result;
			Sys::Util::strToCmd(input, &result);
    2602:	6820      	ldr	r0, [r4, #0]
    2604:	a901      	add	r1, sp, #4
    2606:	4b3a      	ldr	r3, [pc, #232]	; (26f0 <_ZN3Cmd4idleEv+0x1c8>)
    2608:	4798      	blx	r3
			//unsigned int cmd_cnt = 0;
			GI::StringCharArray *char_string = new GI::StringCharArray(result, 1);
    260a:	2008      	movs	r0, #8
    260c:	4b39      	ldr	r3, [pc, #228]	; (26f4 <_ZN3Cmd4idleEv+0x1cc>)
    260e:	4798      	blx	r3
    2610:	1c05      	adds	r5, r0, #0
    2612:	9901      	ldr	r1, [sp, #4]
    2614:	2201      	movs	r2, #1
    2616:	4b38      	ldr	r3, [pc, #224]	; (26f8 <_ZN3Cmd4idleEv+0x1d0>)
    2618:	4798      	blx	r3
			if(char_string)
    261a:	2d00      	cmp	r5, #0
    261c:	d027      	beq.n	266e <_ZN3Cmd4idleEv+0x146>
			{
#if __AVR_XMEGA__
				if(!strcmp_P(result->array[0]->buff, PSTR("ls")))
#else
				if(!strcmp(result->array[0]->buff, "ls"))
    261e:	9b01      	ldr	r3, [sp, #4]
    2620:	681b      	ldr	r3, [r3, #0]
    2622:	681b      	ldr	r3, [r3, #0]
    2624:	681f      	ldr	r7, [r3, #0]
    2626:	1c38      	adds	r0, r7, #0
    2628:	4934      	ldr	r1, [pc, #208]	; (26fc <_ZN3Cmd4idleEv+0x1d4>)
    262a:	4b35      	ldr	r3, [pc, #212]	; (2700 <_ZN3Cmd4idleEv+0x1d8>)
    262c:	4798      	blx	r3
    262e:	2800      	cmp	r0, #0
    2630:	d105      	bne.n	263e <_ZN3Cmd4idleEv+0x116>
#endif
				{
					ls(char_string->itemsCount, (char **)char_string->array);
    2632:	1c20      	adds	r0, r4, #0
    2634:	6869      	ldr	r1, [r5, #4]
    2636:	682a      	ldr	r2, [r5, #0]
    2638:	4b32      	ldr	r3, [pc, #200]	; (2704 <_ZN3Cmd4idleEv+0x1dc>)
    263a:	4798      	blx	r3
    263c:	e01b      	b.n	2676 <_ZN3Cmd4idleEv+0x14e>
				}
				else
#if __AVR_XMEGA__
				if(!strcmp_P(result->array[0]->buff, PSTR("cd")))
#else
				if(!strcmp(result->array[0]->buff, "cd"))
    263e:	1c38      	adds	r0, r7, #0
    2640:	4931      	ldr	r1, [pc, #196]	; (2708 <_ZN3Cmd4idleEv+0x1e0>)
    2642:	4b2f      	ldr	r3, [pc, #188]	; (2700 <_ZN3Cmd4idleEv+0x1d8>)
    2644:	4798      	blx	r3
    2646:	2800      	cmp	r0, #0
    2648:	d105      	bne.n	2656 <_ZN3Cmd4idleEv+0x12e>
#endif
				{
					cd(char_string->itemsCount, (char **)char_string->array);
    264a:	1c20      	adds	r0, r4, #0
    264c:	6869      	ldr	r1, [r5, #4]
    264e:	682a      	ldr	r2, [r5, #0]
    2650:	4b2e      	ldr	r3, [pc, #184]	; (270c <_ZN3Cmd4idleEv+0x1e4>)
    2652:	4798      	blx	r3
    2654:	e00f      	b.n	2676 <_ZN3Cmd4idleEv+0x14e>
				}
				else
#if __AVR_XMEGA__
				if(!strcmp_P(result->array[0]->buff, PSTR("cat")))
#else
				if(!strcmp(result->array[0]->buff, "cat"))
    2656:	1c38      	adds	r0, r7, #0
    2658:	492d      	ldr	r1, [pc, #180]	; (2710 <_ZN3Cmd4idleEv+0x1e8>)
    265a:	4b29      	ldr	r3, [pc, #164]	; (2700 <_ZN3Cmd4idleEv+0x1d8>)
    265c:	4798      	blx	r3
    265e:	2800      	cmp	r0, #0
    2660:	d109      	bne.n	2676 <_ZN3Cmd4idleEv+0x14e>
#endif
				{
					cat(char_string->itemsCount, (char **)char_string->array);
    2662:	1c20      	adds	r0, r4, #0
    2664:	6869      	ldr	r1, [r5, #4]
    2666:	682a      	ldr	r2, [r5, #0]
    2668:	4b2a      	ldr	r3, [pc, #168]	; (2714 <_ZN3Cmd4idleEv+0x1ec>)
    266a:	4798      	blx	r3
    266c:	e003      	b.n	2676 <_ZN3Cmd4idleEv+0x14e>
#if __AVR_XMEGA__
				char tmp[sizeof("Out of memory\n\r")];
				strcpy_P(tmp, PSTR("Out of memory\n\r"));
				errPath->write(tmp);
#else
				errPath->write((char *)"Out of memory\n\r");
    266e:	6920      	ldr	r0, [r4, #16]
    2670:	4929      	ldr	r1, [pc, #164]	; (2718 <_ZN3Cmd4idleEv+0x1f0>)
    2672:	4b2a      	ldr	r3, [pc, #168]	; (271c <_ZN3Cmd4idleEv+0x1f4>)
    2674:	4798      	blx	r3
#endif
			}
			hystoryAdd(input);
    2676:	1c20      	adds	r0, r4, #0
    2678:	6821      	ldr	r1, [r4, #0]
    267a:	4b29      	ldr	r3, [pc, #164]	; (2720 <_ZN3Cmd4idleEv+0x1f8>)
    267c:	4798      	blx	r3
#if __AVR_XMEGA__
			char tmp[sizeof("GI@")];
			strcpy_P(tmp, PSTR("GI@"));
			errPath->write(tmp);
#else
			outPath->write((unsigned char *)"GI@");
    267e:	68e0      	ldr	r0, [r4, #12]
    2680:	4928      	ldr	r1, [pc, #160]	; (2724 <_ZN3Cmd4idleEv+0x1fc>)
    2682:	4f17      	ldr	r7, [pc, #92]	; (26e0 <_ZN3Cmd4idleEv+0x1b8>)
    2684:	47b8      	blx	r7
#endif
			outPath->write((unsigned char *)path->buff);
    2686:	6863      	ldr	r3, [r4, #4]
    2688:	6819      	ldr	r1, [r3, #0]
    268a:	68e0      	ldr	r0, [r4, #12]
    268c:	47b8      	blx	r7
			outPath->write((unsigned char *)": ");
    268e:	68e0      	ldr	r0, [r4, #12]
    2690:	4925      	ldr	r1, [pc, #148]	; (2728 <_ZN3Cmd4idleEv+0x200>)
    2692:	47b8      	blx	r7
			delete result;
    2694:	9f01      	ldr	r7, [sp, #4]
    2696:	2f00      	cmp	r7, #0
    2698:	d005      	beq.n	26a6 <_ZN3Cmd4idleEv+0x17e>
    269a:	1c38      	adds	r0, r7, #0
    269c:	4b23      	ldr	r3, [pc, #140]	; (272c <_ZN3Cmd4idleEv+0x204>)
    269e:	4798      	blx	r3
    26a0:	1c38      	adds	r0, r7, #0
    26a2:	4b23      	ldr	r3, [pc, #140]	; (2730 <_ZN3Cmd4idleEv+0x208>)
    26a4:	4798      	blx	r3
			delete char_string;
    26a6:	2d00      	cmp	r5, #0
    26a8:	d005      	beq.n	26b6 <_ZN3Cmd4idleEv+0x18e>
    26aa:	1c28      	adds	r0, r5, #0
    26ac:	4b21      	ldr	r3, [pc, #132]	; (2734 <_ZN3Cmd4idleEv+0x20c>)
    26ae:	4798      	blx	r3
    26b0:	1c28      	adds	r0, r5, #0
    26b2:	4b1f      	ldr	r3, [pc, #124]	; (2730 <_ZN3Cmd4idleEv+0x208>)
    26b4:	4798      	blx	r3
			input->clear();
    26b6:	6820      	ldr	r0, [r4, #0]
    26b8:	4b1f      	ldr	r3, [pc, #124]	; (2738 <_ZN3Cmd4idleEv+0x210>)
    26ba:	4798      	blx	r3
			escape_received = false;
    26bc:	2300      	movs	r3, #0
    26be:	7623      	strb	r3, [r4, #24]
			escape_second_char = 0;
    26c0:	7663      	strb	r3, [r4, #25]
}

SysErr Cmd::idle()
{
	unsigned long tmp_term_char = 0;
	while(inPath->read(&tmp_term_char) == SYS_ERR_OK)
    26c2:	68a0      	ldr	r0, [r4, #8]
    26c4:	4669      	mov	r1, sp
    26c6:	47b0      	blx	r6
    26c8:	2800      	cmp	r0, #0
    26ca:	d100      	bne.n	26ce <_ZN3Cmd4idleEv+0x1a6>
    26cc:	e733      	b.n	2536 <_ZN3Cmd4idleEv+0xe>
			escape_received = false;
			escape_second_char = 0;
		}
	}
	return SYS_ERR_OK;
}
    26ce:	2000      	movs	r0, #0
    26d0:	b003      	add	sp, #12
    26d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26d4:	00001ebd 	.word	0x00001ebd
    26d8:	00001e35 	.word	0x00001e35
    26dc:	000058f1 	.word	0x000058f1
    26e0:	00001d5d 	.word	0x00001d5d
    26e4:	000024cd 	.word	0x000024cd
    26e8:	000024fd 	.word	0x000024fd
    26ec:	0000695c 	.word	0x0000695c
    26f0:	00002849 	.word	0x00002849
    26f4:	00005741 	.word	0x00005741
    26f8:	00005c91 	.word	0x00005c91
    26fc:	00006960 	.word	0x00006960
    2700:	000067ef 	.word	0x000067ef
    2704:	000027a5 	.word	0x000027a5
    2708:	00006964 	.word	0x00006964
    270c:	0000236d 	.word	0x0000236d
    2710:	00006968 	.word	0x00006968
    2714:	00001ffd 	.word	0x00001ffd
    2718:	0000696c 	.word	0x0000696c
    271c:	00001d99 	.word	0x00001d99
    2720:	00002455 	.word	0x00002455
    2724:	0000697c 	.word	0x0000697c
    2728:	00006980 	.word	0x00006980
    272c:	00005a29 	.word	0x00005a29
    2730:	0000574d 	.word	0x0000574d
    2734:	00005d31 	.word	0x00005d31
    2738:	00005951 	.word	0x00005951

0000273c <_ZN3Cmd10printErrorEi>:
		hystoryPtr--;
	return SYS_ERR_OK;
}

void Cmd::printError(int error)
{
    273c:	b510      	push	{r4, lr}
    273e:	1c04      	adds	r4, r0, #0
	}
	errPath->write(tmp);
	if(tmp)
		free(tmp);
#else
	if(error <= FR_INVALID_PARAMETER)
    2740:	2913      	cmp	r1, #19
    2742:	dc06      	bgt.n	2752 <_ZN3Cmd10printErrorEi+0x16>
		errPath->write((char *)fs_err_table[error]);
    2744:	0089      	lsls	r1, r1, #2
    2746:	4b07      	ldr	r3, [pc, #28]	; (2764 <_ZN3Cmd10printErrorEi+0x28>)
    2748:	58c9      	ldr	r1, [r1, r3]
    274a:	6900      	ldr	r0, [r0, #16]
    274c:	4b06      	ldr	r3, [pc, #24]	; (2768 <_ZN3Cmd10printErrorEi+0x2c>)
    274e:	4798      	blx	r3
    2750:	e003      	b.n	275a <_ZN3Cmd10printErrorEi+0x1e>
	else
		errPath->write((char *)"Unknown error");
    2752:	6900      	ldr	r0, [r0, #16]
    2754:	4905      	ldr	r1, [pc, #20]	; (276c <_ZN3Cmd10printErrorEi+0x30>)
    2756:	4b04      	ldr	r3, [pc, #16]	; (2768 <_ZN3Cmd10printErrorEi+0x2c>)
    2758:	4798      	blx	r3
#endif
	this->errPath->write((unsigned char *)"\n\r");
    275a:	6920      	ldr	r0, [r4, #16]
    275c:	4904      	ldr	r1, [pc, #16]	; (2770 <_ZN3Cmd10printErrorEi+0x34>)
    275e:	4b05      	ldr	r3, [pc, #20]	; (2774 <_ZN3Cmd10printErrorEi+0x38>)
    2760:	4798      	blx	r3
}
    2762:	bd10      	pop	{r4, pc}
    2764:	20000008 	.word	0x20000008
    2768:	00001d99 	.word	0x00001d99
    276c:	00006984 	.word	0x00006984
    2770:	0000695c 	.word	0x0000695c
    2774:	00001d5d 	.word	0x00001d5d

00002778 <_GLOBAL__sub_I_fs_err_table>:
    2778:	b510      	push	{r4, lr}
/*typedef struct {
	char name[8];
	SysErr (*fnc)(int argc, char *argv[]);
}cmd_list;*/

static GI::StringArray hystoryTable = GI::StringArray();
    277a:	4c05      	ldr	r4, [pc, #20]	; (2790 <_GLOBAL__sub_I_fs_err_table+0x18>)
    277c:	1c20      	adds	r0, r4, #0
    277e:	4b05      	ldr	r3, [pc, #20]	; (2794 <_GLOBAL__sub_I_fs_err_table+0x1c>)
    2780:	4798      	blx	r3
    2782:	1c20      	adds	r0, r4, #0
    2784:	4904      	ldr	r1, [pc, #16]	; (2798 <_GLOBAL__sub_I_fs_err_table+0x20>)
    2786:	4a05      	ldr	r2, [pc, #20]	; (279c <_GLOBAL__sub_I_fs_err_table+0x24>)
    2788:	4b05      	ldr	r3, [pc, #20]	; (27a0 <_GLOBAL__sub_I_fs_err_table+0x28>)
    278a:	4798      	blx	r3
		errPath->write((char *)fs_err_table[error]);
	else
		errPath->write((char *)"Unknown error");
#endif
	this->errPath->write((unsigned char *)"\n\r");
}
    278c:	bd10      	pop	{r4, pc}
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	200001c0 	.word	0x200001c0
    2794:	00005a01 	.word	0x00005a01
    2798:	00005a29 	.word	0x00005a29
    279c:	20000000 	.word	0x20000000
    27a0:	00006451 	.word	0x00006451

000027a4 <_ZN3Cmd2lsEiPPc>:
#endif
#include "cmd.h"
#include <lib/fs/fat/inc/ff.h>

SysErr Cmd::ls(int argc, char *argv[])
{
    27a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27a6:	4647      	mov	r7, r8
    27a8:	b480      	push	{r7}
    27aa:	b0da      	sub	sp, #360	; 0x168
    27ac:	1c04      	adds	r4, r0, #0
    FRESULT res;
    DIR dir;
    FILINFO fno;
	memset(&dir, 0, sizeof(DIR));
    27ae:	4668      	mov	r0, sp
    27b0:	2100      	movs	r1, #0
    27b2:	2248      	movs	r2, #72	; 0x48
    27b4:	4b1c      	ldr	r3, [pc, #112]	; (2828 <_ZN3Cmd2lsEiPPc+0x84>)
    27b6:	4798      	blx	r3
	//memset(&fno, 0, sizeof(FILINFO));

    res = f_opendir(&dir, path->buff);                       /* Open the directory */
    27b8:	6863      	ldr	r3, [r4, #4]
    27ba:	6819      	ldr	r1, [r3, #0]
    27bc:	4668      	mov	r0, sp
    27be:	4b1b      	ldr	r3, [pc, #108]	; (282c <_ZN3Cmd2lsEiPPc+0x88>)
    27c0:	4798      	blx	r3
    27c2:	1e01      	subs	r1, r0, #0
    if (res == FR_OK) {
    27c4:	d128      	bne.n	2818 <_ZN3Cmd2lsEiPPc+0x74>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
    27c6:	4e1a      	ldr	r6, [pc, #104]	; (2830 <_ZN3Cmd2lsEiPPc+0x8c>)
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
				outPath->write((unsigned char *)"/");
				outPath->write((unsigned char *)fno.fname);
				outPath->write((unsigned char *)"\n\r");
            } else {                                       /* It is a file. */
				outPath->write((unsigned char *)fno.fname);
    27c8:	4f1a      	ldr	r7, [pc, #104]	; (2834 <_ZN3Cmd2lsEiPPc+0x90>)
				outPath->write((unsigned char *)"\n\r");
    27ca:	4a1b      	ldr	r2, [pc, #108]	; (2838 <_ZN3Cmd2lsEiPPc+0x94>)
    27cc:	4690      	mov	r8, r2
	//memset(&fno, 0, sizeof(FILINFO));

    res = f_opendir(&dir, path->buff);                       /* Open the directory */
    if (res == FR_OK) {
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
    27ce:	4668      	mov	r0, sp
    27d0:	a912      	add	r1, sp, #72	; 0x48
    27d2:	47b0      	blx	r6
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
    27d4:	2800      	cmp	r0, #0
    27d6:	d11b      	bne.n	2810 <_ZN3Cmd2lsEiPPc+0x6c>
    27d8:	ab12      	add	r3, sp, #72	; 0x48
    27da:	7e9b      	ldrb	r3, [r3, #26]
    27dc:	2b00      	cmp	r3, #0
    27de:	d017      	beq.n	2810 <_ZN3Cmd2lsEiPPc+0x6c>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
    27e0:	ab12      	add	r3, sp, #72	; 0x48
    27e2:	7b1b      	ldrb	r3, [r3, #12]
    27e4:	06da      	lsls	r2, r3, #27
    27e6:	d50b      	bpl.n	2800 <_ZN3Cmd2lsEiPPc+0x5c>
				outPath->write((unsigned char *)"/");
    27e8:	68e0      	ldr	r0, [r4, #12]
    27ea:	4914      	ldr	r1, [pc, #80]	; (283c <_ZN3Cmd2lsEiPPc+0x98>)
    27ec:	4d11      	ldr	r5, [pc, #68]	; (2834 <_ZN3Cmd2lsEiPPc+0x90>)
    27ee:	47a8      	blx	r5
				outPath->write((unsigned char *)fno.fname);
    27f0:	68e0      	ldr	r0, [r4, #12]
    27f2:	4669      	mov	r1, sp
    27f4:	3162      	adds	r1, #98	; 0x62
    27f6:	47a8      	blx	r5
				outPath->write((unsigned char *)"\n\r");
    27f8:	68e0      	ldr	r0, [r4, #12]
    27fa:	490f      	ldr	r1, [pc, #60]	; (2838 <_ZN3Cmd2lsEiPPc+0x94>)
    27fc:	47a8      	blx	r5
    27fe:	e7e6      	b.n	27ce <_ZN3Cmd2lsEiPPc+0x2a>
            } else {                                       /* It is a file. */
				outPath->write((unsigned char *)fno.fname);
    2800:	68e0      	ldr	r0, [r4, #12]
    2802:	4669      	mov	r1, sp
    2804:	3162      	adds	r1, #98	; 0x62
    2806:	47b8      	blx	r7
				outPath->write((unsigned char *)"\n\r");
    2808:	68e0      	ldr	r0, [r4, #12]
    280a:	4641      	mov	r1, r8
    280c:	47b8      	blx	r7
    280e:	e7de      	b.n	27ce <_ZN3Cmd2lsEiPPc+0x2a>
            }
        }
        f_closedir(&dir);
    2810:	4668      	mov	r0, sp
    2812:	4b0b      	ldr	r3, [pc, #44]	; (2840 <_ZN3Cmd2lsEiPPc+0x9c>)
    2814:	4798      	blx	r3
    2816:	e002      	b.n	281e <_ZN3Cmd2lsEiPPc+0x7a>
    }
    else
		printError(res);
    2818:	1c20      	adds	r0, r4, #0
    281a:	4b0a      	ldr	r3, [pc, #40]	; (2844 <_ZN3Cmd2lsEiPPc+0xa0>)
    281c:	4798      	blx	r3
	return SYS_ERR_OK;
}
    281e:	2000      	movs	r0, #0
    2820:	b05a      	add	sp, #360	; 0x168
    2822:	bc04      	pop	{r2}
    2824:	4690      	mov	r8, r2
    2826:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2828:	00006635 	.word	0x00006635
    282c:	00005505 	.word	0x00005505
    2830:	000055f5 	.word	0x000055f5
    2834:	00001d5d 	.word	0x00001d5d
    2838:	0000695c 	.word	0x0000695c
    283c:	00006ca0 	.word	0x00006ca0
    2840:	000055d9 	.word	0x000055d9
    2844:	0000273d 	.word	0x0000273d

00002848 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE>:
#include "util.h"

static const char splitChard[] = {' ', ','};

SysErr Sys::Util::strToCmd(GI::String *inStr, GI::StringArray **result)
{
    2848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    284a:	4657      	mov	r7, sl
    284c:	464e      	mov	r6, r9
    284e:	b4c0      	push	{r6, r7}
    2850:	1c05      	adds	r5, r0, #0
    2852:	468a      	mov	sl, r1
	GI::StringArray *tmp_cmt_splitted = new GI::StringArray();
    2854:	2008      	movs	r0, #8
    2856:	4c2e      	ldr	r4, [pc, #184]	; (2910 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xc8>)
    2858:	47a0      	blx	r4
    285a:	4681      	mov	r9, r0
    285c:	4b2d      	ldr	r3, [pc, #180]	; (2914 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xcc>)
    285e:	4798      	blx	r3
	unsigned int char_count = 0;
	GI::String *tmp_in_str = new GI::String(inStr->buff);
    2860:	2010      	movs	r0, #16
    2862:	47a0      	blx	r4
    2864:	1c04      	adds	r4, r0, #0
    2866:	6829      	ldr	r1, [r5, #0]
    2868:	4b2b      	ldr	r3, [pc, #172]	; (2918 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xd0>)
    286a:	4798      	blx	r3
	while(tmp_in_str && tmp_in_str->length)
    286c:	2c00      	cmp	r4, #0
    286e:	d047      	beq.n	2900 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xb8>
    2870:	6862      	ldr	r2, [r4, #4]
    2872:	2a00      	cmp	r2, #0
    2874:	d044      	beq.n	2900 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xb8>
static const char splitChard[] = {' ', ','};

SysErr Sys::Util::strToCmd(GI::String *inStr, GI::StringArray **result)
{
	GI::StringArray *tmp_cmt_splitted = new GI::StringArray();
	unsigned int char_count = 0;
    2876:	2500      	movs	r5, #0
		if(tmp_in_str->buff[char_count] == splitChard[0] || tmp_in_str->buff[char_count] == splitChard[1] || tmp_in_str->buff[char_count] == '\0')
		{
			if(tmp_in_str->buff[0] == splitChard[0] || tmp_in_str->buff[0] == splitChard[1] || tmp_in_str->buff[0] == '\0')
			{
				char *tmp_str;
				tmp_in_str->set((tmp_str = tmp_in_str->subString(1)));
    2878:	4e28      	ldr	r6, [pc, #160]	; (291c <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xd4>)
    287a:	4f29      	ldr	r7, [pc, #164]	; (2920 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xd8>)
	GI::StringArray *tmp_cmt_splitted = new GI::StringArray();
	unsigned int char_count = 0;
	GI::String *tmp_in_str = new GI::String(inStr->buff);
	while(tmp_in_str && tmp_in_str->length)
	{
		if(tmp_in_str->buff[char_count] == splitChard[0] || tmp_in_str->buff[char_count] == splitChard[1] || tmp_in_str->buff[char_count] == '\0')
    287c:	6823      	ldr	r3, [r4, #0]
    287e:	1959      	adds	r1, r3, r5
    2880:	780a      	ldrb	r2, [r1, #0]
    2882:	2a2c      	cmp	r2, #44	; 0x2c
    2884:	d002      	beq.n	288c <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0x44>
    2886:	2020      	movs	r0, #32
    2888:	4382      	bics	r2, r0
    288a:	d131      	bne.n	28f0 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xa8>
		{
			if(tmp_in_str->buff[0] == splitChard[0] || tmp_in_str->buff[0] == splitChard[1] || tmp_in_str->buff[0] == '\0')
    288c:	781b      	ldrb	r3, [r3, #0]
    288e:	2b2c      	cmp	r3, #44	; 0x2c
    2890:	d002      	beq.n	2898 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0x50>
    2892:	2220      	movs	r2, #32
    2894:	4393      	bics	r3, r2
    2896:	d10d      	bne.n	28b4 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0x6c>
			{
				char *tmp_str;
				tmp_in_str->set((tmp_str = tmp_in_str->subString(1)));
    2898:	1c20      	adds	r0, r4, #0
    289a:	2101      	movs	r1, #1
    289c:	47b0      	blx	r6
    289e:	1c05      	adds	r5, r0, #0
    28a0:	1c20      	adds	r0, r4, #0
    28a2:	1c29      	adds	r1, r5, #0
    28a4:	47b8      	blx	r7
				if(tmp_str)
    28a6:	2d00      	cmp	r5, #0
    28a8:	d024      	beq.n	28f4 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xac>
					free(tmp_str);
    28aa:	1c28      	adds	r0, r5, #0
    28ac:	4b1d      	ldr	r3, [pc, #116]	; (2924 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xdc>)
    28ae:	4798      	blx	r3
					tmp_in_str->set((tmp_str = tmp_in_str->subString(char_count + 1)));
					if(tmp_str)
						free(tmp_str);
				}
			}
			char_count = 0;
    28b0:	2500      	movs	r5, #0
    28b2:	e022      	b.n	28fa <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xb2>
				if(tmp_str)
					free(tmp_str);
			}
			else
			{
				tmp_in_str->buff[char_count] = '\0';
    28b4:	2300      	movs	r3, #0
    28b6:	700b      	strb	r3, [r1, #0]
				tmp_cmt_splitted->add(tmp_in_str->buff);
    28b8:	4648      	mov	r0, r9
    28ba:	6821      	ldr	r1, [r4, #0]
    28bc:	4b1a      	ldr	r3, [pc, #104]	; (2928 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xe0>)
    28be:	4798      	blx	r3
				char *tmp_str;
				if(char_count >= tmp_in_str->length)
    28c0:	6862      	ldr	r2, [r4, #4]
    28c2:	42aa      	cmp	r2, r5
    28c4:	d804      	bhi.n	28d0 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0x88>
					tmp_in_str->clear();
    28c6:	1c20      	adds	r0, r4, #0
    28c8:	4b18      	ldr	r3, [pc, #96]	; (292c <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xe4>)
    28ca:	4798      	blx	r3
					tmp_in_str->set((tmp_str = tmp_in_str->subString(char_count + 1)));
					if(tmp_str)
						free(tmp_str);
				}
			}
			char_count = 0;
    28cc:	2500      	movs	r5, #0
    28ce:	e014      	b.n	28fa <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xb2>
				char *tmp_str;
				if(char_count >= tmp_in_str->length)
					tmp_in_str->clear();
				else
				{
					tmp_in_str->set((tmp_str = tmp_in_str->subString(char_count + 1)));
    28d0:	1c69      	adds	r1, r5, #1
    28d2:	1c20      	adds	r0, r4, #0
    28d4:	4b11      	ldr	r3, [pc, #68]	; (291c <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xd4>)
    28d6:	4798      	blx	r3
    28d8:	1c05      	adds	r5, r0, #0
    28da:	1c20      	adds	r0, r4, #0
    28dc:	1c29      	adds	r1, r5, #0
    28de:	4b10      	ldr	r3, [pc, #64]	; (2920 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xd8>)
    28e0:	4798      	blx	r3
					if(tmp_str)
    28e2:	2d00      	cmp	r5, #0
    28e4:	d008      	beq.n	28f8 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xb0>
						free(tmp_str);
    28e6:	1c28      	adds	r0, r5, #0
    28e8:	4b0e      	ldr	r3, [pc, #56]	; (2924 <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xdc>)
    28ea:	4798      	blx	r3
				}
			}
			char_count = 0;
    28ec:	2500      	movs	r5, #0
    28ee:	e004      	b.n	28fa <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xb2>
			continue;
		}
		char_count++;
    28f0:	3501      	adds	r5, #1
    28f2:	e002      	b.n	28fa <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xb2>
					tmp_in_str->set((tmp_str = tmp_in_str->subString(char_count + 1)));
					if(tmp_str)
						free(tmp_str);
				}
			}
			char_count = 0;
    28f4:	2500      	movs	r5, #0
    28f6:	e000      	b.n	28fa <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0xb2>
    28f8:	2500      	movs	r5, #0
SysErr Sys::Util::strToCmd(GI::String *inStr, GI::StringArray **result)
{
	GI::StringArray *tmp_cmt_splitted = new GI::StringArray();
	unsigned int char_count = 0;
	GI::String *tmp_in_str = new GI::String(inStr->buff);
	while(tmp_in_str && tmp_in_str->length)
    28fa:	6863      	ldr	r3, [r4, #4]
    28fc:	2b00      	cmp	r3, #0
    28fe:	d1bd      	bne.n	287c <_ZN3Sys4Util8strToCmdEPN2GI6StringEPPNS1_11StringArrayE+0x34>
			char_count = 0;
			continue;
		}
		char_count++;
	}
	*result = tmp_cmt_splitted;
    2900:	464b      	mov	r3, r9
    2902:	4652      	mov	r2, sl
    2904:	6013      	str	r3, [r2, #0]
	return SYS_ERR_OK;
}
    2906:	2000      	movs	r0, #0
    2908:	bc0c      	pop	{r2, r3}
    290a:	4691      	mov	r9, r2
    290c:	469a      	mov	sl, r3
    290e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2910:	00005741 	.word	0x00005741
    2914:	00005a01 	.word	0x00005a01
    2918:	00005785 	.word	0x00005785
    291c:	000059c5 	.word	0x000059c5
    2920:	00005831 	.word	0x00005831
    2924:	000065dd 	.word	0x000065dd
    2928:	00005b05 	.word	0x00005b05
    292c:	00005951 	.word	0x00005951

00002930 <_ZN4file5fopenEPKch>:
FRESULT file::fopen		/* Open or create a file */
(
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2930:	b508      	push	{r3, lr}
	return f_open(&fil, path, mode);
    2932:	4b01      	ldr	r3, [pc, #4]	; (2938 <_ZN4file5fopenEPKch+0x8>)
    2934:	4798      	blx	r3
}
    2936:	bd08      	pop	{r3, pc}
    2938:	00004dc1 	.word	0x00004dc1

0000293c <_ZN4file6fcloseEv>:

FRESULT file::fclose ()	/* Close an open file object */
{
    293c:	b508      	push	{r3, lr}
	return f_close(&fil);
    293e:	4b01      	ldr	r3, [pc, #4]	; (2944 <_ZN4file6fcloseEv+0x8>)
    2940:	4798      	blx	r3
}
    2942:	bd08      	pop	{r3, pc}
    2944:	000054d9 	.word	0x000054d9

00002948 <_ZN4file5freadEPvj>:
UINT file::fread		/* Read data from the file */
(
	void* buff,			/* Pointer to data buffer */
	UINT btr			/* Number of bytes to read */
)
{
    2948:	b510      	push	{r4, lr}
    294a:	b082      	sub	sp, #8
	UINT br;
	if(f_read(&fil, buff, btr, &br) != FR_OK)
    294c:	ab01      	add	r3, sp, #4
    294e:	4c04      	ldr	r4, [pc, #16]	; (2960 <_ZN4file5freadEPvj+0x18>)
    2950:	47a0      	blx	r4
		return 0;
    2952:	2300      	movs	r3, #0
	void* buff,			/* Pointer to data buffer */
	UINT btr			/* Number of bytes to read */
)
{
	UINT br;
	if(f_read(&fil, buff, btr, &br) != FR_OK)
    2954:	2800      	cmp	r0, #0
    2956:	d100      	bne.n	295a <_ZN4file5freadEPvj+0x12>
		return 0;
	return br;
    2958:	9b01      	ldr	r3, [sp, #4]
}
    295a:	1c18      	adds	r0, r3, #0
    295c:	b002      	add	sp, #8
    295e:	bd10      	pop	{r4, pc}
    2960:	00005175 	.word	0x00005175

00002964 <_ZN3dir8fopendirEPKc>:
/*#####################################################*/
FRESULT dir::fopendir		/* Open a directory */
(
	const TCHAR* path		/* Pointer to the directory path */
)
{
    2964:	b508      	push	{r3, lr}
	return f_opendir(&dr, path);
    2966:	4b01      	ldr	r3, [pc, #4]	; (296c <_ZN3dir8fopendirEPKc+0x8>)
    2968:	4798      	blx	r3
}
    296a:	bd08      	pop	{r3, pc}
    296c:	00005505 	.word	0x00005505

00002970 <_ZN3dir9fclosedirEv>:

FRESULT dir::fclosedir ()	/* Close an open directory */
{
    2970:	b508      	push	{r3, lr}
	return f_closedir(&dr);
    2972:	4b01      	ldr	r3, [pc, #4]	; (2978 <_ZN3dir9fclosedirEv+0x8>)
    2974:	4798      	blx	r3
}
    2976:	bd08      	pop	{r3, pc}
    2978:	000055d9 	.word	0x000055d9

0000297c <disk_initialize>:
	stat &= ~STA_NOINIT;
	//}

	return stat;

}
    297c:	2000      	movs	r0, #0
    297e:	4770      	bx	lr

00002980 <disk_status>:
/* Return Disk Status                                                    */

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0..) */
)
{
	if (!FatFs[drv]->drv_rw_func.DriveStruct)
    2980:	0080      	lsls	r0, r0, #2
    2982:	4b03      	ldr	r3, [pc, #12]	; (2990 <disk_status+0x10>)
    2984:	58c3      	ldr	r3, [r0, r3]
    2986:	6c98      	ldr	r0, [r3, #72]	; 0x48
		return RES_PARERR;
    2988:	4243      	negs	r3, r0
    298a:	4158      	adcs	r0, r3
    298c:	0080      	lsls	r0, r0, #2
	return RES_OK;
}
    298e:	4770      	bx	lr
    2990:	20000630 	.word	0x20000630

00002994 <disk_read>:
DRESULT disk_read(BYTE drv, /* Physical drive nmuber (0..) */
BYTE *buff, /* Data buffer to store read data */
DWORD sector, /* Sector address (LBA) */
BYTE count /* Number of sectors to read (1..255) */
)
{
    2994:	b538      	push	{r3, r4, r5, lr}
	if (!FatFs[drv]->drv_rw_func.DriveStruct
    2996:	0080      	lsls	r0, r0, #2
    2998:	4c08      	ldr	r4, [pc, #32]	; (29bc <disk_read+0x28>)
    299a:	5904      	ldr	r4, [r0, r4]
    299c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    299e:	2d00      	cmp	r5, #0
    29a0:	d009      	beq.n	29b6 <disk_read+0x22>
			|| !FatFs[drv]->drv_rw_func.drv_r_func)
    29a2:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
		return RES_PARERR;
    29a4:	2004      	movs	r0, #4
DWORD sector, /* Sector address (LBA) */
BYTE count /* Number of sectors to read (1..255) */
)
{
	if (!FatFs[drv]->drv_rw_func.DriveStruct
			|| !FatFs[drv]->drv_rw_func.drv_r_func)
    29a6:	2c00      	cmp	r4, #0
    29a8:	d006      	beq.n	29b8 <disk_read+0x24>
		return RES_PARERR;
	if (FatFs[drv]->drv_rw_func.drv_r_func(
			(void*) FatFs[drv]->drv_rw_func.DriveStruct, (void*) buff, sector,
			count))
    29aa:	1c28      	adds	r0, r5, #0
    29ac:	47a0      	blx	r4
)
{
	if (!FatFs[drv]->drv_rw_func.DriveStruct
			|| !FatFs[drv]->drv_rw_func.drv_r_func)
		return RES_PARERR;
	if (FatFs[drv]->drv_rw_func.drv_r_func(
    29ae:	4243      	negs	r3, r0
    29b0:	4158      	adcs	r0, r3
BYTE count /* Number of sectors to read (1..255) */
)
{
	if (!FatFs[drv]->drv_rw_func.DriveStruct
			|| !FatFs[drv]->drv_rw_func.drv_r_func)
		return RES_PARERR;
    29b2:	b2c0      	uxtb	r0, r0
    29b4:	e000      	b.n	29b8 <disk_read+0x24>
    29b6:	2004      	movs	r0, #4
			(void*) FatFs[drv]->drv_rw_func.DriveStruct, (void*) buff, sector,
			count))
		return RES_OK;
	else
		return RES_ERROR;
}
    29b8:	bd38      	pop	{r3, r4, r5, pc}
    29ba:	46c0      	nop			; (mov r8, r8)
    29bc:	20000630 	.word	0x20000630

000029c0 <disk_write>:
DRESULT disk_write(BYTE drv, /* Physical drive nmuber (0..) */
const BYTE *buff, /* Data to be written */
DWORD sector, /* Sector address (LBA) */
BYTE count /* Number of sectors to write (1..255) */
)
{
    29c0:	b538      	push	{r3, r4, r5, lr}
	if (!FatFs[drv]->drv_rw_func.DriveStruct
    29c2:	0080      	lsls	r0, r0, #2
    29c4:	4c08      	ldr	r4, [pc, #32]	; (29e8 <disk_write+0x28>)
    29c6:	5904      	ldr	r4, [r0, r4]
    29c8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    29ca:	2d00      	cmp	r5, #0
    29cc:	d009      	beq.n	29e2 <disk_write+0x22>
			|| !FatFs[drv]->drv_rw_func.drv_w_func)
    29ce:	6d24      	ldr	r4, [r4, #80]	; 0x50
		return RES_PARERR;
    29d0:	2004      	movs	r0, #4
DWORD sector, /* Sector address (LBA) */
BYTE count /* Number of sectors to write (1..255) */
)
{
	if (!FatFs[drv]->drv_rw_func.DriveStruct
			|| !FatFs[drv]->drv_rw_func.drv_w_func)
    29d2:	2c00      	cmp	r4, #0
    29d4:	d006      	beq.n	29e4 <disk_write+0x24>
		return RES_PARERR;
	if (FatFs[drv]->drv_rw_func.drv_w_func(
			(void*) FatFs[drv]->drv_rw_func.DriveStruct, (void*) buff, sector,
			count))
    29d6:	1c28      	adds	r0, r5, #0
    29d8:	47a0      	blx	r4
)
{
	if (!FatFs[drv]->drv_rw_func.DriveStruct
			|| !FatFs[drv]->drv_rw_func.drv_w_func)
		return RES_PARERR;
	if (FatFs[drv]->drv_rw_func.drv_w_func(
    29da:	4243      	negs	r3, r0
    29dc:	4158      	adcs	r0, r3
BYTE count /* Number of sectors to write (1..255) */
)
{
	if (!FatFs[drv]->drv_rw_func.DriveStruct
			|| !FatFs[drv]->drv_rw_func.drv_w_func)
		return RES_PARERR;
    29de:	b2c0      	uxtb	r0, r0
    29e0:	e000      	b.n	29e4 <disk_write+0x24>
    29e2:	2004      	movs	r0, #4
			(void*) FatFs[drv]->drv_rw_func.DriveStruct, (void*) buff, sector,
			count))
		return RES_OK;
	else
		return RES_ERROR;
}
    29e4:	bd38      	pop	{r3, r4, r5, pc}
    29e6:	46c0      	nop			; (mov r8, r8)
    29e8:	20000630 	.word	0x20000630

000029ec <disk_ioctl>:

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0..) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
)
{
    29ec:	b500      	push	{lr}
    29ee:	b083      	sub	sp, #12
	unsigned int response = FR_OK;
    29f0:	2300      	movs	r3, #0
    29f2:	9301      	str	r3, [sp, #4]
	if (!FatFs[drv]->drv_rw_func.DriveStruct
    29f4:	0080      	lsls	r0, r0, #2
    29f6:	4b09      	ldr	r3, [pc, #36]	; (2a1c <disk_ioctl+0x30>)
    29f8:	58c3      	ldr	r3, [r0, r3]
    29fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    29fc:	2a00      	cmp	r2, #0
    29fe:	d009      	beq.n	2a14 <disk_ioctl+0x28>
			|| !FatFs[drv]->drv_rw_func.drv_ioctl_func)
    2a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
		return RES_PARERR;
    2a02:	2004      	movs	r0, #4
void *buff /* Buffer to send/receive control data */
)
{
	unsigned int response = FR_OK;
	if (!FatFs[drv]->drv_rw_func.DriveStruct
			|| !FatFs[drv]->drv_rw_func.drv_ioctl_func)
    2a04:	2b00      	cmp	r3, #0
    2a06:	d006      	beq.n	2a16 <disk_ioctl+0x2a>
		return RES_PARERR;
	FatFs[drv]->drv_rw_func.drv_ioctl_func(FatFs[drv]->drv_rw_func.DriveStruct,
			ctrl, &response);
    2a08:	1c10      	adds	r0, r2, #0
    2a0a:	aa01      	add	r2, sp, #4
    2a0c:	4798      	blx	r3
	return (DRESULT) response;
    2a0e:	9b01      	ldr	r3, [sp, #4]
    2a10:	b2d8      	uxtb	r0, r3
    2a12:	e000      	b.n	2a16 <disk_ioctl+0x2a>
)
{
	unsigned int response = FR_OK;
	if (!FatFs[drv]->drv_rw_func.DriveStruct
			|| !FatFs[drv]->drv_rw_func.drv_ioctl_func)
		return RES_PARERR;
    2a14:	2004      	movs	r0, #4
	FatFs[drv]->drv_rw_func.drv_ioctl_func(FatFs[drv]->drv_rw_func.DriveStruct,
			ctrl, &response);
	return (DRESULT) response;
}
    2a16:	b003      	add	sp, #12
    2a18:	bd00      	pop	{pc}
    2a1a:	46c0      	nop			; (mov r8, r8)
    2a1c:	20000630 	.word	0x20000630

00002a20 <get_fattime>:
#include "../inc/fattime.h"
#include "api/rtc_def.h"
//#include "api/rtc_api.h"

DWORD get_fattime(void)
{
    2a20:	b082      	sub	sp, #8
	return ((DWORD) ((((calendar.Year + 2000) - 1980) & 0x7F)) << 25
			| (DWORD) (calendar.Month & 0x0F) << 21
			| (DWORD) (calendar.Date & 0x1F) << 16)
			| (DWORD) (calendar.Hours & 0x1F) << 11
			| (DWORD) (calendar.Minutes & 0x3F) << 5
			| (DWORD) (calendar.Seconds & 0x3F);
    2a22:	20a0      	movs	r0, #160	; 0xa0
}
    2a24:	0580      	lsls	r0, r0, #22
    2a26:	b002      	add	sp, #8
    2a28:	4770      	bx	lr
    2a2a:	46c0      	nop			; (mov r8, r8)

00002a2c <_ZL8ld_dwordPKh>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    2a2c:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
    2a2e:	0212      	lsls	r2, r2, #8
    2a30:	7883      	ldrb	r3, [r0, #2]
    2a32:	431a      	orrs	r2, r3
	rv = rv << 8 | ptr[1];
    2a34:	0212      	lsls	r2, r2, #8
    2a36:	7843      	ldrb	r3, [r0, #1]
    2a38:	431a      	orrs	r2, r3
	rv = rv << 8 | ptr[0];
    2a3a:	0212      	lsls	r2, r2, #8
    2a3c:	7803      	ldrb	r3, [r0, #0]
    2a3e:	1c10      	adds	r0, r2, #0
    2a40:	4318      	orrs	r0, r3
	return rv;
}
    2a42:	4770      	bx	lr

00002a44 <_ZL8ld_qwordPKh>:
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
	QWORD rv;

	rv = ptr[7];
    2a44:	79c3      	ldrb	r3, [r0, #7]
	rv = rv << 8 | ptr[6];
    2a46:	021b      	lsls	r3, r3, #8
    2a48:	7982      	ldrb	r2, [r0, #6]
    2a4a:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[5];
    2a4c:	0e19      	lsrs	r1, r3, #24
    2a4e:	021b      	lsls	r3, r3, #8
    2a50:	7942      	ldrb	r2, [r0, #5]
    2a52:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[4];
    2a54:	0e1a      	lsrs	r2, r3, #24
    2a56:	0209      	lsls	r1, r1, #8
    2a58:	4311      	orrs	r1, r2
    2a5a:	021b      	lsls	r3, r3, #8
    2a5c:	7902      	ldrb	r2, [r0, #4]
    2a5e:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[3];
    2a60:	0e1a      	lsrs	r2, r3, #24
    2a62:	0209      	lsls	r1, r1, #8
    2a64:	4311      	orrs	r1, r2
    2a66:	021b      	lsls	r3, r3, #8
    2a68:	78c2      	ldrb	r2, [r0, #3]
    2a6a:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[2];
    2a6c:	0e1a      	lsrs	r2, r3, #24
    2a6e:	0209      	lsls	r1, r1, #8
    2a70:	4311      	orrs	r1, r2
    2a72:	021b      	lsls	r3, r3, #8
    2a74:	7882      	ldrb	r2, [r0, #2]
    2a76:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    2a78:	0e1a      	lsrs	r2, r3, #24
    2a7a:	0209      	lsls	r1, r1, #8
    2a7c:	4311      	orrs	r1, r2
    2a7e:	021b      	lsls	r3, r3, #8
    2a80:	7842      	ldrb	r2, [r0, #1]
    2a82:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    2a84:	0e1a      	lsrs	r2, r3, #24
    2a86:	0209      	lsls	r1, r1, #8
    2a88:	4311      	orrs	r1, r2
    2a8a:	021b      	lsls	r3, r3, #8
    2a8c:	7802      	ldrb	r2, [r0, #0]
    2a8e:	1c18      	adds	r0, r3, #0
    2a90:	4310      	orrs	r0, r2
	return rv;
}
    2a92:	4770      	bx	lr

00002a94 <_ZL8st_dwordPhm>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2a94:	7001      	strb	r1, [r0, #0]
    2a96:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
    2a98:	7043      	strb	r3, [r0, #1]
    2a9a:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
    2a9c:	7083      	strb	r3, [r0, #2]
    2a9e:	0e09      	lsrs	r1, r1, #24
	*ptr++ = (BYTE)val;
    2aa0:	70c1      	strb	r1, [r0, #3]
}
    2aa2:	4770      	bx	lr

00002aa4 <_ZL8st_qwordPhy>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2aa4:	7002      	strb	r2, [r0, #0]
    2aa6:	0619      	lsls	r1, r3, #24
    2aa8:	0a12      	lsrs	r2, r2, #8
    2aaa:	430a      	orrs	r2, r1
    2aac:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
    2aae:	7042      	strb	r2, [r0, #1]
    2ab0:	0609      	lsls	r1, r1, #24
    2ab2:	0a12      	lsrs	r2, r2, #8
    2ab4:	430a      	orrs	r2, r1
    2ab6:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
    2ab8:	7082      	strb	r2, [r0, #2]
    2aba:	0609      	lsls	r1, r1, #24
    2abc:	0a12      	lsrs	r2, r2, #8
    2abe:	430a      	orrs	r2, r1
    2ac0:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
    2ac2:	70c2      	strb	r2, [r0, #3]
    2ac4:	061b      	lsls	r3, r3, #24
    2ac6:	0a12      	lsrs	r2, r2, #8
    2ac8:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
    2aca:	7102      	strb	r2, [r0, #4]
    2acc:	0a13      	lsrs	r3, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
    2ace:	7143      	strb	r3, [r0, #5]
    2ad0:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
    2ad2:	7183      	strb	r3, [r0, #6]
    2ad4:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val;
    2ad6:	71c2      	strb	r2, [r0, #7]
}
    2ad8:	4770      	bx	lr
    2ada:	46c0      	nop			; (mov r8, r8)

00002adc <_ZL7mem_cpyPvPKvj>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    2adc:	b510      	push	{r4, lr}
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
    2ade:	2a00      	cmp	r2, #0
    2ae0:	d005      	beq.n	2aee <_ZL7mem_cpyPvPKvj+0x12>
    2ae2:	2300      	movs	r3, #0
		do *d++ = *s++; while (--cnt);
    2ae4:	5ccc      	ldrb	r4, [r1, r3]
    2ae6:	54c4      	strb	r4, [r0, r3]
    2ae8:	3301      	adds	r3, #1
    2aea:	4293      	cmp	r3, r2
    2aec:	d1fa      	bne.n	2ae4 <_ZL7mem_cpyPvPKvj+0x8>
	}
}
    2aee:	bd10      	pop	{r4, pc}

00002af0 <_ZL7mem_setPvij>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
    2af0:	1c03      	adds	r3, r0, #0
    2af2:	1882      	adds	r2, r0, r2
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    2af4:	7019      	strb	r1, [r3, #0]
    2af6:	3301      	adds	r3, #1
    2af8:	4293      	cmp	r3, r2
    2afa:	d1fb      	bne.n	2af4 <_ZL7mem_setPvij+0x4>
}
    2afc:	4770      	bx	lr
    2afe:	46c0      	nop			; (mov r8, r8)

00002b00 <_ZL10clust2sectP5FATFSm>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    2b00:	1c03      	adds	r3, r0, #0
	clst -= 2;
    2b02:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2b04:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    2b06:	3a02      	subs	r2, #2
    2b08:	2000      	movs	r0, #0
    2b0a:	4291      	cmp	r1, r2
    2b0c:	d203      	bcs.n	2b16 <_ZL10clust2sectP5FATFSm+0x16>
	return clst * fs->csize + fs->database;
    2b0e:	8958      	ldrh	r0, [r3, #10]
    2b10:	4348      	muls	r0, r1
    2b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2b14:	18c0      	adds	r0, r0, r3
}
    2b16:	4770      	bx	lr

00002b18 <_ZL7sum_sfnPKh>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
    2b18:	b510      	push	{r4, lr}
    2b1a:	1c03      	adds	r3, r0, #0
    2b1c:	1c04      	adds	r4, r0, #0
    2b1e:	340b      	adds	r4, #11
	BYTE sum = 0;
    2b20:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    2b22:	0842      	lsrs	r2, r0, #1
    2b24:	01c0      	lsls	r0, r0, #7
    2b26:	7819      	ldrb	r1, [r3, #0]
    2b28:	1808      	adds	r0, r1, r0
    2b2a:	1880      	adds	r0, r0, r2
    2b2c:	b2c0      	uxtb	r0, r0
    2b2e:	3301      	adds	r3, #1
    2b30:	42a3      	cmp	r3, r4
    2b32:	d1f6      	bne.n	2b22 <_ZL7sum_sfnPKh+0xa>
	return sum;
}
    2b34:	bd10      	pop	{r4, pc}
    2b36:	46c0      	nop			; (mov r8, r8)

00002b38 <_ZL8xdir_sumPKh>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
    2b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b3a:	1c06      	adds	r6, r0, #0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
    2b3c:	7845      	ldrb	r5, [r0, #1]
    2b3e:	3501      	adds	r5, #1
    2b40:	016d      	lsls	r5, r5, #5
	for (i = sum = 0; i < szblk; i++) {
    2b42:	d014      	beq.n	2b6e <_ZL8xdir_sumPKh+0x36>
    2b44:	2000      	movs	r0, #0
    2b46:	2300      	movs	r3, #0
		if (i == XDIR_SetSum) {	/* Skip sum field */
			i++;
    2b48:	2203      	movs	r2, #3
    2b4a:	4694      	mov	ip, r2
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
    2b4c:	2701      	movs	r7, #1
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
	for (i = sum = 0; i < szblk; i++) {
		if (i == XDIR_SetSum) {	/* Skip sum field */
    2b4e:	2b02      	cmp	r3, #2
    2b50:	d008      	beq.n	2b64 <_ZL8xdir_sumPKh+0x2c>
			i++;
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
    2b52:	1c39      	adds	r1, r7, #0
    2b54:	4001      	ands	r1, r0
    2b56:	03c9      	lsls	r1, r1, #15
    2b58:	5cf4      	ldrb	r4, [r6, r3]
    2b5a:	1042      	asrs	r2, r0, #1
    2b5c:	18a2      	adds	r2, r4, r2
    2b5e:	1852      	adds	r2, r2, r1
    2b60:	b290      	uxth	r0, r2
    2b62:	e000      	b.n	2b66 <_ZL8xdir_sumPKh+0x2e>


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
	for (i = sum = 0; i < szblk; i++) {
		if (i == XDIR_SetSum) {	/* Skip sum field */
			i++;
    2b64:	4663      	mov	r3, ip
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
	for (i = sum = 0; i < szblk; i++) {
    2b66:	3301      	adds	r3, #1
    2b68:	429d      	cmp	r5, r3
    2b6a:	d8f0      	bhi.n	2b4e <_ZL8xdir_sumPKh+0x16>
    2b6c:	e000      	b.n	2b70 <_ZL8xdir_sumPKh+0x38>
    2b6e:	2000      	movs	r0, #0
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
		}
	}
	return sum;
}
    2b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b72:	46c0      	nop			; (mov r8, r8)

00002b74 <_ZL12get_ldnumberPPKc>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
    2b74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b76:	4647      	mov	r7, r8
    2b78:	b480      	push	{r7}
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
    2b7a:	6807      	ldr	r7, [r0, #0]
    2b7c:	2f00      	cmp	r7, #0
    2b7e:	d042      	beq.n	2c06 <_ZL12get_ldnumberPPKc+0x92>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    2b80:	783e      	ldrb	r6, [r7, #0]
    2b82:	2e1f      	cmp	r6, #31
    2b84:	d909      	bls.n	2b9a <_ZL12get_ldnumberPPKc+0x26>
    2b86:	2e3a      	cmp	r6, #58	; 0x3a
    2b88:	d049      	beq.n	2c1e <_ZL12get_ldnumberPPKc+0xaa>
    2b8a:	1c3b      	adds	r3, r7, #0
    2b8c:	3301      	adds	r3, #1
    2b8e:	781a      	ldrb	r2, [r3, #0]
    2b90:	2a1f      	cmp	r2, #31
    2b92:	d904      	bls.n	2b9e <_ZL12get_ldnumberPPKc+0x2a>
    2b94:	2a3a      	cmp	r2, #58	; 0x3a
    2b96:	d1f9      	bne.n	2b8c <_ZL12get_ldnumberPPKc+0x18>
    2b98:	e003      	b.n	2ba2 <_ZL12get_ldnumberPPKc+0x2e>
    2b9a:	1c32      	adds	r2, r6, #0
    2b9c:	1c3b      	adds	r3, r7, #0
		if (*tt == ':') {	/* If a ':' is exist in the path name */
    2b9e:	2a3a      	cmp	r2, #58	; 0x3a
    2ba0:	d12e      	bne.n	2c00 <_ZL12get_ldnumberPPKc+0x8c>
			tp = *path;
			i = *tp++ - '0';
    2ba2:	3e30      	subs	r6, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
    2ba4:	2e09      	cmp	r6, #9
    2ba6:	d807      	bhi.n	2bb8 <_ZL12get_ldnumberPPKc+0x44>

	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
    2ba8:	1c79      	adds	r1, r7, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
    2baa:	428b      	cmp	r3, r1
    2bac:	d104      	bne.n	2bb8 <_ZL12get_ldnumberPPKc+0x44>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
    2bae:	2e06      	cmp	r6, #6
    2bb0:	d82c      	bhi.n	2c0c <_ZL12get_ldnumberPPKc+0x98>
					vol = (int)i;
					*path = ++tt;
    2bb2:	3702      	adds	r7, #2
    2bb4:	6007      	str	r7, [r0, #0]
    2bb6:	e034      	b.n	2c22 <_ZL12get_ldnumberPPKc+0xae>
				}
			}
#if _STR_VOLUME_ID
			 else {	/* No numeric drive number, find string drive id */
				i = 0; tt++;
    2bb8:	3301      	adds	r3, #1
    2bba:	469c      	mov	ip, r3
    2bbc:	2600      	movs	r6, #0
				do {
					sp = str[i]; tp = *path;
    2bbe:	4b1b      	ldr	r3, [pc, #108]	; (2c2c <_ZL12get_ldnumberPPKc+0xb8>)
    2bc0:	4698      	mov	r8, r3
    2bc2:	00b2      	lsls	r2, r6, #2
    2bc4:	4643      	mov	r3, r8
    2bc6:	58d1      	ldr	r1, [r2, r3]
    2bc8:	1c3a      	adds	r2, r7, #0
					do {	/* Compare a string drive id with path name */
						c = *sp++; tc = *tp++;
    2bca:	780c      	ldrb	r4, [r1, #0]
    2bcc:	3201      	adds	r2, #1
    2bce:	1e53      	subs	r3, r2, #1
    2bd0:	781b      	ldrb	r3, [r3, #0]
						if (IsLower(tc)) tc -= 0x20;
    2bd2:	1c1d      	adds	r5, r3, #0
    2bd4:	3d61      	subs	r5, #97	; 0x61
    2bd6:	2d19      	cmp	r5, #25
    2bd8:	d801      	bhi.n	2bde <_ZL12get_ldnumberPPKc+0x6a>
    2bda:	3b20      	subs	r3, #32
    2bdc:	b2db      	uxtb	r3, r3
#if _STR_VOLUME_ID
			 else {	/* No numeric drive number, find string drive id */
				i = 0; tt++;
				do {
					sp = str[i]; tp = *path;
					do {	/* Compare a string drive id with path name */
    2bde:	2c00      	cmp	r4, #0
    2be0:	d003      	beq.n	2bea <_ZL12get_ldnumberPPKc+0x76>
    2be2:	3101      	adds	r1, #1
						c = *sp++; tc = *tp++;
						if (IsLower(tc)) tc -= 0x20;
					} while (c && (TCHAR)c == tc);
    2be4:	429c      	cmp	r4, r3
    2be6:	d0f0      	beq.n	2bca <_ZL12get_ldnumberPPKc+0x56>
    2be8:	e001      	b.n	2bee <_ZL12get_ldnumberPPKc+0x7a>
				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
    2bea:	4562      	cmp	r2, ip
    2bec:	d003      	beq.n	2bf6 <_ZL12get_ldnumberPPKc+0x82>
    2bee:	3601      	adds	r6, #1
				}
			}
#if _STR_VOLUME_ID
			 else {	/* No numeric drive number, find string drive id */
				i = 0; tt++;
				do {
    2bf0:	2e07      	cmp	r6, #7
    2bf2:	d1e6      	bne.n	2bc2 <_ZL12get_ldnumberPPKc+0x4e>
    2bf4:	e00d      	b.n	2c12 <_ZL12get_ldnumberPPKc+0x9e>
					do {	/* Compare a string drive id with path name */
						c = *sp++; tc = *tp++;
						if (IsLower(tc)) tc -= 0x20;
					} while (c && (TCHAR)c == tc);
				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
    2bf6:	2e06      	cmp	r6, #6
    2bf8:	d80e      	bhi.n	2c18 <_ZL12get_ldnumberPPKc+0xa4>
					vol = (int)i;
					*path = tt;
    2bfa:	4663      	mov	r3, ip
    2bfc:	6003      	str	r3, [r0, #0]
    2bfe:	e010      	b.n	2c22 <_ZL12get_ldnumberPPKc+0xae>
			}
#endif
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
    2c00:	4b0b      	ldr	r3, [pc, #44]	; (2c30 <_ZL12get_ldnumberPPKc+0xbc>)
    2c02:	781e      	ldrb	r6, [r3, #0]
    2c04:	e00d      	b.n	2c22 <_ZL12get_ldnumberPPKc+0xae>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
    2c06:	2601      	movs	r6, #1
    2c08:	4276      	negs	r6, r6
    2c0a:	e00a      	b.n	2c22 <_ZL12get_ldnumberPPKc+0xae>
    2c0c:	2601      	movs	r6, #1
    2c0e:	4276      	negs	r6, r6
    2c10:	e007      	b.n	2c22 <_ZL12get_ldnumberPPKc+0xae>
    2c12:	2601      	movs	r6, #1
    2c14:	4276      	negs	r6, r6
    2c16:	e004      	b.n	2c22 <_ZL12get_ldnumberPPKc+0xae>
    2c18:	2601      	movs	r6, #1
    2c1a:	4276      	negs	r6, r6
    2c1c:	e001      	b.n	2c22 <_ZL12get_ldnumberPPKc+0xae>
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    2c1e:	1c3b      	adds	r3, r7, #0
    2c20:	e7bf      	b.n	2ba2 <_ZL12get_ldnumberPPKc+0x2e>
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
    2c22:	1c30      	adds	r0, r6, #0
    2c24:	bc04      	pop	{r2}
    2c26:	4690      	mov	r8, r2
    2c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	00006cb4 	.word	0x00006cb4
    2c30:	20000428 	.word	0x20000428

00002c34 <_ZL8validateP5_FDIDPP5FATFS>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
    2c34:	b538      	push	{r3, r4, r5, lr}
    2c36:	1c04      	adds	r4, r0, #0
    2c38:	1c0d      	adds	r5, r1, #0
	FRESULT res;


	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
    2c3a:	2800      	cmp	r0, #0
    2c3c:	d00e      	beq.n	2c5c <_ZL8validateP5_FDIDPP5FATFS+0x28>
    2c3e:	6803      	ldr	r3, [r0, #0]
    2c40:	2b00      	cmp	r3, #0
    2c42:	d00b      	beq.n	2c5c <_ZL8validateP5_FDIDPP5FATFS+0x28>
    2c44:	781a      	ldrb	r2, [r3, #0]
    2c46:	2a00      	cmp	r2, #0
    2c48:	d008      	beq.n	2c5c <_ZL8validateP5_FDIDPP5FATFS+0x28>
    2c4a:	88d9      	ldrh	r1, [r3, #6]
    2c4c:	8882      	ldrh	r2, [r0, #4]
    2c4e:	4291      	cmp	r1, r2
    2c50:	d104      	bne.n	2c5c <_ZL8validateP5_FDIDPP5FATFS+0x28>
    2c52:	7858      	ldrb	r0, [r3, #1]
    2c54:	4b05      	ldr	r3, [pc, #20]	; (2c6c <_ZL8validateP5_FDIDPP5FATFS+0x38>)
    2c56:	4798      	blx	r3
    2c58:	07c3      	lsls	r3, r0, #31
    2c5a:	d503      	bpl.n	2c64 <_ZL8validateP5_FDIDPP5FATFS+0x30>
		*fs = 0;				/* The object is invalid */
    2c5c:	2300      	movs	r3, #0
    2c5e:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;
    2c60:	2009      	movs	r0, #9
    2c62:	e002      	b.n	2c6a <_ZL8validateP5_FDIDPP5FATFS+0x36>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
    2c64:	6824      	ldr	r4, [r4, #0]
    2c66:	602c      	str	r4, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
    2c68:	2000      	movs	r0, #0
	}
	return res;
}
    2c6a:	bd38      	pop	{r3, r4, r5, pc}
    2c6c:	00002981 	.word	0x00002981

00002c70 <_ZL11sync_windowP5FATFS>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
    2c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c72:	4647      	mov	r7, r8
    2c74:	b480      	push	{r7}
    2c76:	1c04      	adds	r4, r0, #0
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
    2c78:	78c3      	ldrb	r3, [r0, #3]
	FATFS* fs			/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
    2c7a:	2000      	movs	r0, #0


	if (fs->wflag) {	/* Write back the sector if it is dirty */
    2c7c:	2b00      	cmp	r3, #0
    2c7e:	d026      	beq.n	2cce <_ZL11sync_windowP5FATFS+0x5e>
		wsect = fs->winsect;	/* Current sector number */
    2c80:	6c65      	ldr	r5, [r4, #68]	; 0x44
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
    2c82:	1c27      	adds	r7, r4, #0
    2c84:	3758      	adds	r7, #88	; 0x58
    2c86:	7860      	ldrb	r0, [r4, #1]
    2c88:	1c39      	adds	r1, r7, #0
    2c8a:	1c2a      	adds	r2, r5, #0
    2c8c:	2301      	movs	r3, #1
    2c8e:	4e11      	ldr	r6, [pc, #68]	; (2cd4 <_ZL11sync_windowP5FATFS+0x64>)
    2c90:	47b0      	blx	r6
    2c92:	1c03      	adds	r3, r0, #0
			res = FR_DISK_ERR;
    2c94:	2001      	movs	r0, #1
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
    2c96:	2b00      	cmp	r3, #0
    2c98:	d119      	bne.n	2cce <_ZL11sync_windowP5FATFS+0x5e>
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
    2c9a:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
    2c9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2c9e:	1aab      	subs	r3, r5, r2
	FATFS* fs			/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
    2ca0:	2000      	movs	r0, #0
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
    2ca2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2ca4:	4293      	cmp	r3, r2
    2ca6:	d212      	bcs.n	2cce <_ZL11sync_windowP5FATFS+0x5e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    2ca8:	78a6      	ldrb	r6, [r4, #2]
    2caa:	2e01      	cmp	r6, #1
    2cac:	d90c      	bls.n	2cc8 <_ZL11sync_windowP5FATFS+0x58>
					wsect += fs->fsize;
					disk_write(fs->drv, fs->win, wsect, 1);
    2cae:	4b09      	ldr	r3, [pc, #36]	; (2cd4 <_ZL11sync_windowP5FATFS+0x64>)
    2cb0:	4698      	mov	r8, r3
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
					wsect += fs->fsize;
    2cb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2cb4:	18ad      	adds	r5, r5, r2
					disk_write(fs->drv, fs->win, wsect, 1);
    2cb6:	7860      	ldrb	r0, [r4, #1]
    2cb8:	1c39      	adds	r1, r7, #0
    2cba:	1c2a      	adds	r2, r5, #0
    2cbc:	2301      	movs	r3, #1
    2cbe:	47c0      	blx	r8
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    2cc0:	3e01      	subs	r6, #1
    2cc2:	2e01      	cmp	r6, #1
    2cc4:	d1f5      	bne.n	2cb2 <_ZL11sync_windowP5FATFS+0x42>
    2cc6:	e001      	b.n	2ccc <_ZL11sync_windowP5FATFS+0x5c>
	FATFS* fs			/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
    2cc8:	2000      	movs	r0, #0
    2cca:	e000      	b.n	2cce <_ZL11sync_windowP5FATFS+0x5e>
    2ccc:	2000      	movs	r0, #0
				}
			}
		}
	}
	return res;
}
    2cce:	bc04      	pop	{r2}
    2cd0:	4690      	mov	r8, r2
    2cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cd4:	000029c1 	.word	0x000029c1

00002cd8 <_ZL11move_windowP5FATFSm>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
    2cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cda:	1c05      	adds	r5, r0, #0
    2cdc:	1c0e      	adds	r6, r1, #0
	FRESULT res = FR_OK;
    2cde:	2400      	movs	r4, #0


	if (sector != fs->winsect) {	/* Window offset changed? */
    2ce0:	6c43      	ldr	r3, [r0, #68]	; 0x44
    2ce2:	428b      	cmp	r3, r1
    2ce4:	d010      	beq.n	2d08 <_ZL11move_windowP5FATFSm+0x30>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
    2ce6:	4b09      	ldr	r3, [pc, #36]	; (2d0c <_ZL11move_windowP5FATFSm+0x34>)
    2ce8:	4798      	blx	r3
    2cea:	1e04      	subs	r4, r0, #0
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
    2cec:	d10c      	bne.n	2d08 <_ZL11move_windowP5FATFSm+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
    2cee:	7868      	ldrb	r0, [r5, #1]
    2cf0:	1c29      	adds	r1, r5, #0
    2cf2:	3158      	adds	r1, #88	; 0x58
    2cf4:	1c32      	adds	r2, r6, #0
    2cf6:	2301      	movs	r3, #1
    2cf8:	4f05      	ldr	r7, [pc, #20]	; (2d10 <_ZL11move_windowP5FATFSm+0x38>)
    2cfa:	47b8      	blx	r7
    2cfc:	2800      	cmp	r0, #0
    2cfe:	d002      	beq.n	2d06 <_ZL11move_windowP5FATFSm+0x2e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
    2d00:	2401      	movs	r4, #1
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
    2d02:	2601      	movs	r6, #1
    2d04:	4276      	negs	r6, r6
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
    2d06:	646e      	str	r6, [r5, #68]	; 0x44
		}
	}
	return res;
}
    2d08:	1c20      	adds	r0, r4, #0
    2d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d0c:	00002c71 	.word	0x00002c71
    2d10:	00002995 	.word	0x00002995

00002d14 <_ZL13change_bitmapP5FATFSmmi>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
    2d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d16:	465f      	mov	r7, fp
    2d18:	4656      	mov	r6, sl
    2d1a:	464d      	mov	r5, r9
    2d1c:	4644      	mov	r4, r8
    2d1e:	b4f0      	push	{r4, r5, r6, r7}
    2d20:	b083      	sub	sp, #12
    2d22:	1c06      	adds	r6, r0, #0
    2d24:	1c17      	adds	r7, r2, #0
    2d26:	4699      	mov	r9, r3
	BYTE bm;
	UINT i;
	DWORD sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
    2d28:	1e8b      	subs	r3, r1, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
    2d2a:	0b19      	lsrs	r1, r3, #12
    2d2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2d2e:	1889      	adds	r1, r1, r2
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
    2d30:	051d      	lsls	r5, r3, #20
    2d32:	0ded      	lsrs	r5, r5, #23
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
    2d34:	2407      	movs	r4, #7
    2d36:	4023      	ands	r3, r4
    2d38:	2401      	movs	r4, #1
    2d3a:	409c      	lsls	r4, r3
    2d3c:	b2e4      	uxtb	r4, r4
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
    2d3e:	4b1a      	ldr	r3, [pc, #104]	; (2da8 <_ZL13change_bitmapP5FATFSmmi+0x94>)
    2d40:	469b      	mov	fp, r3
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
				fs->win[i] ^= bm;	/* Flip the bit */
				fs->wflag = 1;
    2d42:	2201      	movs	r2, #1
    2d44:	4690      	mov	r8, r2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
		do {
    2d46:	4b19      	ldr	r3, [pc, #100]	; (2dac <_ZL13change_bitmapP5FATFSmmi+0x98>)
    2d48:	469a      	mov	sl, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
    2d4a:	1c4a      	adds	r2, r1, #1
    2d4c:	9201      	str	r2, [sp, #4]
    2d4e:	1c30      	adds	r0, r6, #0
    2d50:	47d8      	blx	fp
    2d52:	2800      	cmp	r0, #0
    2d54:	d11e      	bne.n	2d94 <_ZL13change_bitmapP5FATFSmmi+0x80>
    2d56:	e000      	b.n	2d5a <_ZL13change_bitmapP5FATFSmmi+0x46>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
				fs->win[i] ^= bm;	/* Flip the bit */
				fs->wflag = 1;
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
			} while (bm <<= 1);		/* Next bit */
			bm = 1;
    2d58:	4644      	mov	r4, r8
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
    2d5a:	1973      	adds	r3, r6, r5
    2d5c:	3358      	adds	r3, #88	; 0x58
    2d5e:	781b      	ldrb	r3, [r3, #0]
    2d60:	1c22      	adds	r2, r4, #0
    2d62:	401a      	ands	r2, r3
    2d64:	1e51      	subs	r1, r2, #1
    2d66:	418a      	sbcs	r2, r1
    2d68:	454a      	cmp	r2, r9
    2d6a:	d015      	beq.n	2d98 <_ZL13change_bitmapP5FATFSmmi+0x84>
				fs->win[i] ^= bm;	/* Flip the bit */
    2d6c:	1972      	adds	r2, r6, r5
    2d6e:	3258      	adds	r2, #88	; 0x58
    2d70:	4063      	eors	r3, r4
    2d72:	7013      	strb	r3, [r2, #0]
				fs->wflag = 1;
    2d74:	4643      	mov	r3, r8
    2d76:	70f3      	strb	r3, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
    2d78:	3f01      	subs	r7, #1
    2d7a:	2f00      	cmp	r7, #0
    2d7c:	d00d      	beq.n	2d9a <_ZL13change_bitmapP5FATFSmmi+0x86>
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
		do {
			do {
    2d7e:	0064      	lsls	r4, r4, #1
    2d80:	b2e4      	uxtb	r4, r4
    2d82:	2c00      	cmp	r4, #0
    2d84:	d1e9      	bne.n	2d5a <_ZL13change_bitmapP5FATFSmmi+0x46>
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
		do {
    2d86:	3501      	adds	r5, #1
    2d88:	4555      	cmp	r5, sl
    2d8a:	d9e5      	bls.n	2d58 <_ZL13change_bitmapP5FATFSmmi+0x44>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
				fs->win[i] ^= bm;	/* Flip the bit */
				fs->wflag = 1;
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
			} while (bm <<= 1);		/* Next bit */
			bm = 1;
    2d8c:	4644      	mov	r4, r8
		} while (++i < SS(fs));		/* Next byte */
		i = 0;
    2d8e:	2500      	movs	r5, #0
	clst -= 2;	/* The first bit corresponds to cluster #2 */
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
    2d90:	9901      	ldr	r1, [sp, #4]
    2d92:	e7da      	b.n	2d4a <_ZL13change_bitmapP5FATFSmmi+0x36>
    2d94:	2001      	movs	r0, #1
    2d96:	e000      	b.n	2d9a <_ZL13change_bitmapP5FATFSmmi+0x86>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
    2d98:	2002      	movs	r0, #2
			} while (bm <<= 1);		/* Next bit */
			bm = 1;
		} while (++i < SS(fs));		/* Next byte */
		i = 0;
	}
}
    2d9a:	b003      	add	sp, #12
    2d9c:	bc3c      	pop	{r2, r3, r4, r5}
    2d9e:	4690      	mov	r8, r2
    2da0:	4699      	mov	r9, r3
    2da2:	46a2      	mov	sl, r4
    2da4:	46ab      	mov	fp, r5
    2da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2da8:	00002cd9 	.word	0x00002cd9
    2dac:	000001ff 	.word	0x000001ff

00002db0 <_ZL9xname_sumPKt>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
    2db0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2db2:	4647      	mov	r7, r8
    2db4:	b480      	push	{r7}
	WCHAR chr;
	WORD sum = 0;


	while ((chr = *name++) != 0) {
    2db6:	1c85      	adds	r5, r0, #2
    2db8:	8800      	ldrh	r0, [r0, #0]
    2dba:	2800      	cmp	r0, #0
    2dbc:	d01c      	beq.n	2df8 <_ZL9xname_sumPKt+0x48>
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
	WCHAR chr;
	WORD sum = 0;
    2dbe:	2400      	movs	r4, #0


	while ((chr = *name++) != 0) {
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
    2dc0:	4b10      	ldr	r3, [pc, #64]	; (2e04 <_ZL9xname_sumPKt+0x54>)
    2dc2:	4698      	mov	r8, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
    2dc4:	2601      	movs	r6, #1
    2dc6:	27ff      	movs	r7, #255	; 0xff
	WCHAR chr;
	WORD sum = 0;


	while ((chr = *name++) != 0) {
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
    2dc8:	47c0      	blx	r8
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
    2dca:	1c32      	adds	r2, r6, #0
    2dcc:	4022      	ands	r2, r4
    2dce:	03d2      	lsls	r2, r2, #15
    2dd0:	1064      	asrs	r4, r4, #1
    2dd2:	1c3b      	adds	r3, r7, #0
    2dd4:	4003      	ands	r3, r0
    2dd6:	18e3      	adds	r3, r4, r3
    2dd8:	189b      	adds	r3, r3, r2
    2dda:	b29b      	uxth	r3, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
    2ddc:	1c32      	adds	r2, r6, #0
    2dde:	401a      	ands	r2, r3
    2de0:	03d2      	lsls	r2, r2, #15
    2de2:	105c      	asrs	r4, r3, #1
    2de4:	1200      	asrs	r0, r0, #8
    2de6:	1824      	adds	r4, r4, r0
    2de8:	18a4      	adds	r4, r4, r2
    2dea:	b2a4      	uxth	r4, r4
    2dec:	3502      	adds	r5, #2
    2dee:	1eab      	subs	r3, r5, #2
{
	WCHAR chr;
	WORD sum = 0;


	while ((chr = *name++) != 0) {
    2df0:	8818      	ldrh	r0, [r3, #0]
    2df2:	2800      	cmp	r0, #0
    2df4:	d1e8      	bne.n	2dc8 <_ZL9xname_sumPKt+0x18>
    2df6:	e000      	b.n	2dfa <_ZL9xname_sumPKt+0x4a>
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
	WCHAR chr;
	WORD sum = 0;
    2df8:	2400      	movs	r4, #0
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
	}
	return sum;
}
    2dfa:	1c20      	adds	r0, r4, #0
    2dfc:	bc04      	pop	{r2}
    2dfe:	4690      	mov	r8, r2
    2e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	000056a1 	.word	0x000056a1

00002e08 <_ZL7sync_fsP5FATFS>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
    2e08:	b570      	push	{r4, r5, r6, lr}
    2e0a:	1c04      	adds	r4, r0, #0
	FRESULT res;


	res = sync_window(fs);
    2e0c:	4b1e      	ldr	r3, [pc, #120]	; (2e88 <_ZL7sync_fsP5FATFS+0x80>)
    2e0e:	4798      	blx	r3
	if (res == FR_OK) {
    2e10:	2800      	cmp	r0, #0
    2e12:	d138      	bne.n	2e86 <_ZL7sync_fsP5FATFS+0x7e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    2e14:	7823      	ldrb	r3, [r4, #0]
    2e16:	2b03      	cmp	r3, #3
    2e18:	d12d      	bne.n	2e76 <_ZL7sync_fsP5FATFS+0x6e>
    2e1a:	7923      	ldrb	r3, [r4, #4]
    2e1c:	2b01      	cmp	r3, #1
    2e1e:	d12a      	bne.n	2e76 <_ZL7sync_fsP5FATFS+0x6e>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
    2e20:	1c26      	adds	r6, r4, #0
    2e22:	3658      	adds	r6, #88	; 0x58
    2e24:	1c30      	adds	r0, r6, #0
    2e26:	2100      	movs	r1, #0
    2e28:	2280      	movs	r2, #128	; 0x80
    2e2a:	0092      	lsls	r2, r2, #2
    2e2c:	4b17      	ldr	r3, [pc, #92]	; (2e8c <_ZL7sync_fsP5FATFS+0x84>)
    2e2e:	4798      	blx	r3

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2e30:	2255      	movs	r2, #85	; 0x55
    2e32:	4b17      	ldr	r3, [pc, #92]	; (2e90 <_ZL7sync_fsP5FATFS+0x88>)
    2e34:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
    2e36:	22aa      	movs	r2, #170	; 0xaa
    2e38:	4b16      	ldr	r3, [pc, #88]	; (2e94 <_ZL7sync_fsP5FATFS+0x8c>)
    2e3a:	54e2      	strb	r2, [r4, r3]
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
			st_word(fs->win + BS_55AA, 0xAA55);
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
    2e3c:	1c30      	adds	r0, r6, #0
    2e3e:	4916      	ldr	r1, [pc, #88]	; (2e98 <_ZL7sync_fsP5FATFS+0x90>)
    2e40:	4d16      	ldr	r5, [pc, #88]	; (2e9c <_ZL7sync_fsP5FATFS+0x94>)
    2e42:	47a8      	blx	r5
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
    2e44:	238f      	movs	r3, #143	; 0x8f
    2e46:	009b      	lsls	r3, r3, #2
    2e48:	18e0      	adds	r0, r4, r3
    2e4a:	4915      	ldr	r1, [pc, #84]	; (2ea0 <_ZL7sync_fsP5FATFS+0x98>)
    2e4c:	47a8      	blx	r5
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
    2e4e:	2390      	movs	r3, #144	; 0x90
    2e50:	009b      	lsls	r3, r3, #2
    2e52:	18e0      	adds	r0, r4, r3
    2e54:	69a1      	ldr	r1, [r4, #24]
    2e56:	47a8      	blx	r5
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
    2e58:	2391      	movs	r3, #145	; 0x91
    2e5a:	009b      	lsls	r3, r3, #2
    2e5c:	18e0      	adds	r0, r4, r3
    2e5e:	6961      	ldr	r1, [r4, #20]
    2e60:	47a8      	blx	r5
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
    2e62:	6b62      	ldr	r2, [r4, #52]	; 0x34
    2e64:	3201      	adds	r2, #1
    2e66:	6462      	str	r2, [r4, #68]	; 0x44
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    2e68:	7860      	ldrb	r0, [r4, #1]
    2e6a:	1c31      	adds	r1, r6, #0
    2e6c:	2301      	movs	r3, #1
    2e6e:	4d0d      	ldr	r5, [pc, #52]	; (2ea4 <_ZL7sync_fsP5FATFS+0x9c>)
    2e70:	47a8      	blx	r5
			fs->fsi_flag = 0;
    2e72:	2300      	movs	r3, #0
    2e74:	7123      	strb	r3, [r4, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    2e76:	7860      	ldrb	r0, [r4, #1]
    2e78:	2100      	movs	r1, #0
    2e7a:	2200      	movs	r2, #0
    2e7c:	4b0a      	ldr	r3, [pc, #40]	; (2ea8 <_ZL7sync_fsP5FATFS+0xa0>)
    2e7e:	4798      	blx	r3
    2e80:	1e43      	subs	r3, r0, #1
    2e82:	4198      	sbcs	r0, r3
)
{
	FRESULT res;


	res = sync_window(fs);
    2e84:	b2c0      	uxtb	r0, r0
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
	}

	return res;
}
    2e86:	bd70      	pop	{r4, r5, r6, pc}
    2e88:	00002c71 	.word	0x00002c71
    2e8c:	00002af1 	.word	0x00002af1
    2e90:	00000256 	.word	0x00000256
    2e94:	00000257 	.word	0x00000257
    2e98:	41615252 	.word	0x41615252
    2e9c:	00002a95 	.word	0x00002a95
    2ea0:	61417272 	.word	0x61417272
    2ea4:	000029c1 	.word	0x000029c1
    2ea8:	000029ed 	.word	0x000029ed

00002eac <_ZL7put_fatP5FATFSmm>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
    2eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2eae:	464f      	mov	r7, r9
    2eb0:	4646      	mov	r6, r8
    2eb2:	b4c0      	push	{r6, r7}
    2eb4:	1c06      	adds	r6, r0, #0
    2eb6:	1c0d      	adds	r5, r1, #0
    2eb8:	1c17      	adds	r7, r2, #0
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
    2eba:	2402      	movs	r4, #2


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    2ebc:	2901      	cmp	r1, #1
    2ebe:	d800      	bhi.n	2ec2 <_ZL7put_fatP5FATFSmm+0x16>
    2ec0:	e08d      	b.n	2fde <_ZL7put_fatP5FATFSmm+0x132>
    2ec2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    2ec4:	4291      	cmp	r1, r2
    2ec6:	d300      	bcc.n	2eca <_ZL7put_fatP5FATFSmm+0x1e>
    2ec8:	e089      	b.n	2fde <_ZL7put_fatP5FATFSmm+0x132>
		switch (fs->fs_type) {
    2eca:	7803      	ldrb	r3, [r0, #0]
    2ecc:	2b02      	cmp	r3, #2
    2ece:	d04d      	beq.n	2f6c <_ZL7put_fatP5FATFSmm+0xc0>
    2ed0:	b2da      	uxtb	r2, r3
    2ed2:	2a02      	cmp	r2, #2
    2ed4:	d802      	bhi.n	2edc <_ZL7put_fatP5FATFSmm+0x30>
    2ed6:	2b01      	cmp	r3, #1
    2ed8:	d004      	beq.n	2ee4 <_ZL7put_fatP5FATFSmm+0x38>
    2eda:	e07f      	b.n	2fdc <_ZL7put_fatP5FATFSmm+0x130>
    2edc:	b2db      	uxtb	r3, r3
    2ede:	2b04      	cmp	r3, #4
    2ee0:	d959      	bls.n	2f96 <_ZL7put_fatP5FATFSmm+0xea>
    2ee2:	e07b      	b.n	2fdc <_ZL7put_fatP5FATFSmm+0x130>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
    2ee4:	084b      	lsrs	r3, r1, #1
    2ee6:	185b      	adds	r3, r3, r1
    2ee8:	4698      	mov	r8, r3
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2eea:	0a59      	lsrs	r1, r3, #9
    2eec:	6b83      	ldr	r3, [r0, #56]	; 0x38
    2eee:	18c9      	adds	r1, r1, r3
    2ef0:	4b3d      	ldr	r3, [pc, #244]	; (2fe8 <_ZL7put_fatP5FATFSmm+0x13c>)
    2ef2:	4798      	blx	r3
    2ef4:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
    2ef6:	d172      	bne.n	2fde <_ZL7put_fatP5FATFSmm+0x132>
			p = fs->win + bc++ % SS(fs);
    2ef8:	2201      	movs	r2, #1
    2efa:	4691      	mov	r9, r2
    2efc:	44c1      	add	r9, r8
    2efe:	4642      	mov	r2, r8
    2f00:	05d3      	lsls	r3, r2, #23
    2f02:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    2f04:	2201      	movs	r2, #1
    2f06:	4015      	ands	r5, r2
    2f08:	d00a      	beq.n	2f20 <_ZL7put_fatP5FATFSmm+0x74>
    2f0a:	18f2      	adds	r2, r6, r3
    2f0c:	3258      	adds	r2, #88	; 0x58
    2f0e:	7812      	ldrb	r2, [r2, #0]
    2f10:	210f      	movs	r1, #15
    2f12:	400a      	ands	r2, r1
    2f14:	21ff      	movs	r1, #255	; 0xff
    2f16:	4039      	ands	r1, r7
    2f18:	0109      	lsls	r1, r1, #4
    2f1a:	430a      	orrs	r2, r1
    2f1c:	b2d2      	uxtb	r2, r2
    2f1e:	e000      	b.n	2f22 <_ZL7put_fatP5FATFSmm+0x76>
    2f20:	b2fa      	uxtb	r2, r7
    2f22:	18f3      	adds	r3, r6, r3
    2f24:	3358      	adds	r3, #88	; 0x58
    2f26:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
    2f28:	2301      	movs	r3, #1
    2f2a:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2f2c:	464a      	mov	r2, r9
    2f2e:	0a53      	lsrs	r3, r2, #9
    2f30:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    2f32:	1899      	adds	r1, r3, r2
    2f34:	1c30      	adds	r0, r6, #0
    2f36:	4b2c      	ldr	r3, [pc, #176]	; (2fe8 <_ZL7put_fatP5FATFSmm+0x13c>)
    2f38:	4798      	blx	r3
    2f3a:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
    2f3c:	d14f      	bne.n	2fde <_ZL7put_fatP5FATFSmm+0x132>
			p = fs->win + bc % SS(fs);
    2f3e:	464a      	mov	r2, r9
    2f40:	05d3      	lsls	r3, r2, #23
    2f42:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2f44:	2d00      	cmp	r5, #0
    2f46:	d002      	beq.n	2f4e <_ZL7put_fatP5FATFSmm+0xa2>
    2f48:	093f      	lsrs	r7, r7, #4
    2f4a:	b2ff      	uxtb	r7, r7
    2f4c:	e008      	b.n	2f60 <_ZL7put_fatP5FATFSmm+0xb4>
    2f4e:	18f2      	adds	r2, r6, r3
    2f50:	3258      	adds	r2, #88	; 0x58
    2f52:	7811      	ldrb	r1, [r2, #0]
    2f54:	220f      	movs	r2, #15
    2f56:	4391      	bics	r1, r2
    2f58:	053f      	lsls	r7, r7, #20
    2f5a:	0f3a      	lsrs	r2, r7, #28
    2f5c:	1c0f      	adds	r7, r1, #0
    2f5e:	4317      	orrs	r7, r2
    2f60:	18f3      	adds	r3, r6, r3
    2f62:	3358      	adds	r3, #88	; 0x58
    2f64:	701f      	strb	r7, [r3, #0]
			fs->wflag = 1;
    2f66:	2301      	movs	r3, #1
    2f68:	70f3      	strb	r3, [r6, #3]
			break;
    2f6a:	e038      	b.n	2fde <_ZL7put_fatP5FATFSmm+0x132>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    2f6c:	0a09      	lsrs	r1, r1, #8
    2f6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    2f70:	18c9      	adds	r1, r1, r3
    2f72:	4b1d      	ldr	r3, [pc, #116]	; (2fe8 <_ZL7put_fatP5FATFSmm+0x13c>)
    2f74:	4798      	blx	r3
    2f76:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
    2f78:	d131      	bne.n	2fde <_ZL7put_fatP5FATFSmm+0x132>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
    2f7a:	006d      	lsls	r5, r5, #1
    2f7c:	23ff      	movs	r3, #255	; 0xff
    2f7e:	005b      	lsls	r3, r3, #1
    2f80:	401d      	ands	r5, r3

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2f82:	1973      	adds	r3, r6, r5
    2f84:	3358      	adds	r3, #88	; 0x58
    2f86:	701f      	strb	r7, [r3, #0]
			break;

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
    2f88:	3558      	adds	r5, #88	; 0x58
#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
	*ptr++ = (BYTE)val;
    2f8a:	1975      	adds	r5, r6, r5

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2f8c:	0a3f      	lsrs	r7, r7, #8
	*ptr++ = (BYTE)val;
    2f8e:	706f      	strb	r7, [r5, #1]

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
			fs->wflag = 1;
    2f90:	2301      	movs	r3, #1
    2f92:	70f3      	strb	r3, [r6, #3]
			break;
    2f94:	e023      	b.n	2fde <_ZL7put_fatP5FATFSmm+0x132>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    2f96:	09c9      	lsrs	r1, r1, #7
    2f98:	6b82      	ldr	r2, [r0, #56]	; 0x38
    2f9a:	1889      	adds	r1, r1, r2
    2f9c:	4b12      	ldr	r3, [pc, #72]	; (2fe8 <_ZL7put_fatP5FATFSmm+0x13c>)
    2f9e:	4798      	blx	r3
    2fa0:	1e04      	subs	r4, r0, #0
			if (res != FR_OK) break;
    2fa2:	d11c      	bne.n	2fde <_ZL7put_fatP5FATFSmm+0x132>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
    2fa4:	7833      	ldrb	r3, [r6, #0]
    2fa6:	2b04      	cmp	r3, #4
    2fa8:	d00c      	beq.n	2fc4 <_ZL7put_fatP5FATFSmm+0x118>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    2faa:	013f      	lsls	r7, r7, #4
    2fac:	093f      	lsrs	r7, r7, #4
    2fae:	00a8      	lsls	r0, r5, #2
    2fb0:	23fe      	movs	r3, #254	; 0xfe
    2fb2:	005b      	lsls	r3, r3, #1
    2fb4:	4018      	ands	r0, r3
    2fb6:	3058      	adds	r0, #88	; 0x58
    2fb8:	1830      	adds	r0, r6, r0
    2fba:	4b0c      	ldr	r3, [pc, #48]	; (2fec <_ZL7put_fatP5FATFSmm+0x140>)
    2fbc:	4798      	blx	r3
    2fbe:	0f03      	lsrs	r3, r0, #28
    2fc0:	071b      	lsls	r3, r3, #28
    2fc2:	431f      	orrs	r7, r3
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
    2fc4:	00a8      	lsls	r0, r5, #2
    2fc6:	23fe      	movs	r3, #254	; 0xfe
    2fc8:	005b      	lsls	r3, r3, #1
    2fca:	4018      	ands	r0, r3
    2fcc:	3058      	adds	r0, #88	; 0x58
    2fce:	1830      	adds	r0, r6, r0
    2fd0:	1c39      	adds	r1, r7, #0
    2fd2:	4b07      	ldr	r3, [pc, #28]	; (2ff0 <_ZL7put_fatP5FATFSmm+0x144>)
    2fd4:	4798      	blx	r3
			fs->wflag = 1;
    2fd6:	2301      	movs	r3, #1
    2fd8:	70f3      	strb	r3, [r6, #3]
			break;
    2fda:	e000      	b.n	2fde <_ZL7put_fatP5FATFSmm+0x132>
	DWORD val		/* New value to be set to the entry */
)
{
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
    2fdc:	2402      	movs	r4, #2
			fs->wflag = 1;
			break;
		}
	}
	return res;
}
    2fde:	1c20      	adds	r0, r4, #0
    2fe0:	bc0c      	pop	{r2, r3}
    2fe2:	4690      	mov	r8, r2
    2fe4:	4699      	mov	r9, r3
    2fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fe8:	00002cd9 	.word	0x00002cd9
    2fec:	00002a2d 	.word	0x00002a2d
    2ff0:	00002a95 	.word	0x00002a95

00002ff4 <_ZL14fill_fat_chainP5_FDID>:

static
FRESULT fill_fat_chain (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
    2ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ff6:	1c06      	adds	r6, r0, #0
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
    2ff8:	79c3      	ldrb	r3, [r0, #7]
			res = put_fat(obj->fs, cl, cl + 1);
			if (res != FR_OK) return res;
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
	}
	return FR_OK;
    2ffa:	2000      	movs	r0, #0
)
{
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
    2ffc:	2b03      	cmp	r3, #3
    2ffe:	d113      	bne.n	3028 <_ZL14fill_fat_chainP5_FDID+0x34>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
    3000:	68b1      	ldr	r1, [r6, #8]
    3002:	69b4      	ldr	r4, [r6, #24]
    3004:	2c00      	cmp	r4, #0
    3006:	d00b      	beq.n	3020 <_ZL14fill_fat_chainP5_FDID+0x2c>
			res = put_fat(obj->fs, cl, cl + 1);
    3008:	4f08      	ldr	r7, [pc, #32]	; (302c <_ZL14fill_fat_chainP5_FDID+0x38>)
    300a:	1c4d      	adds	r5, r1, #1
    300c:	6830      	ldr	r0, [r6, #0]
    300e:	1c2a      	adds	r2, r5, #0
    3010:	47b8      	blx	r7
			if (res != FR_OK) return res;
    3012:	2800      	cmp	r0, #0
    3014:	d108      	bne.n	3028 <_ZL14fill_fat_chainP5_FDID+0x34>
{
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
    3016:	3c01      	subs	r4, #1
    3018:	2c00      	cmp	r4, #0
    301a:	d001      	beq.n	3020 <_ZL14fill_fat_chainP5_FDID+0x2c>
    301c:	1c29      	adds	r1, r5, #0
    301e:	e7f4      	b.n	300a <_ZL14fill_fat_chainP5_FDID+0x16>
			res = put_fat(obj->fs, cl, cl + 1);
			if (res != FR_OK) return res;
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
    3020:	2300      	movs	r3, #0
    3022:	71f3      	strb	r3, [r6, #7]
	}
	return FR_OK;
    3024:	2000      	movs	r0, #0
    3026:	e7ff      	b.n	3028 <_ZL14fill_fat_chainP5_FDID+0x34>
}
    3028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	00002ead 	.word	0x00002ead

00003030 <_ZL8st_clustP5FATFSPhm>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3030:	768a      	strb	r2, [r1, #26]
    3032:	0a13      	lsrs	r3, r2, #8
	*ptr++ = (BYTE)val;
    3034:	76cb      	strb	r3, [r1, #27]
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    3036:	7803      	ldrb	r3, [r0, #0]
    3038:	2b03      	cmp	r3, #3
    303a:	d103      	bne.n	3044 <_ZL8st_clustP5FATFSPhm+0x14>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    303c:	0c12      	lsrs	r2, r2, #16

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    303e:	750a      	strb	r2, [r1, #20]
    3040:	1212      	asrs	r2, r2, #8
	*ptr++ = (BYTE)val;
    3042:	754a      	strb	r2, [r1, #21]
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
    3044:	4770      	bx	lr
    3046:	46c0      	nop			; (mov r8, r8)

00003048 <_ZL12get_fileinfoP3DIRP7FILINFO>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
    3048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    304a:	465f      	mov	r7, fp
    304c:	4656      	mov	r6, sl
    304e:	464d      	mov	r5, r9
    3050:	4644      	mov	r4, r8
    3052:	b4f0      	push	{r4, r5, r6, r7}
    3054:	1c06      	adds	r6, r0, #0
    3056:	1c0d      	adds	r5, r1, #0
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
    3058:	6807      	ldr	r7, [r0, #0]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
    305a:	2300      	movs	r3, #0
    305c:	768b      	strb	r3, [r1, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
    305e:	6b00      	ldr	r0, [r0, #48]	; 0x30
    3060:	2800      	cmp	r0, #0
    3062:	d100      	bne.n	3066 <_ZL12get_fileinfoP3DIRP7FILINFO+0x1e>
    3064:	e0bd      	b.n	31e2 <_ZL12get_fileinfoP3DIRP7FILINFO+0x19a>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    3066:	783b      	ldrb	r3, [r7, #0]
    3068:	2b04      	cmp	r3, #4
    306a:	d143      	bne.n	30f4 <_ZL12get_fileinfoP3DIRP7FILINFO+0xac>
		get_xdir_info(fs->dirbuf, fno);
    306c:	693f      	ldr	r7, [r7, #16]
		}
	} else {
		di = 0;	/* Buffer overflow and inaccessible object */
	}
#else
	for (si = SZDIRE * 2, di = nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
    306e:	2323      	movs	r3, #35	; 0x23
    3070:	5cfb      	ldrb	r3, [r7, r3]
    3072:	2b00      	cmp	r3, #0
    3074:	d020      	beq.n	30b8 <_ZL12get_fileinfoP3DIRP7FILINFO+0x70>
    3076:	2400      	movs	r4, #0
    3078:	2640      	movs	r6, #64	; 0x40
		if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
    307a:	221f      	movs	r2, #31
    307c:	4691      	mov	r9, r2
		w = ld_word(dirb + si);				/* Get a character */
		w = ff_convert(w, 0);				/* Unicode -> OEM */
    307e:	4b5c      	ldr	r3, [pc, #368]	; (31f0 <_ZL12get_fileinfoP3DIRP7FILINFO+0x1a8>)
    3080:	4698      	mov	r8, r3
		}
	} else {
		di = 0;	/* Buffer overflow and inaccessible object */
	}
#else
	for (si = SZDIRE * 2, di = nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
    3082:	2023      	movs	r0, #35	; 0x23
    3084:	4682      	mov	sl, r0
		if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
    3086:	464a      	mov	r2, r9
    3088:	4232      	tst	r2, r6
    308a:	d100      	bne.n	308e <_ZL12get_fileinfoP3DIRP7FILINFO+0x46>
    308c:	3602      	adds	r6, #2
		w = ld_word(dirb + si);				/* Get a character */
    308e:	19bb      	adds	r3, r7, r6
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    3090:	7858      	ldrb	r0, [r3, #1]
    3092:	0200      	lsls	r0, r0, #8
    3094:	781b      	ldrb	r3, [r3, #0]
    3096:	4318      	orrs	r0, r3
	}
#else
	for (si = SZDIRE * 2, di = nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
		if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
		w = ld_word(dirb + si);				/* Get a character */
		w = ff_convert(w, 0);				/* Unicode -> OEM */
    3098:	2100      	movs	r1, #0
    309a:	47c0      	blx	r8
		if (w == 0) { di = 0; break; }		/* Could not be converted and inaccessible object */
    309c:	2800      	cmp	r0, #0
    309e:	d00b      	beq.n	30b8 <_ZL12get_fileinfoP3DIRP7FILINFO+0x70>
		if (_DF1S && w >= 0x100) {			/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);
		}
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow and inaccessible object */
    30a0:	2cff      	cmp	r4, #255	; 0xff
    30a2:	d009      	beq.n	30b8 <_ZL12get_fileinfoP3DIRP7FILINFO+0x70>
		fno->fname[di++] = (char)w;
    30a4:	3401      	adds	r4, #1
    30a6:	192b      	adds	r3, r5, r4
    30a8:	7658      	strb	r0, [r3, #25]
		}
	} else {
		di = 0;	/* Buffer overflow and inaccessible object */
	}
#else
	for (si = SZDIRE * 2, di = nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
    30aa:	3602      	adds	r6, #2
    30ac:	4650      	mov	r0, sl
    30ae:	5c3b      	ldrb	r3, [r7, r0]
    30b0:	429c      	cmp	r4, r3
    30b2:	d3e8      	bcc.n	3086 <_ZL12get_fileinfoP3DIRP7FILINFO+0x3e>
		}
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow and inaccessible object */
		fno->fname[di++] = (char)w;
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object? */
    30b4:	2c00      	cmp	r4, #0
    30b6:	d102      	bne.n	30be <_ZL12get_fileinfoP3DIRP7FILINFO+0x76>
    30b8:	233f      	movs	r3, #63	; 0x3f
    30ba:	76ab      	strb	r3, [r5, #26]
    30bc:	2401      	movs	r4, #1
	fno->fname[di] = 0;						/* Terminate file name */
    30be:	192c      	adds	r4, r5, r4
    30c0:	2300      	movs	r3, #0
    30c2:	76a3      	strb	r3, [r4, #26]

	fno->altname[0] = 0;							/* No SFN */
    30c4:	736b      	strb	r3, [r5, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
    30c6:	793b      	ldrb	r3, [r7, #4]
    30c8:	732b      	strb	r3, [r5, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
    30ca:	2000      	movs	r0, #0
    30cc:	2100      	movs	r1, #0
    30ce:	06da      	lsls	r2, r3, #27
    30d0:	d403      	bmi.n	30da <_ZL12get_fileinfoP3DIRP7FILINFO+0x92>
    30d2:	1c38      	adds	r0, r7, #0
    30d4:	3038      	adds	r0, #56	; 0x38
    30d6:	4b47      	ldr	r3, [pc, #284]	; (31f4 <_ZL12get_fileinfoP3DIRP7FILINFO+0x1ac>)
    30d8:	4798      	blx	r3
    30da:	6028      	str	r0, [r5, #0]
    30dc:	6069      	str	r1, [r5, #4]
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    30de:	7b7b      	ldrb	r3, [r7, #13]
    30e0:	021b      	lsls	r3, r3, #8
    30e2:	7b3a      	ldrb	r2, [r7, #12]
    30e4:	4313      	orrs	r3, r2
	fno->fname[di] = 0;						/* Terminate file name */

	fno->altname[0] = 0;							/* No SFN */
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
    30e6:	816b      	strh	r3, [r5, #10]
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    30e8:	7bfb      	ldrb	r3, [r7, #15]
    30ea:	021b      	lsls	r3, r3, #8
    30ec:	7bba      	ldrb	r2, [r7, #14]
    30ee:	4313      	orrs	r3, r2

	fno->altname[0] = 0;							/* No SFN */
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
    30f0:	812b      	strh	r3, [r5, #8]
    30f2:	e076      	b.n	31e2 <_ZL12get_fileinfoP3DIRP7FILINFO+0x19a>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
    30f4:	6c73      	ldr	r3, [r6, #68]	; 0x44
    30f6:	3301      	adds	r3, #1
    30f8:	d01d      	beq.n	3136 <_ZL12get_fileinfoP3DIRP7FILINFO+0xee>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
    30fa:	68fa      	ldr	r2, [r7, #12]
    30fc:	8810      	ldrh	r0, [r2, #0]
    30fe:	2800      	cmp	r0, #0
    3100:	d011      	beq.n	3126 <_ZL12get_fileinfoP3DIRP7FILINFO+0xde>
    3102:	2400      	movs	r4, #0
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
    3104:	4b3a      	ldr	r3, [pc, #232]	; (31f0 <_ZL12get_fileinfoP3DIRP7FILINFO+0x1a8>)
    3106:	4698      	mov	r8, r3
    3108:	2100      	movs	r1, #0
    310a:	47c0      	blx	r8
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
    310c:	2800      	cmp	r0, #0
    310e:	d00c      	beq.n	312a <_ZL12get_fileinfoP3DIRP7FILINFO+0xe2>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
    3110:	2cff      	cmp	r4, #255	; 0xff
    3112:	d00c      	beq.n	312e <_ZL12get_fileinfoP3DIRP7FILINFO+0xe6>
				fno->fname[i++] = (TCHAR)w;
    3114:	3401      	adds	r4, #1
    3116:	192b      	adds	r3, r5, r4
    3118:	7658      	strb	r0, [r3, #25]
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
    311a:	0063      	lsls	r3, r4, #1
    311c:	68fa      	ldr	r2, [r7, #12]
    311e:	5a98      	ldrh	r0, [r3, r2]
    3120:	2800      	cmp	r0, #0
    3122:	d1f1      	bne.n	3108 <_ZL12get_fileinfoP3DIRP7FILINFO+0xc0>
    3124:	e004      	b.n	3130 <_ZL12get_fileinfoP3DIRP7FILINFO+0xe8>
    3126:	2400      	movs	r4, #0
    3128:	e002      	b.n	3130 <_ZL12get_fileinfoP3DIRP7FILINFO+0xe8>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
    312a:	2400      	movs	r4, #0
    312c:	e000      	b.n	3130 <_ZL12get_fileinfoP3DIRP7FILINFO+0xe8>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
    312e:	2400      	movs	r4, #0
				fno->fname[i++] = (TCHAR)w;
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
    3130:	192c      	adds	r4, r5, r4
    3132:	2300      	movs	r3, #0
    3134:	76a3      	strb	r3, [r4, #26]
		}
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
    3136:	7eac      	ldrb	r4, [r5, #26]
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
		}
	}

	i = j = 0;
    3138:	2100      	movs	r1, #0
    313a:	2300      	movs	r3, #0
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
		if (!lfv) {
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
    313c:	2708      	movs	r7, #8
    313e:	46bc      	mov	ip, r7
    3140:	2010      	movs	r0, #16
    3142:	4680      	mov	r8, r0
		c = (TCHAR)dp->dir[i++];
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) {						/* Insert a . if extension is exist */
			if (!lfv) fno->fname[j] = '.';
			fno->altname[j++] = '.';
    3144:	222e      	movs	r2, #46	; 0x2e
    3146:	4691      	mov	r9, r2
	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
    3148:	27e5      	movs	r7, #229	; 0xe5
    314a:	46bb      	mov	fp, r7
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
    314c:	1c5a      	adds	r2, r3, #1
    314e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    3150:	5cc3      	ldrb	r3, [r0, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
    3152:	2b20      	cmp	r3, #32
    3154:	d024      	beq.n	31a0 <_ZL12get_fileinfoP3DIRP7FILINFO+0x158>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
    3156:	2b05      	cmp	r3, #5
    3158:	d100      	bne.n	315c <_ZL12get_fileinfoP3DIRP7FILINFO+0x114>
    315a:	465b      	mov	r3, fp
		if (i == 9) {						/* Insert a . if extension is exist */
    315c:	2a09      	cmp	r2, #9
    315e:	d108      	bne.n	3172 <_ZL12get_fileinfoP3DIRP7FILINFO+0x12a>
			if (!lfv) fno->fname[j] = '.';
    3160:	2c00      	cmp	r4, #0
    3162:	d102      	bne.n	316a <_ZL12get_fileinfoP3DIRP7FILINFO+0x122>
    3164:	186f      	adds	r7, r5, r1
    3166:	4648      	mov	r0, r9
    3168:	76b8      	strb	r0, [r7, #26]
			fno->altname[j++] = '.';
    316a:	186f      	adds	r7, r5, r1
    316c:	4648      	mov	r0, r9
    316e:	7378      	strb	r0, [r7, #13]
    3170:	3101      	adds	r1, #1
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
    3172:	1868      	adds	r0, r5, r1
    3174:	7343      	strb	r3, [r0, #13]
		if (!lfv) {
    3176:	2c00      	cmp	r4, #0
    3178:	d111      	bne.n	319e <_ZL12get_fileinfoP3DIRP7FILINFO+0x156>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
    317a:	1c18      	adds	r0, r3, #0
    317c:	3841      	subs	r0, #65	; 0x41
    317e:	2819      	cmp	r0, #25
    3180:	d80b      	bhi.n	319a <_ZL12get_fileinfoP3DIRP7FILINFO+0x152>
    3182:	6b77      	ldr	r7, [r6, #52]	; 0x34
    3184:	7b3f      	ldrb	r7, [r7, #12]
    3186:	46ba      	mov	sl, r7
    3188:	4660      	mov	r0, ip
    318a:	2a08      	cmp	r2, #8
    318c:	d900      	bls.n	3190 <_ZL12get_fileinfoP3DIRP7FILINFO+0x148>
    318e:	4640      	mov	r0, r8
    3190:	4657      	mov	r7, sl
    3192:	4207      	tst	r7, r0
    3194:	d001      	beq.n	319a <_ZL12get_fileinfoP3DIRP7FILINFO+0x152>
				c += 0x20;			/* To lower */
    3196:	3320      	adds	r3, #32
    3198:	b2db      	uxtb	r3, r3
			}
			fno->fname[j] = c;
    319a:	1868      	adds	r0, r5, r1
    319c:	7683      	strb	r3, [r0, #26]
		}
		j++;
    319e:	3101      	adds	r1, #1
		}
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
	while (i < 11) {		/* Copy name body and extension */
    31a0:	2a0b      	cmp	r2, #11
    31a2:	d001      	beq.n	31a8 <_ZL12get_fileinfoP3DIRP7FILINFO+0x160>
    31a4:	1c13      	adds	r3, r2, #0
    31a6:	e7d1      	b.n	314c <_ZL12get_fileinfoP3DIRP7FILINFO+0x104>
			}
			fno->fname[j] = c;
		}
		j++;
	}
	if (!lfv) {
    31a8:	2c00      	cmp	r4, #0
    31aa:	d108      	bne.n	31be <_ZL12get_fileinfoP3DIRP7FILINFO+0x176>
		fno->fname[j] = 0;
    31ac:	186b      	adds	r3, r5, r1
    31ae:	2200      	movs	r2, #0
    31b0:	769a      	strb	r2, [r3, #26]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
    31b2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    31b4:	7b03      	ldrb	r3, [r0, #12]
    31b6:	1e5a      	subs	r2, r3, #1
    31b8:	4193      	sbcs	r3, r2
    31ba:	425b      	negs	r3, r3
    31bc:	4019      	ands	r1, r3
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
    31be:	1869      	adds	r1, r5, r1
    31c0:	2700      	movs	r7, #0
    31c2:	734f      	strb	r7, [r1, #13]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
    31c4:	6b72      	ldr	r2, [r6, #52]	; 0x34
    31c6:	7ad3      	ldrb	r3, [r2, #11]
    31c8:	732b      	strb	r3, [r5, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
    31ca:	6b70      	ldr	r0, [r6, #52]	; 0x34
    31cc:	301c      	adds	r0, #28
    31ce:	4c0a      	ldr	r4, [pc, #40]	; (31f8 <_ZL12get_fileinfoP3DIRP7FILINFO+0x1b0>)
    31d0:	47a0      	blx	r4
    31d2:	6028      	str	r0, [r5, #0]
    31d4:	606f      	str	r7, [r5, #4]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
    31d6:	6b70      	ldr	r0, [r6, #52]	; 0x34
    31d8:	3016      	adds	r0, #22
    31da:	47a0      	blx	r4
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
    31dc:	8168      	strh	r0, [r5, #10]
    31de:	0c00      	lsrs	r0, r0, #16
    31e0:	8128      	strh	r0, [r5, #8]
}
    31e2:	bc3c      	pop	{r2, r3, r4, r5}
    31e4:	4690      	mov	r8, r2
    31e6:	4699      	mov	r9, r3
    31e8:	46a2      	mov	sl, r4
    31ea:	46ab      	mov	fp, r5
    31ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	00005659 	.word	0x00005659
    31f4:	00002a45 	.word	0x00002a45
    31f8:	00002a2d 	.word	0x00002a2d

000031fc <_ZL7get_fatP5_FDIDm>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
    31fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31fe:	1c0c      	adds	r4, r1, #0
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
    3200:	6806      	ldr	r6, [r0, #0]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    3202:	2901      	cmp	r1, #1
    3204:	d800      	bhi.n	3208 <_ZL7get_fatP5_FDIDm+0xc>
    3206:	e099      	b.n	333c <_ZL7get_fatP5_FDIDm+0x140>
		val = 1;	/* Internal error */
    3208:	2101      	movs	r1, #1
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    320a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    320c:	4294      	cmp	r4, r2
    320e:	d300      	bcc.n	3212 <_ZL7get_fatP5_FDIDm+0x16>
    3210:	e0a8      	b.n	3364 <_ZL7get_fatP5_FDIDm+0x168>
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
    3212:	7833      	ldrb	r3, [r6, #0]
    3214:	2b02      	cmp	r3, #2
    3216:	d031      	beq.n	327c <_ZL7get_fatP5_FDIDm+0x80>
    3218:	b2da      	uxtb	r2, r3
    321a:	2a02      	cmp	r2, #2
    321c:	d802      	bhi.n	3224 <_ZL7get_fatP5_FDIDm+0x28>
    321e:	2b01      	cmp	r3, #1
    3220:	d005      	beq.n	322e <_ZL7get_fatP5_FDIDm+0x32>
    3222:	e08d      	b.n	3340 <_ZL7get_fatP5_FDIDm+0x144>
    3224:	2b03      	cmp	r3, #3
    3226:	d03e      	beq.n	32a6 <_ZL7get_fatP5_FDIDm+0xaa>
    3228:	2b04      	cmp	r3, #4
    322a:	d04f      	beq.n	32cc <_ZL7get_fatP5_FDIDm+0xd0>
    322c:	e088      	b.n	3340 <_ZL7get_fatP5_FDIDm+0x144>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    322e:	0865      	lsrs	r5, r4, #1
    3230:	192d      	adds	r5, r5, r4
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    3232:	0a69      	lsrs	r1, r5, #9
    3234:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    3236:	18c9      	adds	r1, r1, r3
    3238:	1c30      	adds	r0, r6, #0
    323a:	4b4b      	ldr	r3, [pc, #300]	; (3368 <_ZL7get_fatP5_FDIDm+0x16c>)
    323c:	4798      	blx	r3
    323e:	2800      	cmp	r0, #0
    3240:	d000      	beq.n	3244 <_ZL7get_fatP5_FDIDm+0x48>
    3242:	e07f      	b.n	3344 <_ZL7get_fatP5_FDIDm+0x148>
			wc = fs->win[bc++ % SS(fs)];
    3244:	1c6f      	adds	r7, r5, #1
    3246:	05eb      	lsls	r3, r5, #23
    3248:	0ddb      	lsrs	r3, r3, #23
    324a:	18f3      	adds	r3, r6, r3
    324c:	3358      	adds	r3, #88	; 0x58
    324e:	781d      	ldrb	r5, [r3, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    3250:	0a79      	lsrs	r1, r7, #9
    3252:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    3254:	1889      	adds	r1, r1, r2
    3256:	1c30      	adds	r0, r6, #0
    3258:	4b43      	ldr	r3, [pc, #268]	; (3368 <_ZL7get_fatP5_FDIDm+0x16c>)
    325a:	4798      	blx	r3
    325c:	2800      	cmp	r0, #0
    325e:	d174      	bne.n	334a <_ZL7get_fatP5_FDIDm+0x14e>
			wc |= fs->win[bc % SS(fs)] << 8;
    3260:	05ff      	lsls	r7, r7, #23
    3262:	0dff      	lsrs	r7, r7, #23
    3264:	19f6      	adds	r6, r6, r7
    3266:	3658      	adds	r6, #88	; 0x58
    3268:	7831      	ldrb	r1, [r6, #0]
    326a:	0209      	lsls	r1, r1, #8
    326c:	4329      	orrs	r1, r5
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    326e:	07e3      	lsls	r3, r4, #31
    3270:	d501      	bpl.n	3276 <_ZL7get_fatP5_FDIDm+0x7a>
    3272:	0909      	lsrs	r1, r1, #4
    3274:	e076      	b.n	3364 <_ZL7get_fatP5_FDIDm+0x168>
    3276:	0509      	lsls	r1, r1, #20
    3278:	0d09      	lsrs	r1, r1, #20
    327a:	e073      	b.n	3364 <_ZL7get_fatP5_FDIDm+0x168>
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    327c:	0a21      	lsrs	r1, r4, #8
    327e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    3280:	1889      	adds	r1, r1, r2
    3282:	1c30      	adds	r0, r6, #0
    3284:	4b38      	ldr	r3, [pc, #224]	; (3368 <_ZL7get_fatP5_FDIDm+0x16c>)
    3286:	4798      	blx	r3
    3288:	2800      	cmp	r0, #0
    328a:	d161      	bne.n	3350 <_ZL7get_fatP5_FDIDm+0x154>
			val = ld_word(fs->win + clst * 2 % SS(fs));
    328c:	0064      	lsls	r4, r4, #1
    328e:	23ff      	movs	r3, #255	; 0xff
    3290:	005b      	lsls	r3, r3, #1
    3292:	401c      	ands	r4, r3
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    3294:	1933      	adds	r3, r6, r4
    3296:	3358      	adds	r3, #88	; 0x58
    3298:	781b      	ldrb	r3, [r3, #0]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
			val = ld_word(fs->win + clst * 2 % SS(fs));
    329a:	3458      	adds	r4, #88	; 0x58
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    329c:	1936      	adds	r6, r6, r4
	rv = rv << 8 | ptr[0];
    329e:	7871      	ldrb	r1, [r6, #1]
    32a0:	0209      	lsls	r1, r1, #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
			val = ld_word(fs->win + clst * 2 % SS(fs));
    32a2:	4319      	orrs	r1, r3
			break;
    32a4:	e05e      	b.n	3364 <_ZL7get_fatP5_FDIDm+0x168>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    32a6:	09e1      	lsrs	r1, r4, #7
    32a8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    32aa:	18c9      	adds	r1, r1, r3
    32ac:	1c30      	adds	r0, r6, #0
    32ae:	4b2e      	ldr	r3, [pc, #184]	; (3368 <_ZL7get_fatP5_FDIDm+0x16c>)
    32b0:	4798      	blx	r3
    32b2:	2800      	cmp	r0, #0
    32b4:	d14f      	bne.n	3356 <_ZL7get_fatP5_FDIDm+0x15a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
    32b6:	00a4      	lsls	r4, r4, #2
    32b8:	20fe      	movs	r0, #254	; 0xfe
    32ba:	0040      	lsls	r0, r0, #1
    32bc:	4020      	ands	r0, r4
    32be:	3058      	adds	r0, #88	; 0x58
    32c0:	1830      	adds	r0, r6, r0
    32c2:	4b2a      	ldr	r3, [pc, #168]	; (336c <_ZL7get_fatP5_FDIDm+0x170>)
    32c4:	4798      	blx	r3
    32c6:	0101      	lsls	r1, r0, #4
    32c8:	0909      	lsrs	r1, r1, #4
			break;
    32ca:	e04b      	b.n	3364 <_ZL7get_fatP5_FDIDm+0x168>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
    32cc:	6902      	ldr	r2, [r0, #16]
    32ce:	6943      	ldr	r3, [r0, #20]
    32d0:	1c15      	adds	r5, r2, #0
    32d2:	431d      	orrs	r5, r3
				}
			}
			/* go next */
#endif
		default:
			val = 1;	/* Internal error */
    32d4:	2101      	movs	r1, #1
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
			break;
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
    32d6:	2d00      	cmp	r5, #0
    32d8:	d044      	beq.n	3364 <_ZL7get_fatP5_FDIDm+0x168>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
    32da:	6881      	ldr	r1, [r0, #8]
    32dc:	1a65      	subs	r5, r4, r1
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
    32de:	8971      	ldrh	r1, [r6, #10]
    32e0:	468c      	mov	ip, r1

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
    32e2:	79c7      	ldrb	r7, [r0, #7]
    32e4:	2f02      	cmp	r7, #2
    32e6:	d110      	bne.n	330a <_ZL7get_fatP5_FDIDm+0x10e>
			break;
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
    32e8:	2001      	movs	r0, #1
    32ea:	4240      	negs	r0, r0
    32ec:	17c1      	asrs	r1, r0, #31
    32ee:	1812      	adds	r2, r2, r0
    32f0:	414b      	adcs	r3, r1
    32f2:	05db      	lsls	r3, r3, #23
    32f4:	0a50      	lsrs	r0, r2, #9
    32f6:	4318      	orrs	r0, r3
    32f8:	4661      	mov	r1, ip
    32fa:	4b1d      	ldr	r3, [pc, #116]	; (3370 <_ZL7get_fatP5_FDIDm+0x174>)
    32fc:	4798      	blx	r3
				}
			}
			/* go next */
#endif
		default:
			val = 1;	/* Internal error */
    32fe:	2101      	movs	r1, #1
			if (obj->objsize) {
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
					if (cofs <= clen) {
    3300:	4285      	cmp	r5, r0
    3302:	d82f      	bhi.n	3364 <_ZL7get_fatP5_FDIDm+0x168>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
    3304:	d02a      	beq.n	335c <_ZL7get_fatP5_FDIDm+0x160>
    3306:	1c61      	adds	r1, r4, #1
    3308:	e02c      	b.n	3364 <_ZL7get_fatP5_FDIDm+0x168>
						break;
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the contiguous part? */
    330a:	2f03      	cmp	r7, #3
    330c:	d103      	bne.n	3316 <_ZL7get_fatP5_FDIDm+0x11a>
    330e:	6983      	ldr	r3, [r0, #24]
					val = clst + 1; 	/* Generate the value */
    3310:	1c61      	adds	r1, r4, #1
					if (cofs <= clen) {
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
						break;
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the contiguous part? */
    3312:	429d      	cmp	r5, r3
    3314:	d326      	bcc.n	3364 <_ZL7get_fatP5_FDIDm+0x168>
					val = clst + 1; 	/* Generate the value */
					break;
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
					if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    3316:	09e3      	lsrs	r3, r4, #7
    3318:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    331a:	1899      	adds	r1, r3, r2
    331c:	1c30      	adds	r0, r6, #0
    331e:	4b12      	ldr	r3, [pc, #72]	; (3368 <_ZL7get_fatP5_FDIDm+0x16c>)
    3320:	4798      	blx	r3
    3322:	2800      	cmp	r0, #0
    3324:	d11c      	bne.n	3360 <_ZL7get_fatP5_FDIDm+0x164>
					val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
    3326:	00a0      	lsls	r0, r4, #2
    3328:	23fe      	movs	r3, #254	; 0xfe
    332a:	005b      	lsls	r3, r3, #1
    332c:	4018      	ands	r0, r3
    332e:	3058      	adds	r0, #88	; 0x58
    3330:	1830      	adds	r0, r6, r0
    3332:	4b0e      	ldr	r3, [pc, #56]	; (336c <_ZL7get_fatP5_FDIDm+0x170>)
    3334:	4798      	blx	r3
    3336:	0041      	lsls	r1, r0, #1
    3338:	0849      	lsrs	r1, r1, #1
					break;
    333a:	e013      	b.n	3364 <_ZL7get_fatP5_FDIDm+0x168>
	DWORD val;
	FATFS *fs = obj->fs;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */
    333c:	2101      	movs	r1, #1
    333e:	e011      	b.n	3364 <_ZL7get_fatP5_FDIDm+0x168>
				}
			}
			/* go next */
#endif
		default:
			val = 1;	/* Internal error */
    3340:	2101      	movs	r1, #1
    3342:	e00f      	b.n	3364 <_ZL7get_fatP5_FDIDm+0x168>

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    3344:	2101      	movs	r1, #1
    3346:	4249      	negs	r1, r1
    3348:	e00c      	b.n	3364 <_ZL7get_fatP5_FDIDm+0x168>
    334a:	2101      	movs	r1, #1
    334c:	4249      	negs	r1, r1
    334e:	e009      	b.n	3364 <_ZL7get_fatP5_FDIDm+0x168>
    3350:	2101      	movs	r1, #1
    3352:	4249      	negs	r1, r1
    3354:	e006      	b.n	3364 <_ZL7get_fatP5_FDIDm+0x168>
    3356:	2101      	movs	r1, #1
    3358:	4249      	negs	r1, r1
    335a:	e003      	b.n	3364 <_ZL7get_fatP5_FDIDm+0x168>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
					if (cofs <= clen) {
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
    335c:	4905      	ldr	r1, [pc, #20]	; (3374 <_ZL7get_fatP5_FDIDm+0x178>)
    335e:	e001      	b.n	3364 <_ZL7get_fatP5_FDIDm+0x168>

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    3360:	2101      	movs	r1, #1
    3362:	4249      	negs	r1, r1
			val = 1;	/* Internal error */
		}
	}

	return val;
}
    3364:	1c08      	adds	r0, r1, #0
    3366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3368:	00002cd9 	.word	0x00002cd9
    336c:	00002a2d 	.word	0x00002a2d
    3370:	00006461 	.word	0x00006461
    3374:	7fffffff 	.word	0x7fffffff

00003378 <_ZL12create_chainP5_FDIDm>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
    3378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    337a:	465f      	mov	r7, fp
    337c:	4656      	mov	r6, sl
    337e:	464d      	mov	r5, r9
    3380:	4644      	mov	r4, r8
    3382:	b4f0      	push	{r4, r5, r6, r7}
    3384:	4683      	mov	fp, r0
    3386:	4688      	mov	r8, r1
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
    3388:	6805      	ldr	r5, [r0, #0]


	if (clst == 0) {	/* Create a new chain */
    338a:	2900      	cmp	r1, #0
    338c:	d106      	bne.n	339c <_ZL12create_chainP5_FDIDm+0x24>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
    338e:	696c      	ldr	r4, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    3390:	2c00      	cmp	r4, #0
    3392:	d013      	beq.n	33bc <_ZL12create_chainP5_FDIDm+0x44>
    3394:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    3396:	4294      	cmp	r4, r2
    3398:	d212      	bcs.n	33c0 <_ZL12create_chainP5_FDIDm+0x48>
    339a:	e012      	b.n	33c2 <_ZL12create_chainP5_FDIDm+0x4a>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
    339c:	4658      	mov	r0, fp
    339e:	4641      	mov	r1, r8
    33a0:	4b6b      	ldr	r3, [pc, #428]	; (3550 <_ZL12create_chainP5_FDIDm+0x1d8>)
    33a2:	4798      	blx	r3
    33a4:	1e03      	subs	r3, r0, #0
		if (cs < 2) return 1;				/* Invalid value */
    33a6:	2b01      	cmp	r3, #1
    33a8:	d800      	bhi.n	33ac <_ZL12create_chainP5_FDIDm+0x34>
    33aa:	e0ba      	b.n	3522 <_ZL12create_chainP5_FDIDm+0x1aa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    33ac:	1c42      	adds	r2, r0, #1
    33ae:	d100      	bne.n	33b2 <_ZL12create_chainP5_FDIDm+0x3a>
    33b0:	e0b9      	b.n	3526 <_ZL12create_chainP5_FDIDm+0x1ae>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    33b2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
		scl = clst;
    33b4:	4644      	mov	r4, r8
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
		if (cs < 2) return 1;				/* Invalid value */
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    33b6:	4293      	cmp	r3, r2
    33b8:	d203      	bcs.n	33c2 <_ZL12create_chainP5_FDIDm+0x4a>
    33ba:	e0c2      	b.n	3542 <_ZL12create_chainP5_FDIDm+0x1ca>
	FATFS *fs = obj->fs;


	if (clst == 0) {	/* Create a new chain */
		scl = fs->last_clst;				/* Get suggested cluster to start from */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    33bc:	2401      	movs	r4, #1
    33be:	e000      	b.n	33c2 <_ZL12create_chainP5_FDIDm+0x4a>
    33c0:	2401      	movs	r4, #1
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    33c2:	782b      	ldrb	r3, [r5, #0]
    33c4:	1c26      	adds	r6, r4, #0
    33c6:	2b04      	cmp	r3, #4
    33c8:	d167      	bne.n	349a <_ZL12create_chainP5_FDIDm+0x122>
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
    33ca:	1ea6      	subs	r6, r4, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
    33cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    33ce:	3b02      	subs	r3, #2
    33d0:	429e      	cmp	r6, r3
    33d2:	419b      	sbcs	r3, r3
    33d4:	401e      	ands	r6, r3
	scl = val = clst; ctr = 0;
    33d6:	1c37      	adds	r7, r6, #0
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
    33d8:	0b3b      	lsrs	r3, r7, #12
    33da:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    33dc:	1899      	adds	r1, r3, r2
    33de:	1c28      	adds	r0, r5, #0
    33e0:	4b5c      	ldr	r3, [pc, #368]	; (3554 <_ZL12create_chainP5_FDIDm+0x1dc>)
    33e2:	4798      	blx	r3
    33e4:	2800      	cmp	r0, #0
    33e6:	d000      	beq.n	33ea <_ZL12create_chainP5_FDIDm+0x72>
    33e8:	e0a7      	b.n	353a <_ZL12create_chainP5_FDIDm+0x1c2>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
    33ea:	0539      	lsls	r1, r7, #20
    33ec:	0dc9      	lsrs	r1, r1, #23
    33ee:	2207      	movs	r2, #7
    33f0:	403a      	ands	r2, r7
    33f2:	2301      	movs	r3, #1
    33f4:	4093      	lsls	r3, r2
    33f6:	b2da      	uxtb	r2, r3
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
    33f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    33fa:	4699      	mov	r9, r3
    33fc:	2302      	movs	r3, #2
    33fe:	425b      	negs	r3, r3
    3400:	4499      	add	r9, r3
					val = 0; bm = 0; i = 4096;
    3402:	2300      	movs	r3, #0
    3404:	469c      	mov	ip, r3
    3406:	2380      	movs	r3, #128	; 0x80
    3408:	015b      	lsls	r3, r3, #5
    340a:	469a      	mov	sl, r3
    340c:	464b      	mov	r3, r9
    340e:	46a1      	mov	r9, r4
    3410:	1c34      	adds	r4, r6, #0
    3412:	1c1e      	adds	r6, r3, #0
    3414:	e001      	b.n	341a <_ZL12create_chainP5_FDIDm+0xa2>
				} else {
					scl = val; ctr = 0;		/* Encountered a live cluster, restart to scan */
				}
				if (val == clst) return 0;	/* All cluster scanned? */
			} while (bm);
			bm = 1;
    3416:	2201      	movs	r2, #1
    3418:	1c1f      	adds	r7, r3, #0
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
    341a:	186b      	adds	r3, r5, r1
    341c:	3358      	adds	r3, #88	; 0x58
    341e:	7818      	ldrb	r0, [r3, #0]
    3420:	4010      	ands	r0, r2
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
    3422:	1c7b      	adds	r3, r7, #1
    3424:	42b3      	cmp	r3, r6
    3426:	d202      	bcs.n	342e <_ZL12create_chainP5_FDIDm+0xb6>
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
    3428:	0052      	lsls	r2, r2, #1
    342a:	b2d2      	uxtb	r2, r2
    342c:	e002      	b.n	3434 <_ZL12create_chainP5_FDIDm+0xbc>
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
					val = 0; bm = 0; i = 4096;
    342e:	4663      	mov	r3, ip
    3430:	4651      	mov	r1, sl
    3432:	4662      	mov	r2, ip
				}
				if (!bv) {	/* Is it a free cluster? */
    3434:	2800      	cmp	r0, #0
    3436:	d106      	bne.n	3446 <_ZL12create_chainP5_FDIDm+0xce>
    3438:	464c      	mov	r4, r9
					if (++ctr == ncl) return scl + 2;	/* Check run length */
    343a:	1cbe      	adds	r6, r7, #2
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
    343c:	3701      	adds	r7, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
					val = 0; bm = 0; i = 4096;
				}
				if (!bv) {	/* Is it a free cluster? */
					if (++ctr == ncl) return scl + 2;	/* Check run length */
    343e:	1c30      	adds	r0, r6, #0
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
    3440:	3703      	adds	r7, #3
    3442:	d90c      	bls.n	345e <_ZL12create_chainP5_FDIDm+0xe6>
    3444:	e07d      	b.n	3542 <_ZL12create_chainP5_FDIDm+0x1ca>
				if (!bv) {	/* Is it a free cluster? */
					if (++ctr == ncl) return scl + 2;	/* Check run length */
				} else {
					scl = val; ctr = 0;		/* Encountered a live cluster, restart to scan */
				}
				if (val == clst) return 0;	/* All cluster scanned? */
    3446:	42a3      	cmp	r3, r4
    3448:	d07a      	beq.n	3540 <_ZL12create_chainP5_FDIDm+0x1c8>
	scl = val = clst; ctr = 0;
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
		do {
			do {
    344a:	2a00      	cmp	r2, #0
    344c:	d1e4      	bne.n	3418 <_ZL12create_chainP5_FDIDm+0xa0>
	if (clst >= fs->n_fatent - 2) clst = 0;
	scl = val = clst; ctr = 0;
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
		do {
    344e:	3101      	adds	r1, #1
    3450:	4a41      	ldr	r2, [pc, #260]	; (3558 <_ZL12create_chainP5_FDIDm+0x1e0>)
    3452:	4291      	cmp	r1, r2
    3454:	d9df      	bls.n	3416 <_ZL12create_chainP5_FDIDm+0x9e>
    3456:	1c26      	adds	r6, r4, #0
    3458:	464c      	mov	r4, r9
    345a:	1c1f      	adds	r7, r3, #0
    345c:	e7bc      	b.n	33d8 <_ZL12create_chainP5_FDIDm+0x60>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
    345e:	1c28      	adds	r0, r5, #0
    3460:	1c31      	adds	r1, r6, #0
    3462:	2201      	movs	r2, #1
    3464:	2301      	movs	r3, #1
    3466:	4f3d      	ldr	r7, [pc, #244]	; (355c <_ZL12create_chainP5_FDIDm+0x1e4>)
    3468:	47b8      	blx	r7
		if (res == FR_INT_ERR) return 1;
    346a:	2802      	cmp	r0, #2
    346c:	d05c      	beq.n	3528 <_ZL12create_chainP5_FDIDm+0x1b0>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
    346e:	2801      	cmp	r0, #1
    3470:	d05c      	beq.n	352c <_ZL12create_chainP5_FDIDm+0x1b4>
		if (clst == 0) {							/* Is it a new chain? */
    3472:	4643      	mov	r3, r8
    3474:	2b00      	cmp	r3, #0
    3476:	d103      	bne.n	3480 <_ZL12create_chainP5_FDIDm+0x108>
			obj->stat = 2;							/* Set status 'contiguous chain' */
    3478:	2302      	movs	r3, #2
    347a:	465a      	mov	r2, fp
    347c:	71d3      	strb	r3, [r2, #7]
    347e:	e022      	b.n	34c6 <_ZL12create_chainP5_FDIDm+0x14e>
		} else {									/* This is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
    3480:	465a      	mov	r2, fp
    3482:	79d3      	ldrb	r3, [r2, #7]
    3484:	2b02      	cmp	r3, #2
    3486:	d11e      	bne.n	34c6 <_ZL12create_chainP5_FDIDm+0x14e>
    3488:	1c63      	adds	r3, r4, #1
    348a:	42b3      	cmp	r3, r6
    348c:	d01b      	beq.n	34c6 <_ZL12create_chainP5_FDIDm+0x14e>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
    348e:	6893      	ldr	r3, [r2, #8]
    3490:	1ae4      	subs	r4, r4, r3
    3492:	6194      	str	r4, [r2, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
    3494:	2303      	movs	r3, #3
    3496:	71d3      	strb	r3, [r2, #7]
    3498:	e015      	b.n	34c6 <_ZL12create_chainP5_FDIDm+0x14e>
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
		for (;;) {
			ncl++;							/* Next cluster */
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
				ncl = 2;
    349a:	2202      	movs	r2, #2
    349c:	4692      	mov	sl, r2
				if (ncl > scl) return 0;	/* No free cluster */
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
    349e:	4f2c      	ldr	r7, [pc, #176]	; (3550 <_ZL12create_chainP5_FDIDm+0x1d8>)
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
		for (;;) {
			ncl++;							/* Next cluster */
    34a0:	3601      	adds	r6, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
    34a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    34a4:	429e      	cmp	r6, r3
    34a6:	d302      	bcc.n	34ae <_ZL12create_chainP5_FDIDm+0x136>
				ncl = 2;
				if (ncl > scl) return 0;	/* No free cluster */
    34a8:	2c01      	cmp	r4, #1
    34aa:	d942      	bls.n	3532 <_ZL12create_chainP5_FDIDm+0x1ba>
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
		for (;;) {
			ncl++;							/* Next cluster */
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
				ncl = 2;
    34ac:	4656      	mov	r6, sl
				if (ncl > scl) return 0;	/* No free cluster */
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
    34ae:	4658      	mov	r0, fp
    34b0:	1c31      	adds	r1, r6, #0
    34b2:	47b8      	blx	r7
			if (cs == 0) break;				/* Found a free cluster */
    34b4:	2800      	cmp	r0, #0
    34b6:	d006      	beq.n	34c6 <_ZL12create_chainP5_FDIDm+0x14e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
    34b8:	2801      	cmp	r0, #1
    34ba:	d042      	beq.n	3542 <_ZL12create_chainP5_FDIDm+0x1ca>
    34bc:	1c42      	adds	r2, r0, #1
    34be:	d040      	beq.n	3542 <_ZL12create_chainP5_FDIDm+0x1ca>
			if (ncl == scl) return 0;		/* No free cluster */
    34c0:	42a6      	cmp	r6, r4
    34c2:	d1ed      	bne.n	34a0 <_ZL12create_chainP5_FDIDm+0x128>
    34c4:	e037      	b.n	3536 <_ZL12create_chainP5_FDIDm+0x1be>
		}
	}

	if (_FS_EXFAT && fs->fs_type == FS_EXFAT && obj->stat == 2) {	/* Is it a contiguous chain? */
    34c6:	782b      	ldrb	r3, [r5, #0]
    34c8:	2b04      	cmp	r3, #4
    34ca:	d103      	bne.n	34d4 <_ZL12create_chainP5_FDIDm+0x15c>
    34cc:	465a      	mov	r2, fp
    34ce:	79d3      	ldrb	r3, [r2, #7]
    34d0:	2b02      	cmp	r3, #2
    34d2:	d011      	beq.n	34f8 <_ZL12create_chainP5_FDIDm+0x180>
		res = FR_OK;						/* FAT does not need to be written */
	} else {
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
    34d4:	1c28      	adds	r0, r5, #0
    34d6:	1c31      	adds	r1, r6, #0
    34d8:	2201      	movs	r2, #1
    34da:	4252      	negs	r2, r2
    34dc:	4b20      	ldr	r3, [pc, #128]	; (3560 <_ZL12create_chainP5_FDIDm+0x1e8>)
    34de:	4798      	blx	r3
		if (res == FR_OK && clst) {
    34e0:	2800      	cmp	r0, #0
    34e2:	d117      	bne.n	3514 <_ZL12create_chainP5_FDIDm+0x19c>
    34e4:	4643      	mov	r3, r8
    34e6:	2b00      	cmp	r3, #0
    34e8:	d006      	beq.n	34f8 <_ZL12create_chainP5_FDIDm+0x180>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
    34ea:	1c28      	adds	r0, r5, #0
    34ec:	4641      	mov	r1, r8
    34ee:	1c32      	adds	r2, r6, #0
    34f0:	4b1b      	ldr	r3, [pc, #108]	; (3560 <_ZL12create_chainP5_FDIDm+0x1e8>)
    34f2:	4798      	blx	r3
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    34f4:	2800      	cmp	r0, #0
    34f6:	d10d      	bne.n	3514 <_ZL12create_chainP5_FDIDm+0x19c>
		fs->last_clst = ncl;
    34f8:	616e      	str	r6, [r5, #20]
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
    34fa:	69ab      	ldr	r3, [r5, #24]
    34fc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    34fe:	3a02      	subs	r2, #2
    3500:	4293      	cmp	r3, r2
    3502:	d201      	bcs.n	3508 <_ZL12create_chainP5_FDIDm+0x190>
    3504:	3b01      	subs	r3, #1
    3506:	61ab      	str	r3, [r5, #24]
		fs->fsi_flag |= 1;
    3508:	792a      	ldrb	r2, [r5, #4]
    350a:	2301      	movs	r3, #1
    350c:	4313      	orrs	r3, r2
    350e:	712b      	strb	r3, [r5, #4]
    3510:	1c30      	adds	r0, r6, #0
    3512:	e016      	b.n	3542 <_ZL12create_chainP5_FDIDm+0x1ca>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
    3514:	3801      	subs	r0, #1
    3516:	4243      	negs	r3, r0
    3518:	4158      	adcs	r0, r3
    351a:	4240      	negs	r0, r0
    351c:	2301      	movs	r3, #1
    351e:	4318      	orrs	r0, r3
    3520:	e00f      	b.n	3542 <_ZL12create_chainP5_FDIDm+0x1ca>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
		if (cs < 2) return 1;				/* Invalid value */
    3522:	2001      	movs	r0, #1
    3524:	e00d      	b.n	3542 <_ZL12create_chainP5_FDIDm+0x1ca>
    3526:	e00c      	b.n	3542 <_ZL12create_chainP5_FDIDm+0x1ca>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
		if (res == FR_INT_ERR) return 1;
    3528:	2001      	movs	r0, #1
    352a:	e00a      	b.n	3542 <_ZL12create_chainP5_FDIDm+0x1ca>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
    352c:	2001      	movs	r0, #1
    352e:	4240      	negs	r0, r0
    3530:	e007      	b.n	3542 <_ZL12create_chainP5_FDIDm+0x1ca>
		ncl = scl;	/* Start cluster */
		for (;;) {
			ncl++;							/* Next cluster */
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
				ncl = 2;
				if (ncl > scl) return 0;	/* No free cluster */
    3532:	2000      	movs	r0, #0
    3534:	e005      	b.n	3542 <_ZL12create_chainP5_FDIDm+0x1ca>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
			if (cs == 0) break;				/* Found a free cluster */
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
			if (ncl == scl) return 0;		/* No free cluster */
    3536:	2000      	movs	r0, #0
    3538:	e003      	b.n	3542 <_ZL12create_chainP5_FDIDm+0x1ca>

	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
	if (clst >= fs->n_fatent - 2) clst = 0;
	scl = val = clst; ctr = 0;
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
    353a:	2001      	movs	r0, #1
    353c:	4240      	negs	r0, r0
    353e:	e000      	b.n	3542 <_ZL12create_chainP5_FDIDm+0x1ca>
				if (!bv) {	/* Is it a free cluster? */
					if (++ctr == ncl) return scl + 2;	/* Check run length */
				} else {
					scl = val; ctr = 0;		/* Encountered a live cluster, restart to scan */
				}
				if (val == clst) return 0;	/* All cluster scanned? */
    3540:	2000      	movs	r0, #0
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
	}

	return ncl;		/* Return new cluster number or error status */
}
    3542:	bc3c      	pop	{r2, r3, r4, r5}
    3544:	4690      	mov	r8, r2
    3546:	4699      	mov	r9, r3
    3548:	46a2      	mov	sl, r4
    354a:	46ab      	mov	fp, r5
    354c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    354e:	46c0      	nop			; (mov r8, r8)
    3550:	000031fd 	.word	0x000031fd
    3554:	00002cd9 	.word	0x00002cd9
    3558:	000001ff 	.word	0x000001ff
    355c:	00002d15 	.word	0x00002d15
    3560:	00002ead 	.word	0x00002ead

00003564 <_ZL7dir_sdiP3DIRm>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
    3564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3566:	464f      	mov	r7, r9
    3568:	4646      	mov	r6, r8
    356a:	b4c0      	push	{r6, r7}
    356c:	1c06      	adds	r6, r0, #0
    356e:	1c0c      	adds	r4, r1, #0
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
    3570:	6807      	ldr	r7, [r0, #0]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
    3572:	783b      	ldrb	r3, [r7, #0]
    3574:	2b04      	cmp	r3, #4
    3576:	d102      	bne.n	357e <_ZL7dir_sdiP3DIRm+0x1a>
    3578:	2380      	movs	r3, #128	; 0x80
    357a:	055b      	lsls	r3, r3, #21
    357c:	e001      	b.n	3582 <_ZL7dir_sdiP3DIRm+0x1e>
    357e:	2380      	movs	r3, #128	; 0x80
    3580:	039b      	lsls	r3, r3, #14
		return FR_INT_ERR;
    3582:	2002      	movs	r0, #2
{
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
    3584:	42a3      	cmp	r3, r4
    3586:	d945      	bls.n	3614 <_ZL7dir_sdiP3DIRm+0xb0>
    3588:	06e3      	lsls	r3, r4, #27
    358a:	d143      	bne.n	3614 <_ZL7dir_sdiP3DIRm+0xb0>
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
    358c:	62b4      	str	r4, [r6, #40]	; 0x28
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
    358e:	68b5      	ldr	r5, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
    3590:	2d00      	cmp	r5, #0
    3592:	d110      	bne.n	35b6 <_ZL7dir_sdiP3DIRm+0x52>
    3594:	783b      	ldrb	r3, [r7, #0]
    3596:	2b02      	cmp	r3, #2
    3598:	d904      	bls.n	35a4 <_ZL7dir_sdiP3DIRm+0x40>
		clst = fs->dirbase;
    359a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
    359c:	2200      	movs	r2, #0
    359e:	71f2      	strb	r2, [r6, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    35a0:	2b00      	cmp	r3, #0
    35a2:	d107      	bne.n	35b4 <_ZL7dir_sdiP3DIRm+0x50>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
    35a4:	0963      	lsrs	r3, r4, #5
    35a6:	893a      	ldrh	r2, [r7, #8]
    35a8:	2002      	movs	r0, #2
    35aa:	4293      	cmp	r3, r2
    35ac:	d232      	bcs.n	3614 <_ZL7dir_sdiP3DIRm+0xb0>
		dp->sect = fs->dirbase;
    35ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    35b0:	6333      	str	r3, [r6, #48]	; 0x30
    35b2:	e01b      	b.n	35ec <_ZL7dir_sdiP3DIRm+0x88>
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
		clst = fs->dirbase;
    35b4:	1c1d      	adds	r5, r3, #0
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
    35b6:	897b      	ldrh	r3, [r7, #10]
    35b8:	025b      	lsls	r3, r3, #9
    35ba:	4698      	mov	r8, r3
		while (ofs >= csz) {				/* Follow cluster chain */
    35bc:	429c      	cmp	r4, r3
    35be:	d310      	bcc.n	35e2 <_ZL7dir_sdiP3DIRm+0x7e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
    35c0:	4b16      	ldr	r3, [pc, #88]	; (361c <_ZL7dir_sdiP3DIRm+0xb8>)
    35c2:	4699      	mov	r9, r3
    35c4:	1c30      	adds	r0, r6, #0
    35c6:	1c29      	adds	r1, r5, #0
    35c8:	47c8      	blx	r9
    35ca:	1c05      	adds	r5, r0, #0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    35cc:	1c43      	adds	r3, r0, #1
    35ce:	d01c      	beq.n	360a <_ZL7dir_sdiP3DIRm+0xa6>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    35d0:	2801      	cmp	r0, #1
    35d2:	d91c      	bls.n	360e <_ZL7dir_sdiP3DIRm+0xaa>
    35d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    35d6:	4298      	cmp	r0, r3
    35d8:	d21b      	bcs.n	3612 <_ZL7dir_sdiP3DIRm+0xae>
			ofs -= csz;
    35da:	4643      	mov	r3, r8
    35dc:	1ae4      	subs	r4, r4, r3
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
    35de:	45a0      	cmp	r8, r4
    35e0:	d9f0      	bls.n	35c4 <_ZL7dir_sdiP3DIRm+0x60>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
    35e2:	1c38      	adds	r0, r7, #0
    35e4:	1c29      	adds	r1, r5, #0
    35e6:	4b0e      	ldr	r3, [pc, #56]	; (3620 <_ZL7dir_sdiP3DIRm+0xbc>)
    35e8:	4798      	blx	r3
    35ea:	6330      	str	r0, [r6, #48]	; 0x30
	}
	dp->clust = clst;					/* Current cluster# */
    35ec:	62f5      	str	r5, [r6, #44]	; 0x2c
	if (!dp->sect) return FR_INT_ERR;
    35ee:	6b33      	ldr	r3, [r6, #48]	; 0x30
    35f0:	2002      	movs	r0, #2
    35f2:	2b00      	cmp	r3, #0
    35f4:	d00e      	beq.n	3614 <_ZL7dir_sdiP3DIRm+0xb0>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
    35f6:	0a62      	lsrs	r2, r4, #9
    35f8:	18d3      	adds	r3, r2, r3
    35fa:	6333      	str	r3, [r6, #48]	; 0x30
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
    35fc:	05e3      	lsls	r3, r4, #23
    35fe:	0ddb      	lsrs	r3, r3, #23
    3600:	3358      	adds	r3, #88	; 0x58
    3602:	18ff      	adds	r7, r7, r3
    3604:	6377      	str	r7, [r6, #52]	; 0x34

	return FR_OK;
    3606:	2000      	movs	r0, #0
    3608:	e004      	b.n	3614 <_ZL7dir_sdiP3DIRm+0xb0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    360a:	2001      	movs	r0, #1
    360c:	e002      	b.n	3614 <_ZL7dir_sdiP3DIRm+0xb0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    360e:	2002      	movs	r0, #2
    3610:	e000      	b.n	3614 <_ZL7dir_sdiP3DIRm+0xb0>
    3612:	2002      	movs	r0, #2
	if (!dp->sect) return FR_INT_ERR;
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */

	return FR_OK;
}
    3614:	bc0c      	pop	{r2, r3}
    3616:	4690      	mov	r8, r2
    3618:	4699      	mov	r9, r3
    361a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    361c:	000031fd 	.word	0x000031fd
    3620:	00002b01 	.word	0x00002b01

00003624 <_ZL12remove_chainP5_FDIDmm>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
    3624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3626:	465f      	mov	r7, fp
    3628:	4656      	mov	r6, sl
    362a:	464d      	mov	r5, r9
    362c:	4644      	mov	r4, r8
    362e:	b4f0      	push	{r4, r5, r6, r7}
    3630:	1c07      	adds	r7, r0, #0
    3632:	1c0e      	adds	r6, r1, #0
    3634:	4692      	mov	sl, r2
	FRESULT res = FR_OK;
	DWORD nxt;
	FATFS *fs = obj->fs;
    3636:	6804      	ldr	r4, [r0, #0]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    3638:	2002      	movs	r0, #2
    363a:	2901      	cmp	r1, #1
    363c:	d967      	bls.n	370e <_ZL12remove_chainP5_FDIDmm+0xea>
    363e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3640:	4291      	cmp	r1, r2
    3642:	d264      	bcs.n	370e <_ZL12remove_chainP5_FDIDmm+0xea>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
    3644:	4653      	mov	r3, sl
    3646:	2b00      	cmp	r3, #0
    3648:	d00e      	beq.n	3668 <_ZL12remove_chainP5_FDIDmm+0x44>
    364a:	7823      	ldrb	r3, [r4, #0]
    364c:	2b04      	cmp	r3, #4
    364e:	d102      	bne.n	3656 <_ZL12remove_chainP5_FDIDmm+0x32>
    3650:	79fb      	ldrb	r3, [r7, #7]
    3652:	2b02      	cmp	r3, #2
    3654:	d008      	beq.n	3668 <_ZL12remove_chainP5_FDIDmm+0x44>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
    3656:	1c20      	adds	r0, r4, #0
    3658:	4651      	mov	r1, sl
    365a:	2201      	movs	r2, #1
    365c:	4252      	negs	r2, r2
    365e:	4b2f      	ldr	r3, [pc, #188]	; (371c <_ZL12remove_chainP5_FDIDmm+0xf8>)
    3660:	4798      	blx	r3
    3662:	1c03      	adds	r3, r0, #0
		if (res != FR_OK) return res;
    3664:	2b00      	cmp	r3, #0
    3666:	d152      	bne.n	370e <_ZL12remove_chainP5_FDIDmm+0xea>
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
    3668:	46b1      	mov	r9, r6
		if (res != FR_OK) return res;
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
    366a:	4a2d      	ldr	r2, [pc, #180]	; (3720 <_ZL12remove_chainP5_FDIDmm+0xfc>)
    366c:	4690      	mov	r8, r2
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    366e:	4b2b      	ldr	r3, [pc, #172]	; (371c <_ZL12remove_chainP5_FDIDmm+0xf8>)
    3670:	469b      	mov	fp, r3
		if (res != FR_OK) return res;
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
    3672:	1c38      	adds	r0, r7, #0
    3674:	1c31      	adds	r1, r6, #0
    3676:	47c0      	blx	r8
    3678:	1e05      	subs	r5, r0, #0
		if (nxt == 0) break;				/* Empty cluster? */
    367a:	d02e      	beq.n	36da <_ZL12remove_chainP5_FDIDmm+0xb6>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    367c:	2801      	cmp	r0, #1
    367e:	d043      	beq.n	3708 <_ZL12remove_chainP5_FDIDmm+0xe4>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    3680:	1c42      	adds	r2, r0, #1
    3682:	d043      	beq.n	370c <_ZL12remove_chainP5_FDIDmm+0xe8>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
    3684:	7823      	ldrb	r3, [r4, #0]
    3686:	2b04      	cmp	r3, #4
    3688:	d005      	beq.n	3696 <_ZL12remove_chainP5_FDIDmm+0x72>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    368a:	1c20      	adds	r0, r4, #0
    368c:	1c31      	adds	r1, r6, #0
    368e:	2200      	movs	r2, #0
    3690:	47d8      	blx	fp
			if (res != FR_OK) return res;
    3692:	2800      	cmp	r0, #0
    3694:	d13b      	bne.n	370e <_ZL12remove_chainP5_FDIDmm+0xea>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    3696:	69a3      	ldr	r3, [r4, #24]
    3698:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    369a:	3a02      	subs	r2, #2
    369c:	4293      	cmp	r3, r2
    369e:	d205      	bcs.n	36ac <_ZL12remove_chainP5_FDIDmm+0x88>
			fs->free_clst++;
    36a0:	3301      	adds	r3, #1
    36a2:	61a3      	str	r3, [r4, #24]
			fs->fsi_flag |= 1;
    36a4:	7922      	ldrb	r2, [r4, #4]
    36a6:	2301      	movs	r3, #1
    36a8:	4313      	orrs	r3, r2
    36aa:	7123      	strb	r3, [r4, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
    36ac:	3601      	adds	r6, #1
    36ae:	42ae      	cmp	r6, r5
    36b0:	d00e      	beq.n	36d0 <_ZL12remove_chainP5_FDIDmm+0xac>
			ecl = nxt;
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
    36b2:	7823      	ldrb	r3, [r4, #0]
    36b4:	2b04      	cmp	r3, #4
    36b6:	d10a      	bne.n	36ce <_ZL12remove_chainP5_FDIDmm+0xaa>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
    36b8:	464b      	mov	r3, r9
    36ba:	1af2      	subs	r2, r6, r3
    36bc:	1c20      	adds	r0, r4, #0
    36be:	4649      	mov	r1, r9
    36c0:	2300      	movs	r3, #0
    36c2:	4e18      	ldr	r6, [pc, #96]	; (3724 <_ZL12remove_chainP5_FDIDmm+0x100>)
    36c4:	47b0      	blx	r6
				if (res != FR_OK) return res;
    36c6:	2800      	cmp	r0, #0
    36c8:	d121      	bne.n	370e <_ZL12remove_chainP5_FDIDmm+0xea>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
    36ca:	46a9      	mov	r9, r5
    36cc:	e000      	b.n	36d0 <_ZL12remove_chainP5_FDIDmm+0xac>
    36ce:	46a9      	mov	r9, r5
		res = put_fat(fs, pclst, 0xFFFFFFFF);
		if (res != FR_OK) return res;
	}

	/* Remove the chain */
	do {
    36d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    36d2:	4295      	cmp	r5, r2
    36d4:	d201      	bcs.n	36da <_ZL12remove_chainP5_FDIDmm+0xb6>
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
    36d6:	1c2e      	adds	r6, r5, #0
    36d8:	e7cb      	b.n	3672 <_ZL12remove_chainP5_FDIDmm+0x4e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
    36da:	7823      	ldrb	r3, [r4, #0]
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
    36dc:	2000      	movs	r0, #0
#endif
		clst = nxt;					/* Next cluster */
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
    36de:	2b04      	cmp	r3, #4
    36e0:	d115      	bne.n	370e <_ZL12remove_chainP5_FDIDmm+0xea>
		if (pclst == 0) {	/* Does object have no chain? */
    36e2:	4653      	mov	r3, sl
    36e4:	2b00      	cmp	r3, #0
    36e6:	d101      	bne.n	36ec <_ZL12remove_chainP5_FDIDmm+0xc8>
			obj->stat = 0;		/* Change the object status 'initial' */
    36e8:	71fb      	strb	r3, [r7, #7]
    36ea:	e010      	b.n	370e <_ZL12remove_chainP5_FDIDmm+0xea>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain got contiguous? */
    36ec:	79fb      	ldrb	r3, [r7, #7]
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
    36ee:	2000      	movs	r0, #0
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
		if (pclst == 0) {	/* Does object have no chain? */
			obj->stat = 0;		/* Change the object status 'initial' */
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain got contiguous? */
    36f0:	2b03      	cmp	r3, #3
    36f2:	d10c      	bne.n	370e <_ZL12remove_chainP5_FDIDmm+0xea>
    36f4:	68bb      	ldr	r3, [r7, #8]
    36f6:	459a      	cmp	sl, r3
    36f8:	d309      	bcc.n	370e <_ZL12remove_chainP5_FDIDmm+0xea>
    36fa:	69be      	ldr	r6, [r7, #24]
    36fc:	199b      	adds	r3, r3, r6
    36fe:	459a      	cmp	sl, r3
    3700:	d805      	bhi.n	370e <_ZL12remove_chainP5_FDIDmm+0xea>
				obj->stat = 2;	/* Change the object status 'contiguous' */
    3702:	2302      	movs	r3, #2
    3704:	71fb      	strb	r3, [r7, #7]
    3706:	e002      	b.n	370e <_ZL12remove_chainP5_FDIDmm+0xea>

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    3708:	2002      	movs	r0, #2
    370a:	e000      	b.n	370e <_ZL12remove_chainP5_FDIDmm+0xea>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    370c:	2001      	movs	r0, #1
			}
		}
	}
#endif
	return FR_OK;
}
    370e:	bc3c      	pop	{r2, r3, r4, r5}
    3710:	4690      	mov	r8, r2
    3712:	4699      	mov	r9, r3
    3714:	46a2      	mov	sl, r4
    3716:	46ab      	mov	fp, r5
    3718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    371a:	46c0      	nop			; (mov r8, r8)
    371c:	00002ead 	.word	0x00002ead
    3720:	000031fd 	.word	0x000031fd
    3724:	00002d15 	.word	0x00002d15

00003728 <_ZL8dir_nextP3DIRi>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    3728:	b5f0      	push	{r4, r5, r6, r7, lr}
    372a:	4657      	mov	r7, sl
    372c:	464e      	mov	r6, r9
    372e:	4645      	mov	r5, r8
    3730:	b4e0      	push	{r5, r6, r7}
    3732:	1c04      	adds	r4, r0, #0
    3734:	1c0e      	adds	r6, r1, #0
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
    3736:	6805      	ldr	r5, [r0, #0]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
    3738:	6a82      	ldr	r2, [r0, #40]	; 0x28
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
    373a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    373c:	2004      	movs	r0, #4
    373e:	2b00      	cmp	r3, #0
    3740:	d100      	bne.n	3744 <_ZL8dir_nextP3DIRi+0x1c>
    3742:	e080      	b.n	3846 <_ZL8dir_nextP3DIRi+0x11e>
    3744:	7829      	ldrb	r1, [r5, #0]
    3746:	2904      	cmp	r1, #4
    3748:	d102      	bne.n	3750 <_ZL8dir_nextP3DIRi+0x28>
    374a:	2180      	movs	r1, #128	; 0x80
    374c:	0549      	lsls	r1, r1, #21
    374e:	e001      	b.n	3754 <_ZL8dir_nextP3DIRi+0x2c>
    3750:	2180      	movs	r1, #128	; 0x80
    3752:	0389      	lsls	r1, r1, #14
	FATFS *fs = dp->obj.fs;
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
    3754:	1c17      	adds	r7, r2, #0
    3756:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
    3758:	2004      	movs	r0, #4
    375a:	42b9      	cmp	r1, r7
    375c:	d973      	bls.n	3846 <_ZL8dir_nextP3DIRi+0x11e>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    375e:	05fa      	lsls	r2, r7, #23
    3760:	0dd2      	lsrs	r2, r2, #23
    3762:	4690      	mov	r8, r2
    3764:	d165      	bne.n	3832 <_ZL8dir_nextP3DIRi+0x10a>
		dp->sect++;				/* Next sector */
    3766:	3301      	adds	r3, #1
    3768:	6323      	str	r3, [r4, #48]	; 0x30

		if (!dp->clust) {		/* Static table */
    376a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    376c:	2900      	cmp	r1, #0
    376e:	d106      	bne.n	377e <_ZL8dir_nextP3DIRi+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    3770:	097b      	lsrs	r3, r7, #5
    3772:	892a      	ldrh	r2, [r5, #8]
    3774:	4293      	cmp	r3, r2
    3776:	d35c      	bcc.n	3832 <_ZL8dir_nextP3DIRi+0x10a>
				dp->sect = 0; return FR_NO_FILE;
    3778:	2300      	movs	r3, #0
    377a:	6323      	str	r3, [r4, #48]	; 0x30
    377c:	e063      	b.n	3846 <_ZL8dir_nextP3DIRi+0x11e>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
    377e:	896b      	ldrh	r3, [r5, #10]
    3780:	3b01      	subs	r3, #1
    3782:	0a7a      	lsrs	r2, r7, #9
    3784:	421a      	tst	r2, r3
    3786:	d154      	bne.n	3832 <_ZL8dir_nextP3DIRi+0x10a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
    3788:	1c20      	adds	r0, r4, #0
    378a:	4b31      	ldr	r3, [pc, #196]	; (3850 <_ZL8dir_nextP3DIRi+0x128>)
    378c:	4798      	blx	r3
    378e:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
    3790:	2002      	movs	r0, #2
    3792:	464a      	mov	r2, r9
    3794:	2a01      	cmp	r2, #1
    3796:	d956      	bls.n	3846 <_ZL8dir_nextP3DIRi+0x11e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
    3798:	3201      	adds	r2, #1
    379a:	d051      	beq.n	3840 <_ZL8dir_nextP3DIRi+0x118>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
    379c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    379e:	4599      	cmp	r9, r3
    37a0:	d340      	bcc.n	3824 <_ZL8dir_nextP3DIRi+0xfc>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
    37a2:	2e00      	cmp	r6, #0
    37a4:	d103      	bne.n	37ae <_ZL8dir_nextP3DIRi+0x86>
						dp->sect = 0; return FR_NO_FILE;
    37a6:	2300      	movs	r3, #0
    37a8:	6323      	str	r3, [r4, #48]	; 0x30
    37aa:	2004      	movs	r0, #4
    37ac:	e04b      	b.n	3846 <_ZL8dir_nextP3DIRi+0x11e>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
    37ae:	1c20      	adds	r0, r4, #0
    37b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    37b2:	4b28      	ldr	r3, [pc, #160]	; (3854 <_ZL8dir_nextP3DIRi+0x12c>)
    37b4:	4798      	blx	r3
    37b6:	4681      	mov	r9, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    37b8:	2007      	movs	r0, #7
    37ba:	464a      	mov	r2, r9
    37bc:	2a00      	cmp	r2, #0
    37be:	d042      	beq.n	3846 <_ZL8dir_nextP3DIRi+0x11e>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    37c0:	2002      	movs	r0, #2
    37c2:	2a01      	cmp	r2, #1
    37c4:	d03f      	beq.n	3846 <_ZL8dir_nextP3DIRi+0x11e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    37c6:	2001      	movs	r0, #1
    37c8:	3201      	adds	r2, #1
    37ca:	d03c      	beq.n	3846 <_ZL8dir_nextP3DIRi+0x11e>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
    37cc:	79e3      	ldrb	r3, [r4, #7]
    37ce:	2204      	movs	r2, #4
    37d0:	4313      	orrs	r3, r2
    37d2:	71e3      	strb	r3, [r4, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
    37d4:	1c28      	adds	r0, r5, #0
    37d6:	4b20      	ldr	r3, [pc, #128]	; (3858 <_ZL8dir_nextP3DIRi+0x130>)
    37d8:	4798      	blx	r3
    37da:	1c03      	adds	r3, r0, #0
    37dc:	2001      	movs	r0, #1
    37de:	2b00      	cmp	r3, #0
    37e0:	d131      	bne.n	3846 <_ZL8dir_nextP3DIRi+0x11e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
    37e2:	1c28      	adds	r0, r5, #0
    37e4:	3058      	adds	r0, #88	; 0x58
    37e6:	2100      	movs	r1, #0
    37e8:	2280      	movs	r2, #128	; 0x80
    37ea:	0092      	lsls	r2, r2, #2
    37ec:	4b1b      	ldr	r3, [pc, #108]	; (385c <_ZL8dir_nextP3DIRi+0x134>)
    37ee:	4798      	blx	r3
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
    37f0:	1c28      	adds	r0, r5, #0
    37f2:	4649      	mov	r1, r9
    37f4:	4b1a      	ldr	r3, [pc, #104]	; (3860 <_ZL8dir_nextP3DIRi+0x138>)
    37f6:	4798      	blx	r3
    37f8:	6468      	str	r0, [r5, #68]	; 0x44
    37fa:	2600      	movs	r6, #0
						fs->wflag = 1;
    37fc:	2301      	movs	r3, #1
    37fe:	469a      	mov	sl, r3
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
    3800:	e00a      	b.n	3818 <_ZL8dir_nextP3DIRi+0xf0>
						fs->wflag = 1;
    3802:	4652      	mov	r2, sl
    3804:	70ea      	strb	r2, [r5, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
    3806:	1c28      	adds	r0, r5, #0
    3808:	4b13      	ldr	r3, [pc, #76]	; (3858 <_ZL8dir_nextP3DIRi+0x130>)
    380a:	4798      	blx	r3
    380c:	2800      	cmp	r0, #0
    380e:	d119      	bne.n	3844 <_ZL8dir_nextP3DIRi+0x11c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
    3810:	3601      	adds	r6, #1
    3812:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    3814:	3301      	adds	r3, #1
    3816:	646b      	str	r3, [r5, #68]	; 0x44
    3818:	896b      	ldrh	r3, [r5, #10]
    381a:	429e      	cmp	r6, r3
    381c:	d3f1      	bcc.n	3802 <_ZL8dir_nextP3DIRi+0xda>
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
					}
					fs->winsect -= n;							/* Restore window offset */
    381e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    3820:	1b96      	subs	r6, r2, r6
    3822:	646e      	str	r6, [r5, #68]	; 0x44
#else
					if (!stretch) dp->sect = 0;					/* If no stretch, report EOT (this is to suppress warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
    3824:	464b      	mov	r3, r9
    3826:	62e3      	str	r3, [r4, #44]	; 0x2c
				dp->sect = clust2sect(fs, clst);
    3828:	1c28      	adds	r0, r5, #0
    382a:	4649      	mov	r1, r9
    382c:	4b0c      	ldr	r3, [pc, #48]	; (3860 <_ZL8dir_nextP3DIRi+0x138>)
    382e:	4798      	blx	r3
    3830:	6320      	str	r0, [r4, #48]	; 0x30
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
    3832:	62a7      	str	r7, [r4, #40]	; 0x28
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    3834:	4643      	mov	r3, r8
    3836:	3358      	adds	r3, #88	; 0x58
    3838:	18ed      	adds	r5, r5, r3
    383a:	6365      	str	r5, [r4, #52]	; 0x34

	return FR_OK;
    383c:	2000      	movs	r0, #0
    383e:	e002      	b.n	3846 <_ZL8dir_nextP3DIRi+0x11e>
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
    3840:	2001      	movs	r0, #1
    3842:	e000      	b.n	3846 <_ZL8dir_nextP3DIRi+0x11e>
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
    3844:	2001      	movs	r0, #1
	}
	dp->dptr = ofs;						/* Current entry */
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */

	return FR_OK;
}
    3846:	bc1c      	pop	{r2, r3, r4}
    3848:	4690      	mov	r8, r2
    384a:	4699      	mov	r9, r3
    384c:	46a2      	mov	sl, r4
    384e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3850:	000031fd 	.word	0x000031fd
    3854:	00003379 	.word	0x00003379
    3858:	00002c71 	.word	0x00002c71
    385c:	00002af1 	.word	0x00002af1
    3860:	00002b01 	.word	0x00002b01

00003864 <_ZL9load_xdirP3DIR>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
    3864:	b5f0      	push	{r4, r5, r6, r7, lr}
    3866:	4657      	mov	r7, sl
    3868:	b480      	push	{r7}
    386a:	1c04      	adds	r4, r0, #0
	FRESULT res;
	UINT i, nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
    386c:	6800      	ldr	r0, [r0, #0]
    386e:	6905      	ldr	r5, [r0, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
    3870:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3872:	4b2b      	ldr	r3, [pc, #172]	; (3920 <_ZL9load_xdirP3DIR+0xbc>)
    3874:	4798      	blx	r3
    3876:	1c03      	adds	r3, r0, #0
	if (res != FR_OK) return res;
    3878:	2b00      	cmp	r3, #0
    387a:	d14d      	bne.n	3918 <_ZL9load_xdirP3DIR+0xb4>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
    387c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    387e:	780b      	ldrb	r3, [r1, #0]
    3880:	2002      	movs	r0, #2
    3882:	2b85      	cmp	r3, #133	; 0x85
    3884:	d148      	bne.n	3918 <_ZL9load_xdirP3DIR+0xb4>
	mem_cpy(dirb, dp->dir, SZDIRE);
    3886:	1c28      	adds	r0, r5, #0
    3888:	2220      	movs	r2, #32
    388a:	4b26      	ldr	r3, [pc, #152]	; (3924 <_ZL9load_xdirP3DIR+0xc0>)
    388c:	4798      	blx	r3
	nent = dirb[XDIR_NumSec] + 1;
    388e:	786e      	ldrb	r6, [r5, #1]

	/* Load C0 entry */
	res = dir_next(dp, 0);
    3890:	1c20      	adds	r0, r4, #0
    3892:	2100      	movs	r1, #0
    3894:	4b24      	ldr	r3, [pc, #144]	; (3928 <_ZL9load_xdirP3DIR+0xc4>)
    3896:	4798      	blx	r3
    3898:	1c03      	adds	r3, r0, #0
	if (res != FR_OK) return res;
    389a:	2b00      	cmp	r3, #0
    389c:	d13c      	bne.n	3918 <_ZL9load_xdirP3DIR+0xb4>
	res = move_window(dp->obj.fs, dp->sect);
    389e:	6820      	ldr	r0, [r4, #0]
    38a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    38a2:	4b1f      	ldr	r3, [pc, #124]	; (3920 <_ZL9load_xdirP3DIR+0xbc>)
    38a4:	4798      	blx	r3
    38a6:	1c03      	adds	r3, r0, #0
	if (res != FR_OK) return res;
    38a8:	2b00      	cmp	r3, #0
    38aa:	d135      	bne.n	3918 <_ZL9load_xdirP3DIR+0xb4>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
    38ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
    38ae:	780b      	ldrb	r3, [r1, #0]
    38b0:	2002      	movs	r0, #2
    38b2:	2bc0      	cmp	r3, #192	; 0xc0
    38b4:	d130      	bne.n	3918 <_ZL9load_xdirP3DIR+0xb4>
	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
	if (res != FR_OK) return res;
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
	mem_cpy(dirb, dp->dir, SZDIRE);
	nent = dirb[XDIR_NumSec] + 1;
    38b6:	1c77      	adds	r7, r6, #1
	res = dir_next(dp, 0);
	if (res != FR_OK) return res;
	res = move_window(dp->obj.fs, dp->sect);
	if (res != FR_OK) return res;
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
    38b8:	1c28      	adds	r0, r5, #0
    38ba:	3020      	adds	r0, #32
    38bc:	2220      	movs	r2, #32
    38be:	4b19      	ldr	r3, [pc, #100]	; (3924 <_ZL9load_xdirP3DIR+0xc0>)
    38c0:	4798      	blx	r3

	/* Load C1 entries */
	if (nent < 3 || nent > 19) return FR_NO_FILE;
    38c2:	3e02      	subs	r6, #2
    38c4:	2004      	movs	r0, #4
    38c6:	2e10      	cmp	r6, #16
    38c8:	d826      	bhi.n	3918 <_ZL9load_xdirP3DIR+0xb4>
	i = SZDIRE * 2; nent *= SZDIRE;
    38ca:	017f      	lsls	r7, r7, #5
    38cc:	46ba      	mov	sl, r7
    38ce:	2740      	movs	r7, #64	; 0x40
	do {
		res = dir_next(dp, 0);
    38d0:	4e15      	ldr	r6, [pc, #84]	; (3928 <_ZL9load_xdirP3DIR+0xc4>)
    38d2:	1c20      	adds	r0, r4, #0
    38d4:	2100      	movs	r1, #0
    38d6:	47b0      	blx	r6
		if (res != FR_OK) return res;
    38d8:	2800      	cmp	r0, #0
    38da:	d11d      	bne.n	3918 <_ZL9load_xdirP3DIR+0xb4>
		res = move_window(dp->obj.fs, dp->sect);
    38dc:	6820      	ldr	r0, [r4, #0]
    38de:	6b21      	ldr	r1, [r4, #48]	; 0x30
    38e0:	4b0f      	ldr	r3, [pc, #60]	; (3920 <_ZL9load_xdirP3DIR+0xbc>)
    38e2:	4798      	blx	r3
		if (res != FR_OK) return res;
    38e4:	2800      	cmp	r0, #0
    38e6:	d117      	bne.n	3918 <_ZL9load_xdirP3DIR+0xb4>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
    38e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    38ea:	780b      	ldrb	r3, [r1, #0]
    38ec:	2bc1      	cmp	r3, #193	; 0xc1
    38ee:	d112      	bne.n	3916 <_ZL9load_xdirP3DIR+0xb2>
    38f0:	19e8      	adds	r0, r5, r7
		mem_cpy(dirb + i, dp->dir, SZDIRE);
    38f2:	2220      	movs	r2, #32
    38f4:	4b0b      	ldr	r3, [pc, #44]	; (3924 <_ZL9load_xdirP3DIR+0xc0>)
    38f6:	4798      	blx	r3
		i += SZDIRE;
    38f8:	3720      	adds	r7, #32
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);

	/* Load C1 entries */
	if (nent < 3 || nent > 19) return FR_NO_FILE;
	i = SZDIRE * 2; nent *= SZDIRE;
	do {
    38fa:	45ba      	cmp	sl, r7
    38fc:	d8e9      	bhi.n	38d2 <_ZL9load_xdirP3DIR+0x6e>
		mem_cpy(dirb + i, dp->dir, SZDIRE);
		i += SZDIRE;
	} while (i < nent);

	/* Sanity check */
	if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
    38fe:	1c28      	adds	r0, r5, #0
    3900:	4b0a      	ldr	r3, [pc, #40]	; (392c <_ZL9load_xdirP3DIR+0xc8>)
    3902:	4798      	blx	r3
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    3904:	78eb      	ldrb	r3, [r5, #3]
    3906:	021b      	lsls	r3, r3, #8
    3908:	78aa      	ldrb	r2, [r5, #2]
		mem_cpy(dirb + i, dp->dir, SZDIRE);
		i += SZDIRE;
	} while (i < nent);

	/* Sanity check */
	if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
    390a:	4313      	orrs	r3, r2
    390c:	1ac0      	subs	r0, r0, r3
    390e:	1e43      	subs	r3, r0, #1
    3910:	4198      	sbcs	r0, r3
    3912:	0040      	lsls	r0, r0, #1
    3914:	e000      	b.n	3918 <_ZL9load_xdirP3DIR+0xb4>
	do {
		res = dir_next(dp, 0);
		if (res != FR_OK) return res;
		res = move_window(dp->obj.fs, dp->sect);
		if (res != FR_OK) return res;
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
    3916:	2002      	movs	r0, #2

	/* Sanity check */
	if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;

	return FR_OK;
}
    3918:	bc04      	pop	{r2}
    391a:	4692      	mov	sl, r2
    391c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    391e:	46c0      	nop			; (mov r8, r8)
    3920:	00002cd9 	.word	0x00002cd9
    3924:	00002add 	.word	0x00002add
    3928:	00003729 	.word	0x00003729
    392c:	00002b39 	.word	0x00002b39

00003930 <_ZL12load_obj_dirP3DIRPK5_FDID>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with containing directory information */
)
{
    3930:	b510      	push	{r4, lr}
    3932:	1c04      	adds	r4, r0, #0
	FRESULT res;


	/* Open object containing directory */
	dp->obj.fs = obj->fs;
    3934:	680a      	ldr	r2, [r1, #0]
    3936:	6002      	str	r2, [r0, #0]
	dp->obj.sclust = obj->c_scl;
    3938:	69cb      	ldr	r3, [r1, #28]
    393a:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
    393c:	6a0a      	ldr	r2, [r1, #32]
    393e:	71c2      	strb	r2, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
    3940:	23ff      	movs	r3, #255	; 0xff
    3942:	6a0a      	ldr	r2, [r1, #32]
    3944:	439a      	bics	r2, r3
    3946:	6122      	str	r2, [r4, #16]
    3948:	2300      	movs	r3, #0
    394a:	6143      	str	r3, [r0, #20]
	dp->blk_ofs = obj->c_ofs;
    394c:	6a49      	ldr	r1, [r1, #36]	; 0x24
    394e:	6441      	str	r1, [r0, #68]	; 0x44

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto the block location */
    3950:	4b03      	ldr	r3, [pc, #12]	; (3960 <_ZL12load_obj_dirP3DIRPK5_FDID+0x30>)
    3952:	4798      	blx	r3
	if (res == FR_OK) {
    3954:	2800      	cmp	r0, #0
    3956:	d102      	bne.n	395e <_ZL12load_obj_dirP3DIRPK5_FDID+0x2e>
		res = load_xdir(dp);		/* Load the object's entry block */
    3958:	1c20      	adds	r0, r4, #0
    395a:	4b02      	ldr	r3, [pc, #8]	; (3964 <_ZL12load_obj_dirP3DIRPK5_FDID+0x34>)
    395c:	4798      	blx	r3
	}
	return res;
}
    395e:	bd10      	pop	{r4, pc}
    3960:	00003565 	.word	0x00003565
    3964:	00003865 	.word	0x00003865

00003968 <_ZL9dir_allocP3DIRj>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
    3968:	b5f0      	push	{r4, r5, r6, r7, lr}
    396a:	4657      	mov	r7, sl
    396c:	464e      	mov	r6, r9
    396e:	4645      	mov	r5, r8
    3970:	b4e0      	push	{r5, r6, r7}
    3972:	1c04      	adds	r4, r0, #0
    3974:	4689      	mov	r9, r1
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
    3976:	6806      	ldr	r6, [r0, #0]


	res = dir_sdi(dp, 0);
    3978:	2100      	movs	r1, #0
    397a:	4b19      	ldr	r3, [pc, #100]	; (39e0 <_ZL9dir_allocP3DIRj+0x78>)
    397c:	4798      	blx	r3
	if (res == FR_OK) {
    397e:	2800      	cmp	r0, #0
    3980:	d125      	bne.n	39ce <_ZL9dir_allocP3DIRj+0x66>
    3982:	2500      	movs	r5, #0
		n = 0;
		do {
			res = move_window(fs, dp->sect);
    3984:	4f17      	ldr	r7, [pc, #92]	; (39e4 <_ZL9dir_allocP3DIRj+0x7c>)
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
    3986:	46aa      	mov	sl, r5
			}
			res = dir_next(dp, 1);
    3988:	4b17      	ldr	r3, [pc, #92]	; (39e8 <_ZL9dir_allocP3DIRj+0x80>)
    398a:	4698      	mov	r8, r3

	res = dir_sdi(dp, 0);
	if (res == FR_OK) {
		n = 0;
		do {
			res = move_window(fs, dp->sect);
    398c:	1c30      	adds	r0, r6, #0
    398e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3990:	47b8      	blx	r7
			if (res != FR_OK) break;
    3992:	2800      	cmp	r0, #0
    3994:	d11b      	bne.n	39ce <_ZL9dir_allocP3DIRj+0x66>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
    3996:	7832      	ldrb	r2, [r6, #0]
    3998:	2a04      	cmp	r2, #4
    399a:	d105      	bne.n	39a8 <_ZL9dir_allocP3DIRj+0x40>
    399c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    399e:	781a      	ldrb	r2, [r3, #0]
    39a0:	43d2      	mvns	r2, r2
    39a2:	b2d2      	uxtb	r2, r2
    39a4:	09d2      	lsrs	r2, r2, #7
    39a6:	e006      	b.n	39b6 <_ZL9dir_allocP3DIRj+0x4e>
    39a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    39aa:	781a      	ldrb	r2, [r3, #0]
    39ac:	2ae5      	cmp	r2, #229	; 0xe5
    39ae:	d004      	beq.n	39ba <_ZL9dir_allocP3DIRj+0x52>
    39b0:	4251      	negs	r1, r2
    39b2:	414a      	adcs	r2, r1
    39b4:	b2d2      	uxtb	r2, r2
    39b6:	2a00      	cmp	r2, #0
    39b8:	d003      	beq.n	39c2 <_ZL9dir_allocP3DIRj+0x5a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
    39ba:	3501      	adds	r5, #1
    39bc:	454d      	cmp	r5, r9
    39be:	d101      	bne.n	39c4 <_ZL9dir_allocP3DIRj+0x5c>
    39c0:	e008      	b.n	39d4 <_ZL9dir_allocP3DIRj+0x6c>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
    39c2:	4655      	mov	r5, sl
			}
			res = dir_next(dp, 1);
    39c4:	1c20      	adds	r0, r4, #0
    39c6:	2101      	movs	r1, #1
    39c8:	47c0      	blx	r8


	res = dir_sdi(dp, 0);
	if (res == FR_OK) {
		n = 0;
		do {
    39ca:	2800      	cmp	r0, #0
    39cc:	d0de      	beq.n	398c <_ZL9dir_allocP3DIRj+0x24>
			}
			res = dir_next(dp, 1);
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    39ce:	2804      	cmp	r0, #4
    39d0:	d100      	bne.n	39d4 <_ZL9dir_allocP3DIRj+0x6c>
    39d2:	2007      	movs	r0, #7
	return res;
}
    39d4:	bc1c      	pop	{r2, r3, r4}
    39d6:	4690      	mov	r8, r2
    39d8:	4699      	mov	r9, r3
    39da:	46a2      	mov	sl, r4
    39dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39de:	46c0      	nop			; (mov r8, r8)
    39e0:	00003565 	.word	0x00003565
    39e4:	00002cd9 	.word	0x00002cd9
    39e8:	00003729 	.word	0x00003729

000039ec <_ZL10store_xdirP3DIR>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
    39ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ee:	4657      	mov	r7, sl
    39f0:	464e      	mov	r6, r9
    39f2:	4645      	mov	r5, r8
    39f4:	b4e0      	push	{r5, r6, r7}
    39f6:	1c04      	adds	r4, r0, #0
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
    39f8:	6803      	ldr	r3, [r0, #0]
    39fa:	691e      	ldr	r6, [r3, #16]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
    39fc:	1c30      	adds	r0, r6, #0
    39fe:	4b19      	ldr	r3, [pc, #100]	; (3a64 <_ZL10store_xdirP3DIR+0x78>)
    3a00:	4798      	blx	r3

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3a02:	70b0      	strb	r0, [r6, #2]
    3a04:	1200      	asrs	r0, r0, #8
	*ptr++ = (BYTE)val;
    3a06:	70f0      	strb	r0, [r6, #3]
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
	nent = dirb[XDIR_NumSec] + 1;
    3a08:	7877      	ldrb	r7, [r6, #1]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
    3a0a:	1c20      	adds	r0, r4, #0
    3a0c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    3a0e:	4b16      	ldr	r3, [pc, #88]	; (3a68 <_ZL10store_xdirP3DIR+0x7c>)
    3a10:	4798      	blx	r3
    3a12:	1e05      	subs	r5, r0, #0
	while (res == FR_OK) {
    3a14:	d11b      	bne.n	3a4e <_ZL10store_xdirP3DIR+0x62>
		res = move_window(dp->obj.fs, dp->sect);
    3a16:	4a15      	ldr	r2, [pc, #84]	; (3a6c <_ZL10store_xdirP3DIR+0x80>)
    3a18:	4690      	mov	r8, r2
		if (res != FR_OK) break;
		mem_cpy(dp->dir, dirb, SZDIRE);
    3a1a:	4b15      	ldr	r3, [pc, #84]	; (3a70 <_ZL10store_xdirP3DIR+0x84>)
    3a1c:	4699      	mov	r9, r3
		dp->obj.fs->wflag = 1;
		if (--nent == 0) break;
		dirb += SZDIRE;
		res = dir_next(dp, 0);
    3a1e:	4a15      	ldr	r2, [pc, #84]	; (3a74 <_ZL10store_xdirP3DIR+0x88>)
    3a20:	4692      	mov	sl, r2
	nent = dirb[XDIR_NumSec] + 1;

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
	while (res == FR_OK) {
		res = move_window(dp->obj.fs, dp->sect);
    3a22:	6820      	ldr	r0, [r4, #0]
    3a24:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3a26:	47c0      	blx	r8
    3a28:	1e05      	subs	r5, r0, #0
		if (res != FR_OK) break;
    3a2a:	d110      	bne.n	3a4e <_ZL10store_xdirP3DIR+0x62>
		mem_cpy(dp->dir, dirb, SZDIRE);
    3a2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3a2e:	1c31      	adds	r1, r6, #0
    3a30:	2220      	movs	r2, #32
    3a32:	47c8      	blx	r9
		dp->obj.fs->wflag = 1;
    3a34:	2301      	movs	r3, #1
    3a36:	6822      	ldr	r2, [r4, #0]
    3a38:	70d3      	strb	r3, [r2, #3]
		if (--nent == 0) break;
    3a3a:	2f00      	cmp	r7, #0
    3a3c:	d007      	beq.n	3a4e <_ZL10store_xdirP3DIR+0x62>
		dirb += SZDIRE;
    3a3e:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
    3a40:	1c20      	adds	r0, r4, #0
    3a42:	2100      	movs	r1, #0
    3a44:	47d0      	blx	sl
    3a46:	1c05      	adds	r5, r0, #0
    3a48:	3f01      	subs	r7, #1
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
	nent = dirb[XDIR_NumSec] + 1;

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
	while (res == FR_OK) {
    3a4a:	2800      	cmp	r0, #0
    3a4c:	d0e9      	beq.n	3a22 <_ZL10store_xdirP3DIR+0x36>
		dp->obj.fs->wflag = 1;
		if (--nent == 0) break;
		dirb += SZDIRE;
		res = dir_next(dp, 0);
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
    3a4e:	1c28      	adds	r0, r5, #0
    3a50:	2d02      	cmp	r5, #2
    3a52:	d900      	bls.n	3a56 <_ZL10store_xdirP3DIR+0x6a>
    3a54:	2002      	movs	r0, #2
    3a56:	b2c0      	uxtb	r0, r0
}
    3a58:	bc1c      	pop	{r2, r3, r4}
    3a5a:	4690      	mov	r8, r2
    3a5c:	4699      	mov	r9, r3
    3a5e:	46a2      	mov	sl, r4
    3a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a62:	46c0      	nop			; (mov r8, r8)
    3a64:	00002b39 	.word	0x00002b39
    3a68:	00003565 	.word	0x00003565
    3a6c:	00002cd9 	.word	0x00002cd9
    3a70:	00002add 	.word	0x00002add
    3a74:	00003729 	.word	0x00003729

00003a78 <_ZL8check_fsP5FATFSm>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
)
{
    3a78:	b538      	push	{r3, r4, r5, lr}
    3a7a:	1c04      	adds	r4, r0, #0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
    3a7c:	2300      	movs	r3, #0
    3a7e:	70c3      	strb	r3, [r0, #3]
    3a80:	2301      	movs	r3, #1
    3a82:	425b      	negs	r3, r3
    3a84:	6443      	str	r3, [r0, #68]	; 0x44
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
    3a86:	4b23      	ldr	r3, [pc, #140]	; (3b14 <_ZL8check_fsP5FATFSm+0x9c>)
    3a88:	4798      	blx	r3
    3a8a:	1c03      	adds	r3, r0, #0
    3a8c:	2004      	movs	r0, #4
    3a8e:	2b00      	cmp	r3, #0
    3a90:	d13e      	bne.n	3b10 <_ZL8check_fsP5FATFSm+0x98>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    3a92:	4b21      	ldr	r3, [pc, #132]	; (3b18 <_ZL8check_fsP5FATFSm+0xa0>)
	rv = rv << 8 | ptr[0];
    3a94:	5ce2      	ldrb	r2, [r4, r3]
    3a96:	0212      	lsls	r2, r2, #8
    3a98:	4b20      	ldr	r3, [pc, #128]	; (3b1c <_ZL8check_fsP5FATFSm+0xa4>)
    3a9a:	5ce3      	ldrb	r3, [r4, r3]
    3a9c:	431a      	orrs	r2, r3
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
    3a9e:	b212      	sxth	r2, r2
    3aa0:	2003      	movs	r0, #3
    3aa2:	4b1f      	ldr	r3, [pc, #124]	; (3b20 <_ZL8check_fsP5FATFSm+0xa8>)
    3aa4:	429a      	cmp	r2, r3
    3aa6:	d133      	bne.n	3b10 <_ZL8check_fsP5FATFSm+0x98>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
    3aa8:	2358      	movs	r3, #88	; 0x58
    3aaa:	5ce3      	ldrb	r3, [r4, r3]
    3aac:	2be9      	cmp	r3, #233	; 0xe9
    3aae:	d005      	beq.n	3abc <_ZL8check_fsP5FATFSm+0x44>
    3ab0:	4a1c      	ldr	r2, [pc, #112]	; (3b24 <_ZL8check_fsP5FATFSm+0xac>)
    3ab2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3ab4:	401a      	ands	r2, r3
    3ab6:	4b1c      	ldr	r3, [pc, #112]	; (3b28 <_ZL8check_fsP5FATFSm+0xb0>)
    3ab8:	429a      	cmp	r2, r3
    3aba:	d10f      	bne.n	3adc <_ZL8check_fsP5FATFSm+0x64>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
    3abc:	1c20      	adds	r0, r4, #0
    3abe:	308e      	adds	r0, #142	; 0x8e
    3ac0:	4b1a      	ldr	r3, [pc, #104]	; (3b2c <_ZL8check_fsP5FATFSm+0xb4>)
    3ac2:	4798      	blx	r3
    3ac4:	0202      	lsls	r2, r0, #8
    3ac6:	0a12      	lsrs	r2, r2, #8
    3ac8:	4b19      	ldr	r3, [pc, #100]	; (3b30 <_ZL8check_fsP5FATFSm+0xb8>)
    3aca:	429a      	cmp	r2, r3
    3acc:	d019      	beq.n	3b02 <_ZL8check_fsP5FATFSm+0x8a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
    3ace:	1c20      	adds	r0, r4, #0
    3ad0:	30aa      	adds	r0, #170	; 0xaa
    3ad2:	4b16      	ldr	r3, [pc, #88]	; (3b2c <_ZL8check_fsP5FATFSm+0xb4>)
    3ad4:	4798      	blx	r3
    3ad6:	4b17      	ldr	r3, [pc, #92]	; (3b34 <_ZL8check_fsP5FATFSm+0xbc>)
    3ad8:	4298      	cmp	r0, r3
    3ada:	d014      	beq.n	3b06 <_ZL8check_fsP5FATFSm+0x8e>
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    3adc:	1c25      	adds	r5, r4, #0
    3ade:	3559      	adds	r5, #89	; 0x59
    3ae0:	2358      	movs	r3, #88	; 0x58
    3ae2:	5ce0      	ldrb	r0, [r4, r3]
    3ae4:	38eb      	subs	r0, #235	; 0xeb
    3ae6:	2300      	movs	r3, #0
    3ae8:	4913      	ldr	r1, [pc, #76]	; (3b38 <_ZL8check_fsP5FATFSm+0xc0>)
    3aea:	e006      	b.n	3afa <_ZL8check_fsP5FATFSm+0x82>
    3aec:	5ce8      	ldrb	r0, [r5, r3]
    3aee:	185a      	adds	r2, r3, r1
    3af0:	7852      	ldrb	r2, [r2, #1]
    3af2:	1a80      	subs	r0, r0, r2
    3af4:	3301      	adds	r3, #1
	} while (--cnt && r == 0);
    3af6:	2b0a      	cmp	r3, #10
    3af8:	d007      	beq.n	3b0a <_ZL8check_fsP5FATFSm+0x92>
    3afa:	2800      	cmp	r0, #0
    3afc:	d0f6      	beq.n	3aec <_ZL8check_fsP5FATFSm+0x74>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
    3afe:	2002      	movs	r0, #2
    3b00:	e006      	b.n	3b10 <_ZL8check_fsP5FATFSm+0x98>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
    3b02:	2000      	movs	r0, #0
    3b04:	e004      	b.n	3b10 <_ZL8check_fsP5FATFSm+0x98>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
    3b06:	2000      	movs	r0, #0
    3b08:	e002      	b.n	3b10 <_ZL8check_fsP5FATFSm+0x98>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
    3b0a:	1e43      	subs	r3, r0, #1
    3b0c:	4198      	sbcs	r0, r3
    3b0e:	3001      	adds	r0, #1
#endif
	return 2;
}
    3b10:	bd38      	pop	{r3, r4, r5, pc}
    3b12:	46c0      	nop			; (mov r8, r8)
    3b14:	00002cd9 	.word	0x00002cd9
    3b18:	00000257 	.word	0x00000257
    3b1c:	00000256 	.word	0x00000256
    3b20:	ffffaa55 	.word	0xffffaa55
    3b24:	00ff00ff 	.word	0x00ff00ff
    3b28:	009000eb 	.word	0x009000eb
    3b2c:	00002a2d 	.word	0x00002a2d
    3b30:	00544146 	.word	0x00544146
    3b34:	33544146 	.word	0x33544146
    3b38:	00006cd0 	.word	0x00006cd0

00003b3c <_ZL11find_volumePPKcPP5FATFSh>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
    3b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b3e:	465f      	mov	r7, fp
    3b40:	4656      	mov	r6, sl
    3b42:	464d      	mov	r5, r9
    3b44:	4644      	mov	r4, r8
    3b46:	b4f0      	push	{r4, r5, r6, r7}
    3b48:	b087      	sub	sp, #28
    3b4a:	1c0d      	adds	r5, r1, #0
    3b4c:	1c16      	adds	r6, r2, #0
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
    3b4e:	2300      	movs	r3, #0
    3b50:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
    3b52:	4bd2      	ldr	r3, [pc, #840]	; (3e9c <_ZL11find_volumePPKcPP5FATFSh+0x360>)
    3b54:	4798      	blx	r3
    3b56:	1c04      	adds	r4, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
    3b58:	200b      	movs	r0, #11
    3b5a:	2c00      	cmp	r4, #0
    3b5c:	da00      	bge.n	3b60 <_ZL11find_volumePPKcPP5FATFSh+0x24>
    3b5e:	e23e      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
    3b60:	00a3      	lsls	r3, r4, #2
    3b62:	4acf      	ldr	r2, [pc, #828]	; (3ea0 <_ZL11find_volumePPKcPP5FATFSh+0x364>)
    3b64:	589f      	ldr	r7, [r3, r2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3b66:	2f00      	cmp	r7, #0
    3b68:	d100      	bne.n	3b6c <_ZL11find_volumePPKcPP5FATFSh+0x30>
    3b6a:	e1fe      	b.n	3f6a <_ZL11find_volumePPKcPP5FATFSh+0x42e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
    3b6c:	602f      	str	r7, [r5, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    3b6e:	2301      	movs	r3, #1
    3b70:	439e      	bics	r6, r3
	if (fs->fs_type) {					/* If the volume has been mounted */
    3b72:	783b      	ldrb	r3, [r7, #0]
    3b74:	2b00      	cmp	r3, #0
    3b76:	d00e      	beq.n	3b96 <_ZL11find_volumePPKcPP5FATFSh+0x5a>
		stat = disk_status(fs->drv);
    3b78:	7878      	ldrb	r0, [r7, #1]
    3b7a:	4bca      	ldr	r3, [pc, #808]	; (3ea4 <_ZL11find_volumePPKcPP5FATFSh+0x368>)
    3b7c:	4798      	blx	r3
    3b7e:	1c03      	adds	r3, r0, #0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    3b80:	07c1      	lsls	r1, r0, #31
    3b82:	d408      	bmi.n	3b96 <_ZL11find_volumePPKcPP5FATFSh+0x5a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
    3b84:	2000      	movs	r0, #0

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    3b86:	2e00      	cmp	r6, #0
    3b88:	d100      	bne.n	3b8c <_ZL11find_volumePPKcPP5FATFSh+0x50>
    3b8a:	e228      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
    3b8c:	075b      	lsls	r3, r3, #29
				return FR_WRITE_PROTECTED;
    3b8e:	200a      	movs	r0, #10
			}
			return FR_OK;				/* The file system object is valid */
    3b90:	17db      	asrs	r3, r3, #31
    3b92:	4018      	ands	r0, r3
    3b94:	e223      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    3b96:	2300      	movs	r3, #0
    3b98:	703b      	strb	r3, [r7, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    3b9a:	b2e0      	uxtb	r0, r4
    3b9c:	7078      	strb	r0, [r7, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    3b9e:	4bc2      	ldr	r3, [pc, #776]	; (3ea8 <_ZL11find_volumePPKcPP5FATFSh+0x36c>)
    3ba0:	4798      	blx	r3
    3ba2:	1c03      	adds	r3, r0, #0
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    3ba4:	2003      	movs	r0, #3
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    3ba6:	07da      	lsls	r2, r3, #31
    3ba8:	d500      	bpl.n	3bac <_ZL11find_volumePPKcPP5FATFSh+0x70>
    3baa:	e218      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    3bac:	2e00      	cmp	r6, #0
    3bae:	d003      	beq.n	3bb8 <_ZL11find_volumePPKcPP5FATFSh+0x7c>
		return FR_WRITE_PROTECTED;
    3bb0:	200a      	movs	r0, #10
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    3bb2:	075e      	lsls	r6, r3, #29
    3bb4:	d500      	bpl.n	3bb8 <_ZL11find_volumePPKcPP5FATFSh+0x7c>
    3bb6:	e212      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
    3bb8:	1c38      	adds	r0, r7, #0
    3bba:	2100      	movs	r1, #0
    3bbc:	4bbb      	ldr	r3, [pc, #748]	; (3eac <_ZL11find_volumePPKcPP5FATFSh+0x370>)
    3bbe:	4798      	blx	r3
    3bc0:	1c03      	adds	r3, r0, #0
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
    3bc2:	2600      	movs	r6, #0
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
    3bc4:	2802      	cmp	r0, #2
    3bc6:	d126      	bne.n	3c16 <_ZL11find_volumePPKcPP5FATFSh+0xda>
    3bc8:	49b9      	ldr	r1, [pc, #740]	; (3eb0 <_ZL11find_volumePPKcPP5FATFSh+0x374>)
    3bca:	187d      	adds	r5, r7, r1
    3bcc:	2400      	movs	r4, #0
    3bce:	1f2b      	subs	r3, r5, #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
    3bd0:	781b      	ldrb	r3, [r3, #0]
    3bd2:	1c30      	adds	r0, r6, #0
    3bd4:	2b00      	cmp	r3, #0
    3bd6:	d002      	beq.n	3bde <_ZL11find_volumePPKcPP5FATFSh+0xa2>
    3bd8:	1c28      	adds	r0, r5, #0
    3bda:	4ab6      	ldr	r2, [pc, #728]	; (3eb4 <_ZL11find_volumePPKcPP5FATFSh+0x378>)
    3bdc:	4790      	blx	r2
    3bde:	2308      	movs	r3, #8
    3be0:	191b      	adds	r3, r3, r4
    3be2:	4669      	mov	r1, sp
    3be4:	5058      	str	r0, [r3, r1]
    3be6:	3404      	adds	r4, #4
    3be8:	3510      	adds	r5, #16
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
    3bea:	2c10      	cmp	r4, #16
    3bec:	d1ef      	bne.n	3bce <_ZL11find_volumePPKcPP5FATFSh+0x92>
    3bee:	2400      	movs	r4, #0
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
    3bf0:	2503      	movs	r5, #3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
    3bf2:	2208      	movs	r2, #8
    3bf4:	1912      	adds	r2, r2, r4
    3bf6:	466b      	mov	r3, sp
    3bf8:	58d6      	ldr	r6, [r2, r3]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
    3bfa:	1c2b      	adds	r3, r5, #0
    3bfc:	2e00      	cmp	r6, #0
    3bfe:	d007      	beq.n	3c10 <_ZL11find_volumePPKcPP5FATFSh+0xd4>
    3c00:	1c38      	adds	r0, r7, #0
    3c02:	1c31      	adds	r1, r6, #0
    3c04:	4aa9      	ldr	r2, [pc, #676]	; (3eac <_ZL11find_volumePPKcPP5FATFSh+0x370>)
    3c06:	4790      	blx	r2
    3c08:	1e03      	subs	r3, r0, #0
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
    3c0a:	2b01      	cmp	r3, #1
    3c0c:	d800      	bhi.n	3c10 <_ZL11find_volumePPKcPP5FATFSh+0xd4>
    3c0e:	e1e2      	b.n	3fd6 <_ZL11find_volumePPKcPP5FATFSh+0x49a>
    3c10:	3404      	adds	r4, #4
			pt = fs->win + (MBR_Table + i * SZ_PTE);
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
    3c12:	2c10      	cmp	r4, #16
    3c14:	d1ed      	bne.n	3bf2 <_ZL11find_volumePPKcPP5FATFSh+0xb6>
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    3c16:	2b04      	cmp	r3, #4
    3c18:	d100      	bne.n	3c1c <_ZL11find_volumePPKcPP5FATFSh+0xe0>
    3c1a:	e1a8      	b.n	3f6e <_ZL11find_volumePPKcPP5FATFSh+0x432>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    3c1c:	200d      	movs	r0, #13
    3c1e:	2b01      	cmp	r3, #1
    3c20:	d900      	bls.n	3c24 <_ZL11find_volumePPKcPP5FATFSh+0xe8>
    3c22:	e1dc      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>

	/* An FAT volume is found. Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
    3c24:	2b01      	cmp	r3, #1
    3c26:	d000      	beq.n	3c2a <_ZL11find_volumePPKcPP5FATFSh+0xee>
    3c28:	e09e      	b.n	3d68 <_ZL11find_volumePPKcPP5FATFSh+0x22c>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
    3c2a:	2363      	movs	r3, #99	; 0x63
    3c2c:	5cfb      	ldrb	r3, [r7, r3]
    3c2e:	2b00      	cmp	r3, #0
    3c30:	d000      	beq.n	3c34 <_ZL11find_volumePPKcPP5FATFSh+0xf8>
    3c32:	e19e      	b.n	3f72 <_ZL11find_volumePPKcPP5FATFSh+0x436>
    3c34:	1c3b      	adds	r3, r7, #0
    3c36:	3364      	adds	r3, #100	; 0x64
    3c38:	220c      	movs	r2, #12
    3c3a:	e004      	b.n	3c46 <_ZL11find_volumePPKcPP5FATFSh+0x10a>
    3c3c:	3201      	adds	r2, #1
    3c3e:	3301      	adds	r3, #1
    3c40:	2a40      	cmp	r2, #64	; 0x40
    3c42:	d100      	bne.n	3c46 <_ZL11find_volumePPKcPP5FATFSh+0x10a>
    3c44:	e19d      	b.n	3f82 <_ZL11find_volumePPKcPP5FATFSh+0x446>
    3c46:	7819      	ldrb	r1, [r3, #0]
    3c48:	2900      	cmp	r1, #0
    3c4a:	d0f7      	beq.n	3c3c <_ZL11find_volumePPKcPP5FATFSh+0x100>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
    3c4c:	200d      	movs	r0, #13
    3c4e:	e1c6      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs))	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
    3c50:	23c4      	movs	r3, #196	; 0xc4
    3c52:	5cfb      	ldrb	r3, [r7, r3]
    3c54:	2201      	movs	r2, #1
    3c56:	409a      	lsls	r2, r3
			return FR_NO_FILESYSTEM;
    3c58:	200d      	movs	r0, #13
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs))	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
    3c5a:	2380      	movs	r3, #128	; 0x80
    3c5c:	009b      	lsls	r3, r3, #2
    3c5e:	429a      	cmp	r2, r3
    3c60:	d000      	beq.n	3c64 <_ZL11find_volumePPKcPP5FATFSh+0x128>
    3c62:	e1bc      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
			return FR_NO_FILESYSTEM;

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
    3c64:	1c38      	adds	r0, r7, #0
    3c66:	30a0      	adds	r0, #160	; 0xa0
    3c68:	4b93      	ldr	r3, [pc, #588]	; (3eb8 <_ZL11find_volumePPKcPP5FATFSh+0x37c>)
    3c6a:	4798      	blx	r3
    3c6c:	1c32      	adds	r2, r6, #0
    3c6e:	2300      	movs	r3, #0
    3c70:	1c04      	adds	r4, r0, #0
    3c72:	1c0d      	adds	r5, r1, #0
    3c74:	18a4      	adds	r4, r4, r2
    3c76:	415d      	adcs	r5, r3
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
    3c78:	200d      	movs	r0, #13
    3c7a:	429d      	cmp	r5, r3
    3c7c:	d000      	beq.n	3c80 <_ZL11find_volumePPKcPP5FATFSh+0x144>
    3c7e:	e1ae      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
    3c80:	1c38      	adds	r0, r7, #0
    3c82:	30ac      	adds	r0, #172	; 0xac
    3c84:	4b8b      	ldr	r3, [pc, #556]	; (3eb4 <_ZL11find_volumePPKcPP5FATFSh+0x378>)
    3c86:	4798      	blx	r3
    3c88:	6338      	str	r0, [r7, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
    3c8a:	23c6      	movs	r3, #198	; 0xc6
    3c8c:	5cfb      	ldrb	r3, [r7, r3]
    3c8e:	70bb      	strb	r3, [r7, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
    3c90:	200d      	movs	r0, #13
    3c92:	2b01      	cmp	r3, #1
    3c94:	d000      	beq.n	3c98 <_ZL11find_volumePPKcPP5FATFSh+0x15c>
    3c96:	e1a2      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
    3c98:	23c5      	movs	r3, #197	; 0xc5
    3c9a:	5cfb      	ldrb	r3, [r7, r3]
    3c9c:	2201      	movs	r2, #1
    3c9e:	409a      	lsls	r2, r3
    3ca0:	4693      	mov	fp, r2
    3ca2:	b293      	uxth	r3, r2
    3ca4:	817b      	strh	r3, [r7, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
    3ca6:	2b00      	cmp	r3, #0
    3ca8:	d100      	bne.n	3cac <_ZL11find_volumePPKcPP5FATFSh+0x170>
    3caa:	e198      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
    3cac:	1c38      	adds	r0, r7, #0
    3cae:	30b4      	adds	r0, #180	; 0xb4
    3cb0:	4b80      	ldr	r3, [pc, #512]	; (3eb4 <_ZL11find_volumePPKcPP5FATFSh+0x378>)
    3cb2:	4798      	blx	r3
    3cb4:	4681      	mov	r9, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
    3cb6:	200d      	movs	r0, #13
    3cb8:	4b80      	ldr	r3, [pc, #512]	; (3ebc <_ZL11find_volumePPKcPP5FATFSh+0x380>)
    3cba:	4599      	cmp	r9, r3
    3cbc:	d900      	bls.n	3cc0 <_ZL11find_volumePPKcPP5FATFSh+0x184>
    3cbe:	e18e      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
		fs->n_fatent = nclst + 2;
    3cc0:	464b      	mov	r3, r9
    3cc2:	3302      	adds	r3, #2
    3cc4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Boundaries and Limits */
		fs->volbase = bsect;
    3cc6:	637e      	str	r6, [r7, #52]	; 0x34
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
    3cc8:	1c38      	adds	r0, r7, #0
    3cca:	30b0      	adds	r0, #176	; 0xb0
    3ccc:	4b79      	ldr	r3, [pc, #484]	; (3eb4 <_ZL11find_volumePPKcPP5FATFSh+0x378>)
    3cce:	4698      	mov	r8, r3
    3cd0:	4798      	blx	r3
    3cd2:	1980      	adds	r0, r0, r6
    3cd4:	4682      	mov	sl, r0
    3cd6:	6438      	str	r0, [r7, #64]	; 0x40
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
    3cd8:	1c38      	adds	r0, r7, #0
    3cda:	30a8      	adds	r0, #168	; 0xa8
    3cdc:	47c0      	blx	r8
    3cde:	1986      	adds	r6, r0, r6
    3ce0:	63be      	str	r6, [r7, #56]	; 0x38
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
    3ce2:	4650      	mov	r0, sl
    3ce4:	2600      	movs	r6, #0
    3ce6:	46b0      	mov	r8, r6
    3ce8:	1c31      	adds	r1, r6, #0
    3cea:	465a      	mov	r2, fp
    3cec:	b292      	uxth	r2, r2
    3cee:	4694      	mov	ip, r2
    3cf0:	4662      	mov	r2, ip
    3cf2:	464e      	mov	r6, r9
    3cf4:	4372      	muls	r2, r6
    3cf6:	4643      	mov	r3, r8
    3cf8:	1812      	adds	r2, r2, r0
    3cfa:	414b      	adcs	r3, r1
    3cfc:	42ab      	cmp	r3, r5
    3cfe:	d900      	bls.n	3d02 <_ZL11find_volumePPKcPP5FATFSh+0x1c6>
    3d00:	e139      	b.n	3f76 <_ZL11find_volumePPKcPP5FATFSh+0x43a>
    3d02:	d102      	bne.n	3d0a <_ZL11find_volumePPKcPP5FATFSh+0x1ce>
    3d04:	42a2      	cmp	r2, r4
    3d06:	d900      	bls.n	3d0a <_ZL11find_volumePPKcPP5FATFSh+0x1ce>
    3d08:	e135      	b.n	3f76 <_ZL11find_volumePPKcPP5FATFSh+0x43a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
    3d0a:	1c38      	adds	r0, r7, #0
    3d0c:	30b8      	adds	r0, #184	; 0xb8
    3d0e:	4b69      	ldr	r3, [pc, #420]	; (3eb4 <_ZL11find_volumePPKcPP5FATFSh+0x378>)
    3d10:	4798      	blx	r3
    3d12:	1c01      	adds	r1, r0, #0
    3d14:	63f8      	str	r0, [r7, #60]	; 0x3c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
    3d16:	1c38      	adds	r0, r7, #0
    3d18:	4b69      	ldr	r3, [pc, #420]	; (3ec0 <_ZL11find_volumePPKcPP5FATFSh+0x384>)
    3d1a:	4798      	blx	r3
    3d1c:	1c01      	adds	r1, r0, #0
    3d1e:	1c38      	adds	r0, r7, #0
    3d20:	4b68      	ldr	r3, [pc, #416]	; (3ec4 <_ZL11find_volumePPKcPP5FATFSh+0x388>)
    3d22:	4798      	blx	r3
    3d24:	1c03      	adds	r3, r0, #0
    3d26:	2001      	movs	r0, #1
    3d28:	2b00      	cmp	r3, #0
    3d2a:	d000      	beq.n	3d2e <_ZL11find_volumePPKcPP5FATFSh+0x1f2>
    3d2c:	e157      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
    3d2e:	1c3d      	adds	r5, r7, #0
    3d30:	356c      	adds	r5, #108	; 0x6c
    3d32:	2400      	movs	r4, #0
		for (i = 0; i < SS(fs); i += SZDIRE) {
    3d34:	2680      	movs	r6, #128	; 0x80
    3d36:	00b6      	lsls	r6, r6, #2
    3d38:	1c2b      	adds	r3, r5, #0
    3d3a:	3b14      	subs	r3, #20
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
    3d3c:	781b      	ldrb	r3, [r3, #0]
    3d3e:	2b81      	cmp	r3, #129	; 0x81
    3d40:	d000      	beq.n	3d44 <_ZL11find_volumePPKcPP5FATFSh+0x208>
    3d42:	e12b      	b.n	3f9c <_ZL11find_volumePPKcPP5FATFSh+0x460>
    3d44:	1c28      	adds	r0, r5, #0
    3d46:	495b      	ldr	r1, [pc, #364]	; (3eb4 <_ZL11find_volumePPKcPP5FATFSh+0x378>)
    3d48:	4788      	blx	r1
    3d4a:	2802      	cmp	r0, #2
    3d4c:	d000      	beq.n	3d50 <_ZL11find_volumePPKcPP5FATFSh+0x214>
    3d4e:	e125      	b.n	3f9c <_ZL11find_volumePPKcPP5FATFSh+0x460>
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
    3d50:	200d      	movs	r0, #13
    3d52:	2380      	movs	r3, #128	; 0x80
    3d54:	009b      	lsls	r3, r3, #2
    3d56:	429c      	cmp	r4, r3
    3d58:	d100      	bne.n	3d5c <_ZL11find_volumePPKcPP5FATFSh+0x220>
    3d5a:	e140      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    3d5c:	2301      	movs	r3, #1
    3d5e:	425b      	negs	r3, r3
    3d60:	61bb      	str	r3, [r7, #24]
    3d62:	617b      	str	r3, [r7, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
    3d64:	2504      	movs	r5, #4
    3d66:	e0f2      	b.n	3f4e <_ZL11find_volumePPKcPP5FATFSh+0x412>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    3d68:	2364      	movs	r3, #100	; 0x64
	rv = rv << 8 | ptr[0];
    3d6a:	5cfb      	ldrb	r3, [r7, r3]
    3d6c:	021b      	lsls	r3, r3, #8
    3d6e:	2263      	movs	r2, #99	; 0x63
    3d70:	5cba      	ldrb	r2, [r7, r2]
    3d72:	431a      	orrs	r2, r3
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    3d74:	b212      	sxth	r2, r2
    3d76:	200d      	movs	r0, #13
    3d78:	2380      	movs	r3, #128	; 0x80
    3d7a:	009b      	lsls	r3, r3, #2
    3d7c:	429a      	cmp	r2, r3
    3d7e:	d000      	beq.n	3d82 <_ZL11find_volumePPKcPP5FATFSh+0x246>
    3d80:	e12d      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    3d82:	236f      	movs	r3, #111	; 0x6f
	rv = rv << 8 | ptr[0];
    3d84:	5cfb      	ldrb	r3, [r7, r3]
    3d86:	021b      	lsls	r3, r3, #8
    3d88:	226e      	movs	r2, #110	; 0x6e
    3d8a:	5cba      	ldrb	r2, [r7, r2]
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
    3d8c:	431a      	orrs	r2, r3
    3d8e:	4690      	mov	r8, r2
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    3d90:	d104      	bne.n	3d9c <_ZL11find_volumePPKcPP5FATFSh+0x260>
    3d92:	1c38      	adds	r0, r7, #0
    3d94:	307c      	adds	r0, #124	; 0x7c
    3d96:	4b47      	ldr	r3, [pc, #284]	; (3eb4 <_ZL11find_volumePPKcPP5FATFSh+0x378>)
    3d98:	4798      	blx	r3
    3d9a:	4680      	mov	r8, r0
		fs->fsize = fasize;
    3d9c:	4642      	mov	r2, r8
    3d9e:	633a      	str	r2, [r7, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
    3da0:	2368      	movs	r3, #104	; 0x68
    3da2:	5cfd      	ldrb	r5, [r7, r3]
    3da4:	70bd      	strb	r5, [r7, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    3da6:	1e6b      	subs	r3, r5, #1
    3da8:	200d      	movs	r0, #13
    3daa:	2b01      	cmp	r3, #1
    3dac:	d900      	bls.n	3db0 <_ZL11find_volumePPKcPP5FATFSh+0x274>
    3dae:	e116      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
    3db0:	2365      	movs	r3, #101	; 0x65
    3db2:	5cfc      	ldrb	r4, [r7, r3]
    3db4:	817c      	strh	r4, [r7, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3db6:	2c00      	cmp	r4, #0
    3db8:	d100      	bne.n	3dbc <_ZL11find_volumePPKcPP5FATFSh+0x280>
    3dba:	e110      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
    3dbc:	1e63      	subs	r3, r4, #1
    3dbe:	421c      	tst	r4, r3
    3dc0:	d000      	beq.n	3dc4 <_ZL11find_volumePPKcPP5FATFSh+0x288>
    3dc2:	e10c      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    3dc4:	236a      	movs	r3, #106	; 0x6a
	rv = rv << 8 | ptr[0];
    3dc6:	5cfb      	ldrb	r3, [r7, r3]
    3dc8:	021b      	lsls	r3, r3, #8
    3dca:	2269      	movs	r2, #105	; 0x69
    3dcc:	5cba      	ldrb	r2, [r7, r2]
    3dce:	431a      	orrs	r2, r3
    3dd0:	4691      	mov	r9, r2
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    3dd2:	813a      	strh	r2, [r7, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    3dd4:	0712      	lsls	r2, r2, #28
    3dd6:	d000      	beq.n	3dda <_ZL11find_volumePPKcPP5FATFSh+0x29e>
    3dd8:	e101      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    3dda:	236c      	movs	r3, #108	; 0x6c
	rv = rv << 8 | ptr[0];
    3ddc:	5cfb      	ldrb	r3, [r7, r3]
    3dde:	021b      	lsls	r3, r3, #8
    3de0:	226b      	movs	r2, #107	; 0x6b
    3de2:	5cba      	ldrb	r2, [r7, r2]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
    3de4:	4313      	orrs	r3, r2
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    3de6:	d104      	bne.n	3df2 <_ZL11find_volumePPKcPP5FATFSh+0x2b6>
    3de8:	1c38      	adds	r0, r7, #0
    3dea:	3078      	adds	r0, #120	; 0x78
    3dec:	4b31      	ldr	r3, [pc, #196]	; (3eb4 <_ZL11find_volumePPKcPP5FATFSh+0x378>)
    3dee:	4798      	blx	r3
    3df0:	1c03      	adds	r3, r0, #0
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    3df2:	2267      	movs	r2, #103	; 0x67
	rv = rv << 8 | ptr[0];
    3df4:	5cba      	ldrb	r2, [r7, r2]
    3df6:	0212      	lsls	r2, r2, #8
    3df8:	2166      	movs	r1, #102	; 0x66
    3dfa:	5c79      	ldrb	r1, [r7, r1]
    3dfc:	4311      	orrs	r1, r2
    3dfe:	468b      	mov	fp, r1

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
    3e00:	200d      	movs	r0, #13
    3e02:	2900      	cmp	r1, #0
    3e04:	d100      	bne.n	3e08 <_ZL11find_volumePPKcPP5FATFSh+0x2cc>
    3e06:	e0ea      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
    3e08:	4641      	mov	r1, r8
    3e0a:	4369      	muls	r1, r5
    3e0c:	9101      	str	r1, [sp, #4]

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    3e0e:	4649      	mov	r1, r9
    3e10:	090a      	lsrs	r2, r1, #4
    3e12:	445a      	add	r2, fp
    3e14:	9901      	ldr	r1, [sp, #4]
    3e16:	1889      	adds	r1, r1, r2
    3e18:	468a      	mov	sl, r1
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3e1a:	428b      	cmp	r3, r1
    3e1c:	d200      	bcs.n	3e20 <_ZL11find_volumePPKcPP5FATFSh+0x2e4>
    3e1e:	e0de      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    3e20:	1a58      	subs	r0, r3, r1
    3e22:	1c21      	adds	r1, r4, #0
    3e24:	4b28      	ldr	r3, [pc, #160]	; (3ec8 <_ZL11find_volumePPKcPP5FATFSh+0x38c>)
    3e26:	4798      	blx	r3
    3e28:	1c04      	adds	r4, r0, #0
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
    3e2a:	200d      	movs	r0, #13
    3e2c:	2c00      	cmp	r4, #0
    3e2e:	d100      	bne.n	3e32 <_ZL11find_volumePPKcPP5FATFSh+0x2f6>
    3e30:	e0d5      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
		fmt = FS_FAT32;
    3e32:	2500      	movs	r5, #0
    3e34:	4b25      	ldr	r3, [pc, #148]	; (3ecc <_ZL11find_volumePPKcPP5FATFSh+0x390>)
    3e36:	42a3      	cmp	r3, r4
    3e38:	416d      	adcs	r5, r5
    3e3a:	2303      	movs	r3, #3
    3e3c:	1b5d      	subs	r5, r3, r5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    3e3e:	4b24      	ldr	r3, [pc, #144]	; (3ed0 <_ZL11find_volumePPKcPP5FATFSh+0x394>)
    3e40:	429c      	cmp	r4, r3
    3e42:	d800      	bhi.n	3e46 <_ZL11find_volumePPKcPP5FATFSh+0x30a>
    3e44:	e0b0      	b.n	3fa8 <_ZL11find_volumePPKcPP5FATFSh+0x46c>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3e46:	3402      	adds	r4, #2
    3e48:	62fc      	str	r4, [r7, #44]	; 0x2c
		fs->volbase = bsect;								/* Volume start sector */
    3e4a:	637e      	str	r6, [r7, #52]	; 0x34
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3e4c:	465a      	mov	r2, fp
    3e4e:	18b3      	adds	r3, r6, r2
    3e50:	63bb      	str	r3, [r7, #56]	; 0x38
		fs->database = bsect + sysect;						/* Data start sector */
    3e52:	4651      	mov	r1, sl
    3e54:	198a      	adds	r2, r1, r6
    3e56:	643a      	str	r2, [r7, #64]	; 0x40
		if (fmt == FS_FAT32) {
    3e58:	2d03      	cmp	r5, #3
    3e5a:	d112      	bne.n	3e82 <_ZL11find_volumePPKcPP5FATFSh+0x346>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    3e5c:	2383      	movs	r3, #131	; 0x83
	rv = rv << 8 | ptr[0];
    3e5e:	5cfb      	ldrb	r3, [r7, r3]
    3e60:	021b      	lsls	r3, r3, #8
    3e62:	2282      	movs	r2, #130	; 0x82
    3e64:	5cba      	ldrb	r2, [r7, r2]
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
		fs->volbase = bsect;								/* Volume start sector */
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
		fs->database = bsect + sysect;						/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    3e66:	4313      	orrs	r3, r2
    3e68:	d000      	beq.n	3e6c <_ZL11find_volumePPKcPP5FATFSh+0x330>
    3e6a:	e0b8      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3e6c:	464a      	mov	r2, r9
    3e6e:	2a00      	cmp	r2, #0
    3e70:	d000      	beq.n	3e74 <_ZL11find_volumePPKcPP5FATFSh+0x338>
    3e72:	e0b4      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    3e74:	1c38      	adds	r0, r7, #0
    3e76:	3084      	adds	r0, #132	; 0x84
    3e78:	4b0e      	ldr	r3, [pc, #56]	; (3eb4 <_ZL11find_volumePPKcPP5FATFSh+0x378>)
    3e7a:	4798      	blx	r3
    3e7c:	63f8      	str	r0, [r7, #60]	; 0x3c
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
    3e7e:	00a4      	lsls	r4, r4, #2
    3e80:	e02e      	b.n	3ee0 <_ZL11find_volumePPKcPP5FATFSh+0x3a4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
    3e82:	200d      	movs	r0, #13
    3e84:	4649      	mov	r1, r9
    3e86:	2900      	cmp	r1, #0
    3e88:	d100      	bne.n	3e8c <_ZL11find_volumePPKcPP5FATFSh+0x350>
    3e8a:	e0a8      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    3e8c:	9a01      	ldr	r2, [sp, #4]
    3e8e:	189b      	adds	r3, r3, r2
    3e90:	63fb      	str	r3, [r7, #60]	; 0x3c
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3e92:	2d02      	cmp	r5, #2
    3e94:	d11e      	bne.n	3ed4 <_ZL11find_volumePPKcPP5FATFSh+0x398>
    3e96:	0064      	lsls	r4, r4, #1
    3e98:	e022      	b.n	3ee0 <_ZL11find_volumePPKcPP5FATFSh+0x3a4>
    3e9a:	46c0      	nop			; (mov r8, r8)
    3e9c:	00002b75 	.word	0x00002b75
    3ea0:	20000630 	.word	0x20000630
    3ea4:	00002981 	.word	0x00002981
    3ea8:	0000297d 	.word	0x0000297d
    3eac:	00003a79 	.word	0x00003a79
    3eb0:	0000021e 	.word	0x0000021e
    3eb4:	00002a2d 	.word	0x00002a2d
    3eb8:	00002a45 	.word	0x00002a45
    3ebc:	7ffffffd 	.word	0x7ffffffd
    3ec0:	00002b01 	.word	0x00002b01
    3ec4:	00002cd9 	.word	0x00002cd9
    3ec8:	00006461 	.word	0x00006461
    3ecc:	0000fff5 	.word	0x0000fff5
    3ed0:	00000ff5 	.word	0x00000ff5
    3ed4:	2303      	movs	r3, #3
    3ed6:	4363      	muls	r3, r4
    3ed8:	085b      	lsrs	r3, r3, #1
    3eda:	2201      	movs	r2, #1
    3edc:	4014      	ands	r4, r2
    3ede:	191c      	adds	r4, r3, r4
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    3ee0:	4b42      	ldr	r3, [pc, #264]	; (3fec <_ZL11find_volumePPKcPP5FATFSh+0x4b0>)
    3ee2:	18e4      	adds	r4, r4, r3
    3ee4:	0a64      	lsrs	r4, r4, #9
    3ee6:	200d      	movs	r0, #13
    3ee8:	45a0      	cmp	r8, r4
    3eea:	d378      	bcc.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    3eec:	2301      	movs	r3, #1
    3eee:	425b      	negs	r3, r3
    3ef0:	61bb      	str	r3, [r7, #24]
    3ef2:	617b      	str	r3, [r7, #20]
		fs->fsi_flag = 0x80;
    3ef4:	2380      	movs	r3, #128	; 0x80
    3ef6:	713b      	strb	r3, [r7, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
    3ef8:	2d03      	cmp	r5, #3
    3efa:	d128      	bne.n	3f4e <_ZL11find_volumePPKcPP5FATFSh+0x412>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    3efc:	2389      	movs	r3, #137	; 0x89
	rv = rv << 8 | ptr[0];
    3efe:	5cfb      	ldrb	r3, [r7, r3]
    3f00:	021b      	lsls	r3, r3, #8
    3f02:	2288      	movs	r2, #136	; 0x88
    3f04:	5cba      	ldrb	r2, [r7, r2]
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
		fs->fsi_flag = 0x80;
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    3f06:	4313      	orrs	r3, r2
    3f08:	2b01      	cmp	r3, #1
    3f0a:	d120      	bne.n	3f4e <_ZL11find_volumePPKcPP5FATFSh+0x412>
			&& move_window(fs, bsect + 1) == FR_OK)
    3f0c:	1c71      	adds	r1, r6, #1
    3f0e:	1c38      	adds	r0, r7, #0
    3f10:	4b37      	ldr	r3, [pc, #220]	; (3ff0 <_ZL11find_volumePPKcPP5FATFSh+0x4b4>)
    3f12:	4798      	blx	r3
#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
		fs->fsi_flag = 0x80;
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
    3f14:	2800      	cmp	r0, #0
    3f16:	d11a      	bne.n	3f4e <_ZL11find_volumePPKcPP5FATFSh+0x412>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
    3f18:	2300      	movs	r3, #0
    3f1a:	713b      	strb	r3, [r7, #4]
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    3f1c:	4b35      	ldr	r3, [pc, #212]	; (3ff4 <_ZL11find_volumePPKcPP5FATFSh+0x4b8>)
	rv = rv << 8 | ptr[0];
    3f1e:	5cfb      	ldrb	r3, [r7, r3]
    3f20:	021b      	lsls	r3, r3, #8
    3f22:	4a35      	ldr	r2, [pc, #212]	; (3ff8 <_ZL11find_volumePPKcPP5FATFSh+0x4bc>)
    3f24:	5cba      	ldrb	r2, [r7, r2]
    3f26:	431a      	orrs	r2, r3
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    3f28:	b212      	sxth	r2, r2
    3f2a:	4b34      	ldr	r3, [pc, #208]	; (3ffc <_ZL11find_volumePPKcPP5FATFSh+0x4c0>)
    3f2c:	429a      	cmp	r2, r3
    3f2e:	d10e      	bne.n	3f4e <_ZL11find_volumePPKcPP5FATFSh+0x412>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    3f30:	1c38      	adds	r0, r7, #0
    3f32:	3058      	adds	r0, #88	; 0x58
    3f34:	4b32      	ldr	r3, [pc, #200]	; (4000 <_ZL11find_volumePPKcPP5FATFSh+0x4c4>)
    3f36:	4798      	blx	r3
    3f38:	4b32      	ldr	r3, [pc, #200]	; (4004 <_ZL11find_volumePPKcPP5FATFSh+0x4c8>)
    3f3a:	4298      	cmp	r0, r3
    3f3c:	d107      	bne.n	3f4e <_ZL11find_volumePPKcPP5FATFSh+0x412>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    3f3e:	268f      	movs	r6, #143	; 0x8f
    3f40:	00b6      	lsls	r6, r6, #2
    3f42:	19b8      	adds	r0, r7, r6
    3f44:	4b2e      	ldr	r3, [pc, #184]	; (4000 <_ZL11find_volumePPKcPP5FATFSh+0x4c4>)
    3f46:	4798      	blx	r3
    3f48:	4b2f      	ldr	r3, [pc, #188]	; (4008 <_ZL11find_volumePPKcPP5FATFSh+0x4cc>)
    3f4a:	4298      	cmp	r0, r3
    3f4c:	d037      	beq.n	3fbe <_ZL11find_volumePPKcPP5FATFSh+0x482>
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;	/* FAT sub-type */
    3f4e:	703d      	strb	r5, [r7, #0]
	fs->id = ++Fsid;	/* File system mount ID */
    3f50:	4a2e      	ldr	r2, [pc, #184]	; (400c <_ZL11find_volumePPKcPP5FATFSh+0x4d0>)
    3f52:	8813      	ldrh	r3, [r2, #0]
    3f54:	3301      	adds	r3, #1
    3f56:	b29b      	uxth	r3, r3
    3f58:	8013      	strh	r3, [r2, #0]
    3f5a:	80fb      	strh	r3, [r7, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
    3f5c:	4b2c      	ldr	r3, [pc, #176]	; (4010 <_ZL11find_volumePPKcPP5FATFSh+0x4d4>)
    3f5e:	60fb      	str	r3, [r7, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block working buuffer */
    3f60:	4b2c      	ldr	r3, [pc, #176]	; (4014 <_ZL11find_volumePPKcPP5FATFSh+0x4d8>)
    3f62:	613b      	str	r3, [r7, #16]
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;		/* Initialize current directory */
    3f64:	2000      	movs	r0, #0
    3f66:	61f8      	str	r0, [r7, #28]
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
    3f68:	e039      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3f6a:	200c      	movs	r0, #12
    3f6c:	e037      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    3f6e:	2001      	movs	r0, #1
    3f70:	e035      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
#if _FS_EXFAT
	if (fmt == 1) {
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
    3f72:	200d      	movs	r0, #13
    3f74:	e033      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>

		/* Boundaries and Limits */
		fs->volbase = bsect;
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
    3f76:	200d      	movs	r0, #13
    3f78:	e031      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
		for (i = 0; i < SS(fs); i += SZDIRE) {
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
    3f7a:	200d      	movs	r0, #13
    3f7c:	e02f      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    3f7e:	2001      	movs	r0, #1
    3f80:	e02d      	b.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    3f82:	23c1      	movs	r3, #193	; 0xc1
	rv = rv << 8 | ptr[0];
    3f84:	5cfb      	ldrb	r3, [r7, r3]
    3f86:	021b      	lsls	r3, r3, #8
    3f88:	22c0      	movs	r2, #192	; 0xc0
    3f8a:	5cba      	ldrb	r2, [r7, r2]
    3f8c:	431a      	orrs	r2, r3
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
    3f8e:	b212      	sxth	r2, r2
    3f90:	200d      	movs	r0, #13
    3f92:	2380      	movs	r3, #128	; 0x80
    3f94:	005b      	lsls	r3, r3, #1
    3f96:	429a      	cmp	r2, r3
    3f98:	d121      	bne.n	3fde <_ZL11find_volumePPKcPP5FATFSh+0x4a2>
    3f9a:	e659      	b.n	3c50 <_ZL11find_volumePPKcPP5FATFSh+0x114>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
		for (i = 0; i < SS(fs); i += SZDIRE) {
    3f9c:	3420      	adds	r4, #32
    3f9e:	3520      	adds	r5, #32
    3fa0:	42b4      	cmp	r4, r6
    3fa2:	d000      	beq.n	3fa6 <_ZL11find_volumePPKcPP5FATFSh+0x46a>
    3fa4:	e6c8      	b.n	3d38 <_ZL11find_volumePPKcPP5FATFSh+0x1fc>
    3fa6:	e7e8      	b.n	3f7a <_ZL11find_volumePPKcPP5FATFSh+0x43e>
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3fa8:	3402      	adds	r4, #2
    3faa:	62fc      	str	r4, [r7, #44]	; 0x2c
		fs->volbase = bsect;								/* Volume start sector */
    3fac:	637e      	str	r6, [r7, #52]	; 0x34
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3fae:	4659      	mov	r1, fp
    3fb0:	1873      	adds	r3, r6, r1
    3fb2:	63bb      	str	r3, [r7, #56]	; 0x38
		fs->database = bsect + sysect;						/* Data start sector */
    3fb4:	4651      	mov	r1, sl
    3fb6:	198a      	adds	r2, r1, r6
    3fb8:	643a      	str	r2, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    3fba:	2501      	movs	r5, #1
    3fbc:	e761      	b.n	3e82 <_ZL11find_volumePPKcPP5FATFSh+0x346>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    3fbe:	2290      	movs	r2, #144	; 0x90
    3fc0:	0092      	lsls	r2, r2, #2
    3fc2:	18b8      	adds	r0, r7, r2
    3fc4:	4c0e      	ldr	r4, [pc, #56]	; (4000 <_ZL11find_volumePPKcPP5FATFSh+0x4c4>)
    3fc6:	47a0      	blx	r4
    3fc8:	61b8      	str	r0, [r7, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    3fca:	2391      	movs	r3, #145	; 0x91
    3fcc:	009b      	lsls	r3, r3, #2
    3fce:	18f8      	adds	r0, r7, r3
    3fd0:	47a0      	blx	r4
    3fd2:	6178      	str	r0, [r7, #20]
    3fd4:	e7bb      	b.n	3f4e <_ZL11find_volumePPKcPP5FATFSh+0x412>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    3fd6:	2804      	cmp	r0, #4
    3fd8:	d000      	beq.n	3fdc <_ZL11find_volumePPKcPP5FATFSh+0x4a0>
    3fda:	e623      	b.n	3c24 <_ZL11find_volumePPKcPP5FATFSh+0xe8>
    3fdc:	e7cf      	b.n	3f7e <_ZL11find_volumePPKcPP5FATFSh+0x442>
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
    3fde:	b007      	add	sp, #28
    3fe0:	bc3c      	pop	{r2, r3, r4, r5}
    3fe2:	4690      	mov	r8, r2
    3fe4:	4699      	mov	r9, r3
    3fe6:	46a2      	mov	sl, r4
    3fe8:	46ab      	mov	fp, r5
    3fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fec:	000001ff 	.word	0x000001ff
    3ff0:	00002cd9 	.word	0x00002cd9
    3ff4:	00000257 	.word	0x00000257
    3ff8:	00000256 	.word	0x00000256
    3ffc:	ffffaa55 	.word	0xffffaa55
    4000:	00002a2d 	.word	0x00002a2d
    4004:	41615252 	.word	0x41615252
    4008:	61417272 	.word	0x61417272
    400c:	2000062c 	.word	0x2000062c
    4010:	2000042c 	.word	0x2000042c
    4014:	200001c8 	.word	0x200001c8

00004018 <_ZL8dir_readP3DIRi>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
    4018:	b5f0      	push	{r4, r5, r6, r7, lr}
    401a:	465f      	mov	r7, fp
    401c:	4656      	mov	r6, sl
    401e:	464d      	mov	r5, r9
    4020:	4644      	mov	r4, r8
    4022:	b4f0      	push	{r4, r5, r6, r7}
    4024:	b083      	sub	sp, #12
    4026:	1c05      	adds	r5, r0, #0
    4028:	4689      	mov	r9, r1
	FRESULT res = FR_NO_FILE;
	FATFS *fs = dp->obj.fs;
    402a:	6806      	ldr	r6, [r0, #0]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
    402c:	20ff      	movs	r0, #255	; 0xff
    402e:	4682      	mov	sl, r0
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
    4030:	2404      	movs	r4, #4
    4032:	4a68      	ldr	r2, [pc, #416]	; (41d4 <_ZL8dir_readP3DIRi+0x1bc>)
    4034:	4693      	mov	fp, r2
    4036:	220d      	movs	r2, #13
    4038:	4493      	add	fp, r2
    403a:	1c20      	adds	r0, r4, #0
    403c:	4654      	mov	r4, sl
    403e:	9401      	str	r4, [sp, #4]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
    4040:	e09e      	b.n	4180 <_ZL8dir_readP3DIRi+0x168>
		res = move_window(fs, dp->sect);
    4042:	1c30      	adds	r0, r6, #0
    4044:	4f64      	ldr	r7, [pc, #400]	; (41d8 <_ZL8dir_readP3DIRi+0x1c0>)
    4046:	47b8      	blx	r7
		if (res != FR_OK) break;
    4048:	2800      	cmp	r0, #0
    404a:	d000      	beq.n	404e <_ZL8dir_readP3DIRi+0x36>
    404c:	e09f      	b.n	418e <_ZL8dir_readP3DIRi+0x176>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
    404e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    4050:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
    4052:	2b00      	cmp	r3, #0
    4054:	d100      	bne.n	4058 <_ZL8dir_readP3DIRi+0x40>
    4056:	e0b0      	b.n	41ba <_ZL8dir_readP3DIRi+0x1a2>
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    4058:	7831      	ldrb	r1, [r6, #0]
    405a:	2904      	cmp	r1, #4
    405c:	d111      	bne.n	4082 <_ZL8dir_readP3DIRi+0x6a>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
    405e:	2b85      	cmp	r3, #133	; 0x85
    4060:	d000      	beq.n	4064 <_ZL8dir_readP3DIRi+0x4c>
    4062:	e087      	b.n	4174 <_ZL8dir_readP3DIRi+0x15c>
    4064:	1c04      	adds	r4, r0, #0
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
    4066:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4068:	6468      	str	r0, [r5, #68]	; 0x44
					res = load_xdir(dp);	/* Load the entry block */
    406a:	1c28      	adds	r0, r5, #0
    406c:	4b5b      	ldr	r3, [pc, #364]	; (41dc <_ZL8dir_readP3DIRi+0x1c4>)
    406e:	4798      	blx	r3
					if (res == FR_OK) {
    4070:	2800      	cmp	r0, #0
    4072:	d000      	beq.n	4076 <_ZL8dir_readP3DIRi+0x5e>
    4074:	e0a3      	b.n	41be <_ZL8dir_readP3DIRi+0x1a6>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
    4076:	6933      	ldr	r3, [r6, #16]
    4078:	791b      	ldrb	r3, [r3, #4]
    407a:	223f      	movs	r2, #63	; 0x3f
    407c:	4013      	ands	r3, r2
    407e:	71ab      	strb	r3, [r5, #6]
    4080:	e09f      	b.n	41c2 <_ZL8dir_readP3DIRi+0x1aa>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
    4082:	7ad1      	ldrb	r1, [r2, #11]
    4084:	243f      	movs	r4, #63	; 0x3f
    4086:	4021      	ands	r1, r4
    4088:	71a9      	strb	r1, [r5, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
    408a:	2be5      	cmp	r3, #229	; 0xe5
    408c:	d067      	beq.n	415e <_ZL8dir_readP3DIRi+0x146>
    408e:	2b2e      	cmp	r3, #46	; 0x2e
    4090:	d068      	beq.n	4164 <_ZL8dir_readP3DIRi+0x14c>
    4092:	2420      	movs	r4, #32
    4094:	1c0f      	adds	r7, r1, #0
    4096:	43a7      	bics	r7, r4
    4098:	46bc      	mov	ip, r7
    409a:	2708      	movs	r7, #8
    409c:	427f      	negs	r7, r7
    409e:	44bc      	add	ip, r7
    40a0:	4667      	mov	r7, ip
    40a2:	427c      	negs	r4, r7
    40a4:	417c      	adcs	r4, r7
    40a6:	454c      	cmp	r4, r9
    40a8:	d15f      	bne.n	416a <_ZL8dir_readP3DIRi+0x152>
				ord = 0xFF;
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
    40aa:	290f      	cmp	r1, #15
    40ac:	d14a      	bne.n	4144 <_ZL8dir_readP3DIRi+0x12c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
    40ae:	0658      	lsls	r0, r3, #25
    40b0:	d506      	bpl.n	40c0 <_ZL8dir_readP3DIRi+0xa8>
						sum = dp->dir[LDIR_Chksum];
    40b2:	7b51      	ldrb	r1, [r2, #13]
    40b4:	468a      	mov	sl, r1
						c &= (BYTE)~LLEF; ord = c;
    40b6:	2140      	movs	r1, #64	; 0x40
    40b8:	438b      	bics	r3, r1
						dp->blk_ofs = dp->dptr;
    40ba:	6aac      	ldr	r4, [r5, #40]	; 0x28
    40bc:	646c      	str	r4, [r5, #68]	; 0x44
    40be:	e002      	b.n	40c6 <_ZL8dir_readP3DIRi+0xae>
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    40c0:	9c01      	ldr	r4, [sp, #4]
    40c2:	429c      	cmp	r4, r3
    40c4:	d154      	bne.n	4170 <_ZL8dir_readP3DIRi+0x158>
    40c6:	7b57      	ldrb	r7, [r2, #13]
    40c8:	46bc      	mov	ip, r7
    40ca:	24ff      	movs	r4, #255	; 0xff
    40cc:	9401      	str	r4, [sp, #4]
    40ce:	4557      	cmp	r7, sl
    40d0:	d150      	bne.n	4174 <_ZL8dir_readP3DIRi+0x15c>
    40d2:	68f7      	ldr	r7, [r6, #12]
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    40d4:	7ed1      	ldrb	r1, [r2, #27]
    40d6:	0209      	lsls	r1, r1, #8
    40d8:	7e90      	ldrb	r0, [r2, #26]
{
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
    40da:	4301      	orrs	r1, r0
    40dc:	d169      	bne.n	41b2 <_ZL8dir_readP3DIRi+0x19a>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    40de:	7811      	ldrb	r1, [r2, #0]
    40e0:	203f      	movs	r0, #63	; 0x3f
    40e2:	4001      	ands	r1, r0
    40e4:	3901      	subs	r1, #1
    40e6:	004c      	lsls	r4, r1, #1
    40e8:	1864      	adds	r4, r4, r1
    40ea:	00a4      	lsls	r4, r4, #2
    40ec:	1864      	adds	r4, r4, r1
    40ee:	4939      	ldr	r1, [pc, #228]	; (41d4 <_ZL8dir_readP3DIRi+0x1bc>)

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    40f0:	2001      	movs	r0, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    40f2:	46b0      	mov	r8, r6
    40f4:	465e      	mov	r6, fp
    40f6:	46ab      	mov	fp, r5
    40f8:	1c15      	adds	r5, r2, #0
    40fa:	1c02      	adds	r2, r0, #0
    40fc:	469a      	mov	sl, r3
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
    40fe:	7808      	ldrb	r0, [r1, #0]
    4100:	1828      	adds	r0, r5, r0
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    4102:	7843      	ldrb	r3, [r0, #1]
    4104:	021b      	lsls	r3, r3, #8
    4106:	7800      	ldrb	r0, [r0, #0]
    4108:	4303      	orrs	r3, r0

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
    410a:	2a00      	cmp	r2, #0
    410c:	d006      	beq.n	411c <_ZL8dir_readP3DIRi+0x104>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    410e:	2cfe      	cmp	r4, #254	; 0xfe
    4110:	d848      	bhi.n	41a4 <_ZL8dir_readP3DIRi+0x18c>
			lfnbuf[i++] = wc = uc;			/* Store it */
    4112:	0062      	lsls	r2, r4, #1
    4114:	53d3      	strh	r3, [r2, r7]
    4116:	1c1a      	adds	r2, r3, #0
    4118:	3401      	adds	r4, #1
    411a:	e002      	b.n	4122 <_ZL8dir_readP3DIRi+0x10a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    411c:	4830      	ldr	r0, [pc, #192]	; (41e0 <_ZL8dir_readP3DIRi+0x1c8>)
    411e:	4283      	cmp	r3, r0
    4120:	d144      	bne.n	41ac <_ZL8dir_readP3DIRi+0x194>
    4122:	3101      	adds	r1, #1

	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    4124:	42b1      	cmp	r1, r6
    4126:	d1ea      	bne.n	40fe <_ZL8dir_readP3DIRi+0xe6>
    4128:	1c2a      	adds	r2, r5, #0
    412a:	4653      	mov	r3, sl
    412c:	465d      	mov	r5, fp
    412e:	46b3      	mov	fp, r6
    4130:	4646      	mov	r6, r8
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
    4132:	7812      	ldrb	r2, [r2, #0]
    4134:	0651      	lsls	r1, r2, #25
    4136:	d530      	bpl.n	419a <_ZL8dir_readP3DIRi+0x182>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    4138:	2cfe      	cmp	r4, #254	; 0xfe
    413a:	d83a      	bhi.n	41b2 <_ZL8dir_readP3DIRi+0x19a>
		lfnbuf[i] = 0;
    413c:	0064      	lsls	r4, r4, #1
    413e:	2200      	movs	r2, #0
    4140:	53e2      	strh	r2, [r4, r7]
    4142:	e02a      	b.n	419a <_ZL8dir_readP3DIRi+0x182>
    4144:	9b01      	ldr	r3, [sp, #4]
    4146:	1c04      	adds	r4, r0, #0
    4148:	1c10      	adds	r0, r2, #0
						dp->blk_ofs = dp->dptr;
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
    414a:	2b00      	cmp	r3, #0
    414c:	d103      	bne.n	4156 <_ZL8dir_readP3DIRi+0x13e>
    414e:	4b25      	ldr	r3, [pc, #148]	; (41e4 <_ZL8dir_readP3DIRi+0x1cc>)
    4150:	4798      	blx	r3
    4152:	4582      	cmp	sl, r0
    4154:	d035      	beq.n	41c2 <_ZL8dir_readP3DIRi+0x1aa>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
    4156:	2301      	movs	r3, #1
    4158:	425b      	negs	r3, r3
    415a:	646b      	str	r3, [r5, #68]	; 0x44
    415c:	e031      	b.n	41c2 <_ZL8dir_readP3DIRi+0x1aa>
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
				ord = 0xFF;
    415e:	24ff      	movs	r4, #255	; 0xff
    4160:	9401      	str	r4, [sp, #4]
    4162:	e007      	b.n	4174 <_ZL8dir_readP3DIRi+0x15c>
    4164:	24ff      	movs	r4, #255	; 0xff
    4166:	9401      	str	r4, [sp, #4]
    4168:	e004      	b.n	4174 <_ZL8dir_readP3DIRi+0x15c>
    416a:	24ff      	movs	r4, #255	; 0xff
    416c:	9401      	str	r4, [sp, #4]
    416e:	e001      	b.n	4174 <_ZL8dir_readP3DIRi+0x15c>
						sum = dp->dir[LDIR_Chksum];
						c &= (BYTE)~LLEF; ord = c;
						dp->blk_ofs = dp->dptr;
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    4170:	24ff      	movs	r4, #255	; 0xff
    4172:	9401      	str	r4, [sp, #4]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
    4174:	1c28      	adds	r0, r5, #0
    4176:	2100      	movs	r1, #0
    4178:	4b1b      	ldr	r3, [pc, #108]	; (41e8 <_ZL8dir_readP3DIRi+0x1d0>)
    417a:	4798      	blx	r3
		if (res != FR_OK) break;
    417c:	2800      	cmp	r0, #0
    417e:	d108      	bne.n	4192 <_ZL8dir_readP3DIRi+0x17a>
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
    4180:	6b29      	ldr	r1, [r5, #48]	; 0x30
    4182:	2900      	cmp	r1, #0
    4184:	d000      	beq.n	4188 <_ZL8dir_readP3DIRi+0x170>
    4186:	e75c      	b.n	4042 <_ZL8dir_readP3DIRi+0x2a>
    4188:	1e04      	subs	r4, r0, #0
		}
		res = dir_next(dp, 0);		/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    418a:	d01a      	beq.n	41c2 <_ZL8dir_readP3DIRi+0x1aa>
    418c:	e002      	b.n	4194 <_ZL8dir_readP3DIRi+0x17c>
    418e:	1c04      	adds	r4, r0, #0
    4190:	e000      	b.n	4194 <_ZL8dir_readP3DIRi+0x17c>
    4192:	1c04      	adds	r4, r0, #0
    4194:	2300      	movs	r3, #0
    4196:	632b      	str	r3, [r5, #48]	; 0x30
    4198:	e013      	b.n	41c2 <_ZL8dir_readP3DIRi+0x1aa>
						sum = dp->dir[LDIR_Chksum];
						c &= (BYTE)~LLEF; ord = c;
						dp->blk_ofs = dp->dptr;
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    419a:	3b01      	subs	r3, #1
    419c:	b2db      	uxtb	r3, r3
    419e:	9301      	str	r3, [sp, #4]
    41a0:	46e2      	mov	sl, ip
    41a2:	e7e7      	b.n	4174 <_ZL8dir_readP3DIRi+0x15c>
    41a4:	465d      	mov	r5, fp
    41a6:	46b3      	mov	fp, r6
    41a8:	4646      	mov	r6, r8
    41aa:	e002      	b.n	41b2 <_ZL8dir_readP3DIRi+0x19a>
    41ac:	465d      	mov	r5, fp
    41ae:	46b3      	mov	fp, r6
    41b0:	4646      	mov	r6, r8
    41b2:	46e2      	mov	sl, ip
    41b4:	24ff      	movs	r4, #255	; 0xff
    41b6:	9401      	str	r4, [sp, #4]
    41b8:	e7dc      	b.n	4174 <_ZL8dir_readP3DIRi+0x15c>

	while (dp->sect) {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
		c = dp->dir[DIR_Name];	/* Test for the entry type */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
    41ba:	2404      	movs	r4, #4
    41bc:	e7ea      	b.n	4194 <_ZL8dir_readP3DIRi+0x17c>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
					res = load_xdir(dp);	/* Load the entry block */
    41be:	1c04      	adds	r4, r0, #0
    41c0:	e7e8      	b.n	4194 <_ZL8dir_readP3DIRi+0x17c>
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
	return res;
}
    41c2:	1c20      	adds	r0, r4, #0
    41c4:	b003      	add	sp, #12
    41c6:	bc3c      	pop	{r2, r3, r4, r5}
    41c8:	4690      	mov	r8, r2
    41ca:	4699      	mov	r9, r3
    41cc:	46a2      	mov	sl, r4
    41ce:	46ab      	mov	fp, r5
    41d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41d2:	46c0      	nop			; (mov r8, r8)
    41d4:	00006ca4 	.word	0x00006ca4
    41d8:	00002cd9 	.word	0x00002cd9
    41dc:	00003865 	.word	0x00003865
    41e0:	0000ffff 	.word	0x0000ffff
    41e4:	00002b19 	.word	0x00002b19
    41e8:	00003729 	.word	0x00003729

000041ec <_ZL8dir_findP3DIR>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
    41ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ee:	465f      	mov	r7, fp
    41f0:	4656      	mov	r6, sl
    41f2:	464d      	mov	r5, r9
    41f4:	4644      	mov	r4, r8
    41f6:	b4f0      	push	{r4, r5, r6, r7}
    41f8:	b087      	sub	sp, #28
    41fa:	1c04      	adds	r4, r0, #0
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    41fc:	6801      	ldr	r1, [r0, #0]
    41fe:	4689      	mov	r9, r1
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    4200:	2100      	movs	r1, #0
    4202:	4b95      	ldr	r3, [pc, #596]	; (4458 <_ZL8dir_findP3DIR+0x26c>)
    4204:	4798      	blx	r3
    4206:	1c03      	adds	r3, r0, #0
	if (res != FR_OK) return res;
    4208:	2b00      	cmp	r3, #0
    420a:	d000      	beq.n	420e <_ZL8dir_findP3DIR+0x22>
    420c:	e11d      	b.n	444a <_ZL8dir_findP3DIR+0x25e>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    420e:	464a      	mov	r2, r9
    4210:	7813      	ldrb	r3, [r2, #0]
    4212:	2b04      	cmp	r3, #4
    4214:	d144      	bne.n	42a0 <_ZL8dir_findP3DIR+0xb4>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
    4216:	68d0      	ldr	r0, [r2, #12]
    4218:	4b90      	ldr	r3, [pc, #576]	; (445c <_ZL8dir_findP3DIR+0x270>)
    421a:	4798      	blx	r3
    421c:	4682      	mov	sl, r0

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
    421e:	4b90      	ldr	r3, [pc, #576]	; (4460 <_ZL8dir_findP3DIR+0x274>)
    4220:	4698      	mov	r8, r3
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    4222:	2125      	movs	r1, #37	; 0x25
    4224:	468b      	mov	fp, r1
    4226:	464e      	mov	r6, r9
    4228:	46a1      	mov	r9, r4
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
    422a:	e032      	b.n	4292 <_ZL8dir_findP3DIR+0xa6>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip the comparison if hash value mismatched */
    422c:	6933      	ldr	r3, [r6, #16]
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    422e:	4659      	mov	r1, fp
    4230:	5c5a      	ldrb	r2, [r3, r1]
    4232:	0212      	lsls	r2, r2, #8
    4234:	5d19      	ldrb	r1, [r3, r4]
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip the comparison if hash value mismatched */
    4236:	430a      	orrs	r2, r1
    4238:	4592      	cmp	sl, r2
    423a:	d12b      	bne.n	4294 <_ZL8dir_findP3DIR+0xa8>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
    423c:	2223      	movs	r2, #35	; 0x23
    423e:	5c9f      	ldrb	r7, [r3, r2]
    4240:	2f00      	cmp	r7, #0
    4242:	d100      	bne.n	4246 <_ZL8dir_findP3DIR+0x5a>
    4244:	e0e2      	b.n	440c <_ZL8dir_findP3DIR+0x220>
    4246:	2400      	movs	r4, #0
    4248:	2540      	movs	r5, #64	; 0x40
				if ((di % SZDIRE) == 0) di += 2;
    424a:	221f      	movs	r2, #31
    424c:	422a      	tst	r2, r5
    424e:	d100      	bne.n	4252 <_ZL8dir_findP3DIR+0x66>
    4250:	3502      	adds	r5, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
    4252:	6931      	ldr	r1, [r6, #16]
    4254:	194b      	adds	r3, r1, r5
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    4256:	7858      	ldrb	r0, [r3, #1]
    4258:	0200      	lsls	r0, r0, #8
    425a:	781b      	ldrb	r3, [r3, #0]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip the comparison if hash value mismatched */
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
				if ((di % SZDIRE) == 0) di += 2;
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
    425c:	4318      	orrs	r0, r3
    425e:	4a81      	ldr	r2, [pc, #516]	; (4464 <_ZL8dir_findP3DIR+0x278>)
    4260:	4790      	blx	r2
    4262:	9001      	str	r0, [sp, #4]
    4264:	0063      	lsls	r3, r4, #1
    4266:	68f1      	ldr	r1, [r6, #12]
    4268:	5a58      	ldrh	r0, [r3, r1]
    426a:	4a7e      	ldr	r2, [pc, #504]	; (4464 <_ZL8dir_findP3DIR+0x278>)
    426c:	4790      	blx	r2
    426e:	9b01      	ldr	r3, [sp, #4]
    4270:	4283      	cmp	r3, r0
    4272:	d106      	bne.n	4282 <_ZL8dir_findP3DIR+0x96>
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip the comparison if hash value mismatched */
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
    4274:	3f01      	subs	r7, #1
    4276:	b2ff      	uxtb	r7, r7
    4278:	3502      	adds	r5, #2
    427a:	3401      	adds	r4, #1
    427c:	2f00      	cmp	r7, #0
    427e:	d1e4      	bne.n	424a <_ZL8dir_findP3DIR+0x5e>
    4280:	e001      	b.n	4286 <_ZL8dir_findP3DIR+0x9a>
				if ((di % SZDIRE) == 0) di += 2;
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
    4282:	2f00      	cmp	r7, #0
    4284:	d105      	bne.n	4292 <_ZL8dir_findP3DIR+0xa6>
    4286:	0064      	lsls	r4, r4, #1
    4288:	68f1      	ldr	r1, [r6, #12]
    428a:	5a63      	ldrh	r3, [r4, r1]
    428c:	2b00      	cmp	r3, #0
    428e:	d100      	bne.n	4292 <_ZL8dir_findP3DIR+0xa6>
    4290:	e0b4      	b.n	43fc <_ZL8dir_findP3DIR+0x210>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    4292:	2424      	movs	r4, #36	; 0x24
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
    4294:	4648      	mov	r0, r9
    4296:	2100      	movs	r1, #0
    4298:	47c0      	blx	r8
    429a:	2800      	cmp	r0, #0
    429c:	d0c6      	beq.n	422c <_ZL8dir_findP3DIR+0x40>
    429e:	e0d4      	b.n	444a <_ZL8dir_findP3DIR+0x25e>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
    42a0:	2301      	movs	r3, #1
    42a2:	425b      	negs	r3, r3
    42a4:	6463      	str	r3, [r4, #68]	; 0x44
    42a6:	22ff      	movs	r2, #255	; 0xff
    42a8:	4692      	mov	sl, r2
    42aa:	4690      	mov	r8, r2
#endif
	do {
		res = move_window(fs, dp->sect);
    42ac:	4f6e      	ldr	r7, [pc, #440]	; (4468 <_ZL8dir_findP3DIR+0x27c>)
    42ae:	496f      	ldr	r1, [pc, #444]	; (446c <_ZL8dir_findP3DIR+0x280>)
    42b0:	468b      	mov	fp, r1
    42b2:	210d      	movs	r1, #13
    42b4:	448b      	add	fp, r1
    42b6:	4648      	mov	r0, r9
    42b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    42ba:	47b8      	blx	r7
		if (res != FR_OK) break;
    42bc:	2800      	cmp	r0, #0
    42be:	d000      	beq.n	42c2 <_ZL8dir_findP3DIR+0xd6>
    42c0:	e0c3      	b.n	444a <_ZL8dir_findP3DIR+0x25e>
		c = dp->dir[DIR_Name];
    42c2:	6b65      	ldr	r5, [r4, #52]	; 0x34
    42c4:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    42c6:	2e00      	cmp	r6, #0
    42c8:	d100      	bne.n	42cc <_ZL8dir_findP3DIR+0xe0>
    42ca:	e099      	b.n	4400 <_ZL8dir_findP3DIR+0x214>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
    42cc:	7aeb      	ldrb	r3, [r5, #11]
    42ce:	223f      	movs	r2, #63	; 0x3f
    42d0:	401a      	ands	r2, r3
    42d2:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    42d4:	2ee5      	cmp	r6, #229	; 0xe5
    42d6:	d003      	beq.n	42e0 <_ZL8dir_findP3DIR+0xf4>
    42d8:	0719      	lsls	r1, r3, #28
    42da:	d507      	bpl.n	42ec <_ZL8dir_findP3DIR+0x100>
    42dc:	2a0f      	cmp	r2, #15
    42de:	d007      	beq.n	42f0 <_ZL8dir_findP3DIR+0x104>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
    42e0:	2301      	movs	r3, #1
    42e2:	425b      	negs	r3, r3
    42e4:	6463      	str	r3, [r4, #68]	; 0x44
    42e6:	22ff      	movs	r2, #255	; 0xff
    42e8:	4690      	mov	r8, r2
    42ea:	e07f      	b.n	43ec <_ZL8dir_findP3DIR+0x200>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    42ec:	2a0f      	cmp	r2, #15
    42ee:	d15f      	bne.n	43b0 <_ZL8dir_findP3DIR+0x1c4>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
    42f0:	2343      	movs	r3, #67	; 0x43
    42f2:	5ce3      	ldrb	r3, [r4, r3]
    42f4:	0659      	lsls	r1, r3, #25
    42f6:	d479      	bmi.n	43ec <_ZL8dir_findP3DIR+0x200>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
    42f8:	0672      	lsls	r2, r6, #25
    42fa:	d506      	bpl.n	430a <_ZL8dir_findP3DIR+0x11e>
						sum = dp->dir[LDIR_Chksum];
    42fc:	7b6b      	ldrb	r3, [r5, #13]
    42fe:	469a      	mov	sl, r3
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
    4300:	2340      	movs	r3, #64	; 0x40
    4302:	439e      	bics	r6, r3
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
    4304:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4306:	6461      	str	r1, [r4, #68]	; 0x44
    4308:	e001      	b.n	430e <_ZL8dir_findP3DIR+0x122>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    430a:	45b0      	cmp	r8, r6
    430c:	d16c      	bne.n	43e8 <_ZL8dir_findP3DIR+0x1fc>
    430e:	7b6a      	ldrb	r2, [r5, #13]
    4310:	9201      	str	r2, [sp, #4]
    4312:	23ff      	movs	r3, #255	; 0xff
    4314:	4698      	mov	r8, r3
    4316:	4552      	cmp	r2, sl
    4318:	d168      	bne.n	43ec <_ZL8dir_findP3DIR+0x200>
    431a:	4649      	mov	r1, r9
    431c:	68c9      	ldr	r1, [r1, #12]
    431e:	9103      	str	r1, [sp, #12]
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    4320:	7eeb      	ldrb	r3, [r5, #27]
    4322:	021b      	lsls	r3, r3, #8
    4324:	7eaa      	ldrb	r2, [r5, #26]
{
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
    4326:	4313      	orrs	r3, r2
    4328:	d17d      	bne.n	4426 <_ZL8dir_findP3DIR+0x23a>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    432a:	782b      	ldrb	r3, [r5, #0]
    432c:	223f      	movs	r2, #63	; 0x3f
    432e:	4013      	ands	r3, r2
    4330:	3b01      	subs	r3, #1
    4332:	005a      	lsls	r2, r3, #1
    4334:	18d2      	adds	r2, r2, r3
    4336:	0092      	lsls	r2, r2, #2
    4338:	18d2      	adds	r2, r2, r3
    433a:	9202      	str	r2, [sp, #8]
    433c:	4a4b      	ldr	r2, [pc, #300]	; (446c <_ZL8dir_findP3DIR+0x280>)

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    433e:	2101      	movs	r1, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
    4340:	46b0      	mov	r8, r6
    4342:	1c16      	adds	r6, r2, #0
    4344:	46a2      	mov	sl, r4
    4346:	1c2c      	adds	r4, r5, #0
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
    4348:	7833      	ldrb	r3, [r6, #0]
    434a:	18e3      	adds	r3, r4, r3
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    434c:	785a      	ldrb	r2, [r3, #1]
    434e:	0212      	lsls	r2, r2, #8
    4350:	781d      	ldrb	r5, [r3, #0]
    4352:	4315      	orrs	r5, r2

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
    4354:	2900      	cmp	r1, #0
    4356:	d016      	beq.n	4386 <_ZL8dir_findP3DIR+0x19a>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
    4358:	9b02      	ldr	r3, [sp, #8]
    435a:	2bfe      	cmp	r3, #254	; 0xfe
    435c:	d85e      	bhi.n	441c <_ZL8dir_findP3DIR+0x230>
    435e:	1c28      	adds	r0, r5, #0
    4360:	4940      	ldr	r1, [pc, #256]	; (4464 <_ZL8dir_findP3DIR+0x278>)
    4362:	4788      	blx	r1
    4364:	9005      	str	r0, [sp, #20]
    4366:	9a02      	ldr	r2, [sp, #8]
    4368:	3201      	adds	r2, #1
    436a:	9204      	str	r2, [sp, #16]
    436c:	9902      	ldr	r1, [sp, #8]
    436e:	004b      	lsls	r3, r1, #1
    4370:	9a03      	ldr	r2, [sp, #12]
    4372:	5a98      	ldrh	r0, [r3, r2]
    4374:	4b3b      	ldr	r3, [pc, #236]	; (4464 <_ZL8dir_findP3DIR+0x278>)
    4376:	4798      	blx	r3
    4378:	9905      	ldr	r1, [sp, #20]
    437a:	4281      	cmp	r1, r0
    437c:	d150      	bne.n	4420 <_ZL8dir_findP3DIR+0x234>
				return 0;					/* Not matched */
			}
			wc = uc;
    437e:	1c29      	adds	r1, r5, #0
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
    4380:	9a04      	ldr	r2, [sp, #16]
    4382:	9202      	str	r2, [sp, #8]
    4384:	e002      	b.n	438c <_ZL8dir_findP3DIR+0x1a0>
				return 0;					/* Not matched */
			}
			wc = uc;
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    4386:	4b3a      	ldr	r3, [pc, #232]	; (4470 <_ZL8dir_findP3DIR+0x284>)
    4388:	429d      	cmp	r5, r3
    438a:	d14b      	bne.n	4424 <_ZL8dir_findP3DIR+0x238>
    438c:	3601      	adds	r6, #1

	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
    438e:	455e      	cmp	r6, fp
    4390:	d1da      	bne.n	4348 <_ZL8dir_findP3DIR+0x15c>
    4392:	1c25      	adds	r5, r4, #0
    4394:	4646      	mov	r6, r8
    4396:	4654      	mov	r4, sl
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
    4398:	782b      	ldrb	r3, [r5, #0]
    439a:	065a      	lsls	r2, r3, #25
    439c:	d538      	bpl.n	4410 <_ZL8dir_findP3DIR+0x224>
    439e:	2900      	cmp	r1, #0
    43a0:	d036      	beq.n	4410 <_ZL8dir_findP3DIR+0x224>
    43a2:	9902      	ldr	r1, [sp, #8]
    43a4:	004b      	lsls	r3, r1, #1
    43a6:	9a03      	ldr	r2, [sp, #12]
    43a8:	5a9b      	ldrh	r3, [r3, r2]
    43aa:	2b00      	cmp	r3, #0
    43ac:	d030      	beq.n	4410 <_ZL8dir_findP3DIR+0x224>
    43ae:	e03a      	b.n	4426 <_ZL8dir_findP3DIR+0x23a>
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
    43b0:	4643      	mov	r3, r8
    43b2:	2b00      	cmp	r3, #0
    43b4:	d13c      	bne.n	4430 <_ZL8dir_findP3DIR+0x244>
    43b6:	1c28      	adds	r0, r5, #0
    43b8:	4b2e      	ldr	r3, [pc, #184]	; (4474 <_ZL8dir_findP3DIR+0x288>)
    43ba:	4798      	blx	r3
    43bc:	4550      	cmp	r0, sl
    43be:	d137      	bne.n	4430 <_ZL8dir_findP3DIR+0x244>
    43c0:	e020      	b.n	4404 <_ZL8dir_findP3DIR+0x218>
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    43c2:	7829      	ldrb	r1, [r5, #0]
    43c4:	2338      	movs	r3, #56	; 0x38
    43c6:	5ce3      	ldrb	r3, [r4, r3]
    43c8:	1ac9      	subs	r1, r1, r3
    43ca:	1c6b      	adds	r3, r5, #1
    43cc:	1c22      	adds	r2, r4, #0
    43ce:	3239      	adds	r2, #57	; 0x39
    43d0:	350b      	adds	r5, #11
    43d2:	e006      	b.n	43e2 <_ZL8dir_findP3DIR+0x1f6>
    43d4:	7818      	ldrb	r0, [r3, #0]
    43d6:	7811      	ldrb	r1, [r2, #0]
    43d8:	1a41      	subs	r1, r0, r1
    43da:	3301      	adds	r3, #1
    43dc:	3201      	adds	r2, #1
	} while (--cnt && r == 0);
    43de:	42ab      	cmp	r3, r5
    43e0:	d02b      	beq.n	443a <_ZL8dir_findP3DIR+0x24e>
    43e2:	2900      	cmp	r1, #0
    43e4:	d0f6      	beq.n	43d4 <_ZL8dir_findP3DIR+0x1e8>
    43e6:	e02a      	b.n	443e <_ZL8dir_findP3DIR+0x252>
						sum = dp->dir[LDIR_Chksum];
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    43e8:	21ff      	movs	r1, #255	; 0xff
    43ea:	4688      	mov	r8, r1
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
    43ec:	1c20      	adds	r0, r4, #0
    43ee:	2100      	movs	r1, #0
    43f0:	4b21      	ldr	r3, [pc, #132]	; (4478 <_ZL8dir_findP3DIR+0x28c>)
    43f2:	4798      	blx	r3
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
    43f4:	2800      	cmp	r0, #0
    43f6:	d100      	bne.n	43fa <_ZL8dir_findP3DIR+0x20e>
    43f8:	e75d      	b.n	42b6 <_ZL8dir_findP3DIR+0xca>
    43fa:	e026      	b.n	444a <_ZL8dir_findP3DIR+0x25e>
				if ((di % SZDIRE) == 0) di += 2;
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
		}
		return res;
    43fc:	2000      	movs	r0, #0
    43fe:	e024      	b.n	444a <_ZL8dir_findP3DIR+0x25e>
#endif
	do {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
		c = dp->dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    4400:	2004      	movs	r0, #4
    4402:	e022      	b.n	444a <_ZL8dir_findP3DIR+0x25e>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
    4404:	2000      	movs	r0, #0
    4406:	e020      	b.n	444a <_ZL8dir_findP3DIR+0x25e>
    4408:	2000      	movs	r0, #0
    440a:	e01e      	b.n	444a <_ZL8dir_findP3DIR+0x25e>
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip the comparison if hash value mismatched */
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
    440c:	2400      	movs	r4, #0
    440e:	e73a      	b.n	4286 <_ZL8dir_findP3DIR+0x9a>
						sum = dp->dir[LDIR_Chksum];
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
    4410:	3e01      	subs	r6, #1
    4412:	b2f6      	uxtb	r6, r6
    4414:	46b0      	mov	r8, r6
    4416:	9a01      	ldr	r2, [sp, #4]
    4418:	4692      	mov	sl, r2
    441a:	e7e7      	b.n	43ec <_ZL8dir_findP3DIR+0x200>
    441c:	4654      	mov	r4, sl
    441e:	e002      	b.n	4426 <_ZL8dir_findP3DIR+0x23a>
    4420:	4654      	mov	r4, sl
    4422:	e000      	b.n	4426 <_ZL8dir_findP3DIR+0x23a>
    4424:	4654      	mov	r4, sl
    4426:	9b01      	ldr	r3, [sp, #4]
    4428:	469a      	mov	sl, r3
    442a:	21ff      	movs	r1, #255	; 0xff
    442c:	4688      	mov	r8, r1
    442e:	e7dd      	b.n	43ec <_ZL8dir_findP3DIR+0x200>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
    4430:	2343      	movs	r3, #67	; 0x43
    4432:	5ce3      	ldrb	r3, [r4, r3]
    4434:	07da      	lsls	r2, r3, #31
    4436:	d402      	bmi.n	443e <_ZL8dir_findP3DIR+0x252>
    4438:	e7c3      	b.n	43c2 <_ZL8dir_findP3DIR+0x1d6>
    443a:	2900      	cmp	r1, #0
    443c:	d0e4      	beq.n	4408 <_ZL8dir_findP3DIR+0x21c>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
    443e:	2301      	movs	r3, #1
    4440:	425b      	negs	r3, r3
    4442:	6463      	str	r3, [r4, #68]	; 0x44
    4444:	23ff      	movs	r3, #255	; 0xff
    4446:	4698      	mov	r8, r3
    4448:	e7d0      	b.n	43ec <_ZL8dir_findP3DIR+0x200>
#endif
		res = dir_next(dp, 0);	/* Next entry */
	} while (res == FR_OK);

	return res;
}
    444a:	b007      	add	sp, #28
    444c:	bc3c      	pop	{r2, r3, r4, r5}
    444e:	4690      	mov	r8, r2
    4450:	4699      	mov	r9, r3
    4452:	46a2      	mov	sl, r4
    4454:	46ab      	mov	fp, r5
    4456:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4458:	00003565 	.word	0x00003565
    445c:	00002db1 	.word	0x00002db1
    4460:	00004019 	.word	0x00004019
    4464:	000056a1 	.word	0x000056a1
    4468:	00002cd9 	.word	0x00002cd9
    446c:	00006ca4 	.word	0x00006ca4
    4470:	0000ffff 	.word	0x0000ffff
    4474:	00002b19 	.word	0x00002b19
    4478:	00003729 	.word	0x00003729

0000447c <_ZL12dir_registerP3DIR>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
    447c:	b5f0      	push	{r4, r5, r6, r7, lr}
    447e:	465f      	mov	r7, fp
    4480:	4656      	mov	r6, sl
    4482:	464d      	mov	r5, r9
    4484:	4644      	mov	r4, r8
    4486:	b4f0      	push	{r4, r5, r6, r7}
    4488:	b0a5      	sub	sp, #148	; 0x94
    448a:	900e      	str	r0, [sp, #56]	; 0x38
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    448c:	6801      	ldr	r1, [r0, #0]
    448e:	4689      	mov	r9, r1
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
    4490:	2343      	movs	r3, #67	; 0x43
    4492:	5cc3      	ldrb	r3, [r0, r3]
    4494:	225f      	movs	r2, #95	; 0x5f
    4496:	4393      	bics	r3, r2
    4498:	2006      	movs	r0, #6
    449a:	2b00      	cmp	r3, #0
    449c:	d000      	beq.n	44a0 <_ZL12dir_registerP3DIR+0x24>
    449e:	e210      	b.n	48c2 <_ZL12dir_registerP3DIR+0x446>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
    44a0:	68cb      	ldr	r3, [r1, #12]
    44a2:	881a      	ldrh	r2, [r3, #0]
    44a4:	2a00      	cmp	r2, #0
    44a6:	d00b      	beq.n	44c0 <_ZL12dir_registerP3DIR+0x44>
    44a8:	3302      	adds	r3, #2
    44aa:	2400      	movs	r4, #0
    44ac:	940f      	str	r4, [sp, #60]	; 0x3c
    44ae:	2200      	movs	r2, #0
    44b0:	3201      	adds	r2, #1
    44b2:	3302      	adds	r3, #2
    44b4:	1e99      	subs	r1, r3, #2
    44b6:	8809      	ldrh	r1, [r1, #0]
    44b8:	2900      	cmp	r1, #0
    44ba:	d1f9      	bne.n	44b0 <_ZL12dir_registerP3DIR+0x34>
    44bc:	920f      	str	r2, [sp, #60]	; 0x3c
    44be:	e001      	b.n	44c4 <_ZL12dir_registerP3DIR+0x48>
    44c0:	2500      	movs	r5, #0
    44c2:	950f      	str	r5, [sp, #60]	; 0x3c

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
    44c4:	464e      	mov	r6, r9
    44c6:	7833      	ldrb	r3, [r6, #0]
    44c8:	2b04      	cmp	r3, #4
    44ca:	d000      	beq.n	44ce <_ZL12dir_registerP3DIR+0x52>
    44cc:	e09e      	b.n	460c <_ZL12dir_registerP3DIR+0x190>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
    44ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
    44d0:	300e      	adds	r0, #14
    44d2:	210f      	movs	r1, #15
    44d4:	4bce      	ldr	r3, [pc, #824]	; (4810 <_ZL12dir_registerP3DIR+0x394>)
    44d6:	4798      	blx	r3
    44d8:	1c04      	adds	r4, r0, #0
    44da:	1c81      	adds	r1, r0, #2
		res = dir_alloc(dp, nent);		/* Allocate entries */
    44dc:	980e      	ldr	r0, [sp, #56]	; 0x38
    44de:	4bcd      	ldr	r3, [pc, #820]	; (4814 <_ZL12dir_registerP3DIR+0x398>)
    44e0:	4798      	blx	r3
    44e2:	1c03      	adds	r3, r0, #0
		if (res != FR_OK) return res;
    44e4:	2b00      	cmp	r3, #0
    44e6:	d000      	beq.n	44ea <_ZL12dir_registerP3DIR+0x6e>
    44e8:	e1eb      	b.n	48c2 <_ZL12dir_registerP3DIR+0x446>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);			/* Set block position */
    44ea:	4fcb      	ldr	r7, [pc, #812]	; (4818 <_ZL12dir_registerP3DIR+0x39c>)
    44ec:	19e3      	adds	r3, r4, r7
    44ee:	015b      	lsls	r3, r3, #5
    44f0:	980e      	ldr	r0, [sp, #56]	; 0x38
    44f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
    44f4:	1ac3      	subs	r3, r0, r3
    44f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    44f8:	6463      	str	r3, [r4, #68]	; 0x44

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
    44fa:	68a5      	ldr	r5, [r4, #8]
    44fc:	2d00      	cmp	r5, #0
    44fe:	d041      	beq.n	4584 <_ZL12dir_registerP3DIR+0x108>
    4500:	79e3      	ldrb	r3, [r4, #7]
    4502:	075e      	lsls	r6, r3, #29
    4504:	d53e      	bpl.n	4584 <_ZL12dir_registerP3DIR+0x108>
			dp->obj.stat &= 3;
    4506:	2203      	movs	r2, #3
    4508:	4013      	ands	r3, r2
    450a:	71e3      	strb	r3, [r4, #7]
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase object size by cluster size */
    450c:	464f      	mov	r7, r9
    450e:	8979      	ldrh	r1, [r7, #10]
    4510:	024a      	lsls	r2, r1, #9
    4512:	2300      	movs	r3, #0
    4514:	6920      	ldr	r0, [r4, #16]
    4516:	6961      	ldr	r1, [r4, #20]
    4518:	1812      	adds	r2, r2, r0
    451a:	414b      	adcs	r3, r1
    451c:	6122      	str	r2, [r4, #16]
    451e:	6163      	str	r3, [r4, #20]
			res = fill_fat_chain(&dp->obj);	/* Complement FAT chain if needed */
    4520:	1c20      	adds	r0, r4, #0
    4522:	4bbe      	ldr	r3, [pc, #760]	; (481c <_ZL12dir_registerP3DIR+0x3a0>)
    4524:	4798      	blx	r3
    4526:	1c03      	adds	r3, r0, #0
			if (res != FR_OK) return res;
    4528:	2b00      	cmp	r3, #0
    452a:	d000      	beq.n	452e <_ZL12dir_registerP3DIR+0xb2>
    452c:	e1c9      	b.n	48c2 <_ZL12dir_registerP3DIR+0x446>
			res = load_obj_dir(&dj, &dp->obj);
    452e:	a812      	add	r0, sp, #72	; 0x48
    4530:	990e      	ldr	r1, [sp, #56]	; 0x38
    4532:	4bbb      	ldr	r3, [pc, #748]	; (4820 <_ZL12dir_registerP3DIR+0x3a4>)
    4534:	4798      	blx	r3
    4536:	1c03      	adds	r3, r0, #0
			if (res != FR_OK) return res;	/* Load the object status */
    4538:	2b00      	cmp	r3, #0
    453a:	d000      	beq.n	453e <_ZL12dir_registerP3DIR+0xc2>
    453c:	e1c1      	b.n	48c2 <_ZL12dir_registerP3DIR+0x446>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
    453e:	6938      	ldr	r0, [r7, #16]
    4540:	3038      	adds	r0, #56	; 0x38
    4542:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4544:	6935      	ldr	r5, [r6, #16]
    4546:	6976      	ldr	r6, [r6, #20]
    4548:	9508      	str	r5, [sp, #32]
    454a:	9609      	str	r6, [sp, #36]	; 0x24
    454c:	1c2a      	adds	r2, r5, #0
    454e:	1c33      	adds	r3, r6, #0
    4550:	4cb4      	ldr	r4, [pc, #720]	; (4824 <_ZL12dir_registerP3DIR+0x3a8>)
    4552:	47a0      	blx	r4
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
    4554:	6938      	ldr	r0, [r7, #16]
    4556:	3028      	adds	r0, #40	; 0x28
    4558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    455a:	6911      	ldr	r1, [r2, #16]
    455c:	6952      	ldr	r2, [r2, #20]
    455e:	9106      	str	r1, [sp, #24]
    4560:	9207      	str	r2, [sp, #28]
    4562:	1c13      	adds	r3, r2, #0
    4564:	1c0a      	adds	r2, r1, #0
    4566:	47a0      	blx	r4
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
    4568:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    456a:	79e2      	ldrb	r2, [r4, #7]
    456c:	2301      	movs	r3, #1
    456e:	431a      	orrs	r2, r3
    4570:	2321      	movs	r3, #33	; 0x21
    4572:	693d      	ldr	r5, [r7, #16]
    4574:	54ea      	strb	r2, [r5, r3]
			res = store_xdir(&dj);			/* Store the object status */
    4576:	a812      	add	r0, sp, #72	; 0x48
    4578:	4bab      	ldr	r3, [pc, #684]	; (4828 <_ZL12dir_registerP3DIR+0x3ac>)
    457a:	4798      	blx	r3
    457c:	1c03      	adds	r3, r0, #0
			if (res != FR_OK) return res;
    457e:	2b00      	cmp	r3, #0
    4580:	d000      	beq.n	4584 <_ZL12dir_registerP3DIR+0x108>
    4582:	e19e      	b.n	48c2 <_ZL12dir_registerP3DIR+0x446>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
    4584:	464e      	mov	r6, r9
    4586:	6934      	ldr	r4, [r6, #16]
    4588:	68f7      	ldr	r7, [r6, #12]
    458a:	46b8      	mov	r8, r7
	UINT i;
	BYTE nb, nc;
	WCHAR chr;


	mem_set(dirb, 0, 2 * SZDIRE);			/* Initialize 85+C0 entry */
    458c:	1c20      	adds	r0, r4, #0
    458e:	2100      	movs	r1, #0
    4590:	2240      	movs	r2, #64	; 0x40
    4592:	4ba6      	ldr	r3, [pc, #664]	; (482c <_ZL12dir_registerP3DIR+0x3b0>)
    4594:	4798      	blx	r3
	dirb[XDIR_Type] = 0x85;
    4596:	2385      	movs	r3, #133	; 0x85
    4598:	7023      	strb	r3, [r4, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
    459a:	22c0      	movs	r2, #192	; 0xc0
    459c:	2320      	movs	r3, #32
    459e:	54e2      	strb	r2, [r4, r3]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
    45a0:	1c38      	adds	r0, r7, #0
    45a2:	4ba3      	ldr	r3, [pc, #652]	; (4830 <_ZL12dir_registerP3DIR+0x3b4>)
    45a4:	4798      	blx	r3

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    45a6:	2324      	movs	r3, #36	; 0x24
    45a8:	54e0      	strb	r0, [r4, r3]
    45aa:	1200      	asrs	r0, r0, #8
	*ptr++ = (BYTE)val;
    45ac:	2325      	movs	r3, #37	; 0x25
    45ae:	54e0      	strb	r0, [r4, r3]
	dirb[XDIR_Type] = 0x85;
	dirb[XDIR_Type + SZDIRE] = 0xC0;
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */

	i = SZDIRE * 2;	/* C1 offset */
	nc = 0; nb = 1; chr = 1;
    45b0:	2201      	movs	r2, #1
    45b2:	2600      	movs	r6, #0
    45b4:	2001      	movs	r0, #1
	mem_set(dirb, 0, 2 * SZDIRE);			/* Initialize 85+C0 entry */
	dirb[XDIR_Type] = 0x85;
	dirb[XDIR_Type + SZDIRE] = 0xC0;
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */

	i = SZDIRE * 2;	/* C1 offset */
    45b6:	2340      	movs	r3, #64	; 0x40
	nc = 0; nb = 1; chr = 1;
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
    45b8:	21c1      	movs	r1, #193	; 0xc1
    45ba:	4689      	mov	r9, r1
    45bc:	46b4      	mov	ip, r6
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
			st_word(dirb + i, chr); i += 2;	/* Store it */
		} while (i % SZDIRE);
    45be:	271f      	movs	r7, #31
    45c0:	1c01      	adds	r1, r0, #0
    45c2:	4640      	mov	r0, r8
    45c4:	4688      	mov	r8, r1
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */

	i = SZDIRE * 2;	/* C1 offset */
	nc = 0; nb = 1; chr = 1;
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
    45c6:	1c59      	adds	r1, r3, #1
    45c8:	464d      	mov	r5, r9
    45ca:	54e5      	strb	r5, [r4, r3]
    45cc:	4665      	mov	r5, ip
    45ce:	5465      	strb	r5, [r4, r1]
    45d0:	3302      	adds	r3, #2
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
    45d2:	2a00      	cmp	r2, #0
    45d4:	d005      	beq.n	45e2 <_ZL12dir_registerP3DIR+0x166>
    45d6:	0072      	lsls	r2, r6, #1
    45d8:	5a12      	ldrh	r2, [r2, r0]
    45da:	2a00      	cmp	r2, #0
    45dc:	d001      	beq.n	45e2 <_ZL12dir_registerP3DIR+0x166>
    45de:	3601      	adds	r6, #1
    45e0:	b2f6      	uxtb	r6, r6

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    45e2:	54e2      	strb	r2, [r4, r3]
    45e4:	18e1      	adds	r1, r4, r3
    45e6:	1215      	asrs	r5, r2, #8
	*ptr++ = (BYTE)val;
    45e8:	704d      	strb	r5, [r1, #1]
	nc = 0; nb = 1; chr = 1;
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
			st_word(dirb + i, chr); i += 2;	/* Store it */
    45ea:	3302      	adds	r3, #2

	i = SZDIRE * 2;	/* C1 offset */
	nc = 0; nb = 1; chr = 1;
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
		do {	/* Fill name field */
    45ec:	421f      	tst	r7, r3
    45ee:	d1f0      	bne.n	45d2 <_ZL12dir_registerP3DIR+0x156>
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
			st_word(dirb + i, chr); i += 2;	/* Store it */
		} while (i % SZDIRE);
		nb++;
    45f0:	4641      	mov	r1, r8
    45f2:	3101      	adds	r1, #1
    45f4:	b2c9      	uxtb	r1, r1
    45f6:	4688      	mov	r8, r1
	dirb[XDIR_Type + SZDIRE] = 0xC0;
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */

	i = SZDIRE * 2;	/* C1 offset */
	nc = 0; nb = 1; chr = 1;
	do {
    45f8:	0071      	lsls	r1, r6, #1
    45fa:	5a09      	ldrh	r1, [r1, r0]
    45fc:	2900      	cmp	r1, #0
    45fe:	d1e2      	bne.n	45c6 <_ZL12dir_registerP3DIR+0x14a>
    4600:	4640      	mov	r0, r8
			st_word(dirb + i, chr); i += 2;	/* Store it */
		} while (i % SZDIRE);
		nb++;
	} while (lfn[nc]);	/* Fill next entry if any char follows */

	dirb[XDIR_NumName] = nc;	/* Set name length */
    4602:	2323      	movs	r3, #35	; 0x23
    4604:	54e6      	strb	r6, [r4, r3]
	dirb[XDIR_NumSec] = nb;		/* Set number of C0+C1s */
    4606:	7060      	strb	r0, [r4, #1]
			res = store_xdir(&dj);			/* Store the object status */
			if (res != FR_OK) return res;
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
    4608:	2000      	movs	r0, #0
    460a:	e15a      	b.n	48c2 <_ZL12dir_registerP3DIR+0x446>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
    460c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    460e:	3538      	adds	r5, #56	; 0x38
    4610:	ac12      	add	r4, sp, #72	; 0x48
    4612:	1c20      	adds	r0, r4, #0
    4614:	1c29      	adds	r1, r5, #0
    4616:	220c      	movs	r2, #12
    4618:	4b86      	ldr	r3, [pc, #536]	; (4834 <_ZL12dir_registerP3DIR+0x3b8>)
    461a:	4798      	blx	r3
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    461c:	7ae3      	ldrb	r3, [r4, #11]
    461e:	07de      	lsls	r6, r3, #31
    4620:	d579      	bpl.n	4716 <_ZL12dir_registerP3DIR+0x29a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
    4622:	2240      	movs	r2, #64	; 0x40
    4624:	2343      	movs	r3, #67	; 0x43
    4626:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    4628:	54fa      	strb	r2, [r7, r3]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
    462a:	1c28      	adds	r0, r5, #0
    462c:	a912      	add	r1, sp, #72	; 0x48
    462e:	220b      	movs	r2, #11
    4630:	4b80      	ldr	r3, [pc, #512]	; (4834 <_ZL12dir_registerP3DIR+0x3b8>)
    4632:	4798      	blx	r3
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
		for (n = 1; n < 100; n++) {
    4634:	2001      	movs	r0, #1
    4636:	2401      	movs	r4, #1
    4638:	4683      	mov	fp, r0
    463a:	e024      	b.n	4686 <_ZL12dir_registerP3DIR+0x20a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
    463c:	464a      	mov	r2, r9
    463e:	68d1      	ldr	r1, [r2, #12]
    4640:	4688      	mov	r8, r1
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
    4642:	1c28      	adds	r0, r5, #0
    4644:	a912      	add	r1, sp, #72	; 0x48
    4646:	220b      	movs	r2, #11
    4648:	4c7a      	ldr	r4, [pc, #488]	; (4834 <_ZL12dir_registerP3DIR+0x3b8>)
    464a:	47a0      	blx	r4
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
		for (n = 1; n < 100; n++) {
    464c:	465c      	mov	r4, fp
	DWORD sr;


	mem_cpy(dst, src, 11);

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
    464e:	2c05      	cmp	r4, #5
    4650:	d919      	bls.n	4686 <_ZL12dir_registerP3DIR+0x20a>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
    4652:	2610      	movs	r6, #16
    4654:	46b2      	mov	sl, r6
			for (i = 0; i < 16; i++) {
				sr = (sr << 1) + (wc & 1);
    4656:	2601      	movs	r6, #1
				wc >>= 1;
				if (sr & 0x10000) sr ^= 0x11021;
    4658:	2080      	movs	r0, #128	; 0x80
    465a:	0240      	lsls	r0, r0, #9
    465c:	4f76      	ldr	r7, [pc, #472]	; (4838 <_ZL12dir_registerP3DIR+0x3bc>)
    465e:	46ac      	mov	ip, r5
    4660:	4645      	mov	r5, r8
    4662:	e00c      	b.n	467e <_ZL12dir_registerP3DIR+0x202>
	mem_cpy(dst, src, 11);

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
    4664:	3502      	adds	r5, #2
    4666:	4652      	mov	r2, sl
			for (i = 0; i < 16; i++) {
				sr = (sr << 1) + (wc & 1);
    4668:	0064      	lsls	r4, r4, #1
    466a:	1c31      	adds	r1, r6, #0
    466c:	4019      	ands	r1, r3
    466e:	190c      	adds	r4, r1, r4
				wc >>= 1;
    4670:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
    4672:	4204      	tst	r4, r0
    4674:	d000      	beq.n	4678 <_ZL12dir_registerP3DIR+0x1fc>
    4676:	407c      	eors	r4, r7
    4678:	3a01      	subs	r2, #1

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
    467a:	2a00      	cmp	r2, #0
    467c:	d1f4      	bne.n	4668 <_ZL12dir_registerP3DIR+0x1ec>

	mem_cpy(dst, src, 11);

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
		sr = seq;
		while (*lfn) {	/* Create a CRC */
    467e:	882b      	ldrh	r3, [r5, #0]
    4680:	2b00      	cmp	r3, #0
    4682:	d1ef      	bne.n	4664 <_ZL12dir_registerP3DIR+0x1e8>
    4684:	4665      	mov	r5, ip
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
		for (n = 1; n < 100; n++) {
    4686:	2307      	movs	r3, #7
	}

	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
    4688:	200f      	movs	r0, #15
    468a:	1c01      	adds	r1, r0, #0
    468c:	4021      	ands	r1, r4
    468e:	1c0a      	adds	r2, r1, #0
    4690:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    4692:	2a39      	cmp	r2, #57	; 0x39
    4694:	d900      	bls.n	4698 <_ZL12dir_registerP3DIR+0x21c>
    4696:	3207      	adds	r2, #7
		ns[i--] = c;
    4698:	3b01      	subs	r3, #1
    469a:	af10      	add	r7, sp, #64	; 0x40
    469c:	18f9      	adds	r1, r7, r3
    469e:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    46a0:	0924      	lsrs	r4, r4, #4
		seq = (UINT)sr;
	}

	/* itoa (hexdecimal) */
	i = 7;
	do {
    46a2:	d1f2      	bne.n	468a <_ZL12dir_registerP3DIR+0x20e>
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
    46a4:	1c18      	adds	r0, r3, #0
		seq /= 16;
	} while (seq);
	ns[i] = '~';
    46a6:	227e      	movs	r2, #126	; 0x7e
    46a8:	54fa      	strb	r2, [r7, r3]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    46aa:	2b00      	cmp	r3, #0
    46ac:	d00c      	beq.n	46c8 <_ZL12dir_registerP3DIR+0x24c>
    46ae:	2238      	movs	r2, #56	; 0x38
    46b0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    46b2:	5ca2      	ldrb	r2, [r4, r2]
    46b4:	2a20      	cmp	r2, #32
    46b6:	d009      	beq.n	46cc <_ZL12dir_registerP3DIR+0x250>
    46b8:	2200      	movs	r2, #0
    46ba:	3201      	adds	r2, #1
    46bc:	4282      	cmp	r2, r0
    46be:	d006      	beq.n	46ce <_ZL12dir_registerP3DIR+0x252>
    46c0:	5ca9      	ldrb	r1, [r5, r2]
    46c2:	2920      	cmp	r1, #32
    46c4:	d1f9      	bne.n	46ba <_ZL12dir_registerP3DIR+0x23e>
    46c6:	e002      	b.n	46ce <_ZL12dir_registerP3DIR+0x252>
    46c8:	2200      	movs	r2, #0
    46ca:	e000      	b.n	46ce <_ZL12dir_registerP3DIR+0x252>
    46cc:	2200      	movs	r2, #0
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    46ce:	2020      	movs	r0, #32
    46d0:	1c01      	adds	r1, r0, #0
    46d2:	2b07      	cmp	r3, #7
    46d4:	d802      	bhi.n	46dc <_ZL12dir_registerP3DIR+0x260>
    46d6:	ae10      	add	r6, sp, #64	; 0x40
    46d8:	5cf1      	ldrb	r1, [r6, r3]
    46da:	3301      	adds	r3, #1
    46dc:	54a9      	strb	r1, [r5, r2]
    46de:	3201      	adds	r2, #1
		if (IsDBCS1(dst[j])) {
			if (j == i - 1) break;
			j++;
		}
	}
	do {
    46e0:	2a07      	cmp	r2, #7
    46e2:	d9f5      	bls.n	46d0 <_ZL12dir_registerP3DIR+0x254>
	mem_cpy(sn, dp->fn, 12);
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
		for (n = 1; n < 100; n++) {
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
    46e4:	980e      	ldr	r0, [sp, #56]	; 0x38
    46e6:	4f55      	ldr	r7, [pc, #340]	; (483c <_ZL12dir_registerP3DIR+0x3c0>)
    46e8:	47b8      	blx	r7
			if (res != FR_OK) break;
    46ea:	2800      	cmp	r0, #0
    46ec:	d106      	bne.n	46fc <_ZL12dir_registerP3DIR+0x280>
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
		for (n = 1; n < 100; n++) {
    46ee:	2001      	movs	r0, #1
    46f0:	4483      	add	fp, r0
    46f2:	4659      	mov	r1, fp
    46f4:	2964      	cmp	r1, #100	; 0x64
    46f6:	d1a1      	bne.n	463c <_ZL12dir_registerP3DIR+0x1c0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    46f8:	2007      	movs	r0, #7
    46fa:	e0e2      	b.n	48c2 <_ZL12dir_registerP3DIR+0x446>
    46fc:	1c03      	adds	r3, r0, #0
    46fe:	465a      	mov	r2, fp
    4700:	2a64      	cmp	r2, #100	; 0x64
    4702:	d100      	bne.n	4706 <_ZL12dir_registerP3DIR+0x28a>
    4704:	e0c4      	b.n	4890 <_ZL12dir_registerP3DIR+0x414>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    4706:	2b04      	cmp	r3, #4
    4708:	d000      	beq.n	470c <_ZL12dir_registerP3DIR+0x290>
    470a:	e0da      	b.n	48c2 <_ZL12dir_registerP3DIR+0x446>
		dp->fn[NSFLAG] = sn[NSFLAG];
    470c:	ab12      	add	r3, sp, #72	; 0x48
    470e:	7ada      	ldrb	r2, [r3, #11]
    4710:	2343      	movs	r3, #67	; 0x43
    4712:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    4714:	54e2      	strb	r2, [r4, r3]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
    4716:	ab12      	add	r3, sp, #72	; 0x48
    4718:	7adb      	ldrb	r3, [r3, #11]
    471a:	2401      	movs	r4, #1
    471c:	079e      	lsls	r6, r3, #30
    471e:	d505      	bpl.n	472c <_ZL12dir_registerP3DIR+0x2b0>
    4720:	980f      	ldr	r0, [sp, #60]	; 0x3c
    4722:	300c      	adds	r0, #12
    4724:	210d      	movs	r1, #13
    4726:	4b3a      	ldr	r3, [pc, #232]	; (4810 <_ZL12dir_registerP3DIR+0x394>)
    4728:	4798      	blx	r3
    472a:	1c44      	adds	r4, r0, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
    472c:	980e      	ldr	r0, [sp, #56]	; 0x38
    472e:	1c21      	adds	r1, r4, #0
    4730:	4b38      	ldr	r3, [pc, #224]	; (4814 <_ZL12dir_registerP3DIR+0x398>)
    4732:	4798      	blx	r3
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
    4734:	2800      	cmp	r0, #0
    4736:	d000      	beq.n	473a <_ZL12dir_registerP3DIR+0x2be>
    4738:	e0c3      	b.n	48c2 <_ZL12dir_registerP3DIR+0x446>
    473a:	3c01      	subs	r4, #1
    473c:	2c00      	cmp	r4, #0
    473e:	d100      	bne.n	4742 <_ZL12dir_registerP3DIR+0x2c6>
    4740:	e0b6      	b.n	48b0 <_ZL12dir_registerP3DIR+0x434>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
    4742:	0163      	lsls	r3, r4, #5
    4744:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    4746:	6abf      	ldr	r7, [r7, #40]	; 0x28
    4748:	1af9      	subs	r1, r7, r3
    474a:	980e      	ldr	r0, [sp, #56]	; 0x38
    474c:	4b3c      	ldr	r3, [pc, #240]	; (4840 <_ZL12dir_registerP3DIR+0x3c4>)
    474e:	4798      	blx	r3
		if (res == FR_OK) {
    4750:	2800      	cmp	r0, #0
    4752:	d000      	beq.n	4756 <_ZL12dir_registerP3DIR+0x2da>
    4754:	e0b5      	b.n	48c2 <_ZL12dir_registerP3DIR+0x446>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
    4756:	1c28      	adds	r0, r5, #0
    4758:	4b3a      	ldr	r3, [pc, #232]	; (4844 <_ZL12dir_registerP3DIR+0x3c8>)
    475a:	4798      	blx	r3
    475c:	900f      	str	r0, [sp, #60]	; 0x3c
    475e:	1c27      	adds	r7, r4, #0
    4760:	46a8      	mov	r8, r5
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
    4762:	980e      	ldr	r0, [sp, #56]	; 0x38
    4764:	6b00      	ldr	r0, [r0, #48]	; 0x30
    4766:	9004      	str	r0, [sp, #16]
    4768:	4648      	mov	r0, r9
    476a:	9904      	ldr	r1, [sp, #16]
    476c:	4c36      	ldr	r4, [pc, #216]	; (4848 <_ZL12dir_registerP3DIR+0x3cc>)
    476e:	47a0      	blx	r4
				if (res != FR_OK) break;
    4770:	2800      	cmp	r0, #0
    4772:	d000      	beq.n	4776 <_ZL12dir_registerP3DIR+0x2fa>
    4774:	e0a5      	b.n	48c2 <_ZL12dir_registerP3DIR+0x446>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
    4776:	464e      	mov	r6, r9
    4778:	68f5      	ldr	r5, [r6, #12]
    477a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    477c:	6b74      	ldr	r4, [r6, #52]	; 0x34
    477e:	b2f8      	uxtb	r0, r7
    4780:	4683      	mov	fp, r0
{
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
    4782:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    4784:	7366      	strb	r6, [r4, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    4786:	230f      	movs	r3, #15
    4788:	72e3      	strb	r3, [r4, #11]
	dir[LDIR_Type] = 0;
    478a:	2300      	movs	r3, #0
    478c:	7323      	strb	r3, [r4, #12]

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    478e:	76a3      	strb	r3, [r4, #26]
	*ptr++ = (BYTE)val;
    4790:	76e3      	strb	r3, [r4, #27]
    4792:	23ff      	movs	r3, #255	; 0xff
    4794:	403b      	ands	r3, r7
	dir[LDIR_Chksum] = sum;			/* Set checksum */
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
	dir[LDIR_Type] = 0;
	st_word(dir + LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
    4796:	3b01      	subs	r3, #1
    4798:	0059      	lsls	r1, r3, #1
    479a:	18c9      	adds	r1, r1, r3
    479c:	0089      	lsls	r1, r1, #2
    479e:	18c9      	adds	r1, r1, r3
    47a0:	2201      	movs	r2, #1
	s = wc = 0;
    47a2:	2300      	movs	r3, #0
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
    47a4:	4829      	ldr	r0, [pc, #164]	; (484c <_ZL12dir_registerP3DIR+0x3d0>)

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    47a6:	26ff      	movs	r6, #255	; 0xff
    47a8:	46b2      	mov	sl, r6
    47aa:	46bc      	mov	ip, r7
    47ac:	e002      	b.n	47b4 <_ZL12dir_registerP3DIR+0x338>
	st_word(dir + LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
    47ae:	1c31      	adds	r1, r6, #0
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
    47b0:	1c03      	adds	r3, r0, #0
    47b2:	3201      	adds	r2, #1
	st_word(dir + LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
    47b4:	4283      	cmp	r3, r0
    47b6:	d06d      	beq.n	4894 <_ZL12dir_registerP3DIR+0x418>
    47b8:	1c4e      	adds	r6, r1, #1
    47ba:	0049      	lsls	r1, r1, #1
    47bc:	5b4b      	ldrh	r3, [r1, r5]
    47be:	4f24      	ldr	r7, [pc, #144]	; (4850 <_ZL12dir_registerP3DIR+0x3d4>)
    47c0:	18b9      	adds	r1, r7, r2
    47c2:	3901      	subs	r1, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
    47c4:	7809      	ldrb	r1, [r1, #0]
    47c6:	1861      	adds	r1, r4, r1

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    47c8:	700b      	strb	r3, [r1, #0]
    47ca:	121f      	asrs	r7, r3, #8
	*ptr++ = (BYTE)val;
    47cc:	704f      	strb	r7, [r1, #1]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
    47ce:	2b00      	cmp	r3, #0
    47d0:	d069      	beq.n	48a6 <_ZL12dir_registerP3DIR+0x42a>
	st_word(dir + LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
    47d2:	1c31      	adds	r1, r6, #0
	dir[LDIR_Type] = 0;
	st_word(dir + LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
	s = wc = 0;
	do {
    47d4:	2a0c      	cmp	r2, #12
    47d6:	d9ec      	bls.n	47b2 <_ZL12dir_registerP3DIR+0x336>
    47d8:	4667      	mov	r7, ip
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
    47da:	4a1c      	ldr	r2, [pc, #112]	; (484c <_ZL12dir_registerP3DIR+0x3d0>)
    47dc:	4293      	cmp	r3, r2
    47de:	d003      	beq.n	47e8 <_ZL12dir_registerP3DIR+0x36c>
    47e0:	0049      	lsls	r1, r1, #1
    47e2:	5b4b      	ldrh	r3, [r1, r5]
    47e4:	2b00      	cmp	r3, #0
    47e6:	d103      	bne.n	47f0 <_ZL12dir_registerP3DIR+0x374>
    47e8:	2340      	movs	r3, #64	; 0x40
    47ea:	4658      	mov	r0, fp
    47ec:	4318      	orrs	r0, r3
    47ee:	4683      	mov	fp, r0
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    47f0:	4659      	mov	r1, fp
    47f2:	7021      	strb	r1, [r4, #0]
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
				if (res != FR_OK) break;
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
				fs->wflag = 1;
    47f4:	2301      	movs	r3, #1
    47f6:	464a      	mov	r2, r9
    47f8:	70d3      	strb	r3, [r2, #3]
				res = dir_next(dp, 0);	/* Next entry */
    47fa:	980e      	ldr	r0, [sp, #56]	; 0x38
    47fc:	2100      	movs	r1, #0
    47fe:	4b15      	ldr	r3, [pc, #84]	; (4854 <_ZL12dir_registerP3DIR+0x3d8>)
    4800:	4798      	blx	r3
			} while (res == FR_OK && --nent);
    4802:	2800      	cmp	r0, #0
    4804:	d15d      	bne.n	48c2 <_ZL12dir_registerP3DIR+0x446>
    4806:	3f01      	subs	r7, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
		if (res == FR_OK) {
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
			do {					/* Store LFN entries in bottom first */
    4808:	2f00      	cmp	r7, #0
    480a:	d1aa      	bne.n	4762 <_ZL12dir_registerP3DIR+0x2e6>
    480c:	4645      	mov	r5, r8
    480e:	e04f      	b.n	48b0 <_ZL12dir_registerP3DIR+0x434>
    4810:	00006461 	.word	0x00006461
    4814:	00003969 	.word	0x00003969
    4818:	08000001 	.word	0x08000001
    481c:	00002ff5 	.word	0x00002ff5
    4820:	00003931 	.word	0x00003931
    4824:	00002aa5 	.word	0x00002aa5
    4828:	000039ed 	.word	0x000039ed
    482c:	00002af1 	.word	0x00002af1
    4830:	00002db1 	.word	0x00002db1
    4834:	00002add 	.word	0x00002add
    4838:	00011021 	.word	0x00011021
    483c:	000041ed 	.word	0x000041ed
    4840:	00003565 	.word	0x00003565
    4844:	00002b19 	.word	0x00002b19
    4848:	00002cd9 	.word	0x00002cd9
    484c:	0000ffff 	.word	0x0000ffff
    4850:	00006ca4 	.word	0x00006ca4
    4854:	00003729 	.word	0x00003729

	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
		if (res == FR_OK) {
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
    4858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    485a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    485c:	9303      	str	r3, [sp, #12]
    485e:	1c18      	adds	r0, r3, #0
    4860:	2100      	movs	r1, #0
    4862:	2220      	movs	r2, #32
    4864:	4b1a      	ldr	r3, [pc, #104]	; (48d0 <_ZL12dir_registerP3DIR+0x454>)
    4866:	4798      	blx	r3
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    4868:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    486a:	6b76      	ldr	r6, [r6, #52]	; 0x34
    486c:	9602      	str	r6, [sp, #8]
    486e:	1c30      	adds	r0, r6, #0
    4870:	1c29      	adds	r1, r5, #0
    4872:	220b      	movs	r2, #11
    4874:	4b17      	ldr	r3, [pc, #92]	; (48d4 <_ZL12dir_registerP3DIR+0x458>)
    4876:	4798      	blx	r3
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
    4878:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    487a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    487c:	2243      	movs	r2, #67	; 0x43
    487e:	5cba      	ldrb	r2, [r7, r2]
    4880:	2118      	movs	r1, #24
    4882:	400a      	ands	r2, r1
    4884:	731a      	strb	r2, [r3, #12]
#endif
			fs->wflag = 1;
    4886:	2301      	movs	r3, #1
    4888:	4648      	mov	r0, r9
    488a:	70c3      	strb	r3, [r0, #3]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
    488c:	1c20      	adds	r0, r4, #0
    488e:	e018      	b.n	48c2 <_ZL12dir_registerP3DIR+0x446>
		for (n = 1; n < 100; n++) {
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
			if (res != FR_OK) break;
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    4890:	2007      	movs	r0, #7
    4892:	e016      	b.n	48c2 <_ZL12dir_registerP3DIR+0x446>
    4894:	4f10      	ldr	r7, [pc, #64]	; (48d8 <_ZL12dir_registerP3DIR+0x45c>)
    4896:	18be      	adds	r6, r7, r2
    4898:	3e01      	subs	r6, #1

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
	s = wc = 0;
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
    489a:	7836      	ldrb	r6, [r6, #0]
    489c:	19a6      	adds	r6, r4, r6

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    489e:	4657      	mov	r7, sl
    48a0:	7037      	strb	r7, [r6, #0]
	*ptr++ = (BYTE)val;
    48a2:	7077      	strb	r7, [r6, #1]
    48a4:	e796      	b.n	47d4 <_ZL12dir_registerP3DIR+0x358>
	dir[LDIR_Type] = 0;
	st_word(dir + LDIR_FstClusLO, 0);

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
	s = wc = 0;
	do {
    48a6:	2a0c      	cmp	r2, #12
    48a8:	d800      	bhi.n	48ac <_ZL12dir_registerP3DIR+0x430>
    48aa:	e780      	b.n	47ae <_ZL12dir_registerP3DIR+0x332>
    48ac:	4667      	mov	r7, ip
    48ae:	e79b      	b.n	47e8 <_ZL12dir_registerP3DIR+0x36c>

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
    48b0:	980e      	ldr	r0, [sp, #56]	; 0x38
    48b2:	6b00      	ldr	r0, [r0, #48]	; 0x30
    48b4:	9001      	str	r0, [sp, #4]
    48b6:	4648      	mov	r0, r9
    48b8:	9901      	ldr	r1, [sp, #4]
    48ba:	4b08      	ldr	r3, [pc, #32]	; (48dc <_ZL12dir_registerP3DIR+0x460>)
    48bc:	4798      	blx	r3
    48be:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
    48c0:	d0ca      	beq.n	4858 <_ZL12dir_registerP3DIR+0x3dc>
			fs->wflag = 1;
		}
	}

	return res;
}
    48c2:	b025      	add	sp, #148	; 0x94
    48c4:	bc3c      	pop	{r2, r3, r4, r5}
    48c6:	4690      	mov	r8, r2
    48c8:	4699      	mov	r9, r3
    48ca:	46a2      	mov	sl, r4
    48cc:	46ab      	mov	fp, r5
    48ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48d0:	00002af1 	.word	0x00002af1
    48d4:	00002add 	.word	0x00002add
    48d8:	00006ca4 	.word	0x00006ca4
    48dc:	00002cd9 	.word	0x00002cd9

000048e0 <_ZL8ld_clustP5FATFSPKh>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
    48e0:	1c03      	adds	r3, r0, #0
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    48e2:	7ec8      	ldrb	r0, [r1, #27]
    48e4:	0200      	lsls	r0, r0, #8
    48e6:	7e8a      	ldrb	r2, [r1, #26]
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    48e8:	4310      	orrs	r0, r2
	if (fs->fs_type == FS_FAT32) {
    48ea:	781b      	ldrb	r3, [r3, #0]
    48ec:	2b03      	cmp	r3, #3
    48ee:	d105      	bne.n	48fc <_ZL8ld_clustP5FATFSPKh+0x1c>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    48f0:	7d4b      	ldrb	r3, [r1, #21]
    48f2:	021b      	lsls	r3, r3, #8
    48f4:	7d0a      	ldrb	r2, [r1, #20]
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    48f6:	4313      	orrs	r3, r2
    48f8:	041b      	lsls	r3, r3, #16
    48fa:	4318      	orrs	r0, r3
	}

	return cl;
}
    48fc:	4770      	bx	lr
    48fe:	46c0      	nop			; (mov r8, r8)

00004900 <_ZL11follow_pathP3DIRPKc>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
    4900:	b5f0      	push	{r4, r5, r6, r7, lr}
    4902:	465f      	mov	r7, fp
    4904:	4656      	mov	r6, sl
    4906:	464d      	mov	r5, r9
    4908:	4644      	mov	r4, r8
    490a:	b4f0      	push	{r4, r5, r6, r7}
    490c:	b0a1      	sub	sp, #132	; 0x84
    490e:	1c06      	adds	r6, r0, #0
    4910:	910b      	str	r1, [sp, #44]	; 0x2c
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
	FATFS *fs = obj->fs;
    4912:	6801      	ldr	r1, [r0, #0]
    4914:	910c      	str	r1, [sp, #48]	; 0x30


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
    4916:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4918:	7813      	ldrb	r3, [r2, #0]
    491a:	2b2f      	cmp	r3, #47	; 0x2f
    491c:	d006      	beq.n	492c <_ZL11follow_pathP3DIRPKc+0x2c>
    491e:	2b5c      	cmp	r3, #92	; 0x5c
    4920:	d006      	beq.n	4930 <_ZL11follow_pathP3DIRPKc+0x30>
		obj->sclust = fs->cdir;				/* Start from the current directory */
    4922:	69cb      	ldr	r3, [r1, #28]
    4924:	6083      	str	r3, [r0, #8]
    4926:	e00c      	b.n	4942 <_ZL11follow_pathP3DIRPKc+0x42>
    4928:	3301      	adds	r3, #1
    492a:	e002      	b.n	4932 <_ZL11follow_pathP3DIRPKc+0x32>
    492c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    492e:	e000      	b.n	4932 <_ZL11follow_pathP3DIRPKc+0x32>
    4930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
    4932:	781a      	ldrb	r2, [r3, #0]
    4934:	2a2f      	cmp	r2, #47	; 0x2f
    4936:	d0f7      	beq.n	4928 <_ZL11follow_pathP3DIRPKc+0x28>
    4938:	2a5c      	cmp	r2, #92	; 0x5c
    493a:	d0f5      	beq.n	4928 <_ZL11follow_pathP3DIRPKc+0x28>
    493c:	930b      	str	r3, [sp, #44]	; 0x2c
		obj->sclust = 0;					/* Start from the root directory */
    493e:	2300      	movs	r3, #0
    4940:	60b3      	str	r3, [r6, #8]
	}
#if _FS_EXFAT && _FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
    4942:	990c      	ldr	r1, [sp, #48]	; 0x30
    4944:	780b      	ldrb	r3, [r1, #0]
    4946:	2b04      	cmp	r3, #4
    4948:	d120      	bne.n	498c <_ZL11follow_pathP3DIRPKc+0x8c>
    494a:	68b2      	ldr	r2, [r6, #8]
    494c:	2a00      	cmp	r2, #0
    494e:	d01d      	beq.n	498c <_ZL11follow_pathP3DIRPKc+0x8c>
		DIR dj;

		obj->c_scl = fs->cdc_scl;
    4950:	6a0b      	ldr	r3, [r1, #32]
    4952:	61f3      	str	r3, [r6, #28]
		obj->c_size = fs->cdc_size;
    4954:	6a49      	ldr	r1, [r1, #36]	; 0x24
    4956:	6231      	str	r1, [r6, #32]
		obj->c_ofs = fs->cdc_ofs;
    4958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    495a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    495c:	6272      	str	r2, [r6, #36]	; 0x24
		res = load_obj_dir(&dj, obj);
    495e:	a80e      	add	r0, sp, #56	; 0x38
    4960:	1c31      	adds	r1, r6, #0
    4962:	4ba6      	ldr	r3, [pc, #664]	; (4bfc <_ZL11follow_pathP3DIRPKc+0x2fc>)
    4964:	4798      	blx	r3
		if (res != FR_OK) return res;
    4966:	2800      	cmp	r0, #0
    4968:	d000      	beq.n	496c <_ZL11follow_pathP3DIRPKc+0x6c>
    496a:	e219      	b.n	4da0 <_ZL11follow_pathP3DIRPKc+0x4a0>
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
    496c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    496e:	691b      	ldr	r3, [r3, #16]
    4970:	1c18      	adds	r0, r3, #0
    4972:	3038      	adds	r0, #56	; 0x38
    4974:	4ba2      	ldr	r3, [pc, #648]	; (4c00 <_ZL11follow_pathP3DIRPKc+0x300>)
    4976:	4798      	blx	r3
    4978:	6130      	str	r0, [r6, #16]
    497a:	2300      	movs	r3, #0
    497c:	6173      	str	r3, [r6, #20]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
    497e:	990c      	ldr	r1, [sp, #48]	; 0x30
    4980:	6909      	ldr	r1, [r1, #16]
    4982:	2321      	movs	r3, #33	; 0x21
    4984:	5ccb      	ldrb	r3, [r1, r3]
    4986:	2202      	movs	r2, #2
    4988:	4013      	ands	r3, r2
    498a:	71f3      	strb	r3, [r6, #7]
	}
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    498c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    498e:	7813      	ldrb	r3, [r2, #0]
    4990:	2b1f      	cmp	r3, #31
    4992:	d902      	bls.n	499a <_ZL11follow_pathP3DIRPKc+0x9a>
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    4994:	4b9b      	ldr	r3, [pc, #620]	; (4c04 <_ZL11follow_pathP3DIRPKc+0x304>)
    4996:	469a      	mov	sl, r3
    4998:	e007      	b.n	49aa <_ZL11follow_pathP3DIRPKc+0xaa>
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
		dp->fn[NSFLAG] = NS_NONAME;
    499a:	2280      	movs	r2, #128	; 0x80
    499c:	2343      	movs	r3, #67	; 0x43
    499e:	54f2      	strb	r2, [r6, r3]
		res = dir_sdi(dp, 0);
    49a0:	1c30      	adds	r0, r6, #0
    49a2:	2100      	movs	r1, #0
    49a4:	4b98      	ldr	r3, [pc, #608]	; (4c08 <_ZL11follow_pathP3DIRPKc+0x308>)
    49a6:	4798      	blx	r3
    49a8:	e1fa      	b.n	4da0 <_ZL11follow_pathP3DIRPKc+0x4a0>
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
    49aa:	6833      	ldr	r3, [r6, #0]
    49ac:	68db      	ldr	r3, [r3, #12]
    49ae:	930a      	str	r3, [sp, #40]	; 0x28
	for (;;) {
		w = p[si++];					/* Get a character */
    49b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    49b2:	7808      	ldrb	r0, [r1, #0]
		if (w < ' ') break;				/* Break if end of the path name */
    49b4:	281f      	cmp	r0, #31
    49b6:	d800      	bhi.n	49ba <_ZL11follow_pathP3DIRPKc+0xba>
    49b8:	e1b9      	b.n	4d2e <_ZL11follow_pathP3DIRPKc+0x42e>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
    49ba:	282f      	cmp	r0, #47	; 0x2f
    49bc:	d00f      	beq.n	49de <_ZL11follow_pathP3DIRPKc+0xde>
    49be:	285c      	cmp	r0, #92	; 0x5c
    49c0:	d011      	beq.n	49e6 <_ZL11follow_pathP3DIRPKc+0xe6>
    49c2:	1c1d      	adds	r5, r3, #0
    49c4:	1c0f      	adds	r7, r1, #0
    49c6:	3701      	adds	r7, #1
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
    49c8:	2401      	movs	r4, #1
		if (w < ' ') break;				/* Break if end of the path name */
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
    49ca:	2380      	movs	r3, #128	; 0x80
    49cc:	005b      	lsls	r3, r3, #1
    49ce:	469b      	mov	fp, r3
    49d0:	e01c      	b.n	4a0c <_ZL11follow_pathP3DIRPKc+0x10c>
	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
		if (w < ' ') break;				/* Break if end of the path name */
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
    49d2:	282f      	cmp	r0, #47	; 0x2f
    49d4:	d00d      	beq.n	49f2 <_ZL11follow_pathP3DIRPKc+0xf2>
    49d6:	285c      	cmp	r0, #92	; 0x5c
    49d8:	d112      	bne.n	4a00 <_ZL11follow_pathP3DIRPKc+0x100>
    49da:	990b      	ldr	r1, [sp, #44]	; 0x2c
    49dc:	e00a      	b.n	49f4 <_ZL11follow_pathP3DIRPKc+0xf4>
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
    49de:	2400      	movs	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
    49e0:	2301      	movs	r3, #1
    49e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    49e4:	e006      	b.n	49f4 <_ZL11follow_pathP3DIRPKc+0xf4>
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
    49e6:	2400      	movs	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
    49e8:	2301      	movs	r3, #1
    49ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
    49ec:	e002      	b.n	49f4 <_ZL11follow_pathP3DIRPKc+0xf4>
		if (w < ' ') break;				/* Break if end of the path name */
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
    49ee:	3301      	adds	r3, #1
    49f0:	e000      	b.n	49f4 <_ZL11follow_pathP3DIRPKc+0xf4>
    49f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    49f4:	5cca      	ldrb	r2, [r1, r3]
    49f6:	2a2f      	cmp	r2, #47	; 0x2f
    49f8:	d0f9      	beq.n	49ee <_ZL11follow_pathP3DIRPKc+0xee>
    49fa:	2a5c      	cmp	r2, #92	; 0x5c
    49fc:	d0f7      	beq.n	49ee <_ZL11follow_pathP3DIRPKc+0xee>
    49fe:	e01a      	b.n	4a36 <_ZL11follow_pathP3DIRPKc+0x136>
    4a00:	3502      	adds	r5, #2
    4a02:	3701      	adds	r7, #1
			break;
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
    4a04:	455b      	cmp	r3, fp
    4a06:	d100      	bne.n	4a0a <_ZL11follow_pathP3DIRPKc+0x10a>
    4a08:	e1b8      	b.n	4d7c <_ZL11follow_pathP3DIRPKc+0x47c>
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
    4a0a:	1c1c      	adds	r4, r3, #0
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    4a0c:	2101      	movs	r1, #1
    4a0e:	47d0      	blx	sl
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    4a10:	2800      	cmp	r0, #0
    4a12:	d100      	bne.n	4a16 <_ZL11follow_pathP3DIRPKc+0x116>
    4a14:	e1b2      	b.n	4d7c <_ZL11follow_pathP3DIRPKc+0x47c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
    4a16:	287f      	cmp	r0, #127	; 0x7f
    4a18:	d900      	bls.n	4a1c <_ZL11follow_pathP3DIRPKc+0x11c>
    4a1a:	e181      	b.n	4d20 <_ZL11follow_pathP3DIRPKc+0x420>
    4a1c:	1e01      	subs	r1, r0, #0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
    4a1e:	2922      	cmp	r1, #34	; 0x22
    4a20:	d100      	bne.n	4a24 <_ZL11follow_pathP3DIRPKc+0x124>
    4a22:	e1ab      	b.n	4d7c <_ZL11follow_pathP3DIRPKc+0x47c>
    4a24:	4b79      	ldr	r3, [pc, #484]	; (4c0c <_ZL11follow_pathP3DIRPKc+0x30c>)
    4a26:	781a      	ldrb	r2, [r3, #0]
    4a28:	2a00      	cmp	r2, #0
    4a2a:	d100      	bne.n	4a2e <_ZL11follow_pathP3DIRPKc+0x12e>
    4a2c:	e178      	b.n	4d20 <_ZL11follow_pathP3DIRPKc+0x420>
    4a2e:	3301      	adds	r3, #1
    4a30:	4291      	cmp	r1, r2
    4a32:	d1f8      	bne.n	4a26 <_ZL11follow_pathP3DIRPKc+0x126>
    4a34:	e1a2      	b.n	4d7c <_ZL11follow_pathP3DIRPKc+0x47c>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
		lfn[di++] = w;					/* Store the Unicode character */
	}
	*path = &p[si];						/* Return pointer to the next segment */
    4a36:	18ca      	adds	r2, r1, r3
    4a38:	920b      	str	r2, [sp, #44]	; 0x2c
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    4a3a:	2300      	movs	r3, #0
    4a3c:	221f      	movs	r2, #31
    4a3e:	4282      	cmp	r2, r0
    4a40:	415b      	adcs	r3, r3
    4a42:	009b      	lsls	r3, r3, #2
    4a44:	4699      	mov	r9, r3
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
    4a46:	2c01      	cmp	r4, #1
    4a48:	d104      	bne.n	4a54 <_ZL11follow_pathP3DIRPKc+0x154>
    4a4a:	990a      	ldr	r1, [sp, #40]	; 0x28
    4a4c:	880b      	ldrh	r3, [r1, #0]
    4a4e:	2b2e      	cmp	r3, #46	; 0x2e
    4a50:	d110      	bne.n	4a74 <_ZL11follow_pathP3DIRPKc+0x174>
    4a52:	e015      	b.n	4a80 <_ZL11follow_pathP3DIRPKc+0x180>
    4a54:	2c02      	cmp	r4, #2
    4a56:	d104      	bne.n	4a62 <_ZL11follow_pathP3DIRPKc+0x162>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
    4a58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4a5a:	8853      	ldrh	r3, [r2, #2]
    4a5c:	2b2e      	cmp	r3, #46	; 0x2e
    4a5e:	d109      	bne.n	4a74 <_ZL11follow_pathP3DIRPKc+0x174>
    4a60:	e004      	b.n	4a6c <_ZL11follow_pathP3DIRPKc+0x16c>
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
    4a62:	2c00      	cmp	r4, #0
    4a64:	d106      	bne.n	4a74 <_ZL11follow_pathP3DIRPKc+0x174>
    4a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4a68:	469b      	mov	fp, r3
    4a6a:	e168      	b.n	4d3e <_ZL11follow_pathP3DIRPKc+0x43e>
	}
	*path = &p[si];						/* Return pointer to the next segment */
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
    4a6c:	990a      	ldr	r1, [sp, #40]	; 0x28
    4a6e:	880b      	ldrh	r3, [r1, #0]
    4a70:	2b2e      	cmp	r3, #46	; 0x2e
    4a72:	d005      	beq.n	4a80 <_ZL11follow_pathP3DIRPKc+0x180>
    4a74:	4a66      	ldr	r2, [pc, #408]	; (4c10 <_ZL11follow_pathP3DIRPKc+0x310>)
    4a76:	18a3      	adds	r3, r4, r2
    4a78:	005b      	lsls	r3, r3, #1
    4a7a:	990a      	ldr	r1, [sp, #40]	; 0x28
    4a7c:	18cb      	adds	r3, r1, r3
    4a7e:	e016      	b.n	4aae <_ZL11follow_pathP3DIRPKc+0x1ae>
		lfn[di] = 0;
    4a80:	0063      	lsls	r3, r4, #1
    4a82:	2200      	movs	r2, #0
    4a84:	990a      	ldr	r1, [sp, #40]	; 0x28
    4a86:	525a      	strh	r2, [r3, r1]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
    4a88:	2300      	movs	r3, #0
			dp->fn[i] = (i < di) ? '.' : ' ';
    4a8a:	2020      	movs	r0, #32
    4a8c:	272e      	movs	r7, #46	; 0x2e
    4a8e:	1c02      	adds	r2, r0, #0
    4a90:	42a3      	cmp	r3, r4
    4a92:	d200      	bcs.n	4a96 <_ZL11follow_pathP3DIRPKc+0x196>
    4a94:	1c3a      	adds	r2, r7, #0
    4a96:	18f1      	adds	r1, r6, r3
    4a98:	3138      	adds	r1, #56	; 0x38
    4a9a:	700a      	strb	r2, [r1, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
		lfn[di] = 0;
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
    4a9c:	3301      	adds	r3, #1
    4a9e:	2b0b      	cmp	r3, #11
    4aa0:	d1f5      	bne.n	4a8e <_ZL11follow_pathP3DIRPKc+0x18e>
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
    4aa2:	2220      	movs	r2, #32
    4aa4:	464b      	mov	r3, r9
    4aa6:	431a      	orrs	r2, r3
    4aa8:	2343      	movs	r3, #67	; 0x43
    4aaa:	54f2      	strb	r2, [r6, r3]
    4aac:	e15e      	b.n	4d6c <_ZL11follow_pathP3DIRPKc+0x46c>
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
    4aae:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    4ab0:	2a20      	cmp	r2, #32
    4ab2:	d001      	beq.n	4ab8 <_ZL11follow_pathP3DIRPKc+0x1b8>
    4ab4:	2a2e      	cmp	r2, #46	; 0x2e
    4ab6:	d106      	bne.n	4ac6 <_ZL11follow_pathP3DIRPKc+0x1c6>
		di--;
    4ab8:	3c01      	subs	r4, #1
    4aba:	3b02      	subs	r3, #2
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
    4abc:	2c00      	cmp	r4, #0
    4abe:	d1f6      	bne.n	4aae <_ZL11follow_pathP3DIRPKc+0x1ae>
    4ac0:	990a      	ldr	r1, [sp, #40]	; 0x28
    4ac2:	468b      	mov	fp, r1
    4ac4:	e13b      	b.n	4d3e <_ZL11follow_pathP3DIRPKc+0x43e>
		w = lfn[di - 1];
		if (w != ' ' && w != '.') break;
		di--;
	}
	lfn[di] = 0;						/* LFN is created */
    4ac6:	0062      	lsls	r2, r4, #1
    4ac8:	4690      	mov	r8, r2
    4aca:	2300      	movs	r3, #0
    4acc:	990a      	ldr	r1, [sp, #40]	; 0x28
    4ace:	528b      	strh	r3, [r1, r2]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
    4ad0:	2c00      	cmp	r4, #0
    4ad2:	d100      	bne.n	4ad6 <_ZL11follow_pathP3DIRPKc+0x1d6>
    4ad4:	e152      	b.n	4d7c <_ZL11follow_pathP3DIRPKc+0x47c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
    4ad6:	1c30      	adds	r0, r6, #0
    4ad8:	3038      	adds	r0, #56	; 0x38
    4ada:	2120      	movs	r1, #32
    4adc:	220b      	movs	r2, #11
    4ade:	4b4d      	ldr	r3, [pc, #308]	; (4c14 <_ZL11follow_pathP3DIRPKc+0x314>)
    4ae0:	4798      	blx	r3
    4ae2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    4ae4:	2300      	movs	r3, #0
    4ae6:	e001      	b.n	4aec <_ZL11follow_pathP3DIRPKc+0x1ec>
    4ae8:	3301      	adds	r3, #1
    4aea:	3202      	adds	r2, #2
    4aec:	8811      	ldrh	r1, [r2, #0]
    4aee:	2920      	cmp	r1, #32
    4af0:	d0fa      	beq.n	4ae8 <_ZL11follow_pathP3DIRPKc+0x1e8>
    4af2:	292e      	cmp	r1, #46	; 0x2e
    4af4:	d0f8      	beq.n	4ae8 <_ZL11follow_pathP3DIRPKc+0x1e8>
	if (si) cf |= NS_LOSS | NS_LFN;
    4af6:	2b00      	cmp	r3, #0
    4af8:	d100      	bne.n	4afc <_ZL11follow_pathP3DIRPKc+0x1fc>
    4afa:	e125      	b.n	4d48 <_ZL11follow_pathP3DIRPKc+0x448>
    4afc:	2203      	movs	r2, #3
    4afe:	4649      	mov	r1, r9
    4b00:	4311      	orrs	r1, r2
    4b02:	4689      	mov	r9, r1
    4b04:	e120      	b.n	4d48 <_ZL11follow_pathP3DIRPKc+0x448>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    4b06:	3c01      	subs	r4, #1
    4b08:	2c00      	cmp	r4, #0
    4b0a:	d107      	bne.n	4b1c <_ZL11follow_pathP3DIRPKc+0x21c>

	i = b = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
    4b0c:	2208      	movs	r2, #8
    4b0e:	4690      	mov	r8, r2
    4b10:	2100      	movs	r1, #0
    4b12:	468b      	mov	fp, r1
    4b14:	2200      	movs	r2, #0
    4b16:	920d      	str	r2, [sp, #52]	; 0x34
    4b18:	464f      	mov	r7, r9
    4b1a:	e004      	b.n	4b26 <_ZL11follow_pathP3DIRPKc+0x226>
    4b1c:	3a02      	subs	r2, #2

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    4b1e:	8851      	ldrh	r1, [r2, #2]
    4b20:	292e      	cmp	r1, #46	; 0x2e
    4b22:	d1f0      	bne.n	4b06 <_ZL11follow_pathP3DIRPKc+0x206>
    4b24:	e7f2      	b.n	4b0c <_ZL11follow_pathP3DIRPKc+0x20c>

	i = b = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
    4b26:	1c5d      	adds	r5, r3, #1
    4b28:	005b      	lsls	r3, r3, #1
    4b2a:	990a      	ldr	r1, [sp, #40]	; 0x28
    4b2c:	5a58      	ldrh	r0, [r3, r1]
		if (!w) break;					/* Break on end of the LFN */
    4b2e:	2800      	cmp	r0, #0
    4b30:	d060      	beq.n	4bf4 <_ZL11follow_pathP3DIRPKc+0x2f4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4b32:	2820      	cmp	r0, #32
    4b34:	d004      	beq.n	4b40 <_ZL11follow_pathP3DIRPKc+0x240>
    4b36:	282e      	cmp	r0, #46	; 0x2e
    4b38:	d106      	bne.n	4b48 <_ZL11follow_pathP3DIRPKc+0x248>
    4b3a:	42ac      	cmp	r4, r5
    4b3c:	d100      	bne.n	4b40 <_ZL11follow_pathP3DIRPKc+0x240>
    4b3e:	e11f      	b.n	4d80 <_ZL11follow_pathP3DIRPKc+0x480>
			cf |= NS_LOSS | NS_LFN; continue;
    4b40:	2303      	movs	r3, #3
    4b42:	431f      	orrs	r7, r3
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	i = b = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
    4b44:	1c2b      	adds	r3, r5, #0
    4b46:	e7ee      	b.n	4b26 <_ZL11follow_pathP3DIRPKc+0x226>
		if (!w) break;					/* Break on end of the LFN */
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    4b48:	45c3      	cmp	fp, r8
    4b4a:	d202      	bcs.n	4b52 <_ZL11follow_pathP3DIRPKc+0x252>
    4b4c:	42ac      	cmp	r4, r5
    4b4e:	d11a      	bne.n	4b86 <_ZL11follow_pathP3DIRPKc+0x286>
    4b50:	e106      	b.n	4d60 <_ZL11follow_pathP3DIRPKc+0x460>
			if (ni == 11) {				/* Long extension */
    4b52:	4642      	mov	r2, r8
    4b54:	2a0b      	cmp	r2, #11
    4b56:	d106      	bne.n	4b66 <_ZL11follow_pathP3DIRPKc+0x266>
    4b58:	46b9      	mov	r9, r7
				cf |= NS_LOSS | NS_LFN; break;
    4b5a:	2303      	movs	r3, #3
    4b5c:	4649      	mov	r1, r9
    4b5e:	4319      	orrs	r1, r3
    4b60:	4689      	mov	r9, r1
    4b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4b64:	e05e      	b.n	4c24 <_ZL11follow_pathP3DIRPKc+0x324>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    4b66:	42ac      	cmp	r4, r5
    4b68:	d003      	beq.n	4b72 <_ZL11follow_pathP3DIRPKc+0x272>
    4b6a:	2303      	movs	r3, #3
    4b6c:	431f      	orrs	r7, r3
			if (si > di) break;			/* No extension */
    4b6e:	42a5      	cmp	r5, r4
    4b70:	d856      	bhi.n	4c20 <_ZL11follow_pathP3DIRPKc+0x320>
			si = di; i = 8; ni = 11;	/* Enter extension section */
			b <<= 2; continue;
    4b72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4b74:	0093      	lsls	r3, r2, #2
    4b76:	b2db      	uxtb	r3, r3
    4b78:	930d      	str	r3, [sp, #52]	; 0x34
    4b7a:	1c23      	adds	r3, r4, #0
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
			si = di; i = 8; ni = 11;	/* Enter extension section */
    4b7c:	210b      	movs	r1, #11
    4b7e:	4688      	mov	r8, r1
    4b80:	2208      	movs	r2, #8
    4b82:	4693      	mov	fp, r2
    4b84:	e7cf      	b.n	4b26 <_ZL11follow_pathP3DIRPKc+0x226>
			b <<= 2; continue;
		}

		if (w >= 0x80) {				/* Non ASCII character */
    4b86:	287f      	cmp	r0, #127	; 0x7f
    4b88:	d90d      	bls.n	4ba6 <_ZL11follow_pathP3DIRPKc+0x2a6>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    4b8a:	2100      	movs	r1, #0
    4b8c:	4b1d      	ldr	r3, [pc, #116]	; (4c04 <_ZL11follow_pathP3DIRPKc+0x304>)
    4b8e:	4798      	blx	r3
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
    4b90:	2800      	cmp	r0, #0
    4b92:	d100      	bne.n	4b96 <_ZL11follow_pathP3DIRPKc+0x296>
    4b94:	e0fa      	b.n	4d8c <_ZL11follow_pathP3DIRPKc+0x48c>
    4b96:	4920      	ldr	r1, [pc, #128]	; (4c18 <_ZL11follow_pathP3DIRPKc+0x318>)
    4b98:	1808      	adds	r0, r1, r0
    4b9a:	3880      	subs	r0, #128	; 0x80
    4b9c:	7800      	ldrb	r0, [r0, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    4b9e:	2302      	movs	r3, #2
    4ba0:	431f      	orrs	r7, r3
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
    4ba2:	2800      	cmp	r0, #0
    4ba4:	d00a      	beq.n	4bbc <_ZL11follow_pathP3DIRPKc+0x2bc>
    4ba6:	1e01      	subs	r1, r0, #0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
    4ba8:	292b      	cmp	r1, #43	; 0x2b
    4baa:	d007      	beq.n	4bbc <_ZL11follow_pathP3DIRPKc+0x2bc>
    4bac:	4b1b      	ldr	r3, [pc, #108]	; (4c1c <_ZL11follow_pathP3DIRPKc+0x31c>)
    4bae:	781a      	ldrb	r2, [r3, #0]
    4bb0:	2a00      	cmp	r2, #0
    4bb2:	d100      	bne.n	4bb6 <_ZL11follow_pathP3DIRPKc+0x2b6>
    4bb4:	e0ed      	b.n	4d92 <_ZL11follow_pathP3DIRPKc+0x492>
    4bb6:	3301      	adds	r3, #1
    4bb8:	4291      	cmp	r1, r2
    4bba:	d1f8      	bne.n	4bae <_ZL11follow_pathP3DIRPKc+0x2ae>
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    4bbc:	2303      	movs	r3, #3
    4bbe:	431f      	orrs	r7, r3
    4bc0:	205f      	movs	r0, #95	; 0x5f
    4bc2:	e00f      	b.n	4be4 <_ZL11follow_pathP3DIRPKc+0x2e4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
					b |= 2;
    4bc4:	2302      	movs	r3, #2
    4bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4bc8:	431a      	orrs	r2, r3
    4bca:	920d      	str	r2, [sp, #52]	; 0x34
    4bcc:	e00a      	b.n	4be4 <_ZL11follow_pathP3DIRPKc+0x2e4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    4bce:	1c03      	adds	r3, r0, #0
    4bd0:	3b61      	subs	r3, #97	; 0x61
    4bd2:	b29b      	uxth	r3, r3
    4bd4:	2b19      	cmp	r3, #25
    4bd6:	d805      	bhi.n	4be4 <_ZL11follow_pathP3DIRPKc+0x2e4>
						b |= 1; w -= 0x20;
    4bd8:	2301      	movs	r3, #1
    4bda:	990d      	ldr	r1, [sp, #52]	; 0x34
    4bdc:	4319      	orrs	r1, r3
    4bde:	910d      	str	r1, [sp, #52]	; 0x34
    4be0:	3820      	subs	r0, #32
    4be2:	b280      	uxth	r0, r0
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
    4be4:	465a      	mov	r2, fp
    4be6:	18b3      	adds	r3, r6, r2
    4be8:	3338      	adds	r3, #56	; 0x38
    4bea:	7018      	strb	r0, [r3, #0]
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	i = b = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
    4bec:	1c2b      	adds	r3, r5, #0
						b |= 1; w -= 0x20;
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
    4bee:	2101      	movs	r1, #1
    4bf0:	448b      	add	fp, r1
    4bf2:	e798      	b.n	4b26 <_ZL11follow_pathP3DIRPKc+0x226>
    4bf4:	46b9      	mov	r9, r7
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */

	i = b = 0; ni = 8;
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
		if (!w) break;					/* Break on end of the LFN */
    4bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4bf8:	e014      	b.n	4c24 <_ZL11follow_pathP3DIRPKc+0x324>
    4bfa:	46c0      	nop			; (mov r8, r8)
    4bfc:	00003931 	.word	0x00003931
    4c00:	00002a2d 	.word	0x00002a2d
    4c04:	00005659 	.word	0x00005659
    4c08:	00003565 	.word	0x00003565
    4c0c:	00006cdd 	.word	0x00006cdd
    4c10:	7fffffff 	.word	0x7fffffff
    4c14:	00002af1 	.word	0x00002af1
    4c18:	00006d18 	.word	0x00006d18
    4c1c:	00006ce9 	.word	0x00006ce9
    4c20:	46b9      	mov	r9, r7
		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
				cf |= NS_LOSS | NS_LFN; break;
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
			if (si > di) break;			/* No extension */
    4c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			}
		}
		dp->fn[i++] = (BYTE)w;
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    4c24:	2238      	movs	r2, #56	; 0x38
    4c26:	5cb2      	ldrb	r2, [r6, r2]
    4c28:	2ae5      	cmp	r2, #229	; 0xe5
    4c2a:	d102      	bne.n	4c32 <_ZL11follow_pathP3DIRPKc+0x332>
    4c2c:	2105      	movs	r1, #5
    4c2e:	2238      	movs	r2, #56	; 0x38
    4c30:	54b1      	strb	r1, [r6, r2]

	if (ni == 8) b <<= 2;
    4c32:	4642      	mov	r2, r8
    4c34:	2a08      	cmp	r2, #8
    4c36:	d102      	bne.n	4c3e <_ZL11follow_pathP3DIRPKc+0x33e>
    4c38:	009b      	lsls	r3, r3, #2
    4c3a:	b2db      	uxtb	r3, r3
    4c3c:	930d      	str	r3, [sp, #52]	; 0x34
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
    4c3e:	230c      	movs	r3, #12
    4c40:	990d      	ldr	r1, [sp, #52]	; 0x34
    4c42:	400b      	ands	r3, r1
    4c44:	2b0c      	cmp	r3, #12
    4c46:	d003      	beq.n	4c50 <_ZL11follow_pathP3DIRPKc+0x350>
    4c48:	2203      	movs	r2, #3
    4c4a:	400a      	ands	r2, r1
    4c4c:	2a03      	cmp	r2, #3
    4c4e:	d103      	bne.n	4c58 <_ZL11follow_pathP3DIRPKc+0x358>
    4c50:	2202      	movs	r2, #2
    4c52:	4649      	mov	r1, r9
    4c54:	4311      	orrs	r1, r2
    4c56:	4689      	mov	r9, r1
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
    4c58:	464a      	mov	r2, r9
    4c5a:	0792      	lsls	r2, r2, #30
    4c5c:	d40e      	bmi.n	4c7c <_ZL11follow_pathP3DIRPKc+0x37c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4c5e:	2203      	movs	r2, #3
    4c60:	990d      	ldr	r1, [sp, #52]	; 0x34
    4c62:	400a      	ands	r2, r1
    4c64:	2a01      	cmp	r2, #1
    4c66:	d103      	bne.n	4c70 <_ZL11follow_pathP3DIRPKc+0x370>
    4c68:	2210      	movs	r2, #16
    4c6a:	4649      	mov	r1, r9
    4c6c:	4311      	orrs	r1, r2
    4c6e:	4689      	mov	r9, r1
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4c70:	2b04      	cmp	r3, #4
    4c72:	d103      	bne.n	4c7c <_ZL11follow_pathP3DIRPKc+0x37c>
    4c74:	2308      	movs	r3, #8
    4c76:	464a      	mov	r2, r9
    4c78:	431a      	orrs	r2, r3
    4c7a:	4691      	mov	r9, r2
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
    4c7c:	2343      	movs	r3, #67	; 0x43
    4c7e:	4649      	mov	r1, r9
    4c80:	54f1      	strb	r1, [r6, r3]
    4c82:	e073      	b.n	4d6c <_ZL11follow_pathP3DIRPKc+0x46c>
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    4c84:	2804      	cmp	r0, #4
    4c86:	d000      	beq.n	4c8a <_ZL11follow_pathP3DIRPKc+0x38a>
    4c88:	e08a      	b.n	4da0 <_ZL11follow_pathP3DIRPKc+0x4a0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
    4c8a:	069a      	lsls	r2, r3, #26
    4c8c:	d507      	bpl.n	4c9e <_ZL11follow_pathP3DIRPKc+0x39e>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
    4c8e:	0759      	lsls	r1, r3, #29
    4c90:	d400      	bmi.n	4c94 <_ZL11follow_pathP3DIRPKc+0x394>
    4c92:	e68a      	b.n	49aa <_ZL11follow_pathP3DIRPKc+0xaa>
						dp->fn[NSFLAG] = NS_NONAME;
    4c94:	2280      	movs	r2, #128	; 0x80
    4c96:	2343      	movs	r3, #67	; 0x43
    4c98:	54f2      	strb	r2, [r6, r3]
						res = FR_OK;
    4c9a:	2000      	movs	r0, #0
    4c9c:	e080      	b.n	4da0 <_ZL11follow_pathP3DIRPKc+0x4a0>
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    4c9e:	2004      	movs	r0, #4
    4ca0:	4018      	ands	r0, r3

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
    4ca2:	4243      	negs	r3, r0
    4ca4:	4158      	adcs	r0, r3
    4ca6:	3004      	adds	r0, #4
    4ca8:	e07a      	b.n	4da0 <_ZL11follow_pathP3DIRPKc+0x4a0>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    4caa:	075a      	lsls	r2, r3, #29
    4cac:	d434      	bmi.n	4d18 <_ZL11follow_pathP3DIRPKc+0x418>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
    4cae:	79b3      	ldrb	r3, [r6, #6]
    4cb0:	06d9      	lsls	r1, r3, #27
    4cb2:	d533      	bpl.n	4d1c <_ZL11follow_pathP3DIRPKc+0x41c>
				res = FR_NO_PATH; break;
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
    4cb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4cb6:	7813      	ldrb	r3, [r2, #0]
    4cb8:	2b04      	cmp	r3, #4
    4cba:	d122      	bne.n	4d02 <_ZL11follow_pathP3DIRPKc+0x402>
				obj->c_scl = obj->sclust;		/* Save containing directory information for next dir */
    4cbc:	68b3      	ldr	r3, [r6, #8]
    4cbe:	61f3      	str	r3, [r6, #28]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
    4cc0:	23ff      	movs	r3, #255	; 0xff
    4cc2:	6932      	ldr	r2, [r6, #16]
    4cc4:	439a      	bics	r2, r3
    4cc6:	79f3      	ldrb	r3, [r6, #7]
    4cc8:	4313      	orrs	r3, r2
    4cca:	6233      	str	r3, [r6, #32]
				obj->c_ofs = dp->blk_ofs;
    4ccc:	6c71      	ldr	r1, [r6, #68]	; 0x44
    4cce:	6271      	str	r1, [r6, #36]	; 0x24
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
    4cd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4cd2:	6912      	ldr	r2, [r2, #16]
    4cd4:	1c10      	adds	r0, r2, #0
    4cd6:	3034      	adds	r0, #52	; 0x34
    4cd8:	4b35      	ldr	r3, [pc, #212]	; (4db0 <_ZL11follow_pathP3DIRPKc+0x4b0>)
    4cda:	4798      	blx	r3
    4cdc:	60b0      	str	r0, [r6, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
    4cde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4ce0:	691b      	ldr	r3, [r3, #16]
    4ce2:	9302      	str	r3, [sp, #8]
    4ce4:	2321      	movs	r3, #33	; 0x21
    4ce6:	9902      	ldr	r1, [sp, #8]
    4ce8:	5ccb      	ldrb	r3, [r1, r3]
    4cea:	2202      	movs	r2, #2
    4cec:	4013      	ands	r3, r2
    4cee:	71f3      	strb	r3, [r6, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
    4cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4cf2:	6912      	ldr	r2, [r2, #16]
    4cf4:	1c10      	adds	r0, r2, #0
    4cf6:	3038      	adds	r0, #56	; 0x38
    4cf8:	4b2e      	ldr	r3, [pc, #184]	; (4db4 <_ZL11follow_pathP3DIRPKc+0x4b4>)
    4cfa:	4798      	blx	r3
    4cfc:	6130      	str	r0, [r6, #16]
    4cfe:	6171      	str	r1, [r6, #20]
    4d00:	e653      	b.n	49aa <_ZL11follow_pathP3DIRPKc+0xaa>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    4d02:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4d04:	05d9      	lsls	r1, r3, #23
    4d06:	0dc9      	lsrs	r1, r1, #23
    4d08:	3158      	adds	r1, #88	; 0x58
    4d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4d0c:	1851      	adds	r1, r2, r1
    4d0e:	1c10      	adds	r0, r2, #0
    4d10:	4b29      	ldr	r3, [pc, #164]	; (4db8 <_ZL11follow_pathP3DIRPKc+0x4b8>)
    4d12:	4798      	blx	r3
    4d14:	60b0      	str	r0, [r6, #8]
    4d16:	e648      	b.n	49aa <_ZL11follow_pathP3DIRPKc+0xaa>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
    4d18:	2000      	movs	r0, #0
    4d1a:	e041      	b.n	4da0 <_ZL11follow_pathP3DIRPKc+0x4a0>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    4d1c:	2005      	movs	r0, #5
    4d1e:	e03f      	b.n	4da0 <_ZL11follow_pathP3DIRPKc+0x4a0>
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
		lfn[di++] = w;					/* Store the Unicode character */
    4d20:	8028      	strh	r0, [r5, #0]
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
	for (;;) {
		w = p[si++];					/* Get a character */
    4d22:	1c63      	adds	r3, r4, #1
    4d24:	7838      	ldrb	r0, [r7, #0]
		if (w < ' ') break;				/* Break if end of the path name */
    4d26:	281f      	cmp	r0, #31
    4d28:	d900      	bls.n	4d2c <_ZL11follow_pathP3DIRPKc+0x42c>
    4d2a:	e652      	b.n	49d2 <_ZL11follow_pathP3DIRPKc+0xd2>
    4d2c:	e001      	b.n	4d32 <_ZL11follow_pathP3DIRPKc+0x432>
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
    4d2e:	2400      	movs	r4, #0
	for (;;) {
		w = p[si++];					/* Get a character */
    4d30:	2301      	movs	r3, #1
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
		lfn[di++] = w;					/* Store the Unicode character */
	}
	*path = &p[si];						/* Return pointer to the next segment */
    4d32:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4d34:	18c9      	adds	r1, r1, r3
    4d36:	910b      	str	r1, [sp, #44]	; 0x2c
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    4d38:	2204      	movs	r2, #4
    4d3a:	4691      	mov	r9, r2
    4d3c:	e683      	b.n	4a46 <_ZL11follow_pathP3DIRPKc+0x146>
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
		if (w != ' ' && w != '.') break;
		di--;
	}
	lfn[di] = 0;						/* LFN is created */
    4d3e:	0064      	lsls	r4, r4, #1
    4d40:	2300      	movs	r3, #0
    4d42:	4659      	mov	r1, fp
    4d44:	5263      	strh	r3, [r4, r1]
    4d46:	e019      	b.n	4d7c <_ZL11follow_pathP3DIRPKc+0x47c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
	if (si) cf |= NS_LOSS | NS_LFN;
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    4d48:	990a      	ldr	r1, [sp, #40]	; 0x28
    4d4a:	1c0a      	adds	r2, r1, #0
    4d4c:	4442      	add	r2, r8
    4d4e:	3a02      	subs	r2, #2
    4d50:	8812      	ldrh	r2, [r2, #0]
    4d52:	2a2e      	cmp	r2, #46	; 0x2e
    4d54:	d100      	bne.n	4d58 <_ZL11follow_pathP3DIRPKc+0x458>
    4d56:	e6d9      	b.n	4b0c <_ZL11follow_pathP3DIRPKc+0x20c>
    4d58:	4642      	mov	r2, r8
    4d5a:	3a04      	subs	r2, #4
    4d5c:	188a      	adds	r2, r1, r2
    4d5e:	e6d2      	b.n	4b06 <_ZL11follow_pathP3DIRPKc+0x206>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
    4d60:	4642      	mov	r2, r8
    4d62:	2a0b      	cmp	r2, #11
    4d64:	d000      	beq.n	4d68 <_ZL11follow_pathP3DIRPKc+0x468>
    4d66:	e704      	b.n	4b72 <_ZL11follow_pathP3DIRPKc+0x272>
    4d68:	46b9      	mov	r9, r7
    4d6a:	e6f6      	b.n	4b5a <_ZL11follow_pathP3DIRPKc+0x25a>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
    4d6c:	1c30      	adds	r0, r6, #0
    4d6e:	4b13      	ldr	r3, [pc, #76]	; (4dbc <_ZL11follow_pathP3DIRPKc+0x4bc>)
    4d70:	4798      	blx	r3
			ns = dp->fn[NSFLAG];
    4d72:	2343      	movs	r3, #67	; 0x43
    4d74:	5cf3      	ldrb	r3, [r6, r3]
			if (res != FR_OK) {				/* Failed to find the object */
    4d76:	2800      	cmp	r0, #0
    4d78:	d184      	bne.n	4c84 <_ZL11follow_pathP3DIRPKc+0x384>
    4d7a:	e796      	b.n	4caa <_ZL11follow_pathP3DIRPKc+0x3aa>

		obj->c_scl = fs->cdc_scl;
		obj->c_size = fs->cdc_size;
		obj->c_ofs = fs->cdc_ofs;
		res = load_obj_dir(&dj, obj);
		if (res != FR_OK) return res;
    4d7c:	2006      	movs	r0, #6
    4d7e:	e00f      	b.n	4da0 <_ZL11follow_pathP3DIRPKc+0x4a0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
			cf |= NS_LOSS | NS_LFN; continue;
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
			if (ni == 11) {				/* Long extension */
    4d80:	4643      	mov	r3, r8
    4d82:	2b0b      	cmp	r3, #11
    4d84:	d000      	beq.n	4d88 <_ZL11follow_pathP3DIRPKc+0x488>
    4d86:	e6f4      	b.n	4b72 <_ZL11follow_pathP3DIRPKc+0x272>
    4d88:	46b9      	mov	r9, r7
    4d8a:	e6e6      	b.n	4b5a <_ZL11follow_pathP3DIRPKc+0x25a>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    4d8c:	2302      	movs	r3, #2
    4d8e:	431f      	orrs	r7, r3
    4d90:	e714      	b.n	4bbc <_ZL11follow_pathP3DIRPKc+0x2bc>
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    4d92:	1c03      	adds	r3, r0, #0
    4d94:	3b41      	subs	r3, #65	; 0x41
    4d96:	b29b      	uxth	r3, r3
    4d98:	2b19      	cmp	r3, #25
    4d9a:	d800      	bhi.n	4d9e <_ZL11follow_pathP3DIRPKc+0x49e>
    4d9c:	e712      	b.n	4bc4 <_ZL11follow_pathP3DIRPKc+0x2c4>
    4d9e:	e716      	b.n	4bce <_ZL11follow_pathP3DIRPKc+0x2ce>
			}
		}
	}

	return res;
}
    4da0:	b021      	add	sp, #132	; 0x84
    4da2:	bc3c      	pop	{r2, r3, r4, r5}
    4da4:	4690      	mov	r8, r2
    4da6:	4699      	mov	r9, r3
    4da8:	46a2      	mov	sl, r4
    4daa:	46ab      	mov	fp, r5
    4dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dae:	46c0      	nop			; (mov r8, r8)
    4db0:	00002a2d 	.word	0x00002a2d
    4db4:	00002a45 	.word	0x00002a45
    4db8:	000048e1 	.word	0x000048e1
    4dbc:	000041ed 	.word	0x000041ed

00004dc0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    4dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dc2:	4657      	mov	r7, sl
    4dc4:	464e      	mov	r6, r9
    4dc6:	4645      	mov	r5, r8
    4dc8:	b4e0      	push	{r5, r6, r7}
    4dca:	b098      	sub	sp, #96	; 0x60
    4dcc:	1c05      	adds	r5, r0, #0
    4dce:	9103      	str	r1, [sp, #12]
    4dd0:	1c14      	adds	r4, r2, #0
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    4dd2:	2009      	movs	r0, #9
    4dd4:	2d00      	cmp	r5, #0
    4dd6:	d100      	bne.n	4dda <f_open+0x1a>
    4dd8:	e1c5      	b.n	5166 <f_open+0x3a6>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
    4dda:	263f      	movs	r6, #63	; 0x3f
    4ddc:	4016      	ands	r6, r2
	res = find_volume(&path, &fs, mode);
    4dde:	a803      	add	r0, sp, #12
    4de0:	a905      	add	r1, sp, #20
    4de2:	1c32      	adds	r2, r6, #0
    4de4:	4bce      	ldr	r3, [pc, #824]	; (5120 <f_open+0x360>)
    4de6:	4798      	blx	r3
    4de8:	4681      	mov	r9, r0
	if (res == FR_OK) {
    4dea:	2800      	cmp	r0, #0
    4dec:	d000      	beq.n	4df0 <f_open+0x30>
    4dee:	e193      	b.n	5118 <f_open+0x358>
		dj.obj.fs = fs;
    4df0:	9805      	ldr	r0, [sp, #20]
    4df2:	9006      	str	r0, [sp, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    4df4:	a806      	add	r0, sp, #24
    4df6:	9903      	ldr	r1, [sp, #12]
    4df8:	4bca      	ldr	r3, [pc, #808]	; (5124 <f_open+0x364>)
    4dfa:	4798      	blx	r3
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    4dfc:	2800      	cmp	r0, #0
    4dfe:	d000      	beq.n	4e02 <f_open+0x42>
    4e00:	e15e      	b.n	50c0 <f_open+0x300>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    4e02:	2343      	movs	r3, #67	; 0x43
    4e04:	aa06      	add	r2, sp, #24
    4e06:	5cd3      	ldrb	r3, [r2, r3]
    4e08:	2b7f      	cmp	r3, #127	; 0x7f
    4e0a:	d800      	bhi.n	4e0e <f_open+0x4e>
    4e0c:	e15d      	b.n	50ca <f_open+0x30a>
    4e0e:	e156      	b.n	50be <f_open+0x2fe>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
			if (res != FR_OK) {					/* No file, create new */
    4e10:	2800      	cmp	r0, #0
    4e12:	d00b      	beq.n	4e2c <f_open+0x6c>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    4e14:	2804      	cmp	r0, #4
    4e16:	d000      	beq.n	4e1a <f_open+0x5a>
    4e18:	e162      	b.n	50e0 <f_open+0x320>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    4e1a:	a806      	add	r0, sp, #24
    4e1c:	4bc2      	ldr	r3, [pc, #776]	; (5128 <f_open+0x368>)
    4e1e:	4798      	blx	r3
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    4e20:	2308      	movs	r3, #8
    4e22:	431e      	orrs	r6, r3
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4e24:	2800      	cmp	r0, #0
    4e26:	d00a      	beq.n	4e3e <f_open+0x7e>
			if (res != FR_OK) {					/* No file, create new */
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    4e28:	4681      	mov	r9, r0
    4e2a:	e175      	b.n	5118 <f_open+0x358>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4e2c:	ab06      	add	r3, sp, #24
    4e2e:	799b      	ldrb	r3, [r3, #6]
    4e30:	2211      	movs	r2, #17
    4e32:	421a      	tst	r2, r3
    4e34:	d000      	beq.n	4e38 <f_open+0x78>
    4e36:	e14d      	b.n	50d4 <f_open+0x314>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    4e38:	0761      	lsls	r1, r4, #29
    4e3a:	d500      	bpl.n	4e3e <f_open+0x7e>
    4e3c:	e14d      	b.n	50da <f_open+0x31a>
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4e3e:	0732      	lsls	r2, r6, #28
    4e40:	d400      	bmi.n	4e44 <f_open+0x84>
    4e42:	e099      	b.n	4f78 <f_open+0x1b8>
				dw = GET_FATTIME();
    4e44:	4bb9      	ldr	r3, [pc, #740]	; (512c <f_open+0x36c>)
    4e46:	4798      	blx	r3
    4e48:	1c07      	adds	r7, r0, #0
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
    4e4a:	9c05      	ldr	r4, [sp, #20]
    4e4c:	7823      	ldrb	r3, [r4, #0]
    4e4e:	2b04      	cmp	r3, #4
    4e50:	d14f      	bne.n	4ef2 <f_open+0x132>
					/* Get current allocation info */
					fp->obj.fs = fs;
    4e52:	602c      	str	r4, [r5, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
    4e54:	6920      	ldr	r0, [r4, #16]
    4e56:	3034      	adds	r0, #52	; 0x34
    4e58:	4bb5      	ldr	r3, [pc, #724]	; (5130 <f_open+0x370>)
    4e5a:	4798      	blx	r3
    4e5c:	60a8      	str	r0, [r5, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
    4e5e:	6920      	ldr	r0, [r4, #16]
    4e60:	3038      	adds	r0, #56	; 0x38
    4e62:	4bb4      	ldr	r3, [pc, #720]	; (5134 <f_open+0x374>)
    4e64:	4798      	blx	r3
    4e66:	6128      	str	r0, [r5, #16]
    4e68:	6169      	str	r1, [r5, #20]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
    4e6a:	2321      	movs	r3, #33	; 0x21
    4e6c:	4698      	mov	r8, r3
    4e6e:	6920      	ldr	r0, [r4, #16]
    4e70:	5cc3      	ldrb	r3, [r0, r3]
    4e72:	2202      	movs	r2, #2
    4e74:	4013      	ands	r3, r2
    4e76:	71eb      	strb	r3, [r5, #7]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
    4e78:	6920      	ldr	r0, [r4, #16]
    4e7a:	3008      	adds	r0, #8
    4e7c:	1c39      	adds	r1, r7, #0
    4e7e:	4cae      	ldr	r4, [pc, #696]	; (5138 <f_open+0x378>)
    4e80:	47a0      	blx	r4
					fs->dirbuf[XDIR_CrtTime10] = 0;
    4e82:	9b05      	ldr	r3, [sp, #20]
    4e84:	2200      	movs	r2, #0
    4e86:	4692      	mov	sl, r2
    4e88:	6918      	ldr	r0, [r3, #16]
    4e8a:	7502      	strb	r2, [r0, #20]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
    4e8c:	6918      	ldr	r0, [r3, #16]
    4e8e:	300c      	adds	r0, #12
    4e90:	1c39      	adds	r1, r7, #0
    4e92:	47a0      	blx	r4
					fs->dirbuf[XDIR_ModTime10] = 0;
    4e94:	9b05      	ldr	r3, [sp, #20]
    4e96:	4650      	mov	r0, sl
    4e98:	691a      	ldr	r2, [r3, #16]
    4e9a:	7550      	strb	r0, [r2, #21]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
    4e9c:	2220      	movs	r2, #32
    4e9e:	6919      	ldr	r1, [r3, #16]
    4ea0:	710a      	strb	r2, [r1, #4]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
    4ea2:	6918      	ldr	r0, [r3, #16]
    4ea4:	3034      	adds	r0, #52	; 0x34
    4ea6:	2100      	movs	r1, #0
    4ea8:	47a0      	blx	r4
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
    4eaa:	9b05      	ldr	r3, [sp, #20]
    4eac:	6918      	ldr	r0, [r3, #16]
    4eae:	3038      	adds	r0, #56	; 0x38
    4eb0:	2200      	movs	r2, #0
    4eb2:	2300      	movs	r3, #0
    4eb4:	4ca1      	ldr	r4, [pc, #644]	; (513c <f_open+0x37c>)
    4eb6:	47a0      	blx	r4
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
    4eb8:	9b05      	ldr	r3, [sp, #20]
    4eba:	6918      	ldr	r0, [r3, #16]
    4ebc:	3028      	adds	r0, #40	; 0x28
    4ebe:	2200      	movs	r2, #0
    4ec0:	2300      	movs	r3, #0
    4ec2:	47a0      	blx	r4
					fs->dirbuf[XDIR_GenFlags] = 1;
    4ec4:	9b05      	ldr	r3, [sp, #20]
    4ec6:	691b      	ldr	r3, [r3, #16]
    4ec8:	2201      	movs	r2, #1
    4eca:	4640      	mov	r0, r8
    4ecc:	541a      	strb	r2, [r3, r0]
					res = store_xdir(&dj);
    4ece:	a806      	add	r0, sp, #24
    4ed0:	4b9b      	ldr	r3, [pc, #620]	; (5140 <f_open+0x380>)
    4ed2:	4798      	blx	r3
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
    4ed4:	2800      	cmp	r0, #0
    4ed6:	d000      	beq.n	4eda <f_open+0x11a>
    4ed8:	e104      	b.n	50e4 <f_open+0x324>
    4eda:	68a9      	ldr	r1, [r5, #8]
    4edc:	2900      	cmp	r1, #0
    4ede:	d04b      	beq.n	4f78 <f_open+0x1b8>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
    4ee0:	1c28      	adds	r0, r5, #0
    4ee2:	4652      	mov	r2, sl
    4ee4:	4b97      	ldr	r3, [pc, #604]	; (5144 <f_open+0x384>)
    4ee6:	4798      	blx	r3
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
    4ee8:	68aa      	ldr	r2, [r5, #8]
    4eea:	3a01      	subs	r2, #1
    4eec:	9b05      	ldr	r3, [sp, #20]
    4eee:	615a      	str	r2, [r3, #20]
    4ef0:	e03f      	b.n	4f72 <f_open+0x1b2>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
    4ef2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    4ef4:	300e      	adds	r0, #14
    4ef6:	1c39      	adds	r1, r7, #0
    4ef8:	4c8f      	ldr	r4, [pc, #572]	; (5138 <f_open+0x378>)
    4efa:	47a0      	blx	r4
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
    4efc:	9813      	ldr	r0, [sp, #76]	; 0x4c
    4efe:	3016      	adds	r0, #22
    4f00:	1c39      	adds	r1, r7, #0
    4f02:	47a0      	blx	r4
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    4f04:	2320      	movs	r3, #32
    4f06:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4f08:	72cb      	strb	r3, [r1, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
    4f0a:	9f05      	ldr	r7, [sp, #20]
    4f0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    4f0e:	4690      	mov	r8, r2
    4f10:	1c38      	adds	r0, r7, #0
    4f12:	1c11      	adds	r1, r2, #0
    4f14:	4b8c      	ldr	r3, [pc, #560]	; (5148 <f_open+0x388>)
    4f16:	4798      	blx	r3
    4f18:	4682      	mov	sl, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    4f1a:	1c38      	adds	r0, r7, #0
    4f1c:	4641      	mov	r1, r8
    4f1e:	2200      	movs	r2, #0
    4f20:	4b8a      	ldr	r3, [pc, #552]	; (514c <f_open+0x38c>)
    4f22:	4798      	blx	r3
					st_dword(dj.dir + DIR_FileSize, 0);
    4f24:	9813      	ldr	r0, [sp, #76]	; 0x4c
    4f26:	301c      	adds	r0, #28
    4f28:	2100      	movs	r1, #0
    4f2a:	47a0      	blx	r4
					fs->wflag = 1;
    4f2c:	2301      	movs	r3, #1
    4f2e:	9805      	ldr	r0, [sp, #20]
    4f30:	70c3      	strb	r3, [r0, #3]

					if (cl) {							/* Remove the cluster chain if exist */
    4f32:	4651      	mov	r1, sl
    4f34:	2900      	cmp	r1, #0
    4f36:	d01f      	beq.n	4f78 <f_open+0x1b8>
						dw = fs->winsect;
    4f38:	9b05      	ldr	r3, [sp, #20]
    4f3a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
						res = remove_chain(&dj.obj, cl, 0);
    4f3c:	a806      	add	r0, sp, #24
    4f3e:	2200      	movs	r2, #0
    4f40:	4b80      	ldr	r3, [pc, #512]	; (5144 <f_open+0x384>)
    4f42:	4798      	blx	r3
						if (res == FR_OK) {
    4f44:	2800      	cmp	r0, #0
    4f46:	d000      	beq.n	4f4a <f_open+0x18a>
    4f48:	e0ce      	b.n	50e8 <f_open+0x328>
							res = move_window(fs, dw);
    4f4a:	9805      	ldr	r0, [sp, #20]
    4f4c:	1c21      	adds	r1, r4, #0
    4f4e:	4b80      	ldr	r3, [pc, #512]	; (5150 <f_open+0x390>)
    4f50:	4798      	blx	r3
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    4f52:	4652      	mov	r2, sl
    4f54:	3a01      	subs	r2, #1
    4f56:	9b05      	ldr	r3, [sp, #20]
    4f58:	615a      	str	r2, [r3, #20]
    4f5a:	e00a      	b.n	4f72 <f_open+0x1b2>
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
    4f5c:	ab06      	add	r3, sp, #24
    4f5e:	799b      	ldrb	r3, [r3, #6]
    4f60:	06da      	lsls	r2, r3, #27
    4f62:	d500      	bpl.n	4f66 <f_open+0x1a6>
    4f64:	e0c2      	b.n	50ec <f_open+0x32c>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
    4f66:	07a0      	lsls	r0, r4, #30
    4f68:	d506      	bpl.n	4f78 <f_open+0x1b8>
    4f6a:	07d9      	lsls	r1, r3, #31
    4f6c:	d500      	bpl.n	4f70 <f_open+0x1b0>
    4f6e:	e0c0      	b.n	50f2 <f_open+0x332>
    4f70:	e002      	b.n	4f78 <f_open+0x1b8>
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
    4f72:	2800      	cmp	r0, #0
    4f74:	d000      	beq.n	4f78 <f_open+0x1b8>
    4f76:	e0bf      	b.n	50f8 <f_open+0x338>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    4f78:	0732      	lsls	r2, r6, #28
    4f7a:	d501      	bpl.n	4f80 <f_open+0x1c0>
				mode |= FA_MODIFIED;
    4f7c:	2340      	movs	r3, #64	; 0x40
    4f7e:	431e      	orrs	r6, r3
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    4f80:	9f05      	ldr	r7, [sp, #20]
    4f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4f84:	642b      	str	r3, [r5, #64]	; 0x40
			fp->dir_ptr = dj.dir;
    4f86:	9813      	ldr	r0, [sp, #76]	; 0x4c
    4f88:	6468      	str	r0, [r5, #68]	; 0x44
		}
#endif

		if (res == FR_OK) {
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
    4f8a:	783b      	ldrb	r3, [r7, #0]
    4f8c:	2b04      	cmp	r3, #4
    4f8e:	d11c      	bne.n	4fca <f_open+0x20a>
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Get allocation info */
    4f90:	6938      	ldr	r0, [r7, #16]
    4f92:	3034      	adds	r0, #52	; 0x34
    4f94:	4b66      	ldr	r3, [pc, #408]	; (5130 <f_open+0x370>)
    4f96:	4798      	blx	r3
    4f98:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
    4f9a:	6938      	ldr	r0, [r7, #16]
    4f9c:	3038      	adds	r0, #56	; 0x38
    4f9e:	4b65      	ldr	r3, [pc, #404]	; (5134 <f_open+0x374>)
    4fa0:	4798      	blx	r3
    4fa2:	6128      	str	r0, [r5, #16]
    4fa4:	6169      	str	r1, [r5, #20]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
    4fa6:	693a      	ldr	r2, [r7, #16]
    4fa8:	2321      	movs	r3, #33	; 0x21
    4faa:	5cd3      	ldrb	r3, [r2, r3]
    4fac:	2202      	movs	r2, #2
    4fae:	4013      	ands	r3, r2
    4fb0:	71eb      	strb	r3, [r5, #7]
				fp->obj.c_scl = dj.obj.sclust;
    4fb2:	ab06      	add	r3, sp, #24
    4fb4:	9908      	ldr	r1, [sp, #32]
    4fb6:	61e9      	str	r1, [r5, #28]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
    4fb8:	22ff      	movs	r2, #255	; 0xff
    4fba:	990a      	ldr	r1, [sp, #40]	; 0x28
    4fbc:	4391      	bics	r1, r2
    4fbe:	79da      	ldrb	r2, [r3, #7]
    4fc0:	430a      	orrs	r2, r1
    4fc2:	622a      	str	r2, [r5, #32]
				fp->obj.c_ofs = dj.blk_ofs;
    4fc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4fc6:	626b      	str	r3, [r5, #36]	; 0x24
    4fc8:	e00c      	b.n	4fe4 <f_open+0x224>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
    4fca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    4fcc:	1c38      	adds	r0, r7, #0
    4fce:	1c21      	adds	r1, r4, #0
    4fd0:	4b5d      	ldr	r3, [pc, #372]	; (5148 <f_open+0x388>)
    4fd2:	4798      	blx	r3
    4fd4:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    4fd6:	1c20      	adds	r0, r4, #0
    4fd8:	301c      	adds	r0, #28
    4fda:	4b55      	ldr	r3, [pc, #340]	; (5130 <f_open+0x370>)
    4fdc:	4798      	blx	r3
    4fde:	6128      	str	r0, [r5, #16]
    4fe0:	2300      	movs	r3, #0
    4fe2:	616b      	str	r3, [r5, #20]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
    4fe4:	9b05      	ldr	r3, [sp, #20]
    4fe6:	602b      	str	r3, [r5, #0]
			fp->obj.id = fs->id;
    4fe8:	88db      	ldrh	r3, [r3, #6]
    4fea:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
    4fec:	2328      	movs	r3, #40	; 0x28
    4fee:	54ee      	strb	r6, [r5, r3]
			fp->err = 0;			/* Clear error flag */
    4ff0:	2300      	movs	r3, #0
    4ff2:	2229      	movs	r2, #41	; 0x29
    4ff4:	54ab      	strb	r3, [r5, r2]
			fp->sect = 0;			/* Invalidate current data sector */
    4ff6:	63eb      	str	r3, [r5, #60]	; 0x3c
			fp->fptr = 0;			/* Set file pointer top of the file */
    4ff8:	2000      	movs	r0, #0
    4ffa:	2100      	movs	r1, #0
    4ffc:	6328      	str	r0, [r5, #48]	; 0x30
    4ffe:	6369      	str	r1, [r5, #52]	; 0x34
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
    5000:	1c2c      	adds	r4, r5, #0
    5002:	3448      	adds	r4, #72	; 0x48
    5004:	1c20      	adds	r0, r4, #0
    5006:	2100      	movs	r1, #0
    5008:	2280      	movs	r2, #128	; 0x80
    500a:	0092      	lsls	r2, r2, #2
    500c:	4b51      	ldr	r3, [pc, #324]	; (5154 <f_open+0x394>)
    500e:	4798      	blx	r3
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    5010:	06b2      	lsls	r2, r6, #26
    5012:	d400      	bmi.n	5016 <f_open+0x256>
    5014:	e0a6      	b.n	5164 <f_open+0x3a4>
    5016:	692e      	ldr	r6, [r5, #16]
    5018:	696f      	ldr	r7, [r5, #20]
    501a:	1c33      	adds	r3, r6, #0
    501c:	433b      	orrs	r3, r7
    501e:	d100      	bne.n	5022 <f_open+0x262>
    5020:	e0a0      	b.n	5164 <f_open+0x3a4>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    5022:	632e      	str	r6, [r5, #48]	; 0x30
    5024:	636f      	str	r7, [r5, #52]	; 0x34
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
    5026:	68ab      	ldr	r3, [r5, #8]
    5028:	469c      	mov	ip, r3
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    502a:	9805      	ldr	r0, [sp, #20]
    502c:	8941      	ldrh	r1, [r0, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    502e:	0249      	lsls	r1, r1, #9
    5030:	9100      	str	r1, [sp, #0]
    5032:	2300      	movs	r3, #0
    5034:	9301      	str	r3, [sp, #4]
    5036:	2f00      	cmp	r7, #0
    5038:	d103      	bne.n	5042 <f_open+0x282>
    503a:	429f      	cmp	r7, r3
    503c:	d165      	bne.n	510a <f_open+0x34a>
    503e:	428e      	cmp	r6, r1
    5040:	d963      	bls.n	510a <f_open+0x34a>
    5042:	9900      	ldr	r1, [sp, #0]
    5044:	9a01      	ldr	r2, [sp, #4]
    5046:	1a76      	subs	r6, r6, r1
    5048:	4197      	sbcs	r7, r2
					clst = get_fat(&fp->obj, clst);
    504a:	4a43      	ldr	r2, [pc, #268]	; (5158 <f_open+0x398>)
    504c:	4692      	mov	sl, r2
					if (clst <= 1) res = FR_INT_ERR;
    504e:	2302      	movs	r3, #2
    5050:	4698      	mov	r8, r3
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
    5052:	1c28      	adds	r0, r5, #0
    5054:	4661      	mov	r1, ip
    5056:	47d0      	blx	sl
    5058:	4684      	mov	ip, r0
					if (clst <= 1) res = FR_INT_ERR;
    505a:	2801      	cmp	r0, #1
    505c:	d901      	bls.n	5062 <f_open+0x2a2>
    505e:	464b      	mov	r3, r9
    5060:	e000      	b.n	5064 <f_open+0x2a4>
    5062:	4643      	mov	r3, r8
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    5064:	4660      	mov	r0, ip
    5066:	3001      	adds	r0, #1
    5068:	d048      	beq.n	50fc <f_open+0x33c>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    506a:	2b00      	cmp	r3, #0
    506c:	d149      	bne.n	5102 <f_open+0x342>
    506e:	1c32      	adds	r2, r6, #0
    5070:	1c3b      	adds	r3, r7, #0
    5072:	9800      	ldr	r0, [sp, #0]
    5074:	9901      	ldr	r1, [sp, #4]
    5076:	1a12      	subs	r2, r2, r0
    5078:	418b      	sbcs	r3, r1
    507a:	428f      	cmp	r7, r1
    507c:	d804      	bhi.n	5088 <f_open+0x2c8>
    507e:	9901      	ldr	r1, [sp, #4]
    5080:	428f      	cmp	r7, r1
    5082:	d142      	bne.n	510a <f_open+0x34a>
    5084:	4286      	cmp	r6, r0
    5086:	d940      	bls.n	510a <f_open+0x34a>
    5088:	1c16      	adds	r6, r2, #0
    508a:	1c1f      	adds	r7, r3, #0
    508c:	e7e1      	b.n	5052 <f_open+0x292>
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clust2sect(fs, clst)) == 0) {
    508e:	9a05      	ldr	r2, [sp, #20]
    5090:	4690      	mov	r8, r2
    5092:	1c10      	adds	r0, r2, #0
    5094:	4661      	mov	r1, ip
    5096:	4b31      	ldr	r3, [pc, #196]	; (515c <f_open+0x39c>)
    5098:	4798      	blx	r3
						res = FR_INT_ERR;
    509a:	2302      	movs	r3, #2
    509c:	4699      	mov	r9, r3
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clust2sect(fs, clst)) == 0) {
    509e:	2800      	cmp	r0, #0
    50a0:	d03a      	beq.n	5118 <f_open+0x358>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    50a2:	05fb      	lsls	r3, r7, #23
    50a4:	0a72      	lsrs	r2, r6, #9
    50a6:	431a      	orrs	r2, r3
    50a8:	1882      	adds	r2, r0, r2
    50aa:	63ea      	str	r2, [r5, #60]	; 0x3c
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
    50ac:	4641      	mov	r1, r8
    50ae:	7848      	ldrb	r0, [r1, #1]
    50b0:	1c21      	adds	r1, r4, #0
    50b2:	2301      	movs	r3, #1
    50b4:	4c2a      	ldr	r4, [pc, #168]	; (5160 <f_open+0x3a0>)
    50b6:	47a0      	blx	r4
    50b8:	2800      	cmp	r0, #0
    50ba:	d12b      	bne.n	5114 <f_open+0x354>
    50bc:	e052      	b.n	5164 <f_open+0x3a4>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
				res = FR_INVALID_NAME;
    50be:	2006      	movs	r0, #6
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    50c0:	231c      	movs	r3, #28
    50c2:	421c      	tst	r4, r3
    50c4:	d000      	beq.n	50c8 <f_open+0x308>
    50c6:	e6a3      	b.n	4e10 <f_open+0x50>
    50c8:	e753      	b.n	4f72 <f_open+0x1b2>
    50ca:	231c      	movs	r3, #28
    50cc:	421c      	tst	r4, r3
    50ce:	d000      	beq.n	50d2 <f_open+0x312>
    50d0:	e6ac      	b.n	4e2c <f_open+0x6c>
    50d2:	e743      	b.n	4f5c <f_open+0x19c>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    50d4:	2207      	movs	r2, #7
    50d6:	4691      	mov	r9, r2
    50d8:	e01e      	b.n	5118 <f_open+0x358>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    50da:	2308      	movs	r3, #8
    50dc:	4699      	mov	r9, r3
    50de:	e01b      	b.n	5118 <f_open+0x358>
    50e0:	4681      	mov	r9, r0
    50e2:	e019      	b.n	5118 <f_open+0x358>
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
					fs->dirbuf[XDIR_GenFlags] = 1;
					res = store_xdir(&dj);
    50e4:	4681      	mov	r9, r0
    50e6:	e017      	b.n	5118 <f_open+0x358>
					st_dword(dj.dir + DIR_FileSize, 0);
					fs->wflag = 1;

					if (cl) {							/* Remove the cluster chain if exist */
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
    50e8:	4681      	mov	r9, r0
    50ea:	e015      	b.n	5118 <f_open+0x358>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
    50ec:	2004      	movs	r0, #4
    50ee:	4681      	mov	r9, r0
    50f0:	e012      	b.n	5118 <f_open+0x358>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
						res = FR_DENIED;
    50f2:	2107      	movs	r1, #7
    50f4:	4689      	mov	r9, r1
    50f6:	e00f      	b.n	5118 <f_open+0x358>
    50f8:	4681      	mov	r9, r0
    50fa:	e00d      	b.n	5118 <f_open+0x358>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    50fc:	2201      	movs	r2, #1
    50fe:	4691      	mov	r9, r2
    5100:	e000      	b.n	5104 <f_open+0x344>
    5102:	4699      	mov	r9, r3
				}
				fp->clust = clst;
    5104:	4663      	mov	r3, ip
    5106:	63ab      	str	r3, [r5, #56]	; 0x38
    5108:	e006      	b.n	5118 <f_open+0x358>
    510a:	4660      	mov	r0, ip
    510c:	63a8      	str	r0, [r5, #56]	; 0x38
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    510e:	05f3      	lsls	r3, r6, #23
    5110:	d1bd      	bne.n	508e <f_open+0x2ce>
    5112:	e027      	b.n	5164 <f_open+0x3a4>
					if ((sc = clust2sect(fs, clst)) == 0) {
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
    5114:	2101      	movs	r1, #1
    5116:	4689      	mov	r9, r1
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    5118:	2300      	movs	r3, #0
    511a:	602b      	str	r3, [r5, #0]
    511c:	4648      	mov	r0, r9
    511e:	e022      	b.n	5166 <f_open+0x3a6>
    5120:	00003b3d 	.word	0x00003b3d
    5124:	00004901 	.word	0x00004901
    5128:	0000447d 	.word	0x0000447d
    512c:	00002a21 	.word	0x00002a21
    5130:	00002a2d 	.word	0x00002a2d
    5134:	00002a45 	.word	0x00002a45
    5138:	00002a95 	.word	0x00002a95
    513c:	00002aa5 	.word	0x00002aa5
    5140:	000039ed 	.word	0x000039ed
    5144:	00003625 	.word	0x00003625
    5148:	000048e1 	.word	0x000048e1
    514c:	00003031 	.word	0x00003031
    5150:	00002cd9 	.word	0x00002cd9
    5154:	00002af1 	.word	0x00002af1
    5158:	000031fd 	.word	0x000031fd
    515c:	00002b01 	.word	0x00002b01
    5160:	00002995 	.word	0x00002995
    5164:	2000      	movs	r0, #0

	LEAVE_FF(fs, res);
}
    5166:	b018      	add	sp, #96	; 0x60
    5168:	bc1c      	pop	{r2, r3, r4}
    516a:	4690      	mov	r8, r2
    516c:	4699      	mov	r9, r3
    516e:	46a2      	mov	sl, r4
    5170:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5172:	46c0      	nop			; (mov r8, r8)

00005174 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
    5174:	b5f0      	push	{r4, r5, r6, r7, lr}
    5176:	465f      	mov	r7, fp
    5178:	4656      	mov	r6, sl
    517a:	464d      	mov	r5, r9
    517c:	4644      	mov	r4, r8
    517e:	b4f0      	push	{r4, r5, r6, r7}
    5180:	b087      	sub	sp, #28
    5182:	1c04      	adds	r4, r0, #0
    5184:	1c0e      	adds	r6, r1, #0
    5186:	1c15      	adds	r5, r2, #0
    5188:	1c1f      	adds	r7, r3, #0
	FSIZE_t remain;
	UINT rcnt = 0, cc = 0, csect = 0;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    518a:	2300      	movs	r3, #0
    518c:	603b      	str	r3, [r7, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
    518e:	9003      	str	r0, [sp, #12]
    5190:	a905      	add	r1, sp, #20
    5192:	4b73      	ldr	r3, [pc, #460]	; (5360 <f_read+0x1ec>)
    5194:	4798      	blx	r3
    5196:	1e03      	subs	r3, r0, #0
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    5198:	d000      	beq.n	519c <f_read+0x28>
    519a:	e0d8      	b.n	534e <f_read+0x1da>
    519c:	2329      	movs	r3, #41	; 0x29
    519e:	5ce2      	ldrb	r2, [r4, r3]
    51a0:	1e13      	subs	r3, r2, #0
    51a2:	d000      	beq.n	51a6 <f_read+0x32>
    51a4:	e0d3      	b.n	534e <f_read+0x1da>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    51a6:	2328      	movs	r3, #40	; 0x28
    51a8:	5ce2      	ldrb	r2, [r4, r3]
    51aa:	2307      	movs	r3, #7
    51ac:	07d0      	lsls	r0, r2, #31
    51ae:	d400      	bmi.n	51b2 <f_read+0x3e>
    51b0:	e0cd      	b.n	534e <f_read+0x1da>
	remain = fp->obj.objsize - fp->fptr;
    51b2:	6922      	ldr	r2, [r4, #16]
    51b4:	6963      	ldr	r3, [r4, #20]
    51b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    51b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    51ba:	1a12      	subs	r2, r2, r0
    51bc:	418b      	sbcs	r3, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    51be:	2b00      	cmp	r3, #0
    51c0:	d102      	bne.n	51c8 <f_read+0x54>
    51c2:	4295      	cmp	r5, r2
    51c4:	d900      	bls.n	51c8 <f_read+0x54>
    51c6:	1c15      	adds	r5, r2, #0

	for ( ;  btr;								/* Repeat until all data read */
    51c8:	2d00      	cmp	r5, #0
    51ca:	d100      	bne.n	51ce <f_read+0x5a>
    51cc:	e0bc      	b.n	5348 <f_read+0x1d4>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    51ce:	9602      	str	r6, [sp, #8]
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
    51d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    51d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    51d4:	05da      	lsls	r2, r3, #23
    51d6:	d000      	beq.n	51da <f_read+0x66>
    51d8:	e08b      	b.n	52f2 <f_read+0x17e>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
    51da:	9e05      	ldr	r6, [sp, #20]
    51dc:	8972      	ldrh	r2, [r6, #10]
    51de:	3a01      	subs	r2, #1
    51e0:	4691      	mov	r9, r2
    51e2:	05c8      	lsls	r0, r1, #23
    51e4:	0a5a      	lsrs	r2, r3, #9
    51e6:	4302      	orrs	r2, r0
    51e8:	4648      	mov	r0, r9
    51ea:	4010      	ands	r0, r2
    51ec:	4681      	mov	r9, r0
			if (csect == 0) {					/* On the cluster boundary? */
    51ee:	d116      	bne.n	521e <f_read+0xaa>
				if (fp->fptr == 0) {			/* On the top of the file? */
    51f0:	430b      	orrs	r3, r1
    51f2:	d101      	bne.n	51f8 <f_read+0x84>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    51f4:	68a0      	ldr	r0, [r4, #8]
    51f6:	e003      	b.n	5200 <f_read+0x8c>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
    51f8:	9803      	ldr	r0, [sp, #12]
    51fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    51fc:	4b59      	ldr	r3, [pc, #356]	; (5364 <f_read+0x1f0>)
    51fe:	4798      	blx	r3
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    5200:	2801      	cmp	r0, #1
    5202:	d804      	bhi.n	520e <f_read+0x9a>
    5204:	2202      	movs	r2, #2
    5206:	2329      	movs	r3, #41	; 0x29
    5208:	54e2      	strb	r2, [r4, r3]
    520a:	2302      	movs	r3, #2
    520c:	e09f      	b.n	534e <f_read+0x1da>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    520e:	1c41      	adds	r1, r0, #1
    5210:	d104      	bne.n	521c <f_read+0xa8>
    5212:	2201      	movs	r2, #1
    5214:	2329      	movs	r3, #41	; 0x29
    5216:	54e2      	strb	r2, [r4, r3]
    5218:	2301      	movs	r3, #1
    521a:	e098      	b.n	534e <f_read+0x1da>
				fp->clust = clst;				/* Update current cluster */
    521c:	63a0      	str	r0, [r4, #56]	; 0x38
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
    521e:	9a05      	ldr	r2, [sp, #20]
    5220:	4692      	mov	sl, r2
    5222:	1c10      	adds	r0, r2, #0
    5224:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    5226:	4e50      	ldr	r6, [pc, #320]	; (5368 <f_read+0x1f4>)
    5228:	47b0      	blx	r6
			if (!sect) ABORT(fs, FR_INT_ERR);
    522a:	2800      	cmp	r0, #0
    522c:	d104      	bne.n	5238 <f_read+0xc4>
    522e:	2202      	movs	r2, #2
    5230:	2329      	movs	r3, #41	; 0x29
    5232:	54e2      	strb	r2, [r4, r3]
    5234:	2302      	movs	r3, #2
    5236:	e08a      	b.n	534e <f_read+0x1da>
			sect += csect;
    5238:	4683      	mov	fp, r0
    523a:	44cb      	add	fp, r9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
    523c:	0a6a      	lsrs	r2, r5, #9
    523e:	4690      	mov	r8, r2
			if (cc) {							/* Read maximum contiguous sectors directly */
    5240:	d02c      	beq.n	529c <f_read+0x128>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    5242:	4656      	mov	r6, sl
    5244:	8973      	ldrh	r3, [r6, #10]
    5246:	444a      	add	r2, r9
    5248:	429a      	cmp	r2, r3
    524a:	d902      	bls.n	5252 <f_read+0xde>
					cc = fs->csize - csect;
    524c:	4649      	mov	r1, r9
    524e:	1a59      	subs	r1, r3, r1
    5250:	4688      	mov	r8, r1
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    5252:	4652      	mov	r2, sl
    5254:	7850      	ldrb	r0, [r2, #1]
    5256:	4646      	mov	r6, r8
    5258:	b2f3      	uxtb	r3, r6
    525a:	9902      	ldr	r1, [sp, #8]
    525c:	465a      	mov	r2, fp
    525e:	4e43      	ldr	r6, [pc, #268]	; (536c <f_read+0x1f8>)
    5260:	47b0      	blx	r6
    5262:	2800      	cmp	r0, #0
    5264:	d004      	beq.n	5270 <f_read+0xfc>
    5266:	2201      	movs	r2, #1
    5268:	2329      	movs	r3, #41	; 0x29
    526a:	54e2      	strb	r2, [r4, r3]
    526c:	2301      	movs	r3, #1
    526e:	e06e      	b.n	534e <f_read+0x1da>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
    5270:	2328      	movs	r3, #40	; 0x28
    5272:	5ce3      	ldrb	r3, [r4, r3]
    5274:	2b7f      	cmp	r3, #127	; 0x7f
    5276:	d90d      	bls.n	5294 <f_read+0x120>
    5278:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    527a:	4659      	mov	r1, fp
    527c:	1a43      	subs	r3, r0, r1
    527e:	4598      	cmp	r8, r3
    5280:	d908      	bls.n	5294 <f_read+0x120>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
    5282:	025b      	lsls	r3, r3, #9
    5284:	9e02      	ldr	r6, [sp, #8]
    5286:	18f0      	adds	r0, r6, r3
    5288:	1c21      	adds	r1, r4, #0
    528a:	3148      	adds	r1, #72	; 0x48
    528c:	2280      	movs	r2, #128	; 0x80
    528e:	0092      	lsls	r2, r2, #2
    5290:	4b37      	ldr	r3, [pc, #220]	; (5370 <f_read+0x1fc>)
    5292:	4798      	blx	r3
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
    5294:	4640      	mov	r0, r8
    5296:	0240      	lsls	r0, r0, #9
    5298:	4680      	mov	r8, r0
				continue;
    529a:	e03c      	b.n	5316 <f_read+0x1a2>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
    529c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    529e:	455a      	cmp	r2, fp
    52a0:	d025      	beq.n	52ee <f_read+0x17a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
    52a2:	2328      	movs	r3, #40	; 0x28
    52a4:	5ce3      	ldrb	r3, [r4, r3]
    52a6:	2b7f      	cmp	r3, #127	; 0x7f
    52a8:	d912      	bls.n	52d0 <f_read+0x15c>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    52aa:	4651      	mov	r1, sl
    52ac:	7848      	ldrb	r0, [r1, #1]
    52ae:	1c21      	adds	r1, r4, #0
    52b0:	3148      	adds	r1, #72	; 0x48
    52b2:	2301      	movs	r3, #1
    52b4:	4e2f      	ldr	r6, [pc, #188]	; (5374 <f_read+0x200>)
    52b6:	47b0      	blx	r6
    52b8:	2800      	cmp	r0, #0
    52ba:	d004      	beq.n	52c6 <f_read+0x152>
    52bc:	2201      	movs	r2, #1
    52be:	2329      	movs	r3, #41	; 0x29
    52c0:	54e2      	strb	r2, [r4, r3]
    52c2:	2301      	movs	r3, #1
    52c4:	e043      	b.n	534e <f_read+0x1da>
					fp->flag &= (BYTE)~FA_DIRTY;
    52c6:	2328      	movs	r3, #40	; 0x28
    52c8:	5ce2      	ldrb	r2, [r4, r3]
    52ca:	217f      	movs	r1, #127	; 0x7f
    52cc:	400a      	ands	r2, r1
    52ce:	54e2      	strb	r2, [r4, r3]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    52d0:	9905      	ldr	r1, [sp, #20]
    52d2:	7848      	ldrb	r0, [r1, #1]
    52d4:	1c21      	adds	r1, r4, #0
    52d6:	3148      	adds	r1, #72	; 0x48
    52d8:	465a      	mov	r2, fp
    52da:	2301      	movs	r3, #1
    52dc:	4e23      	ldr	r6, [pc, #140]	; (536c <f_read+0x1f8>)
    52de:	47b0      	blx	r6
    52e0:	2800      	cmp	r0, #0
    52e2:	d004      	beq.n	52ee <f_read+0x17a>
    52e4:	2201      	movs	r2, #1
    52e6:	2329      	movs	r3, #41	; 0x29
    52e8:	54e2      	strb	r2, [r4, r3]
    52ea:	2301      	movs	r3, #1
    52ec:	e02f      	b.n	534e <f_read+0x1da>
			}
#endif
			fp->sect = sect;
    52ee:	4658      	mov	r0, fp
    52f0:	63e0      	str	r0, [r4, #60]	; 0x3c
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
    52f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    52f4:	05ca      	lsls	r2, r1, #23
    52f6:	0dd2      	lsrs	r2, r2, #23
    52f8:	2380      	movs	r3, #128	; 0x80
    52fa:	009b      	lsls	r3, r3, #2
    52fc:	1a9b      	subs	r3, r3, r2
    52fe:	46a8      	mov	r8, r5
    5300:	429d      	cmp	r5, r3
    5302:	d900      	bls.n	5306 <f_read+0x192>
    5304:	4698      	mov	r8, r3
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    5306:	05c9      	lsls	r1, r1, #23
    5308:	0dc9      	lsrs	r1, r1, #23
    530a:	3148      	adds	r1, #72	; 0x48
    530c:	1861      	adds	r1, r4, r1
    530e:	9802      	ldr	r0, [sp, #8]
    5310:	4642      	mov	r2, r8
    5312:	4e17      	ldr	r6, [pc, #92]	; (5370 <f_read+0x1fc>)
    5314:	47b0      	blx	r6
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    5316:	9802      	ldr	r0, [sp, #8]
    5318:	1c06      	adds	r6, r0, #0
    531a:	4446      	add	r6, r8
    531c:	9602      	str	r6, [sp, #8]
    531e:	4640      	mov	r0, r8
    5320:	9000      	str	r0, [sp, #0]
    5322:	2100      	movs	r1, #0
    5324:	9101      	str	r1, [sp, #4]
    5326:	6b22      	ldr	r2, [r4, #48]	; 0x30
    5328:	6b63      	ldr	r3, [r4, #52]	; 0x34
    532a:	9800      	ldr	r0, [sp, #0]
    532c:	9901      	ldr	r1, [sp, #4]
    532e:	1812      	adds	r2, r2, r0
    5330:	414b      	adcs	r3, r1
    5332:	6322      	str	r2, [r4, #48]	; 0x30
    5334:	6363      	str	r3, [r4, #52]	; 0x34
    5336:	6839      	ldr	r1, [r7, #0]
    5338:	1c0b      	adds	r3, r1, #0
    533a:	4443      	add	r3, r8
    533c:	603b      	str	r3, [r7, #0]
    533e:	4642      	mov	r2, r8
    5340:	1aad      	subs	r5, r5, r2
    5342:	d000      	beq.n	5346 <f_read+0x1d2>
    5344:	e744      	b.n	51d0 <f_read+0x5c>
    5346:	e001      	b.n	534c <f_read+0x1d8>
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
    5348:	2300      	movs	r3, #0
    534a:	e000      	b.n	534e <f_read+0x1da>
    534c:	2300      	movs	r3, #0
}
    534e:	1c18      	adds	r0, r3, #0
    5350:	b007      	add	sp, #28
    5352:	bc3c      	pop	{r2, r3, r4, r5}
    5354:	4690      	mov	r8, r2
    5356:	4699      	mov	r9, r3
    5358:	46a2      	mov	sl, r4
    535a:	46ab      	mov	fp, r5
    535c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    535e:	46c0      	nop			; (mov r8, r8)
    5360:	00002c35 	.word	0x00002c35
    5364:	000031fd 	.word	0x000031fd
    5368:	00002b01 	.word	0x00002b01
    536c:	00002995 	.word	0x00002995
    5370:	00002add 	.word	0x00002add
    5374:	000029c1 	.word	0x000029c1

00005378 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    5378:	b5f0      	push	{r4, r5, r6, r7, lr}
    537a:	b095      	sub	sp, #84	; 0x54
    537c:	1c04      	adds	r4, r0, #0
	DWORD tm;
	BYTE *dir;
	DEF_NAMBUF


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    537e:	a901      	add	r1, sp, #4
    5380:	4b4a      	ldr	r3, [pc, #296]	; (54ac <f_sync+0x134>)
    5382:	4798      	blx	r3
    5384:	1c03      	adds	r3, r0, #0
	if (res == FR_OK) {
    5386:	2b00      	cmp	r3, #0
    5388:	d000      	beq.n	538c <f_sync+0x14>
    538a:	e08c      	b.n	54a6 <f_sync+0x12e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    538c:	2328      	movs	r3, #40	; 0x28
    538e:	5ce3      	ldrb	r3, [r4, r3]
	DWORD tm;
	BYTE *dir;
	DEF_NAMBUF


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    5390:	2000      	movs	r0, #0
	if (res == FR_OK) {
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    5392:	0659      	lsls	r1, r3, #25
    5394:	d400      	bmi.n	5398 <f_sync+0x20>
    5396:	e086      	b.n	54a6 <f_sync+0x12e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
    5398:	b25b      	sxtb	r3, r3
    539a:	2b00      	cmp	r3, #0
    539c:	da10      	bge.n	53c0 <f_sync+0x48>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
    539e:	9a01      	ldr	r2, [sp, #4]
    53a0:	7850      	ldrb	r0, [r2, #1]
    53a2:	1c21      	adds	r1, r4, #0
    53a4:	3148      	adds	r1, #72	; 0x48
    53a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    53a8:	2301      	movs	r3, #1
    53aa:	4d41      	ldr	r5, [pc, #260]	; (54b0 <f_sync+0x138>)
    53ac:	47a8      	blx	r5
    53ae:	1c03      	adds	r3, r0, #0
    53b0:	2001      	movs	r0, #1
    53b2:	2b00      	cmp	r3, #0
    53b4:	d177      	bne.n	54a6 <f_sync+0x12e>
				fp->flag &= (BYTE)~FA_DIRTY;
    53b6:	2328      	movs	r3, #40	; 0x28
    53b8:	5ce2      	ldrb	r2, [r4, r3]
    53ba:	217f      	movs	r1, #127	; 0x7f
    53bc:	400a      	ands	r2, r1
    53be:	54e2      	strb	r2, [r4, r3]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
    53c0:	4b3c      	ldr	r3, [pc, #240]	; (54b4 <f_sync+0x13c>)
    53c2:	4798      	blx	r3
    53c4:	1c06      	adds	r6, r0, #0
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
    53c6:	9801      	ldr	r0, [sp, #4]
    53c8:	7802      	ldrb	r2, [r0, #0]
    53ca:	2a04      	cmp	r2, #4
    53cc:	d144      	bne.n	5458 <f_sync+0xe0>
				res = fill_fat_chain(&fp->obj);	/* Create FAT chain if needed */
    53ce:	1c20      	adds	r0, r4, #0
    53d0:	4b39      	ldr	r3, [pc, #228]	; (54b8 <f_sync+0x140>)
    53d2:	4798      	blx	r3
    53d4:	1c03      	adds	r3, r0, #0
				if (res == FR_OK) {
    53d6:	2b00      	cmp	r3, #0
    53d8:	d165      	bne.n	54a6 <f_sync+0x12e>
					DIR dj;

					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
    53da:	a802      	add	r0, sp, #8
    53dc:	1c21      	adds	r1, r4, #0
    53de:	4b37      	ldr	r3, [pc, #220]	; (54bc <f_sync+0x144>)
    53e0:	4798      	blx	r3
					if (res == FR_OK) {
    53e2:	2800      	cmp	r0, #0
    53e4:	d15f      	bne.n	54a6 <f_sync+0x12e>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
    53e6:	9b01      	ldr	r3, [sp, #4]
    53e8:	691a      	ldr	r2, [r3, #16]
    53ea:	7910      	ldrb	r0, [r2, #4]
    53ec:	2120      	movs	r1, #32
    53ee:	4301      	orrs	r1, r0
    53f0:	7111      	strb	r1, [r2, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
    53f2:	79e1      	ldrb	r1, [r4, #7]
    53f4:	2201      	movs	r2, #1
    53f6:	4311      	orrs	r1, r2
    53f8:	2221      	movs	r2, #33	; 0x21
    53fa:	6918      	ldr	r0, [r3, #16]
    53fc:	5481      	strb	r1, [r0, r2]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
    53fe:	6918      	ldr	r0, [r3, #16]
    5400:	3034      	adds	r0, #52	; 0x34
    5402:	68a1      	ldr	r1, [r4, #8]
    5404:	4d2e      	ldr	r5, [pc, #184]	; (54c0 <f_sync+0x148>)
    5406:	47a8      	blx	r5
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
    5408:	9b01      	ldr	r3, [sp, #4]
    540a:	6918      	ldr	r0, [r3, #16]
    540c:	3038      	adds	r0, #56	; 0x38
    540e:	6922      	ldr	r2, [r4, #16]
    5410:	6963      	ldr	r3, [r4, #20]
    5412:	4f2c      	ldr	r7, [pc, #176]	; (54c4 <f_sync+0x14c>)
    5414:	47b8      	blx	r7
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
    5416:	9b01      	ldr	r3, [sp, #4]
    5418:	6918      	ldr	r0, [r3, #16]
    541a:	3028      	adds	r0, #40	; 0x28
    541c:	6922      	ldr	r2, [r4, #16]
    541e:	6963      	ldr	r3, [r4, #20]
    5420:	47b8      	blx	r7
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
    5422:	9b01      	ldr	r3, [sp, #4]
    5424:	6918      	ldr	r0, [r3, #16]
    5426:	300c      	adds	r0, #12
    5428:	1c31      	adds	r1, r6, #0
    542a:	47a8      	blx	r5
						fs->dirbuf[XDIR_ModTime10] = 0;
    542c:	9b01      	ldr	r3, [sp, #4]
    542e:	2200      	movs	r2, #0
    5430:	6919      	ldr	r1, [r3, #16]
    5432:	754a      	strb	r2, [r1, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
    5434:	6918      	ldr	r0, [r3, #16]
    5436:	3010      	adds	r0, #16
    5438:	2100      	movs	r1, #0
    543a:	47a8      	blx	r5
						res = store_xdir(&dj);	/* Restore it to the directory */
    543c:	a802      	add	r0, sp, #8
    543e:	4b22      	ldr	r3, [pc, #136]	; (54c8 <f_sync+0x150>)
    5440:	4798      	blx	r3
						if (res == FR_OK) {
    5442:	2800      	cmp	r0, #0
    5444:	d12f      	bne.n	54a6 <f_sync+0x12e>
							res = sync_fs(fs);
    5446:	9801      	ldr	r0, [sp, #4]
    5448:	4b20      	ldr	r3, [pc, #128]	; (54cc <f_sync+0x154>)
    544a:	4798      	blx	r3
							fp->flag &= (BYTE)~FA_MODIFIED;
    544c:	2328      	movs	r3, #40	; 0x28
    544e:	5ce2      	ldrb	r2, [r4, r3]
    5450:	2140      	movs	r1, #64	; 0x40
    5452:	438a      	bics	r2, r1
    5454:	54e2      	strb	r2, [r4, r3]
    5456:	e026      	b.n	54a6 <f_sync+0x12e>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
    5458:	6c21      	ldr	r1, [r4, #64]	; 0x40
    545a:	4b1d      	ldr	r3, [pc, #116]	; (54d0 <f_sync+0x158>)
    545c:	4798      	blx	r3
    545e:	1c03      	adds	r3, r0, #0
				if (res == FR_OK) {
    5460:	2b00      	cmp	r3, #0
    5462:	d120      	bne.n	54a6 <f_sync+0x12e>
					dir = fp->dir_ptr;
    5464:	6c65      	ldr	r5, [r4, #68]	; 0x44
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
    5466:	7aea      	ldrb	r2, [r5, #11]
    5468:	2320      	movs	r3, #32
    546a:	4313      	orrs	r3, r2
    546c:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
    546e:	6820      	ldr	r0, [r4, #0]
    5470:	1c29      	adds	r1, r5, #0
    5472:	68a2      	ldr	r2, [r4, #8]
    5474:	4b17      	ldr	r3, [pc, #92]	; (54d4 <f_sync+0x15c>)
    5476:	4798      	blx	r3
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    5478:	1c28      	adds	r0, r5, #0
    547a:	301c      	adds	r0, #28
    547c:	6921      	ldr	r1, [r4, #16]
    547e:	4f10      	ldr	r7, [pc, #64]	; (54c0 <f_sync+0x148>)
    5480:	47b8      	blx	r7
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
    5482:	1c28      	adds	r0, r5, #0
    5484:	3016      	adds	r0, #22
    5486:	1c31      	adds	r1, r6, #0
    5488:	47b8      	blx	r7

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    548a:	2300      	movs	r3, #0
    548c:	74ab      	strb	r3, [r5, #18]
	*ptr++ = (BYTE)val;
    548e:	74eb      	strb	r3, [r5, #19]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
    5490:	2301      	movs	r3, #1
    5492:	9a01      	ldr	r2, [sp, #4]
    5494:	70d3      	strb	r3, [r2, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
    5496:	9801      	ldr	r0, [sp, #4]
    5498:	4b0c      	ldr	r3, [pc, #48]	; (54cc <f_sync+0x154>)
    549a:	4798      	blx	r3
					fp->flag &= (BYTE)~FA_MODIFIED;
    549c:	2328      	movs	r3, #40	; 0x28
    549e:	5ce2      	ldrb	r2, [r4, r3]
    54a0:	2140      	movs	r1, #64	; 0x40
    54a2:	438a      	bics	r2, r1
    54a4:	54e2      	strb	r2, [r4, r3]
			}
		}
	}

	LEAVE_FF(fs, res);
}
    54a6:	b015      	add	sp, #84	; 0x54
    54a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54aa:	46c0      	nop			; (mov r8, r8)
    54ac:	00002c35 	.word	0x00002c35
    54b0:	000029c1 	.word	0x000029c1
    54b4:	00002a21 	.word	0x00002a21
    54b8:	00002ff5 	.word	0x00002ff5
    54bc:	00003931 	.word	0x00003931
    54c0:	00002a95 	.word	0x00002a95
    54c4:	00002aa5 	.word	0x00002aa5
    54c8:	000039ed 	.word	0x000039ed
    54cc:	00002e09 	.word	0x00002e09
    54d0:	00002cd9 	.word	0x00002cd9
    54d4:	00003031 	.word	0x00003031

000054d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
    54d8:	b510      	push	{r4, lr}
    54da:	b082      	sub	sp, #8
    54dc:	1c04      	adds	r4, r0, #0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    54de:	4b07      	ldr	r3, [pc, #28]	; (54fc <f_close+0x24>)
    54e0:	4798      	blx	r3
	if (res == FR_OK)
    54e2:	2800      	cmp	r0, #0
    54e4:	d107      	bne.n	54f6 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
    54e6:	1c20      	adds	r0, r4, #0
    54e8:	a901      	add	r1, sp, #4
    54ea:	4b05      	ldr	r3, [pc, #20]	; (5500 <f_close+0x28>)
    54ec:	4798      	blx	r3
		if (res == FR_OK) {
    54ee:	2800      	cmp	r0, #0
    54f0:	d101      	bne.n	54f6 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
    54f2:	2200      	movs	r2, #0
    54f4:	6022      	str	r2, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    54f6:	b002      	add	sp, #8
    54f8:	bd10      	pop	{r4, pc}
    54fa:	46c0      	nop			; (mov r8, r8)
    54fc:	00005379 	.word	0x00005379
    5500:	00002c35 	.word	0x00002c35

00005504 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    5504:	b530      	push	{r4, r5, lr}
    5506:	b085      	sub	sp, #20
    5508:	1c04      	adds	r4, r0, #0
    550a:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    550c:	2009      	movs	r0, #9
    550e:	2c00      	cmp	r4, #0
    5510:	d054      	beq.n	55bc <f_opendir+0xb8>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
    5512:	a801      	add	r0, sp, #4
    5514:	a903      	add	r1, sp, #12
    5516:	2200      	movs	r2, #0
    5518:	4b29      	ldr	r3, [pc, #164]	; (55c0 <f_opendir+0xbc>)
    551a:	4798      	blx	r3
    551c:	1e03      	subs	r3, r0, #0
	if (res == FR_OK) {
    551e:	d138      	bne.n	5592 <f_opendir+0x8e>
		obj->fs = fs;
    5520:	9a03      	ldr	r2, [sp, #12]
    5522:	6022      	str	r2, [r4, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
    5524:	1c20      	adds	r0, r4, #0
    5526:	9901      	ldr	r1, [sp, #4]
    5528:	4b26      	ldr	r3, [pc, #152]	; (55c4 <f_opendir+0xc0>)
    552a:	4798      	blx	r3
    552c:	1e03      	subs	r3, r0, #0
		if (res == FR_OK) {						/* Follow completed */
    552e:	d142      	bne.n	55b6 <f_opendir+0xb2>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
    5530:	2343      	movs	r3, #67	; 0x43
    5532:	5ce3      	ldrb	r3, [r4, r3]
    5534:	2b7f      	cmp	r3, #127	; 0x7f
    5536:	d830      	bhi.n	559a <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
    5538:	79a3      	ldrb	r3, [r4, #6]
    553a:	06da      	lsls	r2, r3, #27
    553c:	d528      	bpl.n	5590 <f_opendir+0x8c>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
    553e:	9d03      	ldr	r5, [sp, #12]
    5540:	782b      	ldrb	r3, [r5, #0]
    5542:	2b04      	cmp	r3, #4
    5544:	d11b      	bne.n	557e <f_opendir+0x7a>
						obj->c_scl = obj->sclust;	/* Save containing directory inforamation */
    5546:	68a3      	ldr	r3, [r4, #8]
    5548:	61e3      	str	r3, [r4, #28]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
    554a:	23ff      	movs	r3, #255	; 0xff
    554c:	6922      	ldr	r2, [r4, #16]
    554e:	439a      	bics	r2, r3
    5550:	79e3      	ldrb	r3, [r4, #7]
    5552:	4313      	orrs	r3, r2
    5554:	6223      	str	r3, [r4, #32]
						obj->c_ofs = dp->blk_ofs;
    5556:	6c62      	ldr	r2, [r4, #68]	; 0x44
    5558:	6262      	str	r2, [r4, #36]	; 0x24
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object location and status */
    555a:	6928      	ldr	r0, [r5, #16]
    555c:	3034      	adds	r0, #52	; 0x34
    555e:	4b1a      	ldr	r3, [pc, #104]	; (55c8 <f_opendir+0xc4>)
    5560:	4798      	blx	r3
    5562:	60a0      	str	r0, [r4, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
    5564:	6928      	ldr	r0, [r5, #16]
    5566:	3038      	adds	r0, #56	; 0x38
    5568:	4b18      	ldr	r3, [pc, #96]	; (55cc <f_opendir+0xc8>)
    556a:	4798      	blx	r3
    556c:	6120      	str	r0, [r4, #16]
    556e:	6161      	str	r1, [r4, #20]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
    5570:	692a      	ldr	r2, [r5, #16]
    5572:	2321      	movs	r3, #33	; 0x21
    5574:	5cd3      	ldrb	r3, [r2, r3]
    5576:	2202      	movs	r2, #2
    5578:	4013      	ands	r3, r2
    557a:	71e3      	strb	r3, [r4, #7]
    557c:	e00d      	b.n	559a <f_opendir+0x96>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
    557e:	1c28      	adds	r0, r5, #0
    5580:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5582:	4b13      	ldr	r3, [pc, #76]	; (55d0 <f_opendir+0xcc>)
    5584:	4798      	blx	r3
    5586:	60a0      	str	r0, [r4, #8]
    5588:	e007      	b.n	559a <f_opendir+0x96>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
    558a:	2b00      	cmp	r3, #0
    558c:	d016      	beq.n	55bc <f_opendir+0xb8>
    558e:	e000      	b.n	5592 <f_opendir+0x8e>
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
    5590:	2305      	movs	r3, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
    5592:	2200      	movs	r2, #0
    5594:	6022      	str	r2, [r4, #0]
    5596:	1c18      	adds	r0, r3, #0
    5598:	e010      	b.n	55bc <f_opendir+0xb8>
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				obj->id = fs->id;
    559a:	9a03      	ldr	r2, [sp, #12]
    559c:	88d3      	ldrh	r3, [r2, #6]
    559e:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
    55a0:	1c20      	adds	r0, r4, #0
    55a2:	2100      	movs	r1, #0
    55a4:	4b0b      	ldr	r3, [pc, #44]	; (55d4 <f_opendir+0xd0>)
    55a6:	4798      	blx	r3
    55a8:	1e03      	subs	r3, r0, #0
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    55aa:	2b04      	cmp	r3, #4
    55ac:	d1ed      	bne.n	558a <f_opendir+0x86>
    55ae:	2305      	movs	r3, #5
    55b0:	e7ef      	b.n	5592 <f_opendir+0x8e>
    55b2:	2305      	movs	r3, #5
    55b4:	e7ed      	b.n	5592 <f_opendir+0x8e>
    55b6:	2804      	cmp	r0, #4
    55b8:	d1eb      	bne.n	5592 <f_opendir+0x8e>
    55ba:	e7fa      	b.n	55b2 <f_opendir+0xae>
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */

	LEAVE_FF(fs, res);
}
    55bc:	b005      	add	sp, #20
    55be:	bd30      	pop	{r4, r5, pc}
    55c0:	00003b3d 	.word	0x00003b3d
    55c4:	00004901 	.word	0x00004901
    55c8:	00002a2d 	.word	0x00002a2d
    55cc:	00002a45 	.word	0x00002a45
    55d0:	000048e1 	.word	0x000048e1
    55d4:	00003565 	.word	0x00003565

000055d8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
    55d8:	b510      	push	{r4, lr}
    55da:	b082      	sub	sp, #8
    55dc:	1c04      	adds	r4, r0, #0
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
    55de:	a901      	add	r1, sp, #4
    55e0:	4b03      	ldr	r3, [pc, #12]	; (55f0 <f_closedir+0x18>)
    55e2:	4798      	blx	r3
	if (res == FR_OK) {
    55e4:	2800      	cmp	r0, #0
    55e6:	d101      	bne.n	55ec <f_closedir+0x14>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
    55e8:	2300      	movs	r3, #0
    55ea:	6023      	str	r3, [r4, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
    55ec:	b002      	add	sp, #8
    55ee:	bd10      	pop	{r4, pc}
    55f0:	00002c35 	.word	0x00002c35

000055f4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    55f4:	b570      	push	{r4, r5, r6, lr}
    55f6:	b082      	sub	sp, #8
    55f8:	1c05      	adds	r5, r0, #0
    55fa:	1c0e      	adds	r6, r1, #0
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
    55fc:	a901      	add	r1, sp, #4
    55fe:	4b11      	ldr	r3, [pc, #68]	; (5644 <f_readdir+0x50>)
    5600:	4798      	blx	r3
    5602:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    5604:	d11b      	bne.n	563e <f_readdir+0x4a>
		if (!fno) {
    5606:	2e00      	cmp	r6, #0
    5608:	d105      	bne.n	5616 <f_readdir+0x22>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    560a:	1c28      	adds	r0, r5, #0
    560c:	2100      	movs	r1, #0
    560e:	4b0e      	ldr	r3, [pc, #56]	; (5648 <f_readdir+0x54>)
    5610:	4798      	blx	r3
    5612:	1c04      	adds	r4, r0, #0
    5614:	e013      	b.n	563e <f_readdir+0x4a>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
    5616:	1c28      	adds	r0, r5, #0
    5618:	2100      	movs	r1, #0
    561a:	4b0c      	ldr	r3, [pc, #48]	; (564c <f_readdir+0x58>)
    561c:	4798      	blx	r3
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
    561e:	23fb      	movs	r3, #251	; 0xfb
    5620:	4218      	tst	r0, r3
    5622:	d10b      	bne.n	563c <f_readdir+0x48>
				get_fileinfo(dp, fno);		/* Get the object information */
    5624:	1c28      	adds	r0, r5, #0
    5626:	1c31      	adds	r1, r6, #0
    5628:	4b09      	ldr	r3, [pc, #36]	; (5650 <f_readdir+0x5c>)
    562a:	4798      	blx	r3
				res = dir_next(dp, 0);		/* Increment index for next */
    562c:	1c28      	adds	r0, r5, #0
    562e:	2100      	movs	r1, #0
    5630:	4b08      	ldr	r3, [pc, #32]	; (5654 <f_readdir+0x60>)
    5632:	4798      	blx	r3
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
    5634:	2804      	cmp	r0, #4
    5636:	d002      	beq.n	563e <f_readdir+0x4a>
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
    5638:	1c04      	adds	r4, r0, #0
    563a:	e000      	b.n	563e <f_readdir+0x4a>
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
    563c:	1c04      	adds	r4, r0, #0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
    563e:	1c20      	adds	r0, r4, #0
    5640:	b002      	add	sp, #8
    5642:	bd70      	pop	{r4, r5, r6, pc}
    5644:	00002c35 	.word	0x00002c35
    5648:	00003565 	.word	0x00003565
    564c:	00004019 	.word	0x00004019
    5650:	00003049 	.word	0x00003049
    5654:	00003729 	.word	0x00003729

00005658 <ff_convert>:
UINT dir /* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
	WCHAR c;

	if (chr < 0x80)
    5658:	287f      	cmp	r0, #127	; 0x7f
    565a:	d91d      	bls.n	5698 <ff_convert+0x40>
		c = chr;

	}
	else
	{
		if (dir)
    565c:	2900      	cmp	r1, #0
    565e:	d102      	bne.n	5666 <ff_convert+0xe>
			for (c = 0; c < 0x80; c++)
			{
#if __AVR_XMEGA__
				if (chr == pgm_read_word(&Tbl[c]))
#else
				if (chr == Tbl[c])
    5660:	28c7      	cmp	r0, #199	; 0xc7
    5662:	d107      	bne.n	5674 <ff_convert+0x1c>
    5664:	e012      	b.n	568c <ff_convert+0x34>
		if (dir)
		{ /* OEM code to Unicode */
#if __AVR_XMEGA__
			c = (chr >= 0x100) ? 0 : pgm_read_word(&Tbl[chr - 0x80]);
#else
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    5666:	28ff      	cmp	r0, #255	; 0xff
    5668:	d815      	bhi.n	5696 <ff_convert+0x3e>
    566a:	3880      	subs	r0, #128	; 0x80
    566c:	0040      	lsls	r0, r0, #1
    566e:	4b0b      	ldr	r3, [pc, #44]	; (569c <ff_convert+0x44>)
    5670:	5ac0      	ldrh	r0, [r0, r3]
    5672:	e011      	b.n	5698 <ff_convert+0x40>
    5674:	4a09      	ldr	r2, [pc, #36]	; (569c <ff_convert+0x44>)
    5676:	3202      	adds	r2, #2
#endif

		}
		else
		{ /* Unicode to OEM code */
			for (c = 0; c < 0x80; c++)
    5678:	2301      	movs	r3, #1
			{
#if __AVR_XMEGA__
				if (chr == pgm_read_word(&Tbl[c]))
#else
				if (chr == Tbl[c])
    567a:	8811      	ldrh	r1, [r2, #0]
    567c:	4281      	cmp	r1, r0
    567e:	d006      	beq.n	568e <ff_convert+0x36>
#endif

		}
		else
		{ /* Unicode to OEM code */
			for (c = 0; c < 0x80; c++)
    5680:	3301      	adds	r3, #1
    5682:	b29b      	uxth	r3, r3
    5684:	3202      	adds	r2, #2
    5686:	2b80      	cmp	r3, #128	; 0x80
    5688:	d1f7      	bne.n	567a <ff_convert+0x22>
    568a:	e000      	b.n	568e <ff_convert+0x36>
			{
#if __AVR_XMEGA__
				if (chr == pgm_read_word(&Tbl[c]))
#else
				if (chr == Tbl[c])
    568c:	2300      	movs	r3, #0
#endif
					break;
			}
			c = (c + 0x80) & 0xFF;
    568e:	3380      	adds	r3, #128	; 0x80
    5690:	20ff      	movs	r0, #255	; 0xff
    5692:	4018      	ands	r0, r3
    5694:	e000      	b.n	5698 <ff_convert+0x40>
		if (dir)
		{ /* OEM code to Unicode */
#if __AVR_XMEGA__
			c = (chr >= 0x100) ? 0 : pgm_read_word(&Tbl[chr - 0x80]);
#else
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    5696:	2000      	movs	r0, #0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    5698:	4770      	bx	lr
    569a:	46c0      	nop			; (mov r8, r8)
    569c:	00006dbc 	.word	0x00006dbc

000056a0 <ff_wtoupper>:

WCHAR ff_wtoupper( /* Returns upper converted character */
WCHAR chr /* Unicode character to be upper converted (BMP only) */
)
{
    56a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56a2:	4647      	mov	r7, r8
    56a4:	b480      	push	{r7}

			0x0000 };
	const WCHAR *p;
	WCHAR bc, nc, cmd;

	p = chr < 0x1000 ? cvt1 : cvt2;
    56a6:	4b21      	ldr	r3, [pc, #132]	; (572c <ff_wtoupper+0x8c>)
    56a8:	4298      	cmp	r0, r3
    56aa:	d801      	bhi.n	56b0 <ff_wtoupper+0x10>
    56ac:	4a20      	ldr	r2, [pc, #128]	; (5730 <ff_wtoupper+0x90>)
    56ae:	e000      	b.n	56b2 <ff_wtoupper+0x12>
    56b0:	4a20      	ldr	r2, [pc, #128]	; (5734 <ff_wtoupper+0x94>)
		nc = pgm_read_word(p++);
#else
		nc = *p++; /* Get block base */
#endif
		cmd = nc >> 8;
		nc &= 0xFF; /* Get processing command and block size */
    56b2:	27ff      	movs	r7, #255	; 0xff
	for (;;)
	{
#if __AVR_XMEGA__
		bc = pgm_read_word(p++); /* Get block base */
#else
		bc = *p++; /* Get block base */
    56b4:	8813      	ldrh	r3, [r2, #0]
#endif
		if (!bc || chr < bc)
    56b6:	2b00      	cmp	r3, #0
    56b8:	d035      	beq.n	5726 <ff_wtoupper+0x86>
    56ba:	4298      	cmp	r0, r3
    56bc:	d333      	bcc.n	5726 <ff_wtoupper+0x86>
    56be:	3204      	adds	r2, #4
    56c0:	1e91      	subs	r1, r2, #2
			break;
#if __AVR_XMEGA__
		nc = pgm_read_word(p++);
#else
		nc = *p++; /* Get block base */
    56c2:	8809      	ldrh	r1, [r1, #0]
#endif
		cmd = nc >> 8;
    56c4:	120c      	asrs	r4, r1, #8
    56c6:	b2a6      	uxth	r6, r4
		nc &= 0xFF; /* Get processing command and block size */
    56c8:	4039      	ands	r1, r7
		if (chr < bc + nc)
    56ca:	185d      	adds	r5, r3, r1
    56cc:	42a8      	cmp	r0, r5
    56ce:	da25      	bge.n	571c <ff_wtoupper+0x7c>
		{ /* In the block? */
			switch (cmd)
    56d0:	2c08      	cmp	r4, #8
    56d2:	d828      	bhi.n	5726 <ff_wtoupper+0x86>
    56d4:	00a4      	lsls	r4, r4, #2
    56d6:	4918      	ldr	r1, [pc, #96]	; (5738 <ff_wtoupper+0x98>)
    56d8:	5909      	ldr	r1, [r1, r4]
    56da:	468f      	mov	pc, r1
			{
			case 0:
#if __AVR_XMEGA__
				chr = pgm_read_word(&p[chr - bc]);
#else
				chr = p[chr - bc];
    56dc:	1ac3      	subs	r3, r0, r3
    56de:	005b      	lsls	r3, r3, #1
    56e0:	5a98      	ldrh	r0, [r3, r2]
#endif
				break; /* Table conversion */
    56e2:	e020      	b.n	5726 <ff_wtoupper+0x86>
			case 1:
				chr -= (chr - bc) & 1;
    56e4:	1ac3      	subs	r3, r0, r3
    56e6:	2201      	movs	r2, #1
    56e8:	4013      	ands	r3, r2
    56ea:	1ac0      	subs	r0, r0, r3
    56ec:	b280      	uxth	r0, r0
				break; /* Case pairs */
    56ee:	e01a      	b.n	5726 <ff_wtoupper+0x86>
			case 2:
				chr -= 16;
    56f0:	3810      	subs	r0, #16
    56f2:	b280      	uxth	r0, r0
				break; /* Shift -16 */
    56f4:	e017      	b.n	5726 <ff_wtoupper+0x86>
			case 3:
				chr -= 32;
    56f6:	3820      	subs	r0, #32
    56f8:	b280      	uxth	r0, r0
				break; /* Shift -32 */
    56fa:	e014      	b.n	5726 <ff_wtoupper+0x86>
			case 4:
				chr -= 48;
    56fc:	3830      	subs	r0, #48	; 0x30
    56fe:	b280      	uxth	r0, r0
				break; /* Shift -48 */
    5700:	e011      	b.n	5726 <ff_wtoupper+0x86>
			case 5:
				chr -= 26;
    5702:	381a      	subs	r0, #26
    5704:	b280      	uxth	r0, r0
				break; /* Shift -26 */
    5706:	e00e      	b.n	5726 <ff_wtoupper+0x86>
			case 6:
				chr += 8;
    5708:	3008      	adds	r0, #8
    570a:	b280      	uxth	r0, r0
				break; /* Shift +8 */
    570c:	e00b      	b.n	5726 <ff_wtoupper+0x86>
			case 7:
				chr -= 80;
    570e:	3850      	subs	r0, #80	; 0x50
    5710:	b280      	uxth	r0, r0
				break; /* Shift -80 */
    5712:	e008      	b.n	5726 <ff_wtoupper+0x86>
			case 8:
				chr -= 0x1C60;
    5714:	4b09      	ldr	r3, [pc, #36]	; (573c <ff_wtoupper+0x9c>)
    5716:	18c0      	adds	r0, r0, r3
    5718:	b280      	uxth	r0, r0
				break; /* Shift -0x1C60 */
    571a:	e004      	b.n	5726 <ff_wtoupper+0x86>
			}
			break;
		}
		if (!cmd)
    571c:	2e00      	cmp	r6, #0
    571e:	d1c9      	bne.n	56b4 <ff_wtoupper+0x14>
			p += nc;
    5720:	0049      	lsls	r1, r1, #1
    5722:	1852      	adds	r2, r2, r1
    5724:	e7c6      	b.n	56b4 <ff_wtoupper+0x14>
	}

	return chr;
}
    5726:	bc04      	pop	{r2}
    5728:	4690      	mov	r8, r2
    572a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    572c:	00000fff 	.word	0x00000fff
    5730:	00006ebc 	.word	0x00006ebc
    5734:	000070b0 	.word	0x000070b0
    5738:	00006d98 	.word	0x00006d98
    573c:	ffffe3a0 	.word	0xffffe3a0

00005740 <_Znwj>:
#include <stdio.h>
#include "operators.h"
#include <stdlib.h>

void* operator new(size_t sz) throw()
{
    5740:	b508      	push	{r3, lr}
//    cerr << "allocating " << sz << " bytes\n";
    void* mem = malloc(sz);
    5742:	4b01      	ldr	r3, [pc, #4]	; (5748 <_Znwj+0x8>)
    5744:	4798      	blx	r3
    if (mem)
        return mem;
    else
        return NULL;
}
    5746:	bd08      	pop	{r3, pc}
    5748:	000065c9 	.word	0x000065c9

0000574c <_ZdlPv>:


void operator delete(void* ptr) throw()
{
    574c:	b508      	push	{r3, lr}
//    cerr << "deallocating at " << ptr << endl;
    free(ptr);
    574e:	4b01      	ldr	r3, [pc, #4]	; (5754 <_ZdlPv+0x8>)
    5750:	4798      	blx	r3
}
    5752:	bd08      	pop	{r3, pc}
    5754:	000065dd 	.word	0x000065dd

00005758 <_ZN2GI6StringC1Ev>:
 */

#include "string.h"


GI::String::String()
    5758:	b510      	push	{r4, lr}
    575a:	1c04      	adds	r4, r0, #0
{
	memset(this, 0, sizeof(*this));
    575c:	2100      	movs	r1, #0
    575e:	2210      	movs	r2, #16
    5760:	4b06      	ldr	r3, [pc, #24]	; (577c <_ZN2GI6StringC1Ev+0x24>)
    5762:	4798      	blx	r3
	buff = (char *) calloc(1, 1);
    5764:	2001      	movs	r0, #1
    5766:	2101      	movs	r1, #1
    5768:	4b05      	ldr	r3, [pc, #20]	; (5780 <_ZN2GI6StringC1Ev+0x28>)
    576a:	4798      	blx	r3
    576c:	6020      	str	r0, [r4, #0]
	if (buff)
    576e:	2800      	cmp	r0, #0
    5770:	d001      	beq.n	5776 <_ZN2GI6StringC1Ev+0x1e>
	{
		error = SYS_ERR_OK;
    5772:	2300      	movs	r3, #0
    5774:	60e3      	str	r3, [r4, #12]

	}
}
    5776:	1c20      	adds	r0, r4, #0
    5778:	bd10      	pop	{r4, pc}
    577a:	46c0      	nop			; (mov r8, r8)
    577c:	00006635 	.word	0x00006635
    5780:	00006545 	.word	0x00006545

00005784 <_ZN2GI6StringC1EPc>:

GI::String::String(char *String)
    5784:	b570      	push	{r4, r5, r6, lr}
    5786:	1c04      	adds	r4, r0, #0
    5788:	1c0e      	adds	r6, r1, #0
{
	memset(this, 0, sizeof(*this));
    578a:	2100      	movs	r1, #0
    578c:	2210      	movs	r2, #16
    578e:	4b0b      	ldr	r3, [pc, #44]	; (57bc <_ZN2GI6StringC1EPc+0x38>)
    5790:	4798      	blx	r3
	unsigned int len = strlen(String);
    5792:	1c30      	adds	r0, r6, #0
    5794:	4b0a      	ldr	r3, [pc, #40]	; (57c0 <_ZN2GI6StringC1EPc+0x3c>)
    5796:	4798      	blx	r3
    5798:	1c05      	adds	r5, r0, #0
	buff = (char *) malloc(len + 1);
    579a:	3001      	adds	r0, #1
    579c:	4b09      	ldr	r3, [pc, #36]	; (57c4 <_ZN2GI6StringC1EPc+0x40>)
    579e:	4798      	blx	r3
    57a0:	6020      	str	r0, [r4, #0]
	if (buff)
    57a2:	2800      	cmp	r0, #0
    57a4:	d008      	beq.n	57b8 <_ZN2GI6StringC1EPc+0x34>
	{
		strcpy((char *) buff, (const char *) String);
    57a6:	1c31      	adds	r1, r6, #0
    57a8:	4b07      	ldr	r3, [pc, #28]	; (57c8 <_ZN2GI6StringC1EPc+0x44>)
    57aa:	4798      	blx	r3
		length = len;
    57ac:	6065      	str	r5, [r4, #4]
		error = SYS_ERR_OK;
    57ae:	2300      	movs	r3, #0
    57b0:	60e3      	str	r3, [r4, #12]
		modifyed++;
    57b2:	68a3      	ldr	r3, [r4, #8]
    57b4:	3301      	adds	r3, #1
    57b6:	60a3      	str	r3, [r4, #8]
	}
}
    57b8:	1c20      	adds	r0, r4, #0
    57ba:	bd70      	pop	{r4, r5, r6, pc}
    57bc:	00006635 	.word	0x00006635
    57c0:	00006813 	.word	0x00006813
    57c4:	000065c9 	.word	0x000065c9
    57c8:	00006803 	.word	0x00006803

000057cc <_ZN2GI6StringC1EPS0_>:

GI::String::String(GI::String *String)
    57cc:	b570      	push	{r4, r5, r6, lr}
    57ce:	1c04      	adds	r4, r0, #0
    57d0:	1c0e      	adds	r6, r1, #0
{
	memset(this, 0, sizeof(*this));
    57d2:	2100      	movs	r1, #0
    57d4:	2210      	movs	r2, #16
    57d6:	4b0a      	ldr	r3, [pc, #40]	; (5800 <_ZN2GI6StringC1EPS0_+0x34>)
    57d8:	4798      	blx	r3
	unsigned int len = String->length;
    57da:	6875      	ldr	r5, [r6, #4]
	buff = (char *) malloc(len + 1);
    57dc:	1c68      	adds	r0, r5, #1
    57de:	4b09      	ldr	r3, [pc, #36]	; (5804 <_ZN2GI6StringC1EPS0_+0x38>)
    57e0:	4798      	blx	r3
    57e2:	6020      	str	r0, [r4, #0]
	if (buff)
    57e4:	2800      	cmp	r0, #0
    57e6:	d008      	beq.n	57fa <_ZN2GI6StringC1EPS0_+0x2e>
	{
		strcpy((char *) buff, (const char *) String->buff);
    57e8:	6831      	ldr	r1, [r6, #0]
    57ea:	4b07      	ldr	r3, [pc, #28]	; (5808 <_ZN2GI6StringC1EPS0_+0x3c>)
    57ec:	4798      	blx	r3
		length = len;
    57ee:	6065      	str	r5, [r4, #4]
		error = SYS_ERR_OK;
    57f0:	2300      	movs	r3, #0
    57f2:	60e3      	str	r3, [r4, #12]
		modifyed++;
    57f4:	68a3      	ldr	r3, [r4, #8]
    57f6:	3301      	adds	r3, #1
    57f8:	60a3      	str	r3, [r4, #8]
	}
}
    57fa:	1c20      	adds	r0, r4, #0
    57fc:	bd70      	pop	{r4, r5, r6, pc}
    57fe:	46c0      	nop			; (mov r8, r8)
    5800:	00006635 	.word	0x00006635
    5804:	000065c9 	.word	0x000065c9
    5808:	00006803 	.word	0x00006803

0000580c <_ZN2GI6StringD1Ev>:

GI::String::~String()
    580c:	b510      	push	{r4, lr}
    580e:	1c04      	adds	r4, r0, #0
{
	if (buff)
    5810:	6800      	ldr	r0, [r0, #0]
    5812:	2800      	cmp	r0, #0
    5814:	d001      	beq.n	581a <_ZN2GI6StringD1Ev+0xe>
		free((void *) buff);
    5816:	4b04      	ldr	r3, [pc, #16]	; (5828 <_ZN2GI6StringD1Ev+0x1c>)
    5818:	4798      	blx	r3
	memset(this, 0, sizeof(*this));
    581a:	1c20      	adds	r0, r4, #0
    581c:	2100      	movs	r1, #0
    581e:	2210      	movs	r2, #16
    5820:	4b02      	ldr	r3, [pc, #8]	; (582c <_ZN2GI6StringD1Ev+0x20>)
    5822:	4798      	blx	r3
}
    5824:	1c20      	adds	r0, r4, #0
    5826:	bd10      	pop	{r4, pc}
    5828:	000065dd 	.word	0x000065dd
    582c:	00006635 	.word	0x00006635

00005830 <_ZN2GI6String3setEPc>:
	error = SYS_ERR_OK;
	modifyed++;
}

void GI::String::set(char* string)
{
    5830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5832:	1c04      	adds	r4, r0, #0
    5834:	1e0e      	subs	r6, r1, #0
	if (!string)
    5836:	d016      	beq.n	5866 <_ZN2GI6String3setEPc+0x36>
		return;
	unsigned int LenSrc = strlen(string);
    5838:	1c08      	adds	r0, r1, #0
    583a:	4b0b      	ldr	r3, [pc, #44]	; (5868 <_ZN2GI6String3setEPc+0x38>)
    583c:	4798      	blx	r3
    583e:	1c07      	adds	r7, r0, #0
	char *Return;
	Return = (char *) realloc(buff, LenSrc + 1);
    5840:	1c41      	adds	r1, r0, #1
    5842:	6820      	ldr	r0, [r4, #0]
    5844:	4b09      	ldr	r3, [pc, #36]	; (586c <_ZN2GI6String3setEPc+0x3c>)
    5846:	4798      	blx	r3
    5848:	1c05      	adds	r5, r0, #0
	*Return = 0;
    584a:	2300      	movs	r3, #0
    584c:	7003      	strb	r3, [r0, #0]
	if (!Return)
    584e:	2800      	cmp	r0, #0
    5850:	d009      	beq.n	5866 <_ZN2GI6String3setEPc+0x36>
		return;
	strcat(Return, string);
    5852:	1c31      	adds	r1, r6, #0
    5854:	4b06      	ldr	r3, [pc, #24]	; (5870 <_ZN2GI6String3setEPc+0x40>)
    5856:	4798      	blx	r3
	buff = Return;
    5858:	6025      	str	r5, [r4, #0]
	length = LenSrc;
    585a:	6067      	str	r7, [r4, #4]
	modifyed++;
    585c:	68a3      	ldr	r3, [r4, #8]
    585e:	3301      	adds	r3, #1
    5860:	60a3      	str	r3, [r4, #8]
	error = SYS_ERR_OK;
    5862:	2300      	movs	r3, #0
    5864:	60e3      	str	r3, [r4, #12]
}
    5866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5868:	00006813 	.word	0x00006813
    586c:	00006799 	.word	0x00006799
    5870:	000067d5 	.word	0x000067d5

00005874 <_ZN2GI6String3setEPS0_>:

void GI::String::set(GI::String *string)
{
    5874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5876:	1c04      	adds	r4, r0, #0
    5878:	1e0e      	subs	r6, r1, #0
	if (!string)
    587a:	d013      	beq.n	58a4 <_ZN2GI6String3setEPS0_+0x30>
		return;
	unsigned int LenSrc = string->length;
    587c:	684f      	ldr	r7, [r1, #4]
	char *Return;
	Return = (char *) realloc(buff, LenSrc + 1);
    587e:	1c79      	adds	r1, r7, #1
    5880:	6800      	ldr	r0, [r0, #0]
    5882:	4b09      	ldr	r3, [pc, #36]	; (58a8 <_ZN2GI6String3setEPS0_+0x34>)
    5884:	4798      	blx	r3
    5886:	1c05      	adds	r5, r0, #0
	*Return = 0;
    5888:	2300      	movs	r3, #0
    588a:	7003      	strb	r3, [r0, #0]
	if (!Return)
    588c:	2800      	cmp	r0, #0
    588e:	d009      	beq.n	58a4 <_ZN2GI6String3setEPS0_+0x30>
		return;
	strcat(Return, string->buff);
    5890:	6831      	ldr	r1, [r6, #0]
    5892:	4b06      	ldr	r3, [pc, #24]	; (58ac <_ZN2GI6String3setEPS0_+0x38>)
    5894:	4798      	blx	r3
	buff = Return;
    5896:	6025      	str	r5, [r4, #0]
	length = LenSrc;
    5898:	6067      	str	r7, [r4, #4]
	modifyed++;
    589a:	68a3      	ldr	r3, [r4, #8]
    589c:	3301      	adds	r3, #1
    589e:	60a3      	str	r3, [r4, #8]
	error = SYS_ERR_OK;
    58a0:	2300      	movs	r3, #0
    58a2:	60e3      	str	r3, [r4, #12]
}
    58a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58a6:	46c0      	nop			; (mov r8, r8)
    58a8:	00006799 	.word	0x00006799
    58ac:	000067d5 	.word	0x000067d5

000058b0 <_ZN2GI6String6appendEPS0_>:

void GI::String::append(GI::String *string)
{
    58b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58b2:	1c04      	adds	r4, r0, #0
    58b4:	1c0d      	adds	r5, r1, #0
	if(!buff || !string)
    58b6:	6800      	ldr	r0, [r0, #0]
    58b8:	2800      	cmp	r0, #0
    58ba:	d013      	beq.n	58e4 <_ZN2GI6String6appendEPS0_+0x34>
    58bc:	2900      	cmp	r1, #0
    58be:	d011      	beq.n	58e4 <_ZN2GI6String6appendEPS0_+0x34>
		return;
	unsigned int LenSrc = string->length;
	unsigned int LenDest = length;
	char *Return = (char *)realloc(buff, LenDest + LenSrc + 1);
    58c0:	6862      	ldr	r2, [r4, #4]
    58c2:	684b      	ldr	r3, [r1, #4]
    58c4:	18d7      	adds	r7, r2, r3
    58c6:	1c79      	adds	r1, r7, #1
    58c8:	4b07      	ldr	r3, [pc, #28]	; (58e8 <_ZN2GI6String6appendEPS0_+0x38>)
    58ca:	4798      	blx	r3
    58cc:	1e06      	subs	r6, r0, #0
	//char *Return = (char *)realloc(dest, LenDest + LenSrc + 1);
	if(!Return)
    58ce:	d009      	beq.n	58e4 <_ZN2GI6String6appendEPS0_+0x34>
		return;
	strcat(Return, string->buff);
    58d0:	6829      	ldr	r1, [r5, #0]
    58d2:	4b06      	ldr	r3, [pc, #24]	; (58ec <_ZN2GI6String6appendEPS0_+0x3c>)
    58d4:	4798      	blx	r3
	buff = Return;
    58d6:	6026      	str	r6, [r4, #0]
	length = LenDest + LenSrc;
    58d8:	6067      	str	r7, [r4, #4]
	modifyed++;
    58da:	68a3      	ldr	r3, [r4, #8]
    58dc:	3301      	adds	r3, #1
    58de:	60a3      	str	r3, [r4, #8]
	error = SYS_ERR_OK;
    58e0:	2300      	movs	r3, #0
    58e2:	60e3      	str	r3, [r4, #12]
}
    58e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58e6:	46c0      	nop			; (mov r8, r8)
    58e8:	00006799 	.word	0x00006799
    58ec:	000067d5 	.word	0x000067d5

000058f0 <_ZN2GI6String6appendEc>:
	modifyed++;
	error = SYS_ERR_OK;
}

void GI::String::append(char Char)
{
    58f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    58f2:	b083      	sub	sp, #12
    58f4:	1c04      	adds	r4, r0, #0
    58f6:	1e0d      	subs	r5, r1, #0
	signed int LenSrc = (Char == 0x08 || Char == 0x7F) ? -1 : 1;
    58f8:	2d08      	cmp	r5, #8
    58fa:	d01a      	beq.n	5932 <_ZN2GI6String6appendEc+0x42>
    58fc:	297f      	cmp	r1, #127	; 0x7f
    58fe:	d10f      	bne.n	5920 <_ZN2GI6String6appendEc+0x30>
    5900:	e017      	b.n	5932 <_ZN2GI6String6appendEc+0x42>
	if (!Return)
		return;
	char buff_char[2];
	if(LenSrc != -1)
	{
		buff_char[0] = Char;
    5902:	a901      	add	r1, sp, #4
    5904:	700d      	strb	r5, [r1, #0]
		buff_char[1] = '\0';
    5906:	2300      	movs	r3, #0
    5908:	704b      	strb	r3, [r1, #1]
		strcat(Return, buff_char);
    590a:	1c30      	adds	r0, r6, #0
    590c:	4b0e      	ldr	r3, [pc, #56]	; (5948 <_ZN2GI6String6appendEc+0x58>)
    590e:	4798      	blx	r3
	}
	Return[LenDest + LenSrc] = '\0';
    5910:	2300      	movs	r3, #0
    5912:	55f3      	strb	r3, [r6, r7]
	buff = Return;
    5914:	6026      	str	r6, [r4, #0]
	length = LenDest + LenSrc;
    5916:	6067      	str	r7, [r4, #4]
	modifyed = true;
    5918:	2201      	movs	r2, #1
    591a:	60a2      	str	r2, [r4, #8]
	error = SYS_ERR_OK;
    591c:	60e3      	str	r3, [r4, #12]
    591e:	e011      	b.n	5944 <_ZN2GI6String6appendEc+0x54>
}

void GI::String::append(char Char)
{
	signed int LenSrc = (Char == 0x08 || Char == 0x7F) ? -1 : 1;
	if(!length && LenSrc == -1)
    5920:	6841      	ldr	r1, [r0, #4]
		return;
	unsigned int LenDest = length;
	char *Return = (char *) realloc(buff, LenDest + LenSrc + 1);
    5922:	1c4f      	adds	r7, r1, #1
    5924:	3102      	adds	r1, #2
    5926:	6800      	ldr	r0, [r0, #0]
    5928:	4b08      	ldr	r3, [pc, #32]	; (594c <_ZN2GI6String6appendEc+0x5c>)
    592a:	4798      	blx	r3
    592c:	1e06      	subs	r6, r0, #0
	//char *Return = (char *)realloc(dest, LenDest + LenSrc + 1);
	if (!Return)
    592e:	d1e8      	bne.n	5902 <_ZN2GI6String6appendEc+0x12>
    5930:	e008      	b.n	5944 <_ZN2GI6String6appendEc+0x54>
}

void GI::String::append(char Char)
{
	signed int LenSrc = (Char == 0x08 || Char == 0x7F) ? -1 : 1;
	if(!length && LenSrc == -1)
    5932:	6861      	ldr	r1, [r4, #4]
    5934:	2900      	cmp	r1, #0
    5936:	d005      	beq.n	5944 <_ZN2GI6String6appendEc+0x54>
		return;
	unsigned int LenDest = length;
	char *Return = (char *) realloc(buff, LenDest + LenSrc + 1);
    5938:	1e4f      	subs	r7, r1, #1
    593a:	6820      	ldr	r0, [r4, #0]
    593c:	4b03      	ldr	r3, [pc, #12]	; (594c <_ZN2GI6String6appendEc+0x5c>)
    593e:	4798      	blx	r3
    5940:	1e06      	subs	r6, r0, #0
	//char *Return = (char *)realloc(dest, LenDest + LenSrc + 1);
	if (!Return)
    5942:	d1e5      	bne.n	5910 <_ZN2GI6String6appendEc+0x20>
	Return[LenDest + LenSrc] = '\0';
	buff = Return;
	length = LenDest + LenSrc;
	modifyed = true;
	error = SYS_ERR_OK;
}
    5944:	b003      	add	sp, #12
    5946:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5948:	000067d5 	.word	0x000067d5
    594c:	00006799 	.word	0x00006799

00005950 <_ZN2GI6String5clearEv>:
    modifyed = string->modifyed;
    length = string->length;
}

void GI::String::clear()
{
    5950:	b510      	push	{r4, lr}
    5952:	1c04      	adds	r4, r0, #0
	char *Return = (char *) realloc(buff, 1);
    5954:	6800      	ldr	r0, [r0, #0]
    5956:	2101      	movs	r1, #1
    5958:	4b05      	ldr	r3, [pc, #20]	; (5970 <_ZN2GI6String5clearEv+0x20>)
    595a:	4798      	blx	r3
	*Return = 0;
    595c:	2300      	movs	r3, #0
    595e:	7003      	strb	r3, [r0, #0]
	length = 0;
    5960:	6063      	str	r3, [r4, #4]
	buff = Return;
    5962:	6020      	str	r0, [r4, #0]
	error = SYS_ERR_OK;
    5964:	60e3      	str	r3, [r4, #12]
	modifyed++;
    5966:	68a3      	ldr	r3, [r4, #8]
    5968:	3301      	adds	r3, #1
    596a:	60a3      	str	r3, [r4, #8]
}
    596c:	bd10      	pop	{r4, pc}
    596e:	46c0      	nop			; (mov r8, r8)
    5970:	00006799 	.word	0x00006799

00005974 <_ZN2GI6String9subStringEjj>:
char *GI::String::subString(unsigned int position, unsigned int len)
{
    5974:	b5f0      	push	{r4, r5, r6, r7, lr}
    5976:	4647      	mov	r7, r8
    5978:	b480      	push	{r7}
    597a:	1c06      	adds	r6, r0, #0
    597c:	1c0f      	adds	r7, r1, #0
    597e:	1c15      	adds	r5, r2, #0
	if (!buff)
    5980:	6800      	ldr	r0, [r0, #0]
    5982:	2800      	cmp	r0, #0
    5984:	d016      	beq.n	59b4 <_ZN2GI6String9subStringEjj+0x40>
		return NULL;
	if (position + len >= (unsigned int) length)
    5986:	188b      	adds	r3, r1, r2
    5988:	6872      	ldr	r2, [r6, #4]
    598a:	4293      	cmp	r3, r2
    598c:	d210      	bcs.n	59b0 <_ZN2GI6String9subStringEjj+0x3c>
		return NULL;
	char *Return = (char *) malloc(len + 1);
    598e:	1c68      	adds	r0, r5, #1
    5990:	4b0a      	ldr	r3, [pc, #40]	; (59bc <_ZN2GI6String9subStringEjj+0x48>)
    5992:	4798      	blx	r3
    5994:	1e04      	subs	r4, r0, #0
	if (!Return)
    5996:	d00d      	beq.n	59b4 <_ZN2GI6String9subStringEjj+0x40>
		return NULL;
	*Return = 0;
    5998:	2300      	movs	r3, #0
    599a:	4698      	mov	r8, r3
    599c:	7023      	strb	r3, [r4, #0]
	strncpy(Return, buff + position, len);
    599e:	6831      	ldr	r1, [r6, #0]
    59a0:	19c9      	adds	r1, r1, r7
    59a2:	1c2a      	adds	r2, r5, #0
    59a4:	4b06      	ldr	r3, [pc, #24]	; (59c0 <_ZN2GI6String9subStringEjj+0x4c>)
    59a6:	4798      	blx	r3
	Return[len] = '\0';
    59a8:	4643      	mov	r3, r8
    59aa:	5563      	strb	r3, [r4, r5]
	return Return;
    59ac:	1c20      	adds	r0, r4, #0
    59ae:	e001      	b.n	59b4 <_ZN2GI6String9subStringEjj+0x40>
char *GI::String::subString(unsigned int position, unsigned int len)
{
	if (!buff)
		return NULL;
	if (position + len >= (unsigned int) length)
		return NULL;
    59b0:	2000      	movs	r0, #0
    59b2:	e7ff      	b.n	59b4 <_ZN2GI6String9subStringEjj+0x40>
		return NULL;
	*Return = 0;
	strncpy(Return, buff + position, len);
	Return[len] = '\0';
	return Return;
}
    59b4:	bc04      	pop	{r2}
    59b6:	4690      	mov	r8, r2
    59b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59ba:	46c0      	nop			; (mov r8, r8)
    59bc:	000065c9 	.word	0x000065c9
    59c0:	0000684d 	.word	0x0000684d

000059c4 <_ZN2GI6String9subStringEj>:

char *GI::String::subString(unsigned int position)
{
    59c4:	b570      	push	{r4, r5, r6, lr}
    59c6:	1c05      	adds	r5, r0, #0
    59c8:	1c0e      	adds	r6, r1, #0
	if (!buff)
    59ca:	6800      	ldr	r0, [r0, #0]
    59cc:	2800      	cmp	r0, #0
    59ce:	d012      	beq.n	59f6 <_ZN2GI6String9subStringEj+0x32>
		return NULL;
	if (position >= (unsigned int) length)
    59d0:	6868      	ldr	r0, [r5, #4]
    59d2:	4288      	cmp	r0, r1
    59d4:	d90d      	bls.n	59f2 <_ZN2GI6String9subStringEj+0x2e>
		return NULL;
	char *Return = (char *) malloc((length - position) + 1);
    59d6:	3001      	adds	r0, #1
    59d8:	1a40      	subs	r0, r0, r1
    59da:	4b07      	ldr	r3, [pc, #28]	; (59f8 <_ZN2GI6String9subStringEj+0x34>)
    59dc:	4798      	blx	r3
    59de:	1e04      	subs	r4, r0, #0
	if (!Return)
    59e0:	d009      	beq.n	59f6 <_ZN2GI6String9subStringEj+0x32>
		return NULL;
	*Return = 0;
    59e2:	2300      	movs	r3, #0
    59e4:	7003      	strb	r3, [r0, #0]
	strcpy(Return, buff + position);
    59e6:	6829      	ldr	r1, [r5, #0]
    59e8:	1989      	adds	r1, r1, r6
    59ea:	4b04      	ldr	r3, [pc, #16]	; (59fc <_ZN2GI6String9subStringEj+0x38>)
    59ec:	4798      	blx	r3
	return Return;
    59ee:	1c20      	adds	r0, r4, #0
    59f0:	e001      	b.n	59f6 <_ZN2GI6String9subStringEj+0x32>
char *GI::String::subString(unsigned int position)
{
	if (!buff)
		return NULL;
	if (position >= (unsigned int) length)
		return NULL;
    59f2:	2000      	movs	r0, #0
    59f4:	e7ff      	b.n	59f6 <_ZN2GI6String9subStringEj+0x32>
	if (!Return)
		return NULL;
	*Return = 0;
	strcpy(Return, buff + position);
	return Return;
}
    59f6:	bd70      	pop	{r4, r5, r6, pc}
    59f8:	000065c9 	.word	0x000065c9
    59fc:	00006803 	.word	0x00006803

00005a00 <_ZN2GI11StringArrayC1Ev>:

GI::StringArray::StringArray()
    5a00:	b510      	push	{r4, lr}
    5a02:	1c04      	adds	r4, r0, #0
{
	memset(this, 0, sizeof(*this));
    5a04:	2300      	movs	r3, #0
    5a06:	7003      	strb	r3, [r0, #0]
    5a08:	7043      	strb	r3, [r0, #1]
    5a0a:	7083      	strb	r3, [r0, #2]
    5a0c:	70c3      	strb	r3, [r0, #3]
    5a0e:	7103      	strb	r3, [r0, #4]
    5a10:	7143      	strb	r3, [r0, #5]
    5a12:	7183      	strb	r3, [r0, #6]
    5a14:	71c3      	strb	r3, [r0, #7]
	array = (GI::String **)calloc(1, sizeof(GI::String *));
    5a16:	2001      	movs	r0, #1
    5a18:	2104      	movs	r1, #4
    5a1a:	4b02      	ldr	r3, [pc, #8]	; (5a24 <_ZN2GI11StringArrayC1Ev+0x24>)
    5a1c:	4798      	blx	r3
    5a1e:	6020      	str	r0, [r4, #0]
}
    5a20:	1c20      	adds	r0, r4, #0
    5a22:	bd10      	pop	{r4, pc}
    5a24:	00006545 	.word	0x00006545

00005a28 <_ZN2GI11StringArrayD1Ev>:

GI::StringArray::~StringArray()
    5a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a2a:	1c04      	adds	r4, r0, #0
{
	if(!array)
    5a2c:	6802      	ldr	r2, [r0, #0]
    5a2e:	2a00      	cmp	r2, #0
    5a30:	d019      	beq.n	5a66 <_ZN2GI11StringArrayD1Ev+0x3e>
		return;
	while(itemsCount)
    5a32:	6843      	ldr	r3, [r0, #4]
    5a34:	2b00      	cmp	r3, #0
    5a36:	d011      	beq.n	5a5c <_ZN2GI11StringArrayD1Ev+0x34>
	{
		delete array[itemsCount - 1];
    5a38:	4f0c      	ldr	r7, [pc, #48]	; (5a6c <_ZN2GI11StringArrayD1Ev+0x44>)
    5a3a:	4e0d      	ldr	r6, [pc, #52]	; (5a70 <_ZN2GI11StringArrayD1Ev+0x48>)
    5a3c:	4a0d      	ldr	r2, [pc, #52]	; (5a74 <_ZN2GI11StringArrayD1Ev+0x4c>)
    5a3e:	189b      	adds	r3, r3, r2
    5a40:	009b      	lsls	r3, r3, #2
    5a42:	6822      	ldr	r2, [r4, #0]
    5a44:	589d      	ldr	r5, [r3, r2]
    5a46:	2d00      	cmp	r5, #0
    5a48:	d003      	beq.n	5a52 <_ZN2GI11StringArrayD1Ev+0x2a>
    5a4a:	1c28      	adds	r0, r5, #0
    5a4c:	47b8      	blx	r7
    5a4e:	1c28      	adds	r0, r5, #0
    5a50:	47b0      	blx	r6
		itemsCount--;
    5a52:	6863      	ldr	r3, [r4, #4]
    5a54:	3b01      	subs	r3, #1
    5a56:	6063      	str	r3, [r4, #4]

GI::StringArray::~StringArray()
{
	if(!array)
		return;
	while(itemsCount)
    5a58:	2b00      	cmp	r3, #0
    5a5a:	d1ef      	bne.n	5a3c <_ZN2GI11StringArrayD1Ev+0x14>
	{
		delete array[itemsCount - 1];
		itemsCount--;
	}
	free(array);
    5a5c:	6820      	ldr	r0, [r4, #0]
    5a5e:	4b06      	ldr	r3, [pc, #24]	; (5a78 <_ZN2GI11StringArrayD1Ev+0x50>)
    5a60:	4798      	blx	r3
	array = NULL;
    5a62:	2300      	movs	r3, #0
    5a64:	6023      	str	r3, [r4, #0]
}
    5a66:	1c20      	adds	r0, r4, #0
    5a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a6a:	46c0      	nop			; (mov r8, r8)
    5a6c:	0000580d 	.word	0x0000580d
    5a70:	0000574d 	.word	0x0000574d
    5a74:	3fffffff 	.word	0x3fffffff
    5a78:	000065dd 	.word	0x000065dd

00005a7c <_ZN2GI11StringArray3addEPNS_6StringE>:

SysErr GI::StringArray::add(GI::String *str)
{
    5a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a7e:	1c04      	adds	r4, r0, #0
    5a80:	1e0e      	subs	r6, r1, #0
	if(!str)
    5a82:	d02a      	beq.n	5ada <_ZN2GI11StringArray3addEPNS_6StringE+0x5e>
		return SYS_ERR_INVALID_PARAM;
	if(!this)
    5a84:	2800      	cmp	r0, #0
    5a86:	d02a      	beq.n	5ade <_ZN2GI11StringArray3addEPNS_6StringE+0x62>
		return SYS_ERR_INVALID_HANDLER;
	if(!array)
    5a88:	6802      	ldr	r2, [r0, #0]
    5a8a:	2a00      	cmp	r2, #0
    5a8c:	d029      	beq.n	5ae2 <_ZN2GI11StringArray3addEPNS_6StringE+0x66>
		return SYS_ERR_UNKNOWN;
	GI::String * tmp_str = new GI::String(str);
    5a8e:	2010      	movs	r0, #16
    5a90:	4b16      	ldr	r3, [pc, #88]	; (5aec <_ZN2GI11StringArray3addEPNS_6StringE+0x70>)
    5a92:	4798      	blx	r3
    5a94:	1c05      	adds	r5, r0, #0
    5a96:	1c31      	adds	r1, r6, #0
    5a98:	4b15      	ldr	r3, [pc, #84]	; (5af0 <_ZN2GI11StringArray3addEPNS_6StringE+0x74>)
    5a9a:	4798      	blx	r3
	if(!tmp_str)
    5a9c:	2d00      	cmp	r5, #0
    5a9e:	d022      	beq.n	5ae6 <_ZN2GI11StringArray3addEPNS_6StringE+0x6a>
		return SYS_ERR_OUT_OF_MEMORY;
	GI::String **tmp_array = (GI::String **)realloc(array, sizeof(GI::String *) * (itemsCount + 1));
    5aa0:	6861      	ldr	r1, [r4, #4]
    5aa2:	3101      	adds	r1, #1
    5aa4:	0089      	lsls	r1, r1, #2
    5aa6:	6820      	ldr	r0, [r4, #0]
    5aa8:	4b12      	ldr	r3, [pc, #72]	; (5af4 <_ZN2GI11StringArray3addEPNS_6StringE+0x78>)
    5aaa:	4798      	blx	r3
    5aac:	1e07      	subs	r7, r0, #0
	if(!tmp_array)
    5aae:	d107      	bne.n	5ac0 <_ZN2GI11StringArray3addEPNS_6StringE+0x44>
	{
		delete tmp_str;
    5ab0:	1c28      	adds	r0, r5, #0
    5ab2:	4b11      	ldr	r3, [pc, #68]	; (5af8 <_ZN2GI11StringArray3addEPNS_6StringE+0x7c>)
    5ab4:	4798      	blx	r3
    5ab6:	1c28      	adds	r0, r5, #0
    5ab8:	4b10      	ldr	r3, [pc, #64]	; (5afc <_ZN2GI11StringArray3addEPNS_6StringE+0x80>)
    5aba:	4798      	blx	r3
		return SYS_ERR_OUT_OF_MEMORY;
    5abc:	20fd      	movs	r0, #253	; 0xfd
    5abe:	e013      	b.n	5ae8 <_ZN2GI11StringArray3addEPNS_6StringE+0x6c>
	}
	tmp_str->set(str);
    5ac0:	1c28      	adds	r0, r5, #0
    5ac2:	1c31      	adds	r1, r6, #0
    5ac4:	4b0e      	ldr	r3, [pc, #56]	; (5b00 <_ZN2GI11StringArray3addEPNS_6StringE+0x84>)
    5ac6:	4798      	blx	r3
	tmp_array[itemsCount] = tmp_str;
    5ac8:	6862      	ldr	r2, [r4, #4]
    5aca:	0093      	lsls	r3, r2, #2
    5acc:	51dd      	str	r5, [r3, r7]
	array = tmp_array;
    5ace:	6027      	str	r7, [r4, #0]
	itemsCount++;
    5ad0:	6863      	ldr	r3, [r4, #4]
    5ad2:	3301      	adds	r3, #1
    5ad4:	6063      	str	r3, [r4, #4]
	return SYS_ERR_OK;
    5ad6:	2000      	movs	r0, #0
    5ad8:	e006      	b.n	5ae8 <_ZN2GI11StringArray3addEPNS_6StringE+0x6c>
}

SysErr GI::StringArray::add(GI::String *str)
{
	if(!str)
		return SYS_ERR_INVALID_PARAM;
    5ada:	20fa      	movs	r0, #250	; 0xfa
    5adc:	e004      	b.n	5ae8 <_ZN2GI11StringArray3addEPNS_6StringE+0x6c>
	if(!this)
		return SYS_ERR_INVALID_HANDLER;
    5ade:	20fe      	movs	r0, #254	; 0xfe
    5ae0:	e002      	b.n	5ae8 <_ZN2GI11StringArray3addEPNS_6StringE+0x6c>
	if(!array)
		return SYS_ERR_UNKNOWN;
    5ae2:	20ff      	movs	r0, #255	; 0xff
    5ae4:	e000      	b.n	5ae8 <_ZN2GI11StringArray3addEPNS_6StringE+0x6c>
	GI::String * tmp_str = new GI::String(str);
	if(!tmp_str)
		return SYS_ERR_OUT_OF_MEMORY;
    5ae6:	20fd      	movs	r0, #253	; 0xfd
    5ae8:	b240      	sxtb	r0, r0
	tmp_str->set(str);
	tmp_array[itemsCount] = tmp_str;
	array = tmp_array;
	itemsCount++;
	return SYS_ERR_OK;
}
    5aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5aec:	00005741 	.word	0x00005741
    5af0:	000057cd 	.word	0x000057cd
    5af4:	00006799 	.word	0x00006799
    5af8:	0000580d 	.word	0x0000580d
    5afc:	0000574d 	.word	0x0000574d
    5b00:	00005875 	.word	0x00005875

00005b04 <_ZN2GI11StringArray3addEPc>:

SysErr GI::StringArray::add(char *str)
{
    5b04:	b570      	push	{r4, r5, r6, lr}
    5b06:	1c04      	adds	r4, r0, #0
    5b08:	1e0e      	subs	r6, r1, #0
	if(!str)
    5b0a:	d01e      	beq.n	5b4a <_ZN2GI11StringArray3addEPc+0x46>
		return SYS_ERR_INVALID_PARAM;
	if(!this)
    5b0c:	2800      	cmp	r0, #0
    5b0e:	d01e      	beq.n	5b4e <_ZN2GI11StringArray3addEPc+0x4a>
		return SYS_ERR_INVALID_HANDLER;
	if(!array)
    5b10:	6802      	ldr	r2, [r0, #0]
    5b12:	2a00      	cmp	r2, #0
    5b14:	d01d      	beq.n	5b52 <_ZN2GI11StringArray3addEPc+0x4e>
		return SYS_ERR_UNKNOWN;
	GI::String * tmp_str = new GI::String(str);
    5b16:	2010      	movs	r0, #16
    5b18:	4b11      	ldr	r3, [pc, #68]	; (5b60 <_ZN2GI11StringArray3addEPc+0x5c>)
    5b1a:	4798      	blx	r3
    5b1c:	1c05      	adds	r5, r0, #0
    5b1e:	1c31      	adds	r1, r6, #0
    5b20:	4b10      	ldr	r3, [pc, #64]	; (5b64 <_ZN2GI11StringArray3addEPc+0x60>)
    5b22:	4798      	blx	r3
	if(!tmp_str)
    5b24:	2d00      	cmp	r5, #0
    5b26:	d016      	beq.n	5b56 <_ZN2GI11StringArray3addEPc+0x52>
		return SYS_ERR_OUT_OF_MEMORY;
	GI::String **tmp_array = (GI::String **)realloc(array, sizeof(GI::String *) * (itemsCount + 1));
    5b28:	6861      	ldr	r1, [r4, #4]
    5b2a:	3101      	adds	r1, #1
    5b2c:	0089      	lsls	r1, r1, #2
    5b2e:	6820      	ldr	r0, [r4, #0]
    5b30:	4b0d      	ldr	r3, [pc, #52]	; (5b68 <_ZN2GI11StringArray3addEPc+0x64>)
    5b32:	4798      	blx	r3
	if(!tmp_array)
    5b34:	2800      	cmp	r0, #0
    5b36:	d010      	beq.n	5b5a <_ZN2GI11StringArray3addEPc+0x56>
		return SYS_ERR_OUT_OF_MEMORY;
	tmp_array[itemsCount] = tmp_str;
    5b38:	6862      	ldr	r2, [r4, #4]
    5b3a:	0093      	lsls	r3, r2, #2
    5b3c:	501d      	str	r5, [r3, r0]
	array = tmp_array;
    5b3e:	6020      	str	r0, [r4, #0]
	itemsCount++;
    5b40:	6863      	ldr	r3, [r4, #4]
    5b42:	3301      	adds	r3, #1
    5b44:	6063      	str	r3, [r4, #4]
	return SYS_ERR_OK;
    5b46:	2000      	movs	r0, #0
    5b48:	e008      	b.n	5b5c <_ZN2GI11StringArray3addEPc+0x58>
}

SysErr GI::StringArray::add(char *str)
{
	if(!str)
		return SYS_ERR_INVALID_PARAM;
    5b4a:	20fa      	movs	r0, #250	; 0xfa
    5b4c:	e006      	b.n	5b5c <_ZN2GI11StringArray3addEPc+0x58>
	if(!this)
		return SYS_ERR_INVALID_HANDLER;
    5b4e:	20fe      	movs	r0, #254	; 0xfe
    5b50:	e004      	b.n	5b5c <_ZN2GI11StringArray3addEPc+0x58>
	if(!array)
		return SYS_ERR_UNKNOWN;
    5b52:	20ff      	movs	r0, #255	; 0xff
    5b54:	e002      	b.n	5b5c <_ZN2GI11StringArray3addEPc+0x58>
	GI::String * tmp_str = new GI::String(str);
	if(!tmp_str)
		return SYS_ERR_OUT_OF_MEMORY;
    5b56:	20fd      	movs	r0, #253	; 0xfd
    5b58:	e000      	b.n	5b5c <_ZN2GI11StringArray3addEPc+0x58>
	GI::String **tmp_array = (GI::String **)realloc(array, sizeof(GI::String *) * (itemsCount + 1));
	if(!tmp_array)
		return SYS_ERR_OUT_OF_MEMORY;
    5b5a:	20fd      	movs	r0, #253	; 0xfd
    5b5c:	b240      	sxtb	r0, r0
	tmp_array[itemsCount] = tmp_str;
	array = tmp_array;
	itemsCount++;
	return SYS_ERR_OK;
}
    5b5e:	bd70      	pop	{r4, r5, r6, pc}
    5b60:	00005741 	.word	0x00005741
    5b64:	00005785 	.word	0x00005785
    5b68:	00006799 	.word	0x00006799

00005b6c <_ZN2GI11StringArray6insertEPNS_6StringEj>:

SysErr GI::StringArray::insert(GI::String *str, unsigned int position)
{
    5b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b6e:	1c04      	adds	r4, r0, #0
    5b70:	1c0d      	adds	r5, r1, #0
    5b72:	1c16      	adds	r6, r2, #0
	if(!str)
    5b74:	2900      	cmp	r1, #0
    5b76:	d038      	beq.n	5bea <_ZN2GI11StringArray6insertEPNS_6StringEj+0x7e>
		return SYS_ERR_INVALID_PARAM;
	if(!this)
    5b78:	2800      	cmp	r0, #0
    5b7a:	d038      	beq.n	5bee <_ZN2GI11StringArray6insertEPNS_6StringEj+0x82>
		return SYS_ERR_INVALID_HANDLER;
	if(!array)
    5b7c:	6802      	ldr	r2, [r0, #0]
    5b7e:	2a00      	cmp	r2, #0
    5b80:	d037      	beq.n	5bf2 <_ZN2GI11StringArray6insertEPNS_6StringEj+0x86>
		return SYS_ERR_UNKNOWN;
	if(itemsCount == 0 && position == 0)
    5b82:	6843      	ldr	r3, [r0, #4]
    5b84:	4333      	orrs	r3, r6
    5b86:	d102      	bne.n	5b8e <_ZN2GI11StringArray6insertEPNS_6StringEj+0x22>
	{
		return add(str);
    5b88:	4b1c      	ldr	r3, [pc, #112]	; (5bfc <_ZN2GI11StringArray6insertEPNS_6StringEj+0x90>)
    5b8a:	4798      	blx	r3
    5b8c:	e034      	b.n	5bf8 <_ZN2GI11StringArray6insertEPNS_6StringEj+0x8c>
	}
	GI::String * tmp_str = new GI::String(str);
    5b8e:	2010      	movs	r0, #16
    5b90:	4b1b      	ldr	r3, [pc, #108]	; (5c00 <_ZN2GI11StringArray6insertEPNS_6StringEj+0x94>)
    5b92:	4798      	blx	r3
    5b94:	1c07      	adds	r7, r0, #0
    5b96:	1c29      	adds	r1, r5, #0
    5b98:	4b1a      	ldr	r3, [pc, #104]	; (5c04 <_ZN2GI11StringArray6insertEPNS_6StringEj+0x98>)
    5b9a:	4798      	blx	r3
	if(!tmp_str)
    5b9c:	2f00      	cmp	r7, #0
    5b9e:	d02a      	beq.n	5bf6 <_ZN2GI11StringArray6insertEPNS_6StringEj+0x8a>
		return SYS_ERR_OUT_OF_MEMORY;
	GI::String **tmp_array = (GI::String **)realloc(array, sizeof(GI::String *) * (itemsCount + 1));
    5ba0:	6861      	ldr	r1, [r4, #4]
    5ba2:	3101      	adds	r1, #1
    5ba4:	0089      	lsls	r1, r1, #2
    5ba6:	6820      	ldr	r0, [r4, #0]
    5ba8:	4b17      	ldr	r3, [pc, #92]	; (5c08 <_ZN2GI11StringArray6insertEPNS_6StringEj+0x9c>)
    5baa:	4798      	blx	r3
	if(!tmp_array)
    5bac:	2800      	cmp	r0, #0
    5bae:	d107      	bne.n	5bc0 <_ZN2GI11StringArray6insertEPNS_6StringEj+0x54>
	{
		delete tmp_str;
    5bb0:	1c38      	adds	r0, r7, #0
    5bb2:	4b16      	ldr	r3, [pc, #88]	; (5c0c <_ZN2GI11StringArray6insertEPNS_6StringEj+0xa0>)
    5bb4:	4798      	blx	r3
    5bb6:	1c38      	adds	r0, r7, #0
    5bb8:	4b15      	ldr	r3, [pc, #84]	; (5c10 <_ZN2GI11StringArray6insertEPNS_6StringEj+0xa4>)
    5bba:	4798      	blx	r3
		return SYS_ERR_OUT_OF_MEMORY;
    5bbc:	20fd      	movs	r0, #253	; 0xfd
    5bbe:	e01b      	b.n	5bf8 <_ZN2GI11StringArray6insertEPNS_6StringEj+0x8c>
	}
	//memmove(tmp_array + (sizeof(GI::String *) * (position + 1)), tmp_array + (sizeof(GI::String *) * position), sizeof(GI::String *) * (itemsCount - position));
	unsigned long cnt = itemsCount - position;
    5bc0:	6863      	ldr	r3, [r4, #4]
	for(; cnt > 0; cnt--)
    5bc2:	42b3      	cmp	r3, r6
    5bc4:	d009      	beq.n	5bda <_ZN2GI11StringArray6insertEPNS_6StringEj+0x6e>
    5bc6:	009b      	lsls	r3, r3, #2
    5bc8:	18c3      	adds	r3, r0, r3
    5bca:	00b5      	lsls	r5, r6, #2
    5bcc:	1945      	adds	r5, r0, r5
    5bce:	1f19      	subs	r1, r3, #4
	{
		tmp_array[cnt + position] = tmp_array[(cnt - 1) + position];
    5bd0:	680a      	ldr	r2, [r1, #0]
    5bd2:	601a      	str	r2, [r3, #0]
    5bd4:	1e0b      	subs	r3, r1, #0
		delete tmp_str;
		return SYS_ERR_OUT_OF_MEMORY;
	}
	//memmove(tmp_array + (sizeof(GI::String *) * (position + 1)), tmp_array + (sizeof(GI::String *) * position), sizeof(GI::String *) * (itemsCount - position));
	unsigned long cnt = itemsCount - position;
	for(; cnt > 0; cnt--)
    5bd6:	42ab      	cmp	r3, r5
    5bd8:	d1f9      	bne.n	5bce <_ZN2GI11StringArray6insertEPNS_6StringEj+0x62>
	{
		tmp_array[cnt + position] = tmp_array[(cnt - 1) + position];
	}
	tmp_array[position] = tmp_str;
    5bda:	00b6      	lsls	r6, r6, #2
    5bdc:	5037      	str	r7, [r6, r0]
	array = tmp_array;
    5bde:	6020      	str	r0, [r4, #0]
	itemsCount++;
    5be0:	6863      	ldr	r3, [r4, #4]
    5be2:	3301      	adds	r3, #1
    5be4:	6063      	str	r3, [r4, #4]
	return SYS_ERR_OK;
    5be6:	2000      	movs	r0, #0
    5be8:	e006      	b.n	5bf8 <_ZN2GI11StringArray6insertEPNS_6StringEj+0x8c>
}

SysErr GI::StringArray::insert(GI::String *str, unsigned int position)
{
	if(!str)
		return SYS_ERR_INVALID_PARAM;
    5bea:	20fa      	movs	r0, #250	; 0xfa
    5bec:	e004      	b.n	5bf8 <_ZN2GI11StringArray6insertEPNS_6StringEj+0x8c>
	if(!this)
		return SYS_ERR_INVALID_HANDLER;
    5bee:	20fe      	movs	r0, #254	; 0xfe
    5bf0:	e002      	b.n	5bf8 <_ZN2GI11StringArray6insertEPNS_6StringEj+0x8c>
	if(!array)
		return SYS_ERR_UNKNOWN;
    5bf2:	20ff      	movs	r0, #255	; 0xff
    5bf4:	e000      	b.n	5bf8 <_ZN2GI11StringArray6insertEPNS_6StringEj+0x8c>
	{
		return add(str);
	}
	GI::String * tmp_str = new GI::String(str);
	if(!tmp_str)
		return SYS_ERR_OUT_OF_MEMORY;
    5bf6:	20fd      	movs	r0, #253	; 0xfd
    5bf8:	b240      	sxtb	r0, r0
	}
	tmp_array[position] = tmp_str;
	array = tmp_array;
	itemsCount++;
	return SYS_ERR_OK;
}
    5bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bfc:	00005a7d 	.word	0x00005a7d
    5c00:	00005741 	.word	0x00005741
    5c04:	000057cd 	.word	0x000057cd
    5c08:	00006799 	.word	0x00006799
    5c0c:	0000580d 	.word	0x0000580d
    5c10:	0000574d 	.word	0x0000574d

00005c14 <_ZN2GI11StringArray6removeEj>:
	itemsCount++;
	return SYS_ERR_OK;
}

SysErr GI::StringArray::remove(unsigned int position)
{
    5c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c16:	1c04      	adds	r4, r0, #0
    5c18:	1c0d      	adds	r5, r1, #0
	if(!this)
    5c1a:	2800      	cmp	r0, #0
    5c1c:	d029      	beq.n	5c72 <_ZN2GI11StringArray6removeEj+0x5e>
		return SYS_ERR_INVALID_HANDLER;
	if(!array)
    5c1e:	6803      	ldr	r3, [r0, #0]
    5c20:	2b00      	cmp	r3, #0
    5c22:	d028      	beq.n	5c76 <_ZN2GI11StringArray6removeEj+0x62>
		return SYS_ERR_UNKNOWN;
	if(position >= itemsCount)
    5c24:	6842      	ldr	r2, [r0, #4]
    5c26:	428a      	cmp	r2, r1
    5c28:	d927      	bls.n	5c7a <_ZN2GI11StringArray6removeEj+0x66>
		return SYS_ERR_OUT_OF_RANGE;
	delete array[position];
    5c2a:	008f      	lsls	r7, r1, #2
    5c2c:	59de      	ldr	r6, [r3, r7]
    5c2e:	2e00      	cmp	r6, #0
    5c30:	d005      	beq.n	5c3e <_ZN2GI11StringArray6removeEj+0x2a>
    5c32:	1c30      	adds	r0, r6, #0
    5c34:	4b12      	ldr	r3, [pc, #72]	; (5c80 <_ZN2GI11StringArray6removeEj+0x6c>)
    5c36:	4798      	blx	r3
    5c38:	1c30      	adds	r0, r6, #0
    5c3a:	4b12      	ldr	r3, [pc, #72]	; (5c84 <_ZN2GI11StringArray6removeEj+0x70>)
    5c3c:	4798      	blx	r3
	memmove(array + (sizeof(GI::String *) * position), array + (sizeof(GI::String *) * (position + 1)), sizeof(GI::String *) * (itemsCount - position - 1));
    5c3e:	6823      	ldr	r3, [r4, #0]
    5c40:	00bf      	lsls	r7, r7, #2
    5c42:	19d8      	adds	r0, r3, r7
    5c44:	3710      	adds	r7, #16
    5c46:	19d9      	adds	r1, r3, r7
    5c48:	6862      	ldr	r2, [r4, #4]
    5c4a:	3a01      	subs	r2, #1
    5c4c:	1b55      	subs	r5, r2, r5
    5c4e:	00aa      	lsls	r2, r5, #2
    5c50:	4b0d      	ldr	r3, [pc, #52]	; (5c88 <_ZN2GI11StringArray6removeEj+0x74>)
    5c52:	4798      	blx	r3
	GI::String **tmp_array = (GI::String **)realloc(array, sizeof(GI::String *) * (itemsCount - 1));
    5c54:	6861      	ldr	r1, [r4, #4]
    5c56:	3901      	subs	r1, #1
    5c58:	0089      	lsls	r1, r1, #2
    5c5a:	6820      	ldr	r0, [r4, #0]
    5c5c:	4b0b      	ldr	r3, [pc, #44]	; (5c8c <_ZN2GI11StringArray6removeEj+0x78>)
    5c5e:	4798      	blx	r3
	array = tmp_array;
    5c60:	6020      	str	r0, [r4, #0]
	itemsCount--;
    5c62:	6863      	ldr	r3, [r4, #4]
    5c64:	3b01      	subs	r3, #1
    5c66:	6063      	str	r3, [r4, #4]
	if(!tmp_array)
		return SYS_ERR_OUT_OF_MEMORY;
	return SYS_ERR_OK;
    5c68:	2300      	movs	r3, #0
	delete array[position];
	memmove(array + (sizeof(GI::String *) * position), array + (sizeof(GI::String *) * (position + 1)), sizeof(GI::String *) * (itemsCount - position - 1));
	GI::String **tmp_array = (GI::String **)realloc(array, sizeof(GI::String *) * (itemsCount - 1));
	array = tmp_array;
	itemsCount--;
	if(!tmp_array)
    5c6a:	2800      	cmp	r0, #0
    5c6c:	d106      	bne.n	5c7c <_ZN2GI11StringArray6removeEj+0x68>
		return SYS_ERR_OUT_OF_MEMORY;
    5c6e:	23fd      	movs	r3, #253	; 0xfd
    5c70:	e004      	b.n	5c7c <_ZN2GI11StringArray6removeEj+0x68>
}

SysErr GI::StringArray::remove(unsigned int position)
{
	if(!this)
		return SYS_ERR_INVALID_HANDLER;
    5c72:	23fe      	movs	r3, #254	; 0xfe
    5c74:	e002      	b.n	5c7c <_ZN2GI11StringArray6removeEj+0x68>
	if(!array)
		return SYS_ERR_UNKNOWN;
    5c76:	23ff      	movs	r3, #255	; 0xff
    5c78:	e000      	b.n	5c7c <_ZN2GI11StringArray6removeEj+0x68>
	if(position >= itemsCount)
		return SYS_ERR_OUT_OF_RANGE;
    5c7a:	23fc      	movs	r3, #252	; 0xfc
    5c7c:	b258      	sxtb	r0, r3
	array = tmp_array;
	itemsCount--;
	if(!tmp_array)
		return SYS_ERR_OUT_OF_MEMORY;
	return SYS_ERR_OK;
}
    5c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c80:	0000580d 	.word	0x0000580d
    5c84:	0000574d 	.word	0x0000574d
    5c88:	00006603 	.word	0x00006603
    5c8c:	00006799 	.word	0x00006799

00005c90 <_ZN2GI15StringCharArrayC1EPNS_11StringArrayEj>:
	}
	itemsCount = strArray->itemsCount;
	array = char_array;
}

GI::StringCharArray::StringCharArray(GI::StringArray *strArray, unsigned int offset)
    5c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c92:	465f      	mov	r7, fp
    5c94:	4656      	mov	r6, sl
    5c96:	464d      	mov	r5, r9
    5c98:	4644      	mov	r4, r8
    5c9a:	b4f0      	push	{r4, r5, r6, r7}
    5c9c:	b083      	sub	sp, #12
    5c9e:	4680      	mov	r8, r0
    5ca0:	1c0e      	adds	r6, r1, #0
    5ca2:	4693      	mov	fp, r2
{
	memset(this, 0, sizeof(*this));
    5ca4:	2300      	movs	r3, #0
    5ca6:	7003      	strb	r3, [r0, #0]
    5ca8:	7043      	strb	r3, [r0, #1]
    5caa:	7083      	strb	r3, [r0, #2]
    5cac:	70c3      	strb	r3, [r0, #3]
    5cae:	7103      	strb	r3, [r0, #4]
    5cb0:	7143      	strb	r3, [r0, #5]
    5cb2:	7183      	strb	r3, [r0, #6]
    5cb4:	71c3      	strb	r3, [r0, #7]
	if(offset > strArray->itemsCount)
    5cb6:	6848      	ldr	r0, [r1, #4]
    5cb8:	4290      	cmp	r0, r2
    5cba:	d32c      	bcc.n	5d16 <_ZN2GI15StringCharArrayC1EPNS_11StringArrayEj+0x86>
		return;
	char **char_array = (char **)malloc(sizeof(char *) * strArray->itemsCount - offset);
    5cbc:	0080      	lsls	r0, r0, #2
    5cbe:	1a80      	subs	r0, r0, r2
    5cc0:	4b19      	ldr	r3, [pc, #100]	; (5d28 <_ZN2GI15StringCharArrayC1EPNS_11StringArrayEj+0x98>)
    5cc2:	4798      	blx	r3
    5cc4:	9001      	str	r0, [sp, #4]
	if(!char_array)
    5cc6:	2800      	cmp	r0, #0
    5cc8:	d025      	beq.n	5d16 <_ZN2GI15StringCharArrayC1EPNS_11StringArrayEj+0x86>
		return;
	unsigned int cnt = offset;
	unsigned int dest_cnt = 0;
	for(; cnt < strArray->itemsCount; cnt++)
    5cca:	6871      	ldr	r1, [r6, #4]
    5ccc:	4689      	mov	r9, r1
    5cce:	458b      	cmp	fp, r1
    5cd0:	d21a      	bcs.n	5d08 <_ZN2GI15StringCharArrayC1EPNS_11StringArrayEj+0x78>
    5cd2:	465a      	mov	r2, fp
    5cd4:	0094      	lsls	r4, r2, #2
    5cd6:	1b03      	subs	r3, r0, r4
    5cd8:	9300      	str	r3, [sp, #0]
    5cda:	465f      	mov	r7, fp
	{
		char *item_str = (char *)malloc(strArray->array[cnt]->length + 1);
    5cdc:	4b12      	ldr	r3, [pc, #72]	; (5d28 <_ZN2GI15StringCharArrayC1EPNS_11StringArrayEj+0x98>)
    5cde:	469a      	mov	sl, r3
    5ce0:	6831      	ldr	r1, [r6, #0]
    5ce2:	590b      	ldr	r3, [r1, r4]
    5ce4:	6858      	ldr	r0, [r3, #4]
    5ce6:	3001      	adds	r0, #1
    5ce8:	47d0      	blx	sl
    5cea:	1e05      	subs	r5, r0, #0
		if(!item_str)
    5cec:	d00c      	beq.n	5d08 <_ZN2GI15StringCharArrayC1EPNS_11StringArrayEj+0x78>
			break;
		strcpy(item_str, strArray->array[cnt]->buff);
    5cee:	6832      	ldr	r2, [r6, #0]
    5cf0:	5913      	ldr	r3, [r2, r4]
    5cf2:	6819      	ldr	r1, [r3, #0]
    5cf4:	4b0d      	ldr	r3, [pc, #52]	; (5d2c <_ZN2GI15StringCharArrayC1EPNS_11StringArrayEj+0x9c>)
    5cf6:	4798      	blx	r3
		char_array[dest_cnt++] = item_str;
    5cf8:	9900      	ldr	r1, [sp, #0]
    5cfa:	510d      	str	r5, [r1, r4]
	char **char_array = (char **)malloc(sizeof(char *) * strArray->itemsCount - offset);
	if(!char_array)
		return;
	unsigned int cnt = offset;
	unsigned int dest_cnt = 0;
	for(; cnt < strArray->itemsCount; cnt++)
    5cfc:	3701      	adds	r7, #1
    5cfe:	6872      	ldr	r2, [r6, #4]
    5d00:	4691      	mov	r9, r2
    5d02:	3404      	adds	r4, #4
    5d04:	42ba      	cmp	r2, r7
    5d06:	d8eb      	bhi.n	5ce0 <_ZN2GI15StringCharArrayC1EPNS_11StringArrayEj+0x50>
		if(!item_str)
			break;
		strcpy(item_str, strArray->array[cnt]->buff);
		char_array[dest_cnt++] = item_str;
	}
	itemsCount = strArray->itemsCount - offset;
    5d08:	4649      	mov	r1, r9
    5d0a:	465a      	mov	r2, fp
    5d0c:	1a8b      	subs	r3, r1, r2
    5d0e:	4641      	mov	r1, r8
    5d10:	604b      	str	r3, [r1, #4]
	array = char_array;
    5d12:	9a01      	ldr	r2, [sp, #4]
    5d14:	600a      	str	r2, [r1, #0]
}
    5d16:	4640      	mov	r0, r8
    5d18:	b003      	add	sp, #12
    5d1a:	bc3c      	pop	{r2, r3, r4, r5}
    5d1c:	4690      	mov	r8, r2
    5d1e:	4699      	mov	r9, r3
    5d20:	46a2      	mov	sl, r4
    5d22:	46ab      	mov	fp, r5
    5d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d26:	46c0      	nop			; (mov r8, r8)
    5d28:	000065c9 	.word	0x000065c9
    5d2c:	00006803 	.word	0x00006803

00005d30 <_ZN2GI15StringCharArrayD1Ev>:

GI::StringCharArray::~StringCharArray()
    5d30:	b538      	push	{r3, r4, r5, lr}
    5d32:	1c04      	adds	r4, r0, #0
{
	if(!array)
    5d34:	6802      	ldr	r2, [r0, #0]
    5d36:	2a00      	cmp	r2, #0
    5d38:	d011      	beq.n	5d5e <_ZN2GI15StringCharArrayD1Ev+0x2e>
		return;
	while(itemsCount)
    5d3a:	6843      	ldr	r3, [r0, #4]
    5d3c:	2b00      	cmp	r3, #0
    5d3e:	d00b      	beq.n	5d58 <_ZN2GI15StringCharArrayD1Ev+0x28>
	{
		free((void *)array[itemsCount - 1]);
    5d40:	4d08      	ldr	r5, [pc, #32]	; (5d64 <_ZN2GI15StringCharArrayD1Ev+0x34>)
    5d42:	4a09      	ldr	r2, [pc, #36]	; (5d68 <_ZN2GI15StringCharArrayD1Ev+0x38>)
    5d44:	189b      	adds	r3, r3, r2
    5d46:	009b      	lsls	r3, r3, #2
    5d48:	6822      	ldr	r2, [r4, #0]
    5d4a:	5898      	ldr	r0, [r3, r2]
    5d4c:	47a8      	blx	r5
		itemsCount--;
    5d4e:	6863      	ldr	r3, [r4, #4]
    5d50:	3b01      	subs	r3, #1
    5d52:	6063      	str	r3, [r4, #4]

GI::StringCharArray::~StringCharArray()
{
	if(!array)
		return;
	while(itemsCount)
    5d54:	2b00      	cmp	r3, #0
    5d56:	d1f4      	bne.n	5d42 <_ZN2GI15StringCharArrayD1Ev+0x12>
	{
		free((void *)array[itemsCount - 1]);
		itemsCount--;
	}
	free(array);
    5d58:	6820      	ldr	r0, [r4, #0]
    5d5a:	4b02      	ldr	r3, [pc, #8]	; (5d64 <_ZN2GI15StringCharArrayD1Ev+0x34>)
    5d5c:	4798      	blx	r3
}
    5d5e:	1c20      	adds	r0, r4, #0
    5d60:	bd38      	pop	{r3, r4, r5, pc}
    5d62:	46c0      	nop			; (mov r8, r8)
    5d64:	000065dd 	.word	0x000065dd
    5d68:	3fffffff 	.word	0x3fffffff

00005d6c <_ZN2GI3Dev4Gpio6setOutEj>:
			//(unsigned int) (1 << (cfg.pin % 32)));
}
/*#####################################################*/
SysErr GI::Dev::Gpio::setOut(unsigned int value)
{
	if (!this)
    5d6c:	2800      	cmp	r0, #0
    5d6e:	d01e      	beq.n	5dae <_ZN2GI3Dev4Gpio6setOutEj+0x42>
		return SYS_ERR_INVALID_HANDLER;
	//PORT_t *BaseAddr = GPIO_BASE_PTRS[cfg.pin >> 5];
	if (cfg.multiPin)
    5d70:	7d82      	ldrb	r2, [r0, #22]
		unsigned int state = value;
		if (cfg.reverse)
			state = (~state) & 0x01;
		port_pin_set_output_level(cfg.pin, state);
	}
	return SYS_ERR_OK;
    5d72:	2300      	movs	r3, #0
SysErr GI::Dev::Gpio::setOut(unsigned int value)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
	//PORT_t *BaseAddr = GPIO_BASE_PTRS[cfg.pin >> 5];
	if (cfg.multiPin)
    5d74:	2a00      	cmp	r2, #0
    5d76:	d11b      	bne.n	5db0 <_ZN2GI3Dev4Gpio6setOutEj+0x44>
				//| (value & (cfg.pin % 32));
	}
	else
	{
		unsigned int state = value;
		if (cfg.reverse)
    5d78:	7d03      	ldrb	r3, [r0, #20]
    5d7a:	2b00      	cmp	r3, #0
    5d7c:	d002      	beq.n	5d84 <_ZN2GI3Dev4Gpio6setOutEj+0x18>
			state = (~state) & 0x01;
    5d7e:	2301      	movs	r3, #1
    5d80:	4059      	eors	r1, r3
    5d82:	4019      	ands	r1, r3
		port_pin_set_output_level(cfg.pin, state);
    5d84:	7c03      	ldrb	r3, [r0, #16]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5d86:	09d8      	lsrs	r0, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    5d88:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5d8a:	2800      	cmp	r0, #0
    5d8c:	d103      	bne.n	5d96 <_ZN2GI3Dev4Gpio6setOutEj+0x2a>
		return &(ports[port_index]->Group[group_index]);
    5d8e:	095a      	lsrs	r2, r3, #5
    5d90:	01d2      	lsls	r2, r2, #7
    5d92:	4808      	ldr	r0, [pc, #32]	; (5db4 <_ZN2GI3Dev4Gpio6setOutEj+0x48>)
    5d94:	1812      	adds	r2, r2, r0
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5d96:	201f      	movs	r0, #31
    5d98:	4003      	ands	r3, r0
    5d9a:	2001      	movs	r0, #1
    5d9c:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    5d9e:	2900      	cmp	r1, #0
    5da0:	d002      	beq.n	5da8 <_ZN2GI3Dev4Gpio6setOutEj+0x3c>
		port_base->OUTSET.reg = pin_mask;
    5da2:	6190      	str	r0, [r2, #24]
	}
	return SYS_ERR_OK;
    5da4:	2300      	movs	r3, #0
    5da6:	e003      	b.n	5db0 <_ZN2GI3Dev4Gpio6setOutEj+0x44>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    5da8:	6150      	str	r0, [r2, #20]
    5daa:	2300      	movs	r3, #0
    5dac:	e000      	b.n	5db0 <_ZN2GI3Dev4Gpio6setOutEj+0x44>
}
/*#####################################################*/
SysErr GI::Dev::Gpio::setOut(unsigned int value)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
    5dae:	23fe      	movs	r3, #254	; 0xfe
    5db0:	b258      	sxtb	r0, r3
		if (cfg.reverse)
			state = (~state) & 0x01;
		port_pin_set_output_level(cfg.pin, state);
	}
	return SYS_ERR_OK;
}
    5db2:	4770      	bx	lr
    5db4:	41004400 	.word	0x41004400

00005db8 <_ZN2GI3Dev4Gpio2inEv>:
/*#####################################################*/
signed int GI::Dev::Gpio::in()
{
    5db8:	1e03      	subs	r3, r0, #0
	if (!this)
    5dba:	d02a      	beq.n	5e12 <_ZN2GI3Dev4Gpio2inEv+0x5a>
		return -1;
	//PORT_t *BaseAddr = GPIO_BASE_PTRS[cfg.pin >> 5];
	if (cfg.multiPin)
    5dbc:	7d82      	ldrb	r2, [r0, #22]
	{
		return false;//BaseAddr->DIR & (cfg.pin % 32);
    5dbe:	2000      	movs	r0, #0
signed int GI::Dev::Gpio::in()
{
	if (!this)
		return -1;
	//PORT_t *BaseAddr = GPIO_BASE_PTRS[cfg.pin >> 5];
	if (cfg.multiPin)
    5dc0:	2a00      	cmp	r2, #0
    5dc2:	d128      	bne.n	5e16 <_ZN2GI3Dev4Gpio2inEv+0x5e>
	{
		return false;//BaseAddr->DIR & (cfg.pin % 32);
	}
	else
	{
		if (cfg.reverse)
    5dc4:	7d1a      	ldrb	r2, [r3, #20]
    5dc6:	2a00      	cmp	r2, #0
    5dc8:	d011      	beq.n	5dee <_ZN2GI3Dev4Gpio2inEv+0x36>
		{
			if(port_pin_get_input_level(cfg.pin))
    5dca:	7c1b      	ldrb	r3, [r3, #16]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5dcc:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    5dce:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5dd0:	2900      	cmp	r1, #0
    5dd2:	d103      	bne.n	5ddc <_ZN2GI3Dev4Gpio2inEv+0x24>
		return &(ports[port_index]->Group[group_index]);
    5dd4:	095a      	lsrs	r2, r3, #5
    5dd6:	01d2      	lsls	r2, r2, #7
    5dd8:	490f      	ldr	r1, [pc, #60]	; (5e18 <_ZN2GI3Dev4Gpio2inEv+0x60>)
    5dda:	1852      	adds	r2, r2, r1
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    5ddc:	6a10      	ldr	r0, [r2, #32]
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5dde:	221f      	movs	r2, #31
    5de0:	4013      	ands	r3, r2
    5de2:	2201      	movs	r2, #1
    5de4:	409a      	lsls	r2, r3

	return (port_base->IN.reg & pin_mask);
    5de6:	4010      	ands	r0, r2
}
/*#####################################################*/
signed int GI::Dev::Gpio::in()
{
	if (!this)
		return -1;
    5de8:	4243      	negs	r3, r0
    5dea:	4158      	adcs	r0, r3
    5dec:	e013      	b.n	5e16 <_ZN2GI3Dev4Gpio2inEv+0x5e>
				return false;
			else
				return true;
		}
		else
			return port_pin_get_input_level(cfg.pin);
    5dee:	7c1b      	ldrb	r3, [r3, #16]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5df0:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    5df2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5df4:	2900      	cmp	r1, #0
    5df6:	d103      	bne.n	5e00 <_ZN2GI3Dev4Gpio2inEv+0x48>
		return &(ports[port_index]->Group[group_index]);
    5df8:	095a      	lsrs	r2, r3, #5
    5dfa:	01d2      	lsls	r2, r2, #7
    5dfc:	4906      	ldr	r1, [pc, #24]	; (5e18 <_ZN2GI3Dev4Gpio2inEv+0x60>)
    5dfe:	1852      	adds	r2, r2, r1
    5e00:	6a10      	ldr	r0, [r2, #32]
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5e02:	221f      	movs	r2, #31
    5e04:	4013      	ands	r3, r2
    5e06:	2201      	movs	r2, #1
    5e08:	409a      	lsls	r2, r3

	return (port_base->IN.reg & pin_mask);
    5e0a:	4010      	ands	r0, r2
    5e0c:	1e43      	subs	r3, r0, #1
    5e0e:	4198      	sbcs	r0, r3
    5e10:	e001      	b.n	5e16 <_ZN2GI3Dev4Gpio2inEv+0x5e>
}
/*#####################################################*/
signed int GI::Dev::Gpio::in()
{
	if (!this)
		return -1;
    5e12:	2001      	movs	r0, #1
    5e14:	4240      	negs	r0, r0
				return true;
		}
		else
			return port_pin_get_input_level(cfg.pin);
	}
}
    5e16:	4770      	bx	lr
    5e18:	41004400 	.word	0x41004400

00005e1c <_ZN2GI3Dev4Gpio5getInEPm>:
/*#####################################################*/
SysErr GI::Dev::Gpio::getIn(unsigned long *value)
{
    5e1c:	b510      	push	{r4, lr}
    5e1e:	1c0c      	adds	r4, r1, #0
	if (!this)
    5e20:	2800      	cmp	r0, #0
    5e22:	d004      	beq.n	5e2e <_ZN2GI3Dev4Gpio5getInEPm+0x12>
		return SYS_ERR_INVALID_HANDLER;
	*value = (unsigned int)in();
    5e24:	4b03      	ldr	r3, [pc, #12]	; (5e34 <_ZN2GI3Dev4Gpio5getInEPm+0x18>)
    5e26:	4798      	blx	r3
    5e28:	6020      	str	r0, [r4, #0]
	return SYS_ERR_OK;
    5e2a:	2000      	movs	r0, #0
    5e2c:	e000      	b.n	5e30 <_ZN2GI3Dev4Gpio5getInEPm+0x14>
}
/*#####################################################*/
SysErr GI::Dev::Gpio::getIn(unsigned long *value)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
    5e2e:	20fe      	movs	r0, #254	; 0xfe
    5e30:	b240      	sxtb	r0, r0
	*value = (unsigned int)in();
	return SYS_ERR_OK;
}
    5e32:	bd10      	pop	{r4, pc}
    5e34:	00005db9 	.word	0x00005db9

00005e38 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE>:
/*#####################################################*/
SysErr GI::Dev::Gpio::setMode(CfgGpio::gpioMode_e mode)
{
    5e38:	b500      	push	{lr}
    5e3a:	b083      	sub	sp, #12
	if (!this)
    5e3c:	2800      	cmp	r0, #0
    5e3e:	d023      	beq.n	5e88 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x50>
		return SYS_ERR_INVALID_HANDLER;
	struct port_config config_port_pin;
	
	switch (mode)
    5e40:	2901      	cmp	r1, #1
    5e42:	d011      	beq.n	5e68 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x30>
    5e44:	2900      	cmp	r1, #0
    5e46:	d014      	beq.n	5e72 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x3a>
    5e48:	2902      	cmp	r1, #2
    5e4a:	d007      	beq.n	5e5c <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x24>
    5e4c:	2903      	cmp	r1, #3
    5e4e:	d11d      	bne.n	5e8c <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x54>
	{
	case CfgGpio::GPIO_IN_PULL_UP:
		config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    5e50:	ab01      	add	r3, sp, #4
    5e52:	2200      	movs	r2, #0
    5e54:	701a      	strb	r2, [r3, #0]
		config_port_pin.input_pull = PORT_PIN_PULL_UP;
    5e56:	2201      	movs	r2, #1
    5e58:	705a      	strb	r2, [r3, #1]
		break;
    5e5a:	e00f      	b.n	5e7c <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x44>
	case CfgGpio::GPIO_IN_PULL_DOWN:
		config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    5e5c:	ab01      	add	r3, sp, #4
    5e5e:	2200      	movs	r2, #0
    5e60:	701a      	strb	r2, [r3, #0]
		config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    5e62:	2202      	movs	r2, #2
    5e64:	705a      	strb	r2, [r3, #1]
		break;
    5e66:	e009      	b.n	5e7c <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x44>
	case CfgGpio::GPIO_IN_FLOATING:
		config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    5e68:	ab01      	add	r3, sp, #4
    5e6a:	2200      	movs	r2, #0
    5e6c:	701a      	strb	r2, [r3, #0]
		config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    5e6e:	705a      	strb	r2, [r3, #1]
		break;
    5e70:	e004      	b.n	5e7c <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x44>
	case CfgGpio::GPIO_OUT_PUSH_PULL:
		config_port_pin.direction  = PORT_PIN_DIR_OUTPUT_WTH_READBACK;
    5e72:	ab01      	add	r3, sp, #4
    5e74:	2202      	movs	r2, #2
    5e76:	701a      	strb	r2, [r3, #0]
		config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    5e78:	2200      	movs	r2, #0
    5e7a:	705a      	strb	r2, [r3, #1]
		break;
	default:
		return SYS_ERR_INVALID_COMMAND;
	}
	port_pin_set_config(cfg.pin, &config_port_pin);
    5e7c:	7c00      	ldrb	r0, [r0, #16]
    5e7e:	a901      	add	r1, sp, #4
    5e80:	4b04      	ldr	r3, [pc, #16]	; (5e94 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x5c>)
    5e82:	4798      	blx	r3
	return SYS_ERR_OK;
    5e84:	2000      	movs	r0, #0
    5e86:	e002      	b.n	5e8e <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x56>
}
/*#####################################################*/
SysErr GI::Dev::Gpio::setMode(CfgGpio::gpioMode_e mode)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
    5e88:	20fe      	movs	r0, #254	; 0xfe
    5e8a:	e000      	b.n	5e8e <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x56>
	case CfgGpio::GPIO_OUT_PUSH_PULL:
		config_port_pin.direction  = PORT_PIN_DIR_OUTPUT_WTH_READBACK;
		config_port_pin.input_pull = PORT_PIN_PULL_NONE;
		break;
	default:
		return SYS_ERR_INVALID_COMMAND;
    5e8c:	20fb      	movs	r0, #251	; 0xfb
    5e8e:	b240      	sxtb	r0, r0
	}
	port_pin_set_config(cfg.pin, &config_port_pin);
	return SYS_ERR_OK;
}
    5e90:	b003      	add	sp, #12
    5e92:	bd00      	pop	{pc}
    5e94:	000017e1 	.word	0x000017e1

00005e98 <_ZN2GI3Dev4GpioC1EP7CfgGpio>:
	cfg.multiPin = multiPin;
	setMode(mode);
	setOut(cfg.defValue);
}

GI::Dev::Gpio::Gpio(CfgGpio *gpioPin)
    5e98:	b538      	push	{r3, r4, r5, lr}
    5e9a:	1c04      	adds	r4, r0, #0
    5e9c:	1c0d      	adds	r5, r1, #0
{
	memset(this, 0, sizeof(*this));
    5e9e:	2100      	movs	r1, #0
    5ea0:	223c      	movs	r2, #60	; 0x3c
    5ea2:	4b08      	ldr	r3, [pc, #32]	; (5ec4 <_ZN2GI3Dev4GpioC1EP7CfgGpio+0x2c>)
    5ea4:	4798      	blx	r3
	memcpy(&this->cfg, gpioPin, sizeof(CfgGpio));
    5ea6:	1d20      	adds	r0, r4, #4
    5ea8:	1c29      	adds	r1, r5, #0
    5eaa:	2218      	movs	r2, #24
    5eac:	4b06      	ldr	r3, [pc, #24]	; (5ec8 <_ZN2GI3Dev4GpioC1EP7CfgGpio+0x30>)
    5eae:	4798      	blx	r3
	setMode(cfg.gpioMode);
    5eb0:	7d61      	ldrb	r1, [r4, #21]
    5eb2:	1c20      	adds	r0, r4, #0
    5eb4:	4b05      	ldr	r3, [pc, #20]	; (5ecc <_ZN2GI3Dev4GpioC1EP7CfgGpio+0x34>)
    5eb6:	4798      	blx	r3
	setOut(cfg.defValue);
    5eb8:	1c20      	adds	r0, r4, #0
    5eba:	69a1      	ldr	r1, [r4, #24]
    5ebc:	4b04      	ldr	r3, [pc, #16]	; (5ed0 <_ZN2GI3Dev4GpioC1EP7CfgGpio+0x38>)
    5ebe:	4798      	blx	r3
}
    5ec0:	1c20      	adds	r0, r4, #0
    5ec2:	bd38      	pop	{r3, r4, r5, pc}
    5ec4:	00006635 	.word	0x00006635
    5ec8:	000065f1 	.word	0x000065f1
    5ecc:	00005e39 	.word	0x00005e39
    5ed0:	00005d6d 	.word	0x00005d6d

00005ed4 <_ZN2GI3Dev3I2c2WREhPhjS2_j>:
}

SysErr GI::Dev::I2c::WR(unsigned char addr, unsigned char *buff_send,
		unsigned int TransmitBytes, unsigned char *buff_receive,
		unsigned int ReceiveBytes)
{
    5ed4:	b530      	push	{r4, r5, lr}
    5ed6:	b085      	sub	sp, #20
    5ed8:	1c04      	adds	r4, r0, #0
    5eda:	1c0d      	adds	r5, r1, #0
	enum status_code stat = STATUS_OK;
	if (!noSendWriteOnRead)
    5edc:	2020      	movs	r0, #32
    5ede:	5c20      	ldrb	r0, [r4, r0]
    5ee0:	2800      	cmp	r0, #0
    5ee2:	d129      	bne.n	5f38 <_ZN2GI3Dev3I2c2WREhPhjS2_j+0x64>
			.data_length	= (unsigned short)TransmitBytes,
			.data			= buff_send,
			.ten_bit_address = false,
			.high_speed      = false,
			.hs_master_code  = 0x0,
		};
    5ee4:	a801      	add	r0, sp, #4
    5ee6:	2100      	movs	r1, #0
    5ee8:	9103      	str	r1, [sp, #12]
    5eea:	8005      	strh	r5, [r0, #0]
    5eec:	8043      	strh	r3, [r0, #2]
    5eee:	9202      	str	r2, [sp, #8]
		if(!ReceiveBytes)
    5ef0:	9909      	ldr	r1, [sp, #36]	; 0x24
    5ef2:	2900      	cmp	r1, #0
    5ef4:	d104      	bne.n	5f00 <_ZN2GI3Dev3I2c2WREhPhjS2_j+0x2c>
			stat = i2c_master_write_packet_wait((struct i2c_master_module *)udata, &packet);
    5ef6:	6c20      	ldr	r0, [r4, #64]	; 0x40
    5ef8:	a901      	add	r1, sp, #4
    5efa:	4b12      	ldr	r3, [pc, #72]	; (5f44 <_ZN2GI3Dev3I2c2WREhPhjS2_j+0x70>)
    5efc:	4798      	blx	r3
    5efe:	e010      	b.n	5f22 <_ZN2GI3Dev3I2c2WREhPhjS2_j+0x4e>
		else
			stat = i2c_master_write_packet_wait_no_stop((struct i2c_master_module *)udata, &packet);
    5f00:	6c20      	ldr	r0, [r4, #64]	; 0x40
    5f02:	a901      	add	r1, sp, #4
    5f04:	4b10      	ldr	r3, [pc, #64]	; (5f48 <_ZN2GI3Dev3I2c2WREhPhjS2_j+0x74>)
    5f06:	4798      	blx	r3
	}
	if (ReceiveBytes && stat == STATUS_OK)
    5f08:	2800      	cmp	r0, #0
    5f0a:	d10a      	bne.n	5f22 <_ZN2GI3Dev3I2c2WREhPhjS2_j+0x4e>
			.data_length	= (unsigned short)ReceiveBytes,
			.data			= buff_receive,
			.ten_bit_address = false,
			.high_speed      = false,
			.hs_master_code  = 0x0,
		};
    5f0c:	a901      	add	r1, sp, #4
    5f0e:	2300      	movs	r3, #0
    5f10:	608b      	str	r3, [r1, #8]
    5f12:	800d      	strh	r5, [r1, #0]
    5f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5f16:	804b      	strh	r3, [r1, #2]
    5f18:	9b08      	ldr	r3, [sp, #32]
    5f1a:	604b      	str	r3, [r1, #4]
		stat = i2c_master_read_packet_wait(((struct i2c_master_module *)udata), &packet);
    5f1c:	6c20      	ldr	r0, [r4, #64]	; 0x40
    5f1e:	4b0b      	ldr	r3, [pc, #44]	; (5f4c <_ZN2GI3Dev3I2c2WREhPhjS2_j+0x78>)
    5f20:	4798      	blx	r3
	}
	switch (stat)
    5f22:	2800      	cmp	r0, #0
    5f24:	d003      	beq.n	5f2e <_ZN2GI3Dev3I2c2WREhPhjS2_j+0x5a>
	{
	case STATUS_OK:
		return SYS_ERR_OK;
	case STATUS_BUSY:
		return SYS_ERR_BUSY;
    5f26:	23f2      	movs	r3, #242	; 0xf2
			.high_speed      = false,
			.hs_master_code  = 0x0,
		};
		stat = i2c_master_read_packet_wait(((struct i2c_master_module *)udata), &packet);
	}
	switch (stat)
    5f28:	2805      	cmp	r0, #5
    5f2a:	d003      	beq.n	5f34 <_ZN2GI3Dev3I2c2WREhPhjS2_j+0x60>
    5f2c:	e001      	b.n	5f32 <_ZN2GI3Dev3I2c2WREhPhjS2_j+0x5e>
	{
	case STATUS_OK:
		return SYS_ERR_OK;
    5f2e:	2300      	movs	r3, #0
    5f30:	e000      	b.n	5f34 <_ZN2GI3Dev3I2c2WREhPhjS2_j+0x60>
	case STATUS_BUSY:
		return SYS_ERR_BUSY;
	default:
		return SYS_ERR_UNKNOWN;
    5f32:	23ff      	movs	r3, #255	; 0xff
    5f34:	b258      	sxtb	r0, r3
    5f36:	e003      	b.n	5f40 <_ZN2GI3Dev3I2c2WREhPhjS2_j+0x6c>
		if(!ReceiveBytes)
			stat = i2c_master_write_packet_wait((struct i2c_master_module *)udata, &packet);
		else
			stat = i2c_master_write_packet_wait_no_stop((struct i2c_master_module *)udata, &packet);
	}
	if (ReceiveBytes && stat == STATUS_OK)
    5f38:	9909      	ldr	r1, [sp, #36]	; 0x24
    5f3a:	2900      	cmp	r1, #0
    5f3c:	d1e6      	bne.n	5f0c <_ZN2GI3Dev3I2c2WREhPhjS2_j+0x38>
    5f3e:	e7f6      	b.n	5f2e <_ZN2GI3Dev3I2c2WREhPhjS2_j+0x5a>
	case STATUS_BUSY:
		return SYS_ERR_BUSY;
	default:
		return SYS_ERR_UNKNOWN;
	}
}
    5f40:	b005      	add	sp, #20
    5f42:	bd30      	pop	{r4, r5, pc}
    5f44:	0000040d 	.word	0x0000040d
    5f48:	0000041d 	.word	0x0000041d
    5f4c:	000003fd 	.word	0x000003fd

00005f50 <_ZN2GI3Dev3I2c10writeBytesEhPhj>:
		return SYS_ERR_NAK;
}

/*#####################################################*/
int GI::Dev::I2c::writeBytes(unsigned char addr, unsigned char *buff, unsigned int len)
{
    5f50:	b530      	push	{r4, r5, lr}
    5f52:	b083      	sub	sp, #12
    5f54:	1c1d      	adds	r5, r3, #0
	if (!this)
    5f56:	2800      	cmp	r0, #0
    5f58:	d00a      	beq.n	5f70 <_ZN2GI3Dev3I2c10writeBytesEhPhj+0x20>
#if (USE_DRIVER_SEMAPHORE == true)
	while (twi_semaphore[unitNr])
		;
	twi_semaphore[unitNr] = true;
#endif
	SysErr result = WR(addr << 1, buff, len, NULL, 0);
    5f5a:	0049      	lsls	r1, r1, #1
    5f5c:	b2c9      	uxtb	r1, r1
    5f5e:	2400      	movs	r4, #0
    5f60:	9400      	str	r4, [sp, #0]
    5f62:	9401      	str	r4, [sp, #4]
    5f64:	4c06      	ldr	r4, [pc, #24]	; (5f80 <_ZN2GI3Dev3I2c10writeBytesEhPhj+0x30>)
    5f66:	47a0      	blx	r4
#if (USE_DRIVER_SEMAPHORE == true)
	twi_semaphore[unitNr] = false;
#endif
	if (result == SYS_ERR_OK)
    5f68:	2800      	cmp	r0, #0
    5f6a:	d104      	bne.n	5f76 <_ZN2GI3Dev3I2c10writeBytesEhPhj+0x26>
		return len;
    5f6c:	1c28      	adds	r0, r5, #0
    5f6e:	e004      	b.n	5f7a <_ZN2GI3Dev3I2c10writeBytesEhPhj+0x2a>

/*#####################################################*/
int GI::Dev::I2c::writeBytes(unsigned char addr, unsigned char *buff, unsigned int len)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
    5f70:	2002      	movs	r0, #2
    5f72:	4240      	negs	r0, r0
    5f74:	e001      	b.n	5f7a <_ZN2GI3Dev3I2c10writeBytesEhPhj+0x2a>
	twi_semaphore[unitNr] = false;
#endif
	if (result == SYS_ERR_OK)
		return len;
	else
		return SYS_ERR_NAK;
    5f76:	200d      	movs	r0, #13
    5f78:	4240      	negs	r0, r0
}
    5f7a:	b003      	add	sp, #12
    5f7c:	bd30      	pop	{r4, r5, pc}
    5f7e:	46c0      	nop			; (mov r8, r8)
    5f80:	00005ed5 	.word	0x00005ed5

00005f84 <_ZN2GI3Dev3Spi10writeBytesEPhj>:
		return len;
	return status;
}
/*#####################################################*/
int GI::Dev::Spi::writeBytes(unsigned char *buff, unsigned int len)
{
    5f84:	b538      	push	{r3, r4, r5, lr}
    5f86:	1c04      	adds	r4, r0, #0
    5f88:	1c15      	adds	r5, r2, #0
	if (!this)
    5f8a:	2800      	cmp	r0, #0
    5f8c:	d105      	bne.n	5f9a <_ZN2GI3Dev3Spi10writeBytesEPhj+0x16>
	{
		err = SYS_ERR_INVALID_HANDLER;
    5f8e:	22fe      	movs	r2, #254	; 0xfe
    5f90:	2300      	movs	r3, #0
    5f92:	701a      	strb	r2, [r3, #0]
		return SYS_ERR_INVALID_HANDLER;
    5f94:	2002      	movs	r0, #2
    5f96:	4240      	negs	r0, r0
    5f98:	e03e      	b.n	6018 <_ZN2GI3Dev3Spi10writeBytesEPhj+0x94>
	}
#if (USE_DRIVER_SEMAPHORE == true)
	if (!spi_semaphore[unitNr])
    5f9a:	2329      	movs	r3, #41	; 0x29
    5f9c:	5cc3      	ldrb	r3, [r0, r3]
    5f9e:	4a1f      	ldr	r2, [pc, #124]	; (601c <_ZN2GI3Dev3Spi10writeBytesEPhj+0x98>)
    5fa0:	5cd3      	ldrb	r3, [r2, r3]
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	d036      	beq.n	6014 <_ZN2GI3Dev3Spi10writeBytesEPhj+0x90>
		return SYS_ERR_BUSY;
#endif
	if (!DisableCsHandle)
    5fa6:	2338      	movs	r3, #56	; 0x38
    5fa8:	5cc3      	ldrb	r3, [r0, r3]
    5faa:	2b00      	cmp	r3, #0
    5fac:	d10d      	bne.n	5fca <_ZN2GI3Dev3Spi10writeBytesEPhj+0x46>
	{
		port_pin_set_output_level(cfg.cs, 0);
    5fae:	7f03      	ldrb	r3, [r0, #28]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5fb0:	09d8      	lsrs	r0, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    5fb2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5fb4:	2800      	cmp	r0, #0
    5fb6:	d103      	bne.n	5fc0 <_ZN2GI3Dev3Spi10writeBytesEPhj+0x3c>
		return &(ports[port_index]->Group[group_index]);
    5fb8:	095a      	lsrs	r2, r3, #5
    5fba:	01d2      	lsls	r2, r2, #7
    5fbc:	4818      	ldr	r0, [pc, #96]	; (6020 <_ZN2GI3Dev3Spi10writeBytesEPhj+0x9c>)
    5fbe:	1812      	adds	r2, r2, r0
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5fc0:	201f      	movs	r0, #31
    5fc2:	4003      	ands	r3, r0
    5fc4:	2001      	movs	r0, #1
    5fc6:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    5fc8:	6150      	str	r0, [r2, #20]
	}
	
	SysErr status = SYS_ERR_OK;
	if (spi_write_buffer_wait(((struct spi_module *)userData), buff, len) != STATUS_OK)
    5fca:	b2aa      	uxth	r2, r5
    5fcc:	6c20      	ldr	r0, [r4, #64]	; 0x40
    5fce:	4b15      	ldr	r3, [pc, #84]	; (6024 <_ZN2GI3Dev3Spi10writeBytesEPhj+0xa0>)
    5fd0:	4798      	blx	r3
    5fd2:	1c03      	adds	r3, r0, #0
    5fd4:	1e58      	subs	r0, r3, #1
    5fd6:	4183      	sbcs	r3, r0
    5fd8:	425b      	negs	r3, r3
    5fda:	b2db      	uxtb	r3, r3
		status = SYS_ERR_UNKNOWN;

	if (!DisableCsHandle)
    5fdc:	2238      	movs	r2, #56	; 0x38
    5fde:	5ca2      	ldrb	r2, [r4, r2]
    5fe0:	2a00      	cmp	r2, #0
    5fe2:	d10d      	bne.n	6000 <_ZN2GI3Dev3Spi10writeBytesEPhj+0x7c>
	{
		port_pin_set_output_level(cfg.cs, 1);
    5fe4:	7f22      	ldrb	r2, [r4, #28]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5fe6:	09d0      	lsrs	r0, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    5fe8:	2100      	movs	r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5fea:	2800      	cmp	r0, #0
    5fec:	d103      	bne.n	5ff6 <_ZN2GI3Dev3Spi10writeBytesEPhj+0x72>
		return &(ports[port_index]->Group[group_index]);
    5fee:	0951      	lsrs	r1, r2, #5
    5ff0:	01c9      	lsls	r1, r1, #7
    5ff2:	480b      	ldr	r0, [pc, #44]	; (6020 <_ZN2GI3Dev3Spi10writeBytesEPhj+0x9c>)
    5ff4:	1809      	adds	r1, r1, r0
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ff6:	201f      	movs	r0, #31
    5ff8:	4002      	ands	r2, r0
    5ffa:	2001      	movs	r0, #1
    5ffc:	4090      	lsls	r0, r2

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    5ffe:	6188      	str	r0, [r1, #24]
	}
#if (USE_DRIVER_SEMAPHORE == true)
	spi_semaphore[unitNr] = false;
    6000:	2229      	movs	r2, #41	; 0x29
    6002:	5ca2      	ldrb	r2, [r4, r2]
    6004:	2000      	movs	r0, #0
    6006:	4905      	ldr	r1, [pc, #20]	; (601c <_ZN2GI3Dev3Spi10writeBytesEPhj+0x98>)
    6008:	5488      	strb	r0, [r1, r2]
#endif
	if(status == SYS_ERR_OK)
		return len;
    600a:	1c28      	adds	r0, r5, #0
		port_pin_set_output_level(cfg.cs, 1);
	}
#if (USE_DRIVER_SEMAPHORE == true)
	spi_semaphore[unitNr] = false;
#endif
	if(status == SYS_ERR_OK)
    600c:	2b00      	cmp	r3, #0
    600e:	d003      	beq.n	6018 <_ZN2GI3Dev3Spi10writeBytesEPhj+0x94>
		return len;
	return status;
    6010:	b258      	sxtb	r0, r3
    6012:	e001      	b.n	6018 <_ZN2GI3Dev3Spi10writeBytesEPhj+0x94>
		err = SYS_ERR_INVALID_HANDLER;
		return SYS_ERR_INVALID_HANDLER;
	}
#if (USE_DRIVER_SEMAPHORE == true)
	if (!spi_semaphore[unitNr])
		return SYS_ERR_BUSY;
    6014:	200e      	movs	r0, #14
    6016:	4240      	negs	r0, r0
	spi_semaphore[unitNr] = false;
#endif
	if(status == SYS_ERR_OK)
		return len;
	return status;
}
    6018:	bd38      	pop	{r3, r4, r5, pc}
    601a:	46c0      	nop			; (mov r8, r8)
    601c:	2000064c 	.word	0x2000064c
    6020:	41004400 	.word	0x41004400
    6024:	000006d1 	.word	0x000006d1

00006028 <_ZN2GI3Dev4UartC1EPKc>:
		&USARTF1
#endif
		};*/

/*#####################################################*/
GI::Dev::Uart::Uart(const char *path)
    6028:	b5f0      	push	{r4, r5, r6, r7, lr}
    602a:	4647      	mov	r7, r8
    602c:	b480      	push	{r7}
    602e:	b090      	sub	sp, #64	; 0x40
    6030:	4680      	mov	r8, r0
    6032:	1c0d      	adds	r5, r1, #0
{
	memset(this, 0, sizeof(*this));
    6034:	2100      	movs	r1, #0
    6036:	222c      	movs	r2, #44	; 0x2c
    6038:	4b77      	ldr	r3, [pc, #476]	; (6218 <_ZN2GI3Dev4UartC1EPKc+0x1f0>)
    603a:	4798      	blx	r3
    603c:	4c77      	ldr	r4, [pc, #476]	; (621c <_ZN2GI3Dev4UartC1EPKc+0x1f4>)
		if(uartCfg[item_nr].name == NULL)
		{
			err = SYS_ERR_INVALID_PATH;
			return;
		}
		if(!strcmp(uartCfg[item_nr].name, path))
    603e:	4e78      	ldr	r6, [pc, #480]	; (6220 <_ZN2GI3Dev4UartC1EPKc+0x1f8>)
    6040:	1c27      	adds	r7, r4, #0
    6042:	1c20      	adds	r0, r4, #0
    6044:	1c29      	adds	r1, r5, #0
    6046:	47b0      	blx	r6
    6048:	341c      	adds	r4, #28
    604a:	2800      	cmp	r0, #0
    604c:	d1f8      	bne.n	6040 <_ZN2GI3Dev4UartC1EPKc+0x18>
			break;
		item_nr++;
	}

	if(strncmp(path, (char *)"uart-", sizeof("uart-") - 1) && strncmp(path, (char *)"usbcdc-", sizeof("usbcdc-") - 1))
    604e:	1c28      	adds	r0, r5, #0
    6050:	4974      	ldr	r1, [pc, #464]	; (6224 <_ZN2GI3Dev4UartC1EPKc+0x1fc>)
    6052:	2205      	movs	r2, #5
    6054:	4b74      	ldr	r3, [pc, #464]	; (6228 <_ZN2GI3Dev4UartC1EPKc+0x200>)
    6056:	4798      	blx	r3
    6058:	2800      	cmp	r0, #0
    605a:	d00a      	beq.n	6072 <_ZN2GI3Dev4UartC1EPKc+0x4a>
    605c:	1c28      	adds	r0, r5, #0
    605e:	4973      	ldr	r1, [pc, #460]	; (622c <_ZN2GI3Dev4UartC1EPKc+0x204>)
    6060:	2207      	movs	r2, #7
    6062:	4b71      	ldr	r3, [pc, #452]	; (6228 <_ZN2GI3Dev4UartC1EPKc+0x200>)
    6064:	4798      	blx	r3
    6066:	2800      	cmp	r0, #0
    6068:	d03f      	beq.n	60ea <_ZN2GI3Dev4UartC1EPKc+0xc2>
	{
		err = SYS_ERR_INVALID_PATH;
    606a:	23f5      	movs	r3, #245	; 0xf5
    606c:	4640      	mov	r0, r8
    606e:	7003      	strb	r3, [r0, #0]
		return;
    6070:	e0cc      	b.n	620c <_ZN2GI3Dev4UartC1EPKc+0x1e4>
	}
	if(!strncmp(path, (char *)"uart-", sizeof("uart-") - 1))
	{
		unsigned char dev_nr = path[sizeof("uart-") - 1] - '0';
    6072:	796a      	ldrb	r2, [r5, #5]
    6074:	3a30      	subs	r2, #48	; 0x30
    6076:	b2d2      	uxtb	r2, r2
		if(dev_nr >= UART_INTERFACE_COUNT)
    6078:	2a05      	cmp	r2, #5
    607a:	d903      	bls.n	6084 <_ZN2GI3Dev4UartC1EPKc+0x5c>
		{
			err = SYS_ERR_INVALID_PATH;
    607c:	23f5      	movs	r3, #245	; 0xf5
    607e:	4641      	mov	r1, r8
    6080:	700b      	strb	r3, [r1, #0]
			return;
    6082:	e0c3      	b.n	620c <_ZN2GI3Dev4UartC1EPKc+0x1e4>
		}
		unitNr = dev_nr;
    6084:	2321      	movs	r3, #33	; 0x21
    6086:	4644      	mov	r4, r8
    6088:	54e2      	strb	r2, [r4, r3]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    608a:	2380      	movs	r3, #128	; 0x80
    608c:	05db      	lsls	r3, r3, #23
    608e:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6090:	2300      	movs	r3, #0
    6092:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    6094:	21ff      	movs	r1, #255	; 0xff
    6096:	466d      	mov	r5, sp
    6098:	8129      	strh	r1, [r5, #8]
	config->stopbits         = USART_STOPBITS_1;
    609a:	2100      	movs	r1, #0
    609c:	72ab      	strb	r3, [r5, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    609e:	72eb      	strb	r3, [r5, #11]
	config->baudrate         = 9600;
    60a0:	2096      	movs	r0, #150	; 0x96
    60a2:	0180      	lsls	r0, r0, #6
    60a4:	9008      	str	r0, [sp, #32]
	config->receiver_enable  = true;
    60a6:	2001      	movs	r0, #1
    60a8:	2424      	movs	r4, #36	; 0x24
    60aa:	5528      	strb	r0, [r5, r4]
	config->transmitter_enable = true;
    60ac:	2425      	movs	r4, #37	; 0x25
    60ae:	5528      	strb	r0, [r5, r4]
	config->clock_polarity_inverted = false;
    60b0:	2026      	movs	r0, #38	; 0x26
    60b2:	542b      	strb	r3, [r5, r0]
	config->use_external_clock = false;
    60b4:	2027      	movs	r0, #39	; 0x27
    60b6:	542b      	strb	r3, [r5, r0]
	config->ext_clock_freq   = 0;
    60b8:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    60ba:	2088      	movs	r0, #136	; 0x88
    60bc:	0340      	lsls	r0, r0, #13
    60be:	9003      	str	r0, [sp, #12]
	config->run_in_standby   = false;
    60c0:	202c      	movs	r0, #44	; 0x2c
    60c2:	542b      	strb	r3, [r5, r0]
	config->generator_source = GCLK_GENERATOR_0;
    60c4:	202d      	movs	r0, #45	; 0x2d
    60c6:	542b      	strb	r3, [r5, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
    60c8:	930e      	str	r3, [sp, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    60ca:	930f      	str	r3, [sp, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    60cc:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    60ce:	822b      	strh	r3, [r5, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    60d0:	76eb      	strb	r3, [r5, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    60d2:	7629      	strb	r1, [r5, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    60d4:	7729      	strb	r1, [r5, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    60d6:	7669      	strb	r1, [r5, #25]
	config->receive_pulse_length                        = 19;
    60d8:	2313      	movs	r3, #19
    60da:	76ab      	strb	r3, [r5, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    60dc:	7769      	strb	r1, [r5, #29]

	struct usart_config usart_conf;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&usart_conf);
	Sercom *hw;
	switch (unitNr)
    60de:	2a05      	cmp	r2, #5
    60e0:	d82b      	bhi.n	613a <_ZN2GI3Dev4UartC1EPKc+0x112>
    60e2:	0092      	lsls	r2, r2, #2
    60e4:	4b52      	ldr	r3, [pc, #328]	; (6230 <_ZN2GI3Dev4UartC1EPKc+0x208>)
    60e6:	589b      	ldr	r3, [r3, r2]
    60e8:	469f      	mov	pc, r3
		}
		unitNr = dev_nr;
	}
	else
	{
		err = SYS_ERR_INVALID_PARAM;
    60ea:	23fa      	movs	r3, #250	; 0xfa
    60ec:	4641      	mov	r1, r8
    60ee:	700b      	strb	r3, [r1, #0]
		return;
    60f0:	e08c      	b.n	620c <_ZN2GI3Dev4UartC1EPKc+0x1e4>
	Sercom *hw;
	switch (unitNr)
	{
	case 0:
		hw = SERCOM0;
		usart_conf.pinmux_pad0 = SERCOM0_PAD0_DEFAULT;
    60f2:	4b50      	ldr	r3, [pc, #320]	; (6234 <_ZN2GI3Dev4UartC1EPKc+0x20c>)
    60f4:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM0_PAD1_DEFAULT;
    60f6:	4b50      	ldr	r3, [pc, #320]	; (6238 <_ZN2GI3Dev4UartC1EPKc+0x210>)
    60f8:	930d      	str	r3, [sp, #52]	; 0x34
	usart_get_config_defaults(&usart_conf);
	Sercom *hw;
	switch (unitNr)
	{
	case 0:
		hw = SERCOM0;
    60fa:	4d50      	ldr	r5, [pc, #320]	; (623c <_ZN2GI3Dev4UartC1EPKc+0x214>)
		usart_conf.pinmux_pad0 = SERCOM0_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM0_PAD1_DEFAULT;
		break;
    60fc:	e021      	b.n	6142 <_ZN2GI3Dev4UartC1EPKc+0x11a>
	case 1:
		hw = SERCOM1;
		usart_conf.pinmux_pad0 = SERCOM1_PAD0_DEFAULT;
    60fe:	2303      	movs	r3, #3
    6100:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM1_PAD1_DEFAULT;
    6102:	4b4f      	ldr	r3, [pc, #316]	; (6240 <_ZN2GI3Dev4UartC1EPKc+0x218>)
    6104:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM0;
		usart_conf.pinmux_pad0 = SERCOM0_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM0_PAD1_DEFAULT;
		break;
	case 1:
		hw = SERCOM1;
    6106:	4d4f      	ldr	r5, [pc, #316]	; (6244 <_ZN2GI3Dev4UartC1EPKc+0x21c>)
		usart_conf.pinmux_pad0 = SERCOM1_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM1_PAD1_DEFAULT;
		break;
    6108:	e01b      	b.n	6142 <_ZN2GI3Dev4UartC1EPKc+0x11a>
	case 2:
		hw = SERCOM2;
		usart_conf.pinmux_pad0 = SERCOM2_PAD0_DEFAULT;
    610a:	4b4f      	ldr	r3, [pc, #316]	; (6248 <_ZN2GI3Dev4UartC1EPKc+0x220>)
    610c:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM2_PAD1_DEFAULT;
    610e:	4b4f      	ldr	r3, [pc, #316]	; (624c <_ZN2GI3Dev4UartC1EPKc+0x224>)
    6110:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM1;
		usart_conf.pinmux_pad0 = SERCOM1_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM1_PAD1_DEFAULT;
		break;
	case 2:
		hw = SERCOM2;
    6112:	4d4f      	ldr	r5, [pc, #316]	; (6250 <_ZN2GI3Dev4UartC1EPKc+0x228>)
		usart_conf.pinmux_pad0 = SERCOM2_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM2_PAD1_DEFAULT;
		break;
    6114:	e015      	b.n	6142 <_ZN2GI3Dev4UartC1EPKc+0x11a>
	case 3:
		hw = SERCOM3;
		usart_conf.pinmux_pad0 = SERCOM3_PAD0_DEFAULT;
    6116:	4b4f      	ldr	r3, [pc, #316]	; (6254 <_ZN2GI3Dev4UartC1EPKc+0x22c>)
    6118:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM3_PAD1_DEFAULT;
    611a:	4b4f      	ldr	r3, [pc, #316]	; (6258 <_ZN2GI3Dev4UartC1EPKc+0x230>)
    611c:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM2;
		usart_conf.pinmux_pad0 = SERCOM2_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM2_PAD1_DEFAULT;
		break;
	case 3:
		hw = SERCOM3;
    611e:	4d4f      	ldr	r5, [pc, #316]	; (625c <_ZN2GI3Dev4UartC1EPKc+0x234>)
		usart_conf.pinmux_pad0 = SERCOM3_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM3_PAD1_DEFAULT;
		break;
    6120:	e00f      	b.n	6142 <_ZN2GI3Dev4UartC1EPKc+0x11a>
	case 4:
		hw = SERCOM4;
		usart_conf.pinmux_pad0 = SERCOM4_PAD0_DEFAULT;
    6122:	4b4f      	ldr	r3, [pc, #316]	; (6260 <_ZN2GI3Dev4UartC1EPKc+0x238>)
    6124:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM4_PAD1_DEFAULT;
    6126:	4b4f      	ldr	r3, [pc, #316]	; (6264 <_ZN2GI3Dev4UartC1EPKc+0x23c>)
    6128:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM3;
		usart_conf.pinmux_pad0 = SERCOM3_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM3_PAD1_DEFAULT;
		break;
	case 4:
		hw = SERCOM4;
    612a:	4d4f      	ldr	r5, [pc, #316]	; (6268 <_ZN2GI3Dev4UartC1EPKc+0x240>)
		usart_conf.pinmux_pad0 = SERCOM4_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM4_PAD1_DEFAULT;
		break;
    612c:	e009      	b.n	6142 <_ZN2GI3Dev4UartC1EPKc+0x11a>
	case 5:
		hw = SERCOM5;
		usart_conf.pinmux_pad0 = SERCOM5_PAD0_DEFAULT;
    612e:	4b4f      	ldr	r3, [pc, #316]	; (626c <_ZN2GI3Dev4UartC1EPKc+0x244>)
    6130:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM5_PAD1_DEFAULT;
    6132:	4b4f      	ldr	r3, [pc, #316]	; (6270 <_ZN2GI3Dev4UartC1EPKc+0x248>)
    6134:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM4;
		usart_conf.pinmux_pad0 = SERCOM4_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM4_PAD1_DEFAULT;
		break;
	case 5:
		hw = SERCOM5;
    6136:	4d4f      	ldr	r5, [pc, #316]	; (6274 <_ZN2GI3Dev4UartC1EPKc+0x24c>)
		usart_conf.pinmux_pad0 = SERCOM5_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM5_PAD1_DEFAULT;
		break;
    6138:	e003      	b.n	6142 <_ZN2GI3Dev4UartC1EPKc+0x11a>
	default:
		err = SYS_ERR_DEVICE_NOT_FOUND;
    613a:	23ea      	movs	r3, #234	; 0xea
    613c:	4642      	mov	r2, r8
    613e:	7013      	strb	r3, [r2, #0]
		return;
    6140:	e064      	b.n	620c <_ZN2GI3Dev4UartC1EPKc+0x1e4>
	}

	memset(this, 0, sizeof(*this));
    6142:	4640      	mov	r0, r8
    6144:	2100      	movs	r1, #0
    6146:	222c      	movs	r2, #44	; 0x2c
    6148:	4b33      	ldr	r3, [pc, #204]	; (6218 <_ZN2GI3Dev4UartC1EPKc+0x1f0>)
    614a:	4798      	blx	r3
	memcpy(&cfg, &uartCfg[item_nr], sizeof(CfgUart));
    614c:	4640      	mov	r0, r8
    614e:	3004      	adds	r0, #4
    6150:	1c39      	adds	r1, r7, #0
    6152:	221c      	movs	r2, #28
    6154:	4b48      	ldr	r3, [pc, #288]	; (6278 <_ZN2GI3Dev4UartC1EPKc+0x250>)
    6156:	4798      	blx	r3
	
	struct usart_module *uart_module = (struct usart_module *)calloc(1, sizeof(struct usart_module));
    6158:	2001      	movs	r0, #1
    615a:	2134      	movs	r1, #52	; 0x34
    615c:	4b47      	ldr	r3, [pc, #284]	; (627c <_ZN2GI3Dev4UartC1EPKc+0x254>)
    615e:	4798      	blx	r3
    6160:	1e04      	subs	r4, r0, #0
	if(!uart_module)
    6162:	d103      	bne.n	616c <_ZN2GI3Dev4UartC1EPKc+0x144>
	{
		err = SYS_ERR_OUT_OF_MEMORY;
    6164:	23fd      	movs	r3, #253	; 0xfd
    6166:	4644      	mov	r4, r8
    6168:	7023      	strb	r3, [r4, #0]
		return;
    616a:	e04f      	b.n	620c <_ZN2GI3Dev4UartC1EPKc+0x1e4>
	}
	
	udata = (void *)uart_module;
    616c:	4640      	mov	r0, r8
    616e:	6284      	str	r4, [r0, #40]	; 0x28
	usart_conf.mux_setting = USART_RX_1_TX_0_XCK_1;
    6170:	2380      	movs	r3, #128	; 0x80
    6172:	035b      	lsls	r3, r3, #13
    6174:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad2 = PINMUX_UNUSED;
    6176:	2301      	movs	r3, #1
    6178:	425b      	negs	r3, r3
    617a:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = PINMUX_UNUSED;
    617c:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = cfg.speed;
    617e:	6981      	ldr	r1, [r0, #24]
    6180:	9108      	str	r1, [sp, #32]

	if( cfg.parity == CfgUart::PAR_EVEN)
    6182:	7f83      	ldrb	r3, [r0, #30]
    6184:	2b02      	cmp	r3, #2
    6186:	d103      	bne.n	6190 <_ZN2GI3Dev4UartC1EPKc+0x168>
		usart_conf.parity = USART_PARITY_EVEN;
    6188:	2300      	movs	r3, #0
    618a:	466a      	mov	r2, sp
    618c:	8113      	strh	r3, [r2, #8]
    618e:	e005      	b.n	619c <_ZN2GI3Dev4UartC1EPKc+0x174>
	else if( cfg.parity == CfgUart::PAR_ODD)
    6190:	2b01      	cmp	r3, #1
    6192:	d103      	bne.n	619c <_ZN2GI3Dev4UartC1EPKc+0x174>
		usart_conf.parity = USART_PARITY_ODD;
    6194:	2380      	movs	r3, #128	; 0x80
    6196:	019b      	lsls	r3, r3, #6
    6198:	4668      	mov	r0, sp
    619a:	8103      	strh	r3, [r0, #8]

	if(cfg.wordLen == CfgUart::WORD_LEN_5)
    619c:	4641      	mov	r1, r8
    619e:	7f0b      	ldrb	r3, [r1, #28]
    61a0:	2b00      	cmp	r3, #0
    61a2:	d103      	bne.n	61ac <_ZN2GI3Dev4UartC1EPKc+0x184>
		usart_conf.character_size = USART_CHARACTER_SIZE_5BIT;
    61a4:	2305      	movs	r3, #5
    61a6:	466a      	mov	r2, sp
    61a8:	72d3      	strb	r3, [r2, #11]
    61aa:	e010      	b.n	61ce <_ZN2GI3Dev4UartC1EPKc+0x1a6>
	else if(cfg.wordLen == CfgUart::WORD_LEN_6)
    61ac:	2b01      	cmp	r3, #1
    61ae:	d103      	bne.n	61b8 <_ZN2GI3Dev4UartC1EPKc+0x190>
		usart_conf.character_size = USART_CHARACTER_SIZE_6BIT;
    61b0:	2306      	movs	r3, #6
    61b2:	4668      	mov	r0, sp
    61b4:	72c3      	strb	r3, [r0, #11]
    61b6:	e00a      	b.n	61ce <_ZN2GI3Dev4UartC1EPKc+0x1a6>
	else if(cfg.wordLen == CfgUart::WORD_LEN_7)
    61b8:	2b02      	cmp	r3, #2
    61ba:	d103      	bne.n	61c4 <_ZN2GI3Dev4UartC1EPKc+0x19c>
		usart_conf.character_size = USART_CHARACTER_SIZE_7BIT;
    61bc:	2307      	movs	r3, #7
    61be:	4669      	mov	r1, sp
    61c0:	72cb      	strb	r3, [r1, #11]
    61c2:	e004      	b.n	61ce <_ZN2GI3Dev4UartC1EPKc+0x1a6>
	else if(cfg.wordLen == CfgUart::WORD_LEN_9)
    61c4:	2b04      	cmp	r3, #4
    61c6:	d102      	bne.n	61ce <_ZN2GI3Dev4UartC1EPKc+0x1a6>
		usart_conf.character_size = USART_CHARACTER_SIZE_9BIT;
    61c8:	2301      	movs	r3, #1
    61ca:	466a      	mov	r2, sp
    61cc:	72d3      	strb	r3, [r2, #11]

	if(cfg.stopBits == CfgUart::STOP_BITS_TWO)
    61ce:	4640      	mov	r0, r8
    61d0:	7f43      	ldrb	r3, [r0, #29]
    61d2:	2b01      	cmp	r3, #1
    61d4:	d102      	bne.n	61dc <_ZN2GI3Dev4UartC1EPKc+0x1b4>
		usart_conf.stopbits = USART_STOPBITS_2;
    61d6:	2340      	movs	r3, #64	; 0x40
    61d8:	4669      	mov	r1, sp
    61da:	728b      	strb	r3, [r1, #10]

	usart_init(uart_module, hw, &usart_conf);
    61dc:	1c20      	adds	r0, r4, #0
    61de:	1c29      	adds	r1, r5, #0
    61e0:	466a      	mov	r2, sp
    61e2:	4b27      	ldr	r3, [pc, #156]	; (6280 <_ZN2GI3Dev4UartC1EPKc+0x258>)
    61e4:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    61e6:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    61e8:	1c28      	adds	r0, r5, #0
    61ea:	4b26      	ldr	r3, [pc, #152]	; (6284 <_ZN2GI3Dev4UartC1EPKc+0x25c>)
    61ec:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    61ee:	231f      	movs	r3, #31
    61f0:	4018      	ands	r0, r3
    61f2:	2301      	movs	r3, #1
    61f4:	4083      	lsls	r3, r0
    61f6:	1c18      	adds	r0, r3, #0
    61f8:	4b23      	ldr	r3, [pc, #140]	; (6288 <_ZN2GI3Dev4UartC1EPKc+0x260>)
    61fa:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    61fc:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    61fe:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    6200:	2b00      	cmp	r3, #0
    6202:	d1fc      	bne.n	61fe <_ZN2GI3Dev4UartC1EPKc+0x1d6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6204:	682a      	ldr	r2, [r5, #0]
    6206:	2302      	movs	r3, #2
    6208:	4313      	orrs	r3, r2
    620a:	602b      	str	r3, [r5, #0]
	usart_enable(uart_module);
}
    620c:	4640      	mov	r0, r8
    620e:	b010      	add	sp, #64	; 0x40
    6210:	bc04      	pop	{r2}
    6212:	4690      	mov	r8, r2
    6214:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6216:	46c0      	nop			; (mov r8, r8)
    6218:	00006635 	.word	0x00006635
    621c:	20000058 	.word	0x20000058
    6220:	000067ef 	.word	0x000067ef
    6224:	00007184 	.word	0x00007184
    6228:	00006821 	.word	0x00006821
    622c:	0000718c 	.word	0x0000718c
    6230:	0000716c 	.word	0x0000716c
    6234:	00040003 	.word	0x00040003
    6238:	00050003 	.word	0x00050003
    623c:	42000800 	.word	0x42000800
    6240:	00010003 	.word	0x00010003
    6244:	42000c00 	.word	0x42000c00
    6248:	00080003 	.word	0x00080003
    624c:	00090003 	.word	0x00090003
    6250:	42001000 	.word	0x42001000
    6254:	00100003 	.word	0x00100003
    6258:	00110003 	.word	0x00110003
    625c:	42001400 	.word	0x42001400
    6260:	000c0003 	.word	0x000c0003
    6264:	000d0003 	.word	0x000d0003
    6268:	42001800 	.word	0x42001800
    626c:	00160003 	.word	0x00160003
    6270:	00170003 	.word	0x00170003
    6274:	42001c00 	.word	0x42001c00
    6278:	000065f1 	.word	0x000065f1
    627c:	00006545 	.word	0x00006545
    6280:	000012a1 	.word	0x000012a1
    6284:	00001215 	.word	0x00001215
    6288:	e000e100 	.word	0xe000e100

0000628c <_ZN2GI3Dev4Uart7putCharEh>:
		*pBits = CfgUart::PAR_NONE;*/
	return SYS_ERR_OK;
}
/*#####################################################*/
void GI::Dev::Uart::putChar(unsigned char byteTx)
{
    628c:	b570      	push	{r4, r5, r6, lr}
    628e:	1c04      	adds	r4, r0, #0
    6290:	1c0e      	adds	r6, r1, #0
#if (USE_DRIVER_SEMAPHORE == true)
	while (uart_semaphore[unitNr]);
    6292:	2321      	movs	r3, #33	; 0x21
    6294:	5cc2      	ldrb	r2, [r0, r3]
    6296:	4909      	ldr	r1, [pc, #36]	; (62bc <_ZN2GI3Dev4Uart7putCharEh+0x30>)
    6298:	5c8b      	ldrb	r3, [r1, r2]
    629a:	2b00      	cmp	r3, #0
    629c:	d1fc      	bne.n	6298 <_ZN2GI3Dev4Uart7putCharEh+0xc>
	uart_semaphore[unitNr] = true;
    629e:	2101      	movs	r1, #1
    62a0:	4b06      	ldr	r3, [pc, #24]	; (62bc <_ZN2GI3Dev4Uart7putCharEh+0x30>)
    62a2:	5499      	strb	r1, [r3, r2]
	{
		while(((GI::Dev::UsbDCdc *)udata)->tx(&byteTx, 1) != 1);
	}
	else*/
	//{
		while(STATUS_OK !=usart_write_wait((struct usart_module *)udata, byteTx));
    62a4:	4d06      	ldr	r5, [pc, #24]	; (62c0 <_ZN2GI3Dev4Uart7putCharEh+0x34>)
    62a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    62a8:	1c31      	adds	r1, r6, #0
    62aa:	47a8      	blx	r5
    62ac:	2800      	cmp	r0, #0
    62ae:	d1fa      	bne.n	62a6 <_ZN2GI3Dev4Uart7putCharEh+0x1a>
	//}
#if (USE_DRIVER_SEMAPHORE == true)
	uart_semaphore[unitNr] = false;
    62b0:	2321      	movs	r3, #33	; 0x21
    62b2:	5ce3      	ldrb	r3, [r4, r3]
    62b4:	2100      	movs	r1, #0
    62b6:	4a01      	ldr	r2, [pc, #4]	; (62bc <_ZN2GI3Dev4Uart7putCharEh+0x30>)
    62b8:	54d1      	strb	r1, [r2, r3]
#endif
}
    62ba:	bd70      	pop	{r4, r5, r6, pc}
    62bc:	20000650 	.word	0x20000650
    62c0:	000015a9 	.word	0x000015a9

000062c4 <_ZN2GI3Dev4Uart9getCharNbEv>:
#endif
	return true;
}
/*#####################################################*/
signed short GI::Dev::Uart::getCharNb()
{
    62c4:	b510      	push	{r4, lr}
    62c6:	b082      	sub	sp, #8
    62c8:	1c04      	adds	r4, r0, #0
	unsigned short data = 0;
    62ca:	2200      	movs	r2, #0
    62cc:	466b      	mov	r3, sp
    62ce:	80da      	strh	r2, [r3, #6]
#if (USE_DRIVER_SEMAPHORE == true)
	while (uart_semaphore[unitNr]);
    62d0:	2321      	movs	r3, #33	; 0x21
    62d2:	5cc2      	ldrb	r2, [r0, r3]
    62d4:	490f      	ldr	r1, [pc, #60]	; (6314 <_ZN2GI3Dev4Uart9getCharNbEv+0x50>)
    62d6:	5c8b      	ldrb	r3, [r1, r2]
    62d8:	2b00      	cmp	r3, #0
    62da:	d1fc      	bne.n	62d6 <_ZN2GI3Dev4Uart9getCharNbEv+0x12>
	uart_semaphore[unitNr] = true;
    62dc:	2101      	movs	r1, #1
    62de:	4b0d      	ldr	r3, [pc, #52]	; (6314 <_ZN2GI3Dev4Uart9getCharNbEv+0x50>)
    62e0:	5499      	strb	r1, [r3, r2]
#endif
	if (STATUS_OK != usart_read_wait((struct usart_module *)udata, &data))
    62e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    62e4:	4669      	mov	r1, sp
    62e6:	3106      	adds	r1, #6
    62e8:	4b0b      	ldr	r3, [pc, #44]	; (6318 <_ZN2GI3Dev4Uart9getCharNbEv+0x54>)
    62ea:	4798      	blx	r3
    62ec:	2800      	cmp	r0, #0
    62ee:	d006      	beq.n	62fe <_ZN2GI3Dev4Uart9getCharNbEv+0x3a>
	{
#if (USE_DRIVER_SEMAPHORE == true)
			uart_semaphore[unitNr] = false;
    62f0:	2321      	movs	r3, #33	; 0x21
    62f2:	5ce3      	ldrb	r3, [r4, r3]
    62f4:	2100      	movs	r1, #0
    62f6:	4a07      	ldr	r2, [pc, #28]	; (6314 <_ZN2GI3Dev4Uart9getCharNbEv+0x50>)
    62f8:	54d1      	strb	r1, [r2, r3]
#endif
		return -1;	 //UARTCharPutNonBlocking((USART_TypeDef*)BaseAddr, byteTx);
    62fa:	4808      	ldr	r0, [pc, #32]	; (631c <_ZN2GI3Dev4Uart9getCharNbEv+0x58>)
    62fc:	e006      	b.n	630c <_ZN2GI3Dev4Uart9getCharNbEv+0x48>
	}
#if (USE_DRIVER_SEMAPHORE == true)
	uart_semaphore[unitNr] = false;
    62fe:	2321      	movs	r3, #33	; 0x21
    6300:	5ce3      	ldrb	r3, [r4, r3]
    6302:	2100      	movs	r1, #0
    6304:	4a03      	ldr	r2, [pc, #12]	; (6314 <_ZN2GI3Dev4Uart9getCharNbEv+0x50>)
    6306:	54d1      	strb	r1, [r2, r3]
#endif
	return data;
    6308:	466b      	mov	r3, sp
    630a:	88d8      	ldrh	r0, [r3, #6]
    630c:	b200      	sxth	r0, r0
}
    630e:	b002      	add	sp, #8
    6310:	bd10      	pop	{r4, pc}
    6312:	46c0      	nop			; (mov r8, r8)
    6314:	20000650 	.word	0x20000650
    6318:	000015cd 	.word	0x000015cd
    631c:	0000ffff 	.word	0x0000ffff

00006320 <_ZN2GI3Dev4Uart5printEPKc>:
		}
	}
}
/*#####################################################*/
int GI::Dev::Uart::print(const char *pcString)
{
    6320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6322:	1c05      	adds	r5, r0, #0
    6324:	1c0e      	adds	r6, r1, #0
	if(!this)
    6326:	2800      	cmp	r0, #0
    6328:	d00e      	beq.n	6348 <_ZN2GI3Dev4Uart5printEPKc+0x28>
		return 0;
	unsigned int count = 0;

	while('\0' != *pcString)
    632a:	7809      	ldrb	r1, [r1, #0]
    632c:	2900      	cmp	r1, #0
    632e:	d008      	beq.n	6342 <_ZN2GI3Dev4Uart5printEPKc+0x22>
    6330:	2400      	movs	r4, #0
	{
		putChar((char)*pcString);
    6332:	4f06      	ldr	r7, [pc, #24]	; (634c <_ZN2GI3Dev4Uart5printEPKc+0x2c>)
    6334:	1c28      	adds	r0, r5, #0
    6336:	47b8      	blx	r7
		pcString++;
		count++;
    6338:	3401      	adds	r4, #1
{
	if(!this)
		return 0;
	unsigned int count = 0;

	while('\0' != *pcString)
    633a:	5d31      	ldrb	r1, [r6, r4]
    633c:	2900      	cmp	r1, #0
    633e:	d1f9      	bne.n	6334 <_ZN2GI3Dev4Uart5printEPKc+0x14>
    6340:	e000      	b.n	6344 <_ZN2GI3Dev4Uart5printEPKc+0x24>
    6342:	2400      	movs	r4, #0
		putChar((char)*pcString);
		pcString++;
		count++;

	}
	return count;
    6344:	1c20      	adds	r0, r4, #0
    6346:	e000      	b.n	634a <_ZN2GI3Dev4Uart5printEPKc+0x2a>
}
/*#####################################################*/
int GI::Dev::Uart::print(const char *pcString)
{
	if(!this)
		return 0;
    6348:	2000      	movs	r0, #0
		pcString++;
		count++;

	}
	return count;
}
    634a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    634c:	0000628d 	.word	0x0000628d

00006350 <_ZN2GI3Dev4Uart5writeEPcj>:
	}
	return count;
}*/
/*#####################################################*/
int GI::Dev::Uart::write(char *data, unsigned int len)
{
    6350:	b5f0      	push	{r4, r5, r6, r7, lr}
    6352:	4647      	mov	r7, r8
    6354:	b480      	push	{r7}
    6356:	1c06      	adds	r6, r0, #0
    6358:	4690      	mov	r8, r2
	unsigned int len_cnt = len;
	while(!len_cnt--)
    635a:	1c15      	adds	r5, r2, #0
    635c:	3d01      	subs	r5, #1
    635e:	2a00      	cmp	r2, #0
    6360:	d10a      	bne.n	6378 <_ZN2GI3Dev4Uart5writeEPcj+0x28>
    6362:	1c0c      	adds	r4, r1, #0
	{
		putChar(*data++);
    6364:	4f07      	ldr	r7, [pc, #28]	; (6384 <_ZN2GI3Dev4Uart5writeEPcj+0x34>)
    6366:	7821      	ldrb	r1, [r4, #0]
    6368:	1c30      	adds	r0, r6, #0
    636a:	47b8      	blx	r7
}*/
/*#####################################################*/
int GI::Dev::Uart::write(char *data, unsigned int len)
{
	unsigned int len_cnt = len;
	while(!len_cnt--)
    636c:	1e6b      	subs	r3, r5, #1
    636e:	3401      	adds	r4, #1
    6370:	2d00      	cmp	r5, #0
    6372:	d102      	bne.n	637a <_ZN2GI3Dev4Uart5writeEPcj+0x2a>
    6374:	1c1d      	adds	r5, r3, #0
    6376:	e7f6      	b.n	6366 <_ZN2GI3Dev4Uart5writeEPcj+0x16>
    6378:	1c2b      	adds	r3, r5, #0
	{
		putChar(*data++);
	}
	return len - len_cnt;
    637a:	4642      	mov	r2, r8
    637c:	1ad0      	subs	r0, r2, r3
}
    637e:	bc04      	pop	{r2}
    6380:	4690      	mov	r8, r2
    6382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6384:	0000628d 	.word	0x0000628d

00006388 <_ZN2GI3Sys5ClockC1Ev>:

/**********************************************************************************************
* Global functions
**********************************************************************************************/

GI::Sys::Clock::Clock()
    6388:	b510      	push	{r4, lr}
    638a:	1c04      	adds	r4, r0, #0
{
	setClk(FCPU);

	system_init();
    638c:	4b01      	ldr	r3, [pc, #4]	; (6394 <_ZN2GI3Sys5ClockC1Ev+0xc>)
    638e:	4798      	blx	r3
}
    6390:	1c20      	adds	r0, r4, #0
    6392:	bd10      	pop	{r4, pc}
    6394:	00000d69 	.word	0x00000d69

00006398 <_ZN2GI3Sys5ClockD1Ev>:

GI::Sys::Clock::~Clock()
{
	//SystemClock_Config(HSI_VALUE, 0, 0);
}
    6398:	4770      	bx	lr
    639a:	46c0      	nop			; (mov r8, r8)

0000639c <SysTick_Handler>:
//#####################################################
#ifdef __cplusplus
extern "C" {
	#endif
	void SysTick_Handler(void)
	{
    639c:	b510      	push	{r4, lr}
		STimerCnt++;
    639e:	4c05      	ldr	r4, [pc, #20]	; (63b4 <SysTick_Handler+0x18>)
    63a0:	6820      	ldr	r0, [r4, #0]
    63a2:	6861      	ldr	r1, [r4, #4]
    63a4:	2201      	movs	r2, #1
    63a6:	2300      	movs	r3, #0
    63a8:	1812      	adds	r2, r2, r0
    63aa:	414b      	adcs	r3, r1
    63ac:	6022      	str	r2, [r4, #0]
    63ae:	6063      	str	r3, [r4, #4]
	}
    63b0:	bd10      	pop	{r4, pc}
    63b2:	46c0      	nop			; (mov r8, r8)
    63b4:	20000658 	.word	0x20000658

000063b8 <_ZN2GI3Sys7SystimeD1Ev>:
}

GI::Sys::Systime::~Systime()
{
	//RTC.CTRL = RTC_PRESCALER_OFF_gc;
}
    63b8:	4770      	bx	lr
    63ba:	46c0      	nop			; (mov r8, r8)

000063bc <_ZN2GI3Sys7SystimeC1Ev>:
//#####################################################
//! [rtc_module_instance]
struct rtc_module rtc_instance;
//! [rtc_module_instance]

GI::Sys::Systime::Systime()
    63bc:	b530      	push	{r4, r5, lr}
    63be:	b085      	sub	sp, #20
    63c0:	1c05      	adds	r5, r0, #0
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    63c2:	2300      	movs	r3, #0
    63c4:	466a      	mov	r2, sp
    63c6:	70d3      	strb	r3, [r2, #3]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    63c8:	9302      	str	r3, [sp, #8]
    63ca:	9303      	str	r3, [sp, #12]
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
	//! [init_conf]

	//! [set_config]
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    63cc:	8013      	strh	r3, [r2, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    63ce:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config_rtc_count.continuously_update = true;
    63d0:	2301      	movs	r3, #1
    63d2:	7113      	strb	r3, [r2, #4]
#endif
	//! [set_config]
	//! [init_rtc]
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    63d4:	4c0b      	ldr	r4, [pc, #44]	; (6404 <_ZN2GI3Sys7SystimeC1Ev+0x48>)
    63d6:	1c20      	adds	r0, r4, #0
    63d8:	490b      	ldr	r1, [pc, #44]	; (6408 <_ZN2GI3Sys7SystimeC1Ev+0x4c>)
    63da:	4b0c      	ldr	r3, [pc, #48]	; (640c <_ZN2GI3Sys7SystimeC1Ev+0x50>)
    63dc:	4798      	blx	r3
	//! [init_rtc]

	//! [enable]
	rtc_count_enable(&rtc_instance);
    63de:	1c20      	adds	r0, r4, #0
    63e0:	4b0b      	ldr	r3, [pc, #44]	; (6410 <_ZN2GI3Sys7SystimeC1Ev+0x54>)
    63e2:	4798      	blx	r3
	//! [enable]
	//! [reg_callback]
	rtc_count_register_callback(
	&rtc_instance, SysTick_Handler, RTC_COUNT_CALLBACK_OVERFLOW);
    63e4:	1c20      	adds	r0, r4, #0
    63e6:	490b      	ldr	r1, [pc, #44]	; (6414 <_ZN2GI3Sys7SystimeC1Ev+0x58>)
    63e8:	2202      	movs	r2, #2
    63ea:	4b0b      	ldr	r3, [pc, #44]	; (6418 <_ZN2GI3Sys7SystimeC1Ev+0x5c>)
    63ec:	4798      	blx	r3
	//! [reg_callback]
	//! [en_callback]
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    63ee:	1c20      	adds	r0, r4, #0
    63f0:	2102      	movs	r1, #2
    63f2:	4b0a      	ldr	r3, [pc, #40]	; (641c <_ZN2GI3Sys7SystimeC1Ev+0x60>)
    63f4:	4798      	blx	r3
	//! [en_callback]
	//! [period]
	rtc_count_set_period(&rtc_instance, 32);
    63f6:	1c20      	adds	r0, r4, #0
    63f8:	2120      	movs	r1, #32
    63fa:	4b09      	ldr	r3, [pc, #36]	; (6420 <_ZN2GI3Sys7SystimeC1Ev+0x64>)
    63fc:	4798      	blx	r3
	//! [period]
}
    63fe:	1c28      	adds	r0, r5, #0
    6400:	b005      	add	sp, #20
    6402:	bd30      	pop	{r4, r5, pc}
    6404:	20000664 	.word	0x20000664
    6408:	40001400 	.word	0x40001400
    640c:	00000515 	.word	0x00000515
    6410:	00000435 	.word	0x00000435
    6414:	0000639d 	.word	0x0000639d
    6418:	0000061d 	.word	0x0000061d
    641c:	00000659 	.word	0x00000659
    6420:	000005f9 	.word	0x000005f9

00006424 <_GLOBAL__sub_I_time>:
{
	TimerTimeoutValue = STimerCnt + (unsigned long long)milliSec;
	while(1) {
		if(TimerTimeoutValue < STimerCnt) break;
	}
}
    6424:	b510      	push	{r4, lr}

#include <sys/systime.h>
#include <driver/rtc_count.h>
#include <driver/rtc_count_interrupt.h>

GI::Sys::Systime time = GI::Sys::Systime();
    6426:	4c05      	ldr	r4, [pc, #20]	; (643c <_GLOBAL__sub_I_time+0x18>)
    6428:	1c20      	adds	r0, r4, #0
    642a:	4b05      	ldr	r3, [pc, #20]	; (6440 <_GLOBAL__sub_I_time+0x1c>)
    642c:	4798      	blx	r3
    642e:	1c20      	adds	r0, r4, #0
    6430:	4904      	ldr	r1, [pc, #16]	; (6444 <_GLOBAL__sub_I_time+0x20>)
    6432:	4a05      	ldr	r2, [pc, #20]	; (6448 <_GLOBAL__sub_I_time+0x24>)
    6434:	4b05      	ldr	r3, [pc, #20]	; (644c <_GLOBAL__sub_I_time+0x28>)
    6436:	4798      	blx	r3
{
	TimerTimeoutValue = STimerCnt + (unsigned long long)milliSec;
	while(1) {
		if(TimerTimeoutValue < STimerCnt) break;
	}
}
    6438:	bd10      	pop	{r4, pc}
    643a:	46c0      	nop			; (mov r8, r8)
    643c:	20000660 	.word	0x20000660
    6440:	000063bd 	.word	0x000063bd
    6444:	000063b9 	.word	0x000063b9
    6448:	20000000 	.word	0x20000000
    644c:	00006451 	.word	0x00006451

00006450 <__aeabi_atexit>:
    6450:	b508      	push	{r3, lr}
    6452:	1c03      	adds	r3, r0, #0
    6454:	1c08      	adds	r0, r1, #0
    6456:	1c19      	adds	r1, r3, #0
    6458:	f000 f880 	bl	655c <__cxa_atexit>
    645c:	bd08      	pop	{r3, pc}
	...

00006460 <__aeabi_uidiv>:
    6460:	2900      	cmp	r1, #0
    6462:	d034      	beq.n	64ce <.udivsi3_skip_div0_test+0x6a>

00006464 <.udivsi3_skip_div0_test>:
    6464:	2301      	movs	r3, #1
    6466:	2200      	movs	r2, #0
    6468:	b410      	push	{r4}
    646a:	4288      	cmp	r0, r1
    646c:	d32c      	bcc.n	64c8 <.udivsi3_skip_div0_test+0x64>
    646e:	2401      	movs	r4, #1
    6470:	0724      	lsls	r4, r4, #28
    6472:	42a1      	cmp	r1, r4
    6474:	d204      	bcs.n	6480 <.udivsi3_skip_div0_test+0x1c>
    6476:	4281      	cmp	r1, r0
    6478:	d202      	bcs.n	6480 <.udivsi3_skip_div0_test+0x1c>
    647a:	0109      	lsls	r1, r1, #4
    647c:	011b      	lsls	r3, r3, #4
    647e:	e7f8      	b.n	6472 <.udivsi3_skip_div0_test+0xe>
    6480:	00e4      	lsls	r4, r4, #3
    6482:	42a1      	cmp	r1, r4
    6484:	d204      	bcs.n	6490 <.udivsi3_skip_div0_test+0x2c>
    6486:	4281      	cmp	r1, r0
    6488:	d202      	bcs.n	6490 <.udivsi3_skip_div0_test+0x2c>
    648a:	0049      	lsls	r1, r1, #1
    648c:	005b      	lsls	r3, r3, #1
    648e:	e7f8      	b.n	6482 <.udivsi3_skip_div0_test+0x1e>
    6490:	4288      	cmp	r0, r1
    6492:	d301      	bcc.n	6498 <.udivsi3_skip_div0_test+0x34>
    6494:	1a40      	subs	r0, r0, r1
    6496:	431a      	orrs	r2, r3
    6498:	084c      	lsrs	r4, r1, #1
    649a:	42a0      	cmp	r0, r4
    649c:	d302      	bcc.n	64a4 <.udivsi3_skip_div0_test+0x40>
    649e:	1b00      	subs	r0, r0, r4
    64a0:	085c      	lsrs	r4, r3, #1
    64a2:	4322      	orrs	r2, r4
    64a4:	088c      	lsrs	r4, r1, #2
    64a6:	42a0      	cmp	r0, r4
    64a8:	d302      	bcc.n	64b0 <.udivsi3_skip_div0_test+0x4c>
    64aa:	1b00      	subs	r0, r0, r4
    64ac:	089c      	lsrs	r4, r3, #2
    64ae:	4322      	orrs	r2, r4
    64b0:	08cc      	lsrs	r4, r1, #3
    64b2:	42a0      	cmp	r0, r4
    64b4:	d302      	bcc.n	64bc <.udivsi3_skip_div0_test+0x58>
    64b6:	1b00      	subs	r0, r0, r4
    64b8:	08dc      	lsrs	r4, r3, #3
    64ba:	4322      	orrs	r2, r4
    64bc:	2800      	cmp	r0, #0
    64be:	d003      	beq.n	64c8 <.udivsi3_skip_div0_test+0x64>
    64c0:	091b      	lsrs	r3, r3, #4
    64c2:	d001      	beq.n	64c8 <.udivsi3_skip_div0_test+0x64>
    64c4:	0909      	lsrs	r1, r1, #4
    64c6:	e7e3      	b.n	6490 <.udivsi3_skip_div0_test+0x2c>
    64c8:	1c10      	adds	r0, r2, #0
    64ca:	bc10      	pop	{r4}
    64cc:	4770      	bx	lr
    64ce:	2800      	cmp	r0, #0
    64d0:	d001      	beq.n	64d6 <.udivsi3_skip_div0_test+0x72>
    64d2:	2000      	movs	r0, #0
    64d4:	43c0      	mvns	r0, r0
    64d6:	b407      	push	{r0, r1, r2}
    64d8:	4802      	ldr	r0, [pc, #8]	; (64e4 <.udivsi3_skip_div0_test+0x80>)
    64da:	a102      	add	r1, pc, #8	; (adr r1, 64e4 <.udivsi3_skip_div0_test+0x80>)
    64dc:	1840      	adds	r0, r0, r1
    64de:	9002      	str	r0, [sp, #8]
    64e0:	bd03      	pop	{r0, r1, pc}
    64e2:	46c0      	nop			; (mov r8, r8)
    64e4:	00000019 	.word	0x00000019

000064e8 <__aeabi_uidivmod>:
    64e8:	2900      	cmp	r1, #0
    64ea:	d0f0      	beq.n	64ce <.udivsi3_skip_div0_test+0x6a>
    64ec:	b503      	push	{r0, r1, lr}
    64ee:	f7ff ffb9 	bl	6464 <.udivsi3_skip_div0_test>
    64f2:	bc0e      	pop	{r1, r2, r3}
    64f4:	4342      	muls	r2, r0
    64f6:	1a89      	subs	r1, r1, r2
    64f8:	4718      	bx	r3
    64fa:	46c0      	nop			; (mov r8, r8)

000064fc <__aeabi_idiv0>:
    64fc:	4770      	bx	lr
    64fe:	46c0      	nop			; (mov r8, r8)

00006500 <__aeabi_lmul>:
    6500:	469c      	mov	ip, r3
    6502:	0403      	lsls	r3, r0, #16
    6504:	b5f0      	push	{r4, r5, r6, r7, lr}
    6506:	0c1b      	lsrs	r3, r3, #16
    6508:	0417      	lsls	r7, r2, #16
    650a:	0c3f      	lsrs	r7, r7, #16
    650c:	0c15      	lsrs	r5, r2, #16
    650e:	1c1e      	adds	r6, r3, #0
    6510:	1c04      	adds	r4, r0, #0
    6512:	0c00      	lsrs	r0, r0, #16
    6514:	437e      	muls	r6, r7
    6516:	436b      	muls	r3, r5
    6518:	4347      	muls	r7, r0
    651a:	4345      	muls	r5, r0
    651c:	18fb      	adds	r3, r7, r3
    651e:	0c30      	lsrs	r0, r6, #16
    6520:	1818      	adds	r0, r3, r0
    6522:	4287      	cmp	r7, r0
    6524:	d902      	bls.n	652c <__aeabi_lmul+0x2c>
    6526:	2380      	movs	r3, #128	; 0x80
    6528:	025b      	lsls	r3, r3, #9
    652a:	18ed      	adds	r5, r5, r3
    652c:	0c03      	lsrs	r3, r0, #16
    652e:	18ed      	adds	r5, r5, r3
    6530:	4663      	mov	r3, ip
    6532:	435c      	muls	r4, r3
    6534:	434a      	muls	r2, r1
    6536:	0436      	lsls	r6, r6, #16
    6538:	0c36      	lsrs	r6, r6, #16
    653a:	18a1      	adds	r1, r4, r2
    653c:	0400      	lsls	r0, r0, #16
    653e:	1980      	adds	r0, r0, r6
    6540:	1949      	adds	r1, r1, r5
    6542:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006544 <calloc>:
    6544:	b508      	push	{r3, lr}
    6546:	1c0a      	adds	r2, r1, #0
    6548:	4903      	ldr	r1, [pc, #12]	; (6558 <calloc+0x14>)
    654a:	1c03      	adds	r3, r0, #0
    654c:	6808      	ldr	r0, [r1, #0]
    654e:	1c19      	adds	r1, r3, #0
    6550:	f000 f878 	bl	6644 <_calloc_r>
    6554:	bd08      	pop	{r3, pc}
    6556:	46c0      	nop			; (mov r8, r8)
    6558:	20000138 	.word	0x20000138

0000655c <__cxa_atexit>:
    655c:	b538      	push	{r3, r4, r5, lr}
    655e:	1c05      	adds	r5, r0, #0
    6560:	4805      	ldr	r0, [pc, #20]	; (6578 <__cxa_atexit+0x1c>)
    6562:	1c0c      	adds	r4, r1, #0
    6564:	1c13      	adds	r3, r2, #0
    6566:	2800      	cmp	r0, #0
    6568:	d004      	beq.n	6574 <__cxa_atexit+0x18>
    656a:	2002      	movs	r0, #2
    656c:	1c29      	adds	r1, r5, #0
    656e:	1c22      	adds	r2, r4, #0
    6570:	e000      	b.n	6574 <__cxa_atexit+0x18>
    6572:	bf00      	nop
    6574:	bd38      	pop	{r3, r4, r5, pc}
    6576:	46c0      	nop			; (mov r8, r8)
    6578:	00000000 	.word	0x00000000

0000657c <__libc_init_array>:
    657c:	b570      	push	{r4, r5, r6, lr}
    657e:	4b0e      	ldr	r3, [pc, #56]	; (65b8 <__libc_init_array+0x3c>)
    6580:	4d0e      	ldr	r5, [pc, #56]	; (65bc <__libc_init_array+0x40>)
    6582:	2400      	movs	r4, #0
    6584:	1aed      	subs	r5, r5, r3
    6586:	10ad      	asrs	r5, r5, #2
    6588:	1c1e      	adds	r6, r3, #0
    658a:	42ac      	cmp	r4, r5
    658c:	d004      	beq.n	6598 <__libc_init_array+0x1c>
    658e:	00a3      	lsls	r3, r4, #2
    6590:	58f3      	ldr	r3, [r6, r3]
    6592:	4798      	blx	r3
    6594:	3401      	adds	r4, #1
    6596:	e7f8      	b.n	658a <__libc_init_array+0xe>
    6598:	f000 fe2e 	bl	71f8 <_init>
    659c:	4b08      	ldr	r3, [pc, #32]	; (65c0 <__libc_init_array+0x44>)
    659e:	4d09      	ldr	r5, [pc, #36]	; (65c4 <__libc_init_array+0x48>)
    65a0:	2400      	movs	r4, #0
    65a2:	1aed      	subs	r5, r5, r3
    65a4:	10ad      	asrs	r5, r5, #2
    65a6:	1c1e      	adds	r6, r3, #0
    65a8:	42ac      	cmp	r4, r5
    65aa:	d004      	beq.n	65b6 <__libc_init_array+0x3a>
    65ac:	00a3      	lsls	r3, r4, #2
    65ae:	58f3      	ldr	r3, [r6, r3]
    65b0:	4798      	blx	r3
    65b2:	3401      	adds	r4, #1
    65b4:	e7f8      	b.n	65a8 <__libc_init_array+0x2c>
    65b6:	bd70      	pop	{r4, r5, r6, pc}
    65b8:	00007204 	.word	0x00007204
    65bc:	00007204 	.word	0x00007204
    65c0:	00007204 	.word	0x00007204
    65c4:	00007214 	.word	0x00007214

000065c8 <malloc>:
    65c8:	b508      	push	{r3, lr}
    65ca:	4b03      	ldr	r3, [pc, #12]	; (65d8 <malloc+0x10>)
    65cc:	1c01      	adds	r1, r0, #0
    65ce:	6818      	ldr	r0, [r3, #0]
    65d0:	f000 f88e 	bl	66f0 <_malloc_r>
    65d4:	bd08      	pop	{r3, pc}
    65d6:	46c0      	nop			; (mov r8, r8)
    65d8:	20000138 	.word	0x20000138

000065dc <free>:
    65dc:	b508      	push	{r3, lr}
    65de:	4b03      	ldr	r3, [pc, #12]	; (65ec <free+0x10>)
    65e0:	1c01      	adds	r1, r0, #0
    65e2:	6818      	ldr	r0, [r3, #0]
    65e4:	f000 f83c 	bl	6660 <_free_r>
    65e8:	bd08      	pop	{r3, pc}
    65ea:	46c0      	nop			; (mov r8, r8)
    65ec:	20000138 	.word	0x20000138

000065f0 <memcpy>:
    65f0:	b510      	push	{r4, lr}
    65f2:	2300      	movs	r3, #0
    65f4:	4293      	cmp	r3, r2
    65f6:	d003      	beq.n	6600 <memcpy+0x10>
    65f8:	5ccc      	ldrb	r4, [r1, r3]
    65fa:	54c4      	strb	r4, [r0, r3]
    65fc:	3301      	adds	r3, #1
    65fe:	e7f9      	b.n	65f4 <memcpy+0x4>
    6600:	bd10      	pop	{r4, pc}

00006602 <memmove>:
    6602:	b570      	push	{r4, r5, r6, lr}
    6604:	4281      	cmp	r1, r0
    6606:	d301      	bcc.n	660c <memmove+0xa>
    6608:	2300      	movs	r3, #0
    660a:	e00c      	b.n	6626 <memmove+0x24>
    660c:	188c      	adds	r4, r1, r2
    660e:	42a0      	cmp	r0, r4
    6610:	d2fa      	bcs.n	6608 <memmove+0x6>
    6612:	1885      	adds	r5, r0, r2
    6614:	1c13      	adds	r3, r2, #0
    6616:	3b01      	subs	r3, #1
    6618:	d30b      	bcc.n	6632 <memmove+0x30>
    661a:	4251      	negs	r1, r2
    661c:	1866      	adds	r6, r4, r1
    661e:	5cf6      	ldrb	r6, [r6, r3]
    6620:	1869      	adds	r1, r5, r1
    6622:	54ce      	strb	r6, [r1, r3]
    6624:	e7f7      	b.n	6616 <memmove+0x14>
    6626:	4293      	cmp	r3, r2
    6628:	d003      	beq.n	6632 <memmove+0x30>
    662a:	5ccc      	ldrb	r4, [r1, r3]
    662c:	54c4      	strb	r4, [r0, r3]
    662e:	3301      	adds	r3, #1
    6630:	e7f9      	b.n	6626 <memmove+0x24>
    6632:	bd70      	pop	{r4, r5, r6, pc}

00006634 <memset>:
    6634:	1c03      	adds	r3, r0, #0
    6636:	1882      	adds	r2, r0, r2
    6638:	4293      	cmp	r3, r2
    663a:	d002      	beq.n	6642 <memset+0xe>
    663c:	7019      	strb	r1, [r3, #0]
    663e:	3301      	adds	r3, #1
    6640:	e7fa      	b.n	6638 <memset+0x4>
    6642:	4770      	bx	lr

00006644 <_calloc_r>:
    6644:	b538      	push	{r3, r4, r5, lr}
    6646:	1c15      	adds	r5, r2, #0
    6648:	434d      	muls	r5, r1
    664a:	1c29      	adds	r1, r5, #0
    664c:	f000 f850 	bl	66f0 <_malloc_r>
    6650:	1e04      	subs	r4, r0, #0
    6652:	d003      	beq.n	665c <_calloc_r+0x18>
    6654:	2100      	movs	r1, #0
    6656:	1c2a      	adds	r2, r5, #0
    6658:	f7ff ffec 	bl	6634 <memset>
    665c:	1c20      	adds	r0, r4, #0
    665e:	bd38      	pop	{r3, r4, r5, pc}

00006660 <_free_r>:
    6660:	b530      	push	{r4, r5, lr}
    6662:	2900      	cmp	r1, #0
    6664:	d040      	beq.n	66e8 <_free_r+0x88>
    6666:	3904      	subs	r1, #4
    6668:	680b      	ldr	r3, [r1, #0]
    666a:	2b00      	cmp	r3, #0
    666c:	da00      	bge.n	6670 <_free_r+0x10>
    666e:	18c9      	adds	r1, r1, r3
    6670:	4a1e      	ldr	r2, [pc, #120]	; (66ec <_free_r+0x8c>)
    6672:	6813      	ldr	r3, [r2, #0]
    6674:	1c14      	adds	r4, r2, #0
    6676:	2b00      	cmp	r3, #0
    6678:	d102      	bne.n	6680 <_free_r+0x20>
    667a:	604b      	str	r3, [r1, #4]
    667c:	6011      	str	r1, [r2, #0]
    667e:	e033      	b.n	66e8 <_free_r+0x88>
    6680:	4299      	cmp	r1, r3
    6682:	d20f      	bcs.n	66a4 <_free_r+0x44>
    6684:	6808      	ldr	r0, [r1, #0]
    6686:	180a      	adds	r2, r1, r0
    6688:	429a      	cmp	r2, r3
    668a:	d105      	bne.n	6698 <_free_r+0x38>
    668c:	6813      	ldr	r3, [r2, #0]
    668e:	6852      	ldr	r2, [r2, #4]
    6690:	18c0      	adds	r0, r0, r3
    6692:	6008      	str	r0, [r1, #0]
    6694:	604a      	str	r2, [r1, #4]
    6696:	e000      	b.n	669a <_free_r+0x3a>
    6698:	604b      	str	r3, [r1, #4]
    669a:	6021      	str	r1, [r4, #0]
    669c:	e024      	b.n	66e8 <_free_r+0x88>
    669e:	428a      	cmp	r2, r1
    66a0:	d803      	bhi.n	66aa <_free_r+0x4a>
    66a2:	1c13      	adds	r3, r2, #0
    66a4:	685a      	ldr	r2, [r3, #4]
    66a6:	2a00      	cmp	r2, #0
    66a8:	d1f9      	bne.n	669e <_free_r+0x3e>
    66aa:	681d      	ldr	r5, [r3, #0]
    66ac:	195c      	adds	r4, r3, r5
    66ae:	428c      	cmp	r4, r1
    66b0:	d10b      	bne.n	66ca <_free_r+0x6a>
    66b2:	6809      	ldr	r1, [r1, #0]
    66b4:	1869      	adds	r1, r5, r1
    66b6:	1858      	adds	r0, r3, r1
    66b8:	6019      	str	r1, [r3, #0]
    66ba:	4290      	cmp	r0, r2
    66bc:	d114      	bne.n	66e8 <_free_r+0x88>
    66be:	6814      	ldr	r4, [r2, #0]
    66c0:	6852      	ldr	r2, [r2, #4]
    66c2:	1909      	adds	r1, r1, r4
    66c4:	6019      	str	r1, [r3, #0]
    66c6:	605a      	str	r2, [r3, #4]
    66c8:	e00e      	b.n	66e8 <_free_r+0x88>
    66ca:	428c      	cmp	r4, r1
    66cc:	d902      	bls.n	66d4 <_free_r+0x74>
    66ce:	230c      	movs	r3, #12
    66d0:	6003      	str	r3, [r0, #0]
    66d2:	e009      	b.n	66e8 <_free_r+0x88>
    66d4:	6808      	ldr	r0, [r1, #0]
    66d6:	180c      	adds	r4, r1, r0
    66d8:	4294      	cmp	r4, r2
    66da:	d103      	bne.n	66e4 <_free_r+0x84>
    66dc:	6814      	ldr	r4, [r2, #0]
    66de:	6852      	ldr	r2, [r2, #4]
    66e0:	1900      	adds	r0, r0, r4
    66e2:	6008      	str	r0, [r1, #0]
    66e4:	604a      	str	r2, [r1, #4]
    66e6:	6059      	str	r1, [r3, #4]
    66e8:	bd30      	pop	{r4, r5, pc}
    66ea:	46c0      	nop			; (mov r8, r8)
    66ec:	20000680 	.word	0x20000680

000066f0 <_malloc_r>:
    66f0:	b570      	push	{r4, r5, r6, lr}
    66f2:	2303      	movs	r3, #3
    66f4:	1ccd      	adds	r5, r1, #3
    66f6:	439d      	bics	r5, r3
    66f8:	3508      	adds	r5, #8
    66fa:	1c06      	adds	r6, r0, #0
    66fc:	2d0c      	cmp	r5, #12
    66fe:	d201      	bcs.n	6704 <_malloc_r+0x14>
    6700:	250c      	movs	r5, #12
    6702:	e001      	b.n	6708 <_malloc_r+0x18>
    6704:	2d00      	cmp	r5, #0
    6706:	db3f      	blt.n	6788 <_malloc_r+0x98>
    6708:	428d      	cmp	r5, r1
    670a:	d33d      	bcc.n	6788 <_malloc_r+0x98>
    670c:	4b20      	ldr	r3, [pc, #128]	; (6790 <_malloc_r+0xa0>)
    670e:	681c      	ldr	r4, [r3, #0]
    6710:	1c1a      	adds	r2, r3, #0
    6712:	1c21      	adds	r1, r4, #0
    6714:	2900      	cmp	r1, #0
    6716:	d013      	beq.n	6740 <_malloc_r+0x50>
    6718:	6808      	ldr	r0, [r1, #0]
    671a:	1b43      	subs	r3, r0, r5
    671c:	d40d      	bmi.n	673a <_malloc_r+0x4a>
    671e:	2b0b      	cmp	r3, #11
    6720:	d902      	bls.n	6728 <_malloc_r+0x38>
    6722:	600b      	str	r3, [r1, #0]
    6724:	18cc      	adds	r4, r1, r3
    6726:	e01e      	b.n	6766 <_malloc_r+0x76>
    6728:	428c      	cmp	r4, r1
    672a:	d102      	bne.n	6732 <_malloc_r+0x42>
    672c:	6863      	ldr	r3, [r4, #4]
    672e:	6013      	str	r3, [r2, #0]
    6730:	e01a      	b.n	6768 <_malloc_r+0x78>
    6732:	6848      	ldr	r0, [r1, #4]
    6734:	6060      	str	r0, [r4, #4]
    6736:	1c0c      	adds	r4, r1, #0
    6738:	e016      	b.n	6768 <_malloc_r+0x78>
    673a:	1c0c      	adds	r4, r1, #0
    673c:	6849      	ldr	r1, [r1, #4]
    673e:	e7e9      	b.n	6714 <_malloc_r+0x24>
    6740:	4c14      	ldr	r4, [pc, #80]	; (6794 <_malloc_r+0xa4>)
    6742:	6820      	ldr	r0, [r4, #0]
    6744:	2800      	cmp	r0, #0
    6746:	d103      	bne.n	6750 <_malloc_r+0x60>
    6748:	1c30      	adds	r0, r6, #0
    674a:	f000 f831 	bl	67b0 <_sbrk_r>
    674e:	6020      	str	r0, [r4, #0]
    6750:	1c30      	adds	r0, r6, #0
    6752:	1c29      	adds	r1, r5, #0
    6754:	f000 f82c 	bl	67b0 <_sbrk_r>
    6758:	1c43      	adds	r3, r0, #1
    675a:	d015      	beq.n	6788 <_malloc_r+0x98>
    675c:	1cc4      	adds	r4, r0, #3
    675e:	2303      	movs	r3, #3
    6760:	439c      	bics	r4, r3
    6762:	4284      	cmp	r4, r0
    6764:	d10a      	bne.n	677c <_malloc_r+0x8c>
    6766:	6025      	str	r5, [r4, #0]
    6768:	1c20      	adds	r0, r4, #0
    676a:	300b      	adds	r0, #11
    676c:	2207      	movs	r2, #7
    676e:	1d23      	adds	r3, r4, #4
    6770:	4390      	bics	r0, r2
    6772:	1ac3      	subs	r3, r0, r3
    6774:	d00b      	beq.n	678e <_malloc_r+0x9e>
    6776:	425a      	negs	r2, r3
    6778:	50e2      	str	r2, [r4, r3]
    677a:	e008      	b.n	678e <_malloc_r+0x9e>
    677c:	1a21      	subs	r1, r4, r0
    677e:	1c30      	adds	r0, r6, #0
    6780:	f000 f816 	bl	67b0 <_sbrk_r>
    6784:	3001      	adds	r0, #1
    6786:	d1ee      	bne.n	6766 <_malloc_r+0x76>
    6788:	230c      	movs	r3, #12
    678a:	6033      	str	r3, [r6, #0]
    678c:	2000      	movs	r0, #0
    678e:	bd70      	pop	{r4, r5, r6, pc}
    6790:	20000680 	.word	0x20000680
    6794:	2000067c 	.word	0x2000067c

00006798 <realloc>:
    6798:	b508      	push	{r3, lr}
    679a:	1c0a      	adds	r2, r1, #0
    679c:	4903      	ldr	r1, [pc, #12]	; (67ac <realloc+0x14>)
    679e:	1c03      	adds	r3, r0, #0
    67a0:	6808      	ldr	r0, [r1, #0]
    67a2:	1c19      	adds	r1, r3, #0
    67a4:	f000 f866 	bl	6874 <_realloc_r>
    67a8:	bd08      	pop	{r3, pc}
    67aa:	46c0      	nop			; (mov r8, r8)
    67ac:	20000138 	.word	0x20000138

000067b0 <_sbrk_r>:
    67b0:	b538      	push	{r3, r4, r5, lr}
    67b2:	4c07      	ldr	r4, [pc, #28]	; (67d0 <_sbrk_r+0x20>)
    67b4:	2300      	movs	r3, #0
    67b6:	1c05      	adds	r5, r0, #0
    67b8:	1c08      	adds	r0, r1, #0
    67ba:	6023      	str	r3, [r4, #0]
    67bc:	f7fb f822 	bl	1804 <_sbrk>
    67c0:	1c43      	adds	r3, r0, #1
    67c2:	d103      	bne.n	67cc <_sbrk_r+0x1c>
    67c4:	6823      	ldr	r3, [r4, #0]
    67c6:	2b00      	cmp	r3, #0
    67c8:	d000      	beq.n	67cc <_sbrk_r+0x1c>
    67ca:	602b      	str	r3, [r5, #0]
    67cc:	bd38      	pop	{r3, r4, r5, pc}
    67ce:	46c0      	nop			; (mov r8, r8)
    67d0:	200006a0 	.word	0x200006a0

000067d4 <strcat>:
    67d4:	b510      	push	{r4, lr}
    67d6:	1c02      	adds	r2, r0, #0
    67d8:	7813      	ldrb	r3, [r2, #0]
    67da:	2b00      	cmp	r3, #0
    67dc:	d001      	beq.n	67e2 <strcat+0xe>
    67de:	3201      	adds	r2, #1
    67e0:	e7fa      	b.n	67d8 <strcat+0x4>
    67e2:	5ccc      	ldrb	r4, [r1, r3]
    67e4:	54d4      	strb	r4, [r2, r3]
    67e6:	3301      	adds	r3, #1
    67e8:	2c00      	cmp	r4, #0
    67ea:	d1fa      	bne.n	67e2 <strcat+0xe>
    67ec:	bd10      	pop	{r4, pc}

000067ee <strcmp>:
    67ee:	7802      	ldrb	r2, [r0, #0]
    67f0:	780b      	ldrb	r3, [r1, #0]
    67f2:	3001      	adds	r0, #1
    67f4:	3101      	adds	r1, #1
    67f6:	2a00      	cmp	r2, #0
    67f8:	d001      	beq.n	67fe <strcmp+0x10>
    67fa:	429a      	cmp	r2, r3
    67fc:	d0f7      	beq.n	67ee <strcmp>
    67fe:	1ad0      	subs	r0, r2, r3
    6800:	4770      	bx	lr

00006802 <strcpy>:
    6802:	1c03      	adds	r3, r0, #0
    6804:	780a      	ldrb	r2, [r1, #0]
    6806:	3101      	adds	r1, #1
    6808:	701a      	strb	r2, [r3, #0]
    680a:	3301      	adds	r3, #1
    680c:	2a00      	cmp	r2, #0
    680e:	d1f9      	bne.n	6804 <strcpy+0x2>
    6810:	4770      	bx	lr

00006812 <strlen>:
    6812:	2300      	movs	r3, #0
    6814:	5cc2      	ldrb	r2, [r0, r3]
    6816:	3301      	adds	r3, #1
    6818:	2a00      	cmp	r2, #0
    681a:	d1fb      	bne.n	6814 <strlen+0x2>
    681c:	1e58      	subs	r0, r3, #1
    681e:	4770      	bx	lr

00006820 <strncmp>:
    6820:	1c03      	adds	r3, r0, #0
    6822:	2000      	movs	r0, #0
    6824:	b510      	push	{r4, lr}
    6826:	4282      	cmp	r2, r0
    6828:	d00f      	beq.n	684a <strncmp+0x2a>
    682a:	781c      	ldrb	r4, [r3, #0]
    682c:	7808      	ldrb	r0, [r1, #0]
    682e:	42a0      	cmp	r0, r4
    6830:	d101      	bne.n	6836 <strncmp+0x16>
    6832:	2a01      	cmp	r2, #1
    6834:	d103      	bne.n	683e <strncmp+0x1e>
    6836:	7818      	ldrb	r0, [r3, #0]
    6838:	780b      	ldrb	r3, [r1, #0]
    683a:	1ac0      	subs	r0, r0, r3
    683c:	e005      	b.n	684a <strncmp+0x2a>
    683e:	3a01      	subs	r2, #1
    6840:	2800      	cmp	r0, #0
    6842:	d0f8      	beq.n	6836 <strncmp+0x16>
    6844:	3301      	adds	r3, #1
    6846:	3101      	adds	r1, #1
    6848:	e7ef      	b.n	682a <strncmp+0xa>
    684a:	bd10      	pop	{r4, pc}

0000684c <strncpy>:
    684c:	b530      	push	{r4, r5, lr}
    684e:	1c03      	adds	r3, r0, #0
    6850:	2a00      	cmp	r2, #0
    6852:	d007      	beq.n	6864 <strncpy+0x18>
    6854:	780c      	ldrb	r4, [r1, #0]
    6856:	3301      	adds	r3, #1
    6858:	1e5d      	subs	r5, r3, #1
    685a:	3a01      	subs	r2, #1
    685c:	702c      	strb	r4, [r5, #0]
    685e:	3101      	adds	r1, #1
    6860:	2c00      	cmp	r4, #0
    6862:	d1f5      	bne.n	6850 <strncpy+0x4>
    6864:	189a      	adds	r2, r3, r2
    6866:	4293      	cmp	r3, r2
    6868:	d003      	beq.n	6872 <strncpy+0x26>
    686a:	2100      	movs	r1, #0
    686c:	7019      	strb	r1, [r3, #0]
    686e:	3301      	adds	r3, #1
    6870:	e7f9      	b.n	6866 <strncpy+0x1a>
    6872:	bd30      	pop	{r4, r5, pc}

00006874 <_realloc_r>:
    6874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6876:	1c06      	adds	r6, r0, #0
    6878:	1c0c      	adds	r4, r1, #0
    687a:	1c15      	adds	r5, r2, #0
    687c:	2900      	cmp	r1, #0
    687e:	d104      	bne.n	688a <_realloc_r+0x16>
    6880:	1c11      	adds	r1, r2, #0
    6882:	f7ff ff35 	bl	66f0 <_malloc_r>
    6886:	1c04      	adds	r4, r0, #0
    6888:	e018      	b.n	68bc <_realloc_r+0x48>
    688a:	2a00      	cmp	r2, #0
    688c:	d103      	bne.n	6896 <_realloc_r+0x22>
    688e:	f7ff fee7 	bl	6660 <_free_r>
    6892:	1c2c      	adds	r4, r5, #0
    6894:	e012      	b.n	68bc <_realloc_r+0x48>
    6896:	f000 f813 	bl	68c0 <_malloc_usable_size_r>
    689a:	42a8      	cmp	r0, r5
    689c:	d20e      	bcs.n	68bc <_realloc_r+0x48>
    689e:	1c30      	adds	r0, r6, #0
    68a0:	1c29      	adds	r1, r5, #0
    68a2:	f7ff ff25 	bl	66f0 <_malloc_r>
    68a6:	1e07      	subs	r7, r0, #0
    68a8:	d007      	beq.n	68ba <_realloc_r+0x46>
    68aa:	1c21      	adds	r1, r4, #0
    68ac:	1c2a      	adds	r2, r5, #0
    68ae:	f7ff fe9f 	bl	65f0 <memcpy>
    68b2:	1c30      	adds	r0, r6, #0
    68b4:	1c21      	adds	r1, r4, #0
    68b6:	f7ff fed3 	bl	6660 <_free_r>
    68ba:	1c3c      	adds	r4, r7, #0
    68bc:	1c20      	adds	r0, r4, #0
    68be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000068c0 <_malloc_usable_size_r>:
    68c0:	3904      	subs	r1, #4
    68c2:	680b      	ldr	r3, [r1, #0]
    68c4:	1f18      	subs	r0, r3, #4
    68c6:	2b00      	cmp	r3, #0
    68c8:	da02      	bge.n	68d0 <_malloc_usable_size_r+0x10>
    68ca:	58c8      	ldr	r0, [r1, r3]
    68cc:	181b      	adds	r3, r3, r0
    68ce:	1f18      	subs	r0, r3, #4
    68d0:	4770      	bx	lr
    68d2:	0000      	movs	r0, r0
    68d4:	00000840 	.word	0x00000840
    68d8:	0000089c 	.word	0x0000089c
    68dc:	0000089c 	.word	0x0000089c
    68e0:	0000083a 	.word	0x0000083a
    68e4:	0000083a 	.word	0x0000083a
    68e8:	00000856 	.word	0x00000856
    68ec:	00000846 	.word	0x00000846
    68f0:	0000085c 	.word	0x0000085c
    68f4:	0000088a 	.word	0x0000088a
    68f8:	00000924 	.word	0x00000924
    68fc:	00000984 	.word	0x00000984
    6900:	00000984 	.word	0x00000984
    6904:	00000904 	.word	0x00000904
    6908:	00000916 	.word	0x00000916
    690c:	00000932 	.word	0x00000932
    6910:	00000908 	.word	0x00000908
    6914:	00000940 	.word	0x00000940
    6918:	00000974 	.word	0x00000974
    691c:	42000800 	.word	0x42000800
    6920:	42000c00 	.word	0x42000c00
    6924:	42001000 	.word	0x42001000
    6928:	42001400 	.word	0x42001400
    692c:	42001800 	.word	0x42001800
    6930:	42001c00 	.word	0x42001c00
    6934:	0c0b0a09 	.word	0x0c0b0a09
    6938:	00000e0d 	.word	0x00000e0d
    693c:	74726175 	.word	0x74726175
    6940:	0000302d 	.word	0x0000302d
    6944:	2d64656c 	.word	0x2d64656c
    6948:	00000030 	.word	0x00000030
    694c:	61766e49 	.word	0x61766e49
    6950:	2064696c 	.word	0x2064696c
    6954:	68746170 	.word	0x68746170
    6958:	000d0a2e 	.word	0x000d0a2e
    695c:	00000d0a 	.word	0x00000d0a
    6960:	0000736c 	.word	0x0000736c
    6964:	00006463 	.word	0x00006463
    6968:	00746163 	.word	0x00746163
    696c:	2074754f 	.word	0x2074754f
    6970:	6d20666f 	.word	0x6d20666f
    6974:	726f6d65 	.word	0x726f6d65
    6978:	000d0a79 	.word	0x000d0a79
    697c:	00404947 	.word	0x00404947
    6980:	0000203a 	.word	0x0000203a
    6984:	6e6b6e55 	.word	0x6e6b6e55
    6988:	206e776f 	.word	0x206e776f
    698c:	6f727265 	.word	0x6f727265
    6990:	00000072 	.word	0x00000072
    6994:	63637553 	.word	0x63637553
    6998:	65646565 	.word	0x65646565
    699c:	00002e64 	.word	0x00002e64
    69a0:	61682041 	.word	0x61682041
    69a4:	65206472 	.word	0x65206472
    69a8:	726f7272 	.word	0x726f7272
    69ac:	63636f20 	.word	0x63636f20
    69b0:	65727275 	.word	0x65727275
    69b4:	6e692064 	.word	0x6e692064
    69b8:	65687420 	.word	0x65687420
    69bc:	776f6c20 	.word	0x776f6c20
    69c0:	76656c20 	.word	0x76656c20
    69c4:	64206c65 	.word	0x64206c65
    69c8:	206b7369 	.word	0x206b7369
    69cc:	204f2f49 	.word	0x204f2f49
    69d0:	6579616c 	.word	0x6579616c
    69d4:	00002e72 	.word	0x00002e72
    69d8:	65737341 	.word	0x65737341
    69dc:	6f697472 	.word	0x6f697472
    69e0:	6166206e 	.word	0x6166206e
    69e4:	64656c69 	.word	0x64656c69
    69e8:	0000002e 	.word	0x0000002e
    69ec:	20656854 	.word	0x20656854
    69f0:	73796870 	.word	0x73796870
    69f4:	6c616369 	.word	0x6c616369
    69f8:	69726420 	.word	0x69726420
    69fc:	63206576 	.word	0x63206576
    6a00:	6f6e6e61 	.word	0x6f6e6e61
    6a04:	6f772074 	.word	0x6f772074
    6a08:	002e6b72 	.word	0x002e6b72
    6a0c:	6c756f43 	.word	0x6c756f43
    6a10:	6f6e2064 	.word	0x6f6e2064
    6a14:	69662074 	.word	0x69662074
    6a18:	7420646e 	.word	0x7420646e
    6a1c:	66206568 	.word	0x66206568
    6a20:	2e656c69 	.word	0x2e656c69
    6a24:	00000000 	.word	0x00000000
    6a28:	6c756f43 	.word	0x6c756f43
    6a2c:	6f6e2064 	.word	0x6f6e2064
    6a30:	69662074 	.word	0x69662074
    6a34:	7420646e 	.word	0x7420646e
    6a38:	70206568 	.word	0x70206568
    6a3c:	2e687461 	.word	0x2e687461
    6a40:	00000000 	.word	0x00000000
    6a44:	20656854 	.word	0x20656854
    6a48:	68746170 	.word	0x68746170
    6a4c:	6d616e20 	.word	0x6d616e20
    6a50:	6f662065 	.word	0x6f662065
    6a54:	74616d72 	.word	0x74616d72
    6a58:	20736920 	.word	0x20736920
    6a5c:	61766e69 	.word	0x61766e69
    6a60:	2e64696c 	.word	0x2e64696c
    6a64:	00000000 	.word	0x00000000
    6a68:	65636341 	.word	0x65636341
    6a6c:	64207373 	.word	0x64207373
    6a70:	65696e65 	.word	0x65696e65
    6a74:	75642064 	.word	0x75642064
    6a78:	6f742065 	.word	0x6f742065
    6a7c:	6f727020 	.word	0x6f727020
    6a80:	69626968 	.word	0x69626968
    6a84:	20646574 	.word	0x20646574
    6a88:	65636361 	.word	0x65636361
    6a8c:	6f207373 	.word	0x6f207373
    6a90:	69642072 	.word	0x69642072
    6a94:	74636572 	.word	0x74636572
    6a98:	2079726f 	.word	0x2079726f
    6a9c:	6c6c7566 	.word	0x6c6c7566
    6aa0:	0000002e 	.word	0x0000002e
    6aa4:	65636341 	.word	0x65636341
    6aa8:	64207373 	.word	0x64207373
    6aac:	65696e65 	.word	0x65696e65
    6ab0:	75642064 	.word	0x75642064
    6ab4:	6f742065 	.word	0x6f742065
    6ab8:	6f727020 	.word	0x6f727020
    6abc:	69626968 	.word	0x69626968
    6ac0:	20646574 	.word	0x20646574
    6ac4:	65636361 	.word	0x65636361
    6ac8:	002e7373 	.word	0x002e7373
    6acc:	20656854 	.word	0x20656854
    6ad0:	656c6966 	.word	0x656c6966
    6ad4:	7269642f 	.word	0x7269642f
    6ad8:	6f746365 	.word	0x6f746365
    6adc:	6f207972 	.word	0x6f207972
    6ae0:	63656a62 	.word	0x63656a62
    6ae4:	73692074 	.word	0x73692074
    6ae8:	766e6920 	.word	0x766e6920
    6aec:	64696c61 	.word	0x64696c61
    6af0:	0000002e 	.word	0x0000002e
    6af4:	20656854 	.word	0x20656854
    6af8:	73796870 	.word	0x73796870
    6afc:	6c616369 	.word	0x6c616369
    6b00:	69726420 	.word	0x69726420
    6b04:	69206576 	.word	0x69206576
    6b08:	72772073 	.word	0x72772073
    6b0c:	20657469 	.word	0x20657469
    6b10:	746f7270 	.word	0x746f7270
    6b14:	65746365 	.word	0x65746365
    6b18:	00002e64 	.word	0x00002e64
    6b1c:	20656854 	.word	0x20656854
    6b20:	69676f6c 	.word	0x69676f6c
    6b24:	206c6163 	.word	0x206c6163
    6b28:	76697264 	.word	0x76697264
    6b2c:	756e2065 	.word	0x756e2065
    6b30:	7265626d 	.word	0x7265626d
    6b34:	20736920 	.word	0x20736920
    6b38:	61766e69 	.word	0x61766e69
    6b3c:	2e64696c 	.word	0x2e64696c
    6b40:	00000000 	.word	0x00000000
    6b44:	20656854 	.word	0x20656854
    6b48:	756c6f76 	.word	0x756c6f76
    6b4c:	6820656d 	.word	0x6820656d
    6b50:	6e207361 	.word	0x6e207361
    6b54:	6f77206f 	.word	0x6f77206f
    6b58:	61206b72 	.word	0x61206b72
    6b5c:	2e616572 	.word	0x2e616572
    6b60:	00000000 	.word	0x00000000
    6b64:	72656854 	.word	0x72656854
    6b68:	73692065 	.word	0x73692065
    6b6c:	206f6e20 	.word	0x206f6e20
    6b70:	696c6176 	.word	0x696c6176
    6b74:	41462064 	.word	0x41462064
    6b78:	6f762054 	.word	0x6f762054
    6b7c:	656d756c 	.word	0x656d756c
    6b80:	0000002e 	.word	0x0000002e
    6b84:	20656854 	.word	0x20656854
    6b88:	6b6d5f66 	.word	0x6b6d5f66
    6b8c:	29287366 	.word	0x29287366
    6b90:	6f626120 	.word	0x6f626120
    6b94:	64657472 	.word	0x64657472
    6b98:	65756420 	.word	0x65756420
    6b9c:	206f7420 	.word	0x206f7420
    6ba0:	20796e61 	.word	0x20796e61
    6ba4:	626f7270 	.word	0x626f7270
    6ba8:	2e6d656c 	.word	0x2e6d656c
    6bac:	00000000 	.word	0x00000000
    6bb0:	6c756f43 	.word	0x6c756f43
    6bb4:	6f6e2064 	.word	0x6f6e2064
    6bb8:	65672074 	.word	0x65672074
    6bbc:	20612074 	.word	0x20612074
    6bc0:	6e617267 	.word	0x6e617267
    6bc4:	6f742074 	.word	0x6f742074
    6bc8:	63636120 	.word	0x63636120
    6bcc:	20737365 	.word	0x20737365
    6bd0:	20656874 	.word	0x20656874
    6bd4:	756c6f76 	.word	0x756c6f76
    6bd8:	7720656d 	.word	0x7720656d
    6bdc:	69687469 	.word	0x69687469
    6be0:	6564206e 	.word	0x6564206e
    6be4:	656e6966 	.word	0x656e6966
    6be8:	65702064 	.word	0x65702064
    6bec:	646f6972 	.word	0x646f6972
    6bf0:	0000002e 	.word	0x0000002e
    6bf4:	20656854 	.word	0x20656854
    6bf8:	7265706f 	.word	0x7265706f
    6bfc:	6f697461 	.word	0x6f697461
    6c00:	7369206e 	.word	0x7369206e
    6c04:	6a657220 	.word	0x6a657220
    6c08:	65746365 	.word	0x65746365
    6c0c:	63612064 	.word	0x63612064
    6c10:	64726f63 	.word	0x64726f63
    6c14:	20676e69 	.word	0x20676e69
    6c18:	74206f74 	.word	0x74206f74
    6c1c:	66206568 	.word	0x66206568
    6c20:	20656c69 	.word	0x20656c69
    6c24:	72616873 	.word	0x72616873
    6c28:	20676e69 	.word	0x20676e69
    6c2c:	696c6f70 	.word	0x696c6f70
    6c30:	002e7963 	.word	0x002e7963
    6c34:	204e464c 	.word	0x204e464c
    6c38:	6b726f77 	.word	0x6b726f77
    6c3c:	20676e69 	.word	0x20676e69
    6c40:	66667562 	.word	0x66667562
    6c44:	63207265 	.word	0x63207265
    6c48:	646c756f 	.word	0x646c756f
    6c4c:	746f6e20 	.word	0x746f6e20
    6c50:	20656220 	.word	0x20656220
    6c54:	6f6c6c61 	.word	0x6f6c6c61
    6c58:	65746163 	.word	0x65746163
    6c5c:	00002e64 	.word	0x00002e64
    6c60:	626d754e 	.word	0x626d754e
    6c64:	6f207265 	.word	0x6f207265
    6c68:	706f2066 	.word	0x706f2066
    6c6c:	66206e65 	.word	0x66206e65
    6c70:	73656c69 	.word	0x73656c69
    6c74:	5f203e20 	.word	0x5f203e20
    6c78:	4c5f5346 	.word	0x4c5f5346
    6c7c:	2e4b434f 	.word	0x2e4b434f
    6c80:	00000000 	.word	0x00000000
    6c84:	65766947 	.word	0x65766947
    6c88:	6170206e 	.word	0x6170206e
    6c8c:	656d6172 	.word	0x656d6172
    6c90:	20726574 	.word	0x20726574
    6c94:	69207369 	.word	0x69207369
    6c98:	6c61766e 	.word	0x6c61766e
    6c9c:	002e6469 	.word	0x002e6469
    6ca0:	0000002f 	.word	0x0000002f

00006ca4 <_ZL6LfnOfs>:
    6ca4:	07050301 12100e09 1c181614 0000001e     ................

00006cb4 <_ZZL12get_ldnumberPPKcE3str>:
    6cb4:	00006cf0 00006cf4 00006cf4 00006cf8     .l...l...l...l..
    6cc4:	00006d00 00006d08 00006d10 459076eb     .m...m...m...v.E
    6cd4:	54414658 00202020 3c3a2a22 7f7c3f3e     XFAT   ."*:<>?|.
    6ce4:	00000000 3d3b2c2b 00005d5b 00314453     ....+,;=[]..SD1.
    6cf4:	00324453 31425355 00000000 32425355     SD2.USB1....USB2
    6d04:	00000000 53495053 00003144 53495053     ....SPISD1..SPIS
    6d14:	00003244                                D2..

00006d18 <_ZL5ExCvt>:
    6d18:	41459a80 808f418e 49454545 8f8e4949     ..EA.A..EEEIII..
    6d28:	4f929290 55554f99 9b9a9959 9f9e9d9c     ...O.OUUY.......
    6d38:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
    6d48:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    6d58:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
    6d68:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    6d78:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
    6d88:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    6d98:	000056dc 000056e4 000056f0 000056f6     .V...V...V...V..
    6da8:	000056fc 00005702 00005708 0000570e     .V...W...W...W..
    6db8:	00005714                                .W..

00006dbc <_ZL3Tbl>:
    6dbc:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    6dcc:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    6ddc:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    6dec:	00d600ff 00a200dc 00a500a3 019220a7     ............. ..
    6dfc:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    6e0c:	231000bf 00bd00ac 00a100bc 00bb00ab     ...#............
    6e1c:	25922591 25022593 25612524 25562562     .%.%.%.%$%a%b%V%
    6e2c:	25632555 25572551 255c255d 2510255b     U%c%Q%W%]%\%[%.%
    6e3c:	25342514 251c252c 253c2500 255f255e     .%4%,%.%.%<%^%_%
    6e4c:	2554255a 25662569 25502560 2567256c     Z%T%i%f%`%P%l%g%
    6e5c:	25642568 25592565 25522558 256b2553     h%d%e%Y%X%R%S%k%
    6e6c:	2518256a 2588250c 258c2584 25802590     j%.%.%.%.%.%.%.%
    6e7c:	00df03b1 03c00393 03c303a3 03c400b5     ................
    6e8c:	039803a6 03b403a9 03c6221e 222903b5     ........."....)"
    6e9c:	00b12261 22642265 23212320 224800f7     a"..e"d" #!#..H"
    6eac:	221900b0 221a00b7 00b2207f 00a025a0     ..."...". ...%..

00006ebc <_ZZ11ff_wtoupperE4cvt1>:
    6ebc:	031a0061 031700e0 030700f8 000100ff     a...............
    6ecc:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
    6edc:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
    6eec:	01840182 01860184 01870187 018a0189     ................
    6efc:	018b018b 018e018d 0190018f 01910191     ................
    6f0c:	01940193 019601f6 01980197 023d0198     ..............=.
    6f1c:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
    6f2c:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
    6f3c:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
    6f4c:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
    6f5c:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
    6f6c:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
    6f7c:	01ca01cb 011001cd 000101dd 01de018e     ................
    6f8c:	01f30112 01f10003 01f401f4 012801f8     ..............(.
    6f9c:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
    6fac:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
    6fbc:	01810040 02550186 018a0189 018f0258     @.....U.....X...
    6fcc:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
    6fdc:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
    6fec:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
    6ffc:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
    700c:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
    701c:	01a90282 02850284 02870286 024401ae     ..............D.
    702c:	01b201b1 028d0245 028f028e 02910290     ....E...........
    703c:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
    704c:	03880386 038a0389 031103b1 000203c2     ................
    705c:	03a303a3 030803c4 000303cc 038e038c     ................
    706c:	03d8038f 03f20118 03f9000a 03f403f3     ................
    707c:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
    708c:	04500320 04600710 048a0122 04c10136      .P...`."...6...
    709c:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
    70ac:	00000000                                ....

000070b0 <_ZZ11ff_wtoupperE4cvt2>:
    70b0:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
    70c0:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
    70d0:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
    70e0:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
    70f0:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
    7100:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
    7110:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
    7120:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
    7130:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
    7140:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
    7150:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
    7160:	2d000164 ff410826 0000031a 000060f2     d..-&.A......`..
    7170:	000060fe 0000610a 00006116 00006122     .`...a...a.."a..
    7180:	0000612e 74726175 0000002d 63627375     .a..uart-...usbc
    7190:	002d6364                                dc-.

00007194 <__sf_fake_stdin>:
	...

000071b4 <__sf_fake_stdout>:
	...

000071d4 <__sf_fake_stderr>:
	...
    71f4:	00000043                                C...

000071f8 <_init>:
    71f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71fa:	46c0      	nop			; (mov r8, r8)
    71fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    71fe:	bc08      	pop	{r3}
    7200:	469e      	mov	lr, r3
    7202:	4770      	bx	lr

00007204 <__init_array_start>:
    7204:	000000d9 	.word	0x000000d9
    7208:	00001c11 	.word	0x00001c11
    720c:	00002779 	.word	0x00002779
    7210:	00006425 	.word	0x00006425

00007214 <_fini>:
    7214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7216:	46c0      	nop			; (mov r8, r8)
    7218:	bcf8      	pop	{r3, r4, r5, r6, r7}
    721a:	bc08      	pop	{r3}
    721c:	469e      	mov	lr, r3
    721e:	4770      	bx	lr

00007220 <__fini_array_start>:
    7220:	000000b1 	.word	0x000000b1
