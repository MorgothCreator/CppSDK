
ExampleFeatherAdaloggerM0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002324  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000012c  20000000  00002324  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cc  20000130  00002458  00010130  2**3
                  ALLOC
  3 .stack        00000004  200001fc  00002524  00010130  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001012c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010154  2**0
                  CONTENTS, READONLY
  6 .debug_info   00026ac2  00000000  00000000  000101af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a6a  00000000  00000000  00036c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a15d  00000000  00000000  0003b6db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009a0  00000000  00000000  00045838  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000928  00000000  00000000  000461d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00008da2  00000000  00000000  00046b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014aa4  00000000  00000000  0004f8a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008b88c  00000000  00000000  00064346  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001c98  00000000  00000000  000efbd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20008000 	.word	0x20008000
       4:	000003b9 	.word	0x000003b9
       8:	000003b5 	.word	0x000003b5
       c:	000003b5 	.word	0x000003b5
	...
      2c:	000003b5 	.word	0x000003b5
	...
      38:	000003b5 	.word	0x000003b5
      3c:	00001dc5 	.word	0x00001dc5
      40:	000003b5 	.word	0x000003b5
      44:	000003b5 	.word	0x000003b5
      48:	000003b5 	.word	0x000003b5
      4c:	00000365 	.word	0x00000365
      50:	000003b5 	.word	0x000003b5
      54:	000003b5 	.word	0x000003b5
      58:	000003b5 	.word	0x000003b5
      5c:	000003b5 	.word	0x000003b5
      60:	000003b5 	.word	0x000003b5
      64:	00000e59 	.word	0x00000e59
      68:	00000e69 	.word	0x00000e69
      6c:	00000e79 	.word	0x00000e79
      70:	00000e89 	.word	0x00000e89
      74:	00000e99 	.word	0x00000e99
      78:	00000ea9 	.word	0x00000ea9
      7c:	000003b5 	.word	0x000003b5
      80:	000003b5 	.word	0x000003b5
      84:	000003b5 	.word	0x000003b5
      88:	000003b5 	.word	0x000003b5
      8c:	000003b5 	.word	0x000003b5
      90:	000003b5 	.word	0x000003b5
	...
      9c:	000003b5 	.word	0x000003b5
      a0:	000003b5 	.word	0x000003b5
      a4:	000003b5 	.word	0x000003b5
      a8:	000003b5 	.word	0x000003b5
      ac:	000003b5 	.word	0x000003b5

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000130 	.word	0x20000130
      d0:	00000000 	.word	0x00000000
      d4:	00002324 	.word	0x00002324

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00002324 	.word	0x00002324
     104:	20000134 	.word	0x20000134
     108:	00002324 	.word	0x00002324
     10c:	00000000 	.word	0x00000000

00000110 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     110:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     112:	7a98      	ldrb	r0, [r3, #10]
     114:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
     116:	4770      	bx	lr

00000118 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     118:	b570      	push	{r4, r5, r6, lr}
     11a:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     11c:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     11e:	2208      	movs	r2, #8
     120:	4b05      	ldr	r3, [pc, #20]	; (138 <rtc_count_enable+0x20>)
     122:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     124:	4d05      	ldr	r5, [pc, #20]	; (13c <rtc_count_enable+0x24>)
     126:	1c20      	adds	r0, r4, #0
     128:	47a8      	blx	r5
     12a:	2800      	cmp	r0, #0
     12c:	d1fb      	bne.n	126 <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     12e:	8832      	ldrh	r2, [r6, #0]
     130:	2302      	movs	r3, #2
     132:	4313      	orrs	r3, r2
     134:	8033      	strh	r3, [r6, #0]
}
     136:	bd70      	pop	{r4, r5, r6, pc}
     138:	e000e100 	.word	0xe000e100
     13c:	00000111 	.word	0x00000111

00000140 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     140:	b570      	push	{r4, r5, r6, lr}
     142:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     144:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     146:	2108      	movs	r1, #8
     148:	2380      	movs	r3, #128	; 0x80
     14a:	4a06      	ldr	r2, [pc, #24]	; (164 <rtc_count_disable+0x24>)
     14c:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     14e:	4d06      	ldr	r5, [pc, #24]	; (168 <rtc_count_disable+0x28>)
     150:	1c20      	adds	r0, r4, #0
     152:	47a8      	blx	r5
     154:	2800      	cmp	r0, #0
     156:	d1fb      	bne.n	150 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     158:	8833      	ldrh	r3, [r6, #0]
     15a:	2202      	movs	r2, #2
     15c:	4393      	bics	r3, r2
     15e:	8033      	strh	r3, [r6, #0]
}
     160:	bd70      	pop	{r4, r5, r6, pc}
     162:	46c0      	nop			; (mov r8, r8)
     164:	e000e100 	.word	0xe000e100
     168:	00000111 	.word	0x00000111

0000016c <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     16c:	b570      	push	{r4, r5, r6, lr}
     16e:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     170:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     172:	4b07      	ldr	r3, [pc, #28]	; (190 <rtc_count_reset+0x24>)
     174:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     176:	2300      	movs	r3, #0
     178:	82a3      	strh	r3, [r4, #20]
	module->enabled_callback    = 0;
     17a:	82e3      	strh	r3, [r4, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     17c:	4d05      	ldr	r5, [pc, #20]	; (194 <rtc_count_reset+0x28>)
     17e:	1c20      	adds	r0, r4, #0
     180:	47a8      	blx	r5
     182:	2800      	cmp	r0, #0
     184:	d1fb      	bne.n	17e <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     186:	8832      	ldrh	r2, [r6, #0]
     188:	2301      	movs	r3, #1
     18a:	4313      	orrs	r3, r2
     18c:	8033      	strh	r3, [r6, #0]
}
     18e:	bd70      	pop	{r4, r5, r6, pc}
     190:	00000141 	.word	0x00000141
     194:	00000111 	.word	0x00000111

00000198 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     198:	b5f0      	push	{r4, r5, r6, r7, lr}
     19a:	4647      	mov	r7, r8
     19c:	b480      	push	{r7}
     19e:	1c04      	adds	r4, r0, #0
     1a0:	1c0f      	adds	r7, r1, #0
     1a2:	1c16      	adds	r6, r2, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1a4:	6803      	ldr	r3, [r0, #0]
     1a6:	4698      	mov	r8, r3

	while (rtc_count_is_syncing(module)) {
     1a8:	4d11      	ldr	r5, [pc, #68]	; (1f0 <rtc_count_set_compare+0x58>)
     1aa:	1c20      	adds	r0, r4, #0
     1ac:	47a8      	blx	r5
     1ae:	2800      	cmp	r0, #0
     1b0:	d1fb      	bne.n	1aa <rtc_count_set_compare+0x12>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     1b2:	7923      	ldrb	r3, [r4, #4]
     1b4:	2b00      	cmp	r3, #0
     1b6:	d00b      	beq.n	1d0 <rtc_count_set_compare+0x38>

			break;

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
     1b8:	201a      	movs	r0, #26
	while (rtc_count_is_syncing(module)) {
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     1ba:	2b01      	cmp	r3, #1
     1bc:	d115      	bne.n	1ea <rtc_count_set_compare+0x52>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
     1be:	2017      	movs	r0, #23

	/* Set compare values based on operation mode. */
	switch (module->mode) {
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     1c0:	2e01      	cmp	r6, #1
     1c2:	d812      	bhi.n	1ea <rtc_count_set_compare+0x52>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     1c4:	3606      	adds	r6, #6
     1c6:	00b6      	lsls	r6, r6, #2
     1c8:	4643      	mov	r3, r8
     1ca:	50f7      	str	r7, [r6, r3]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     1cc:	2000      	movs	r0, #0
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;

			break;
     1ce:	e00c      	b.n	1ea <rtc_count_set_compare+0x52>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
				return STATUS_ERR_INVALID_ARG;
     1d0:	2017      	movs	r0, #23

			break;

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     1d2:	2e02      	cmp	r6, #2
     1d4:	d809      	bhi.n	1ea <rtc_count_set_compare+0x52>
				return STATUS_ERR_INVALID_ARG;
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
     1d6:	4b07      	ldr	r3, [pc, #28]	; (1f4 <rtc_count_set_compare+0x5c>)
     1d8:	429f      	cmp	r7, r3
     1da:	d806      	bhi.n	1ea <rtc_count_set_compare+0x52>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     1dc:	b2bf      	uxth	r7, r7
     1de:	360c      	adds	r6, #12
     1e0:	0076      	lsls	r6, r6, #1
     1e2:	4643      	mov	r3, r8
     1e4:	52f7      	strh	r7, [r6, r3]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     1e6:	2000      	movs	r0, #0
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;

			break;
     1e8:	e7ff      	b.n	1ea <rtc_count_set_compare+0x52>
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
     1ea:	bc04      	pop	{r2}
     1ec:	4690      	mov	r8, r2
     1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1f0:	00000111 	.word	0x00000111
     1f4:	0000ffff 	.word	0x0000ffff

000001f8 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	b083      	sub	sp, #12
     1fc:	1c04      	adds	r4, r0, #0
     1fe:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     200:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     202:	4b2f      	ldr	r3, [pc, #188]	; (2c0 <rtc_count_init+0xc8>)
     204:	6999      	ldr	r1, [r3, #24]
     206:	2220      	movs	r2, #32
     208:	430a      	orrs	r2, r1
     20a:	619a      	str	r2, [r3, #24]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     20c:	a901      	add	r1, sp, #4
     20e:	2302      	movs	r3, #2
     210:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     212:	2004      	movs	r0, #4
     214:	4b2b      	ldr	r3, [pc, #172]	; (2c4 <rtc_count_init+0xcc>)
     216:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     218:	2004      	movs	r0, #4
     21a:	4b2b      	ldr	r3, [pc, #172]	; (2c8 <rtc_count_init+0xd0>)
     21c:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
     21e:	1c20      	adds	r0, r4, #0
     220:	4b2a      	ldr	r3, [pc, #168]	; (2cc <rtc_count_init+0xd4>)
     222:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
     224:	78b3      	ldrb	r3, [r6, #2]
     226:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     228:	7933      	ldrb	r3, [r6, #4]
     22a:	7163      	strb	r3, [r4, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
     22c:	4b28      	ldr	r3, [pc, #160]	; (2d0 <rtc_count_init+0xd8>)
     22e:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     230:	6827      	ldr	r7, [r4, #0]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     232:	8833      	ldrh	r3, [r6, #0]
     234:	803b      	strh	r3, [r7, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     236:	78b3      	ldrb	r3, [r6, #2]
     238:	2b00      	cmp	r3, #0
     23a:	d017      	beq.n	26c <rtc_count_init+0x74>
						(enum rtc_count_compare)i);
			}
			break;
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     23c:	2017      	movs	r0, #23
	Rtc *const rtc_module = module->hw;

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
     23e:	2b01      	cmp	r3, #1
     240:	d13c      	bne.n	2bc <rtc_count_init+0xc4>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     242:	883b      	ldrh	r3, [r7, #0]
     244:	b29b      	uxth	r3, r3
     246:	803b      	strh	r3, [r7, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
     248:	78f3      	ldrb	r3, [r6, #3]
     24a:	2b00      	cmp	r3, #0
     24c:	d034      	beq.n	2b8 <rtc_count_init+0xc0>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     24e:	883a      	ldrh	r2, [r7, #0]
     250:	2380      	movs	r3, #128	; 0x80
     252:	4313      	orrs	r3, r2
     254:	803b      	strh	r3, [r7, #0]
     256:	e02f      	b.n	2b8 <rtc_count_init+0xc0>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
				while (rtc_count_is_syncing(module)) {
     258:	1c20      	adds	r0, r4, #0
     25a:	47a8      	blx	r5
     25c:	2800      	cmp	r0, #0
     25e:	d1fb      	bne.n	258 <rtc_count_init+0x60>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     260:	1c20      	adds	r0, r4, #0
     262:	68b1      	ldr	r1, [r6, #8]
     264:	2200      	movs	r2, #0
     266:	4b1b      	ldr	r3, [pc, #108]	; (2d4 <rtc_count_init+0xdc>)
     268:	4798      	blx	r3
     26a:	e01b      	b.n	2a4 <rtc_count_init+0xac>
			}
			break;

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     26c:	883a      	ldrh	r2, [r7, #0]
     26e:	2304      	movs	r3, #4
     270:	4313      	orrs	r3, r2
     272:	803b      	strh	r3, [r7, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     274:	78f3      	ldrb	r3, [r6, #3]
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
     276:	2017      	movs	r0, #23
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
     278:	2b00      	cmp	r3, #0
     27a:	d11f      	bne.n	2bc <rtc_count_init+0xc4>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
     27c:	4d16      	ldr	r5, [pc, #88]	; (2d8 <rtc_count_init+0xe0>)
     27e:	1c20      	adds	r0, r4, #0
     280:	47a8      	blx	r5
     282:	2800      	cmp	r0, #0
     284:	d1fb      	bne.n	27e <rtc_count_init+0x86>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     286:	1c20      	adds	r0, r4, #0
     288:	68b1      	ldr	r1, [r6, #8]
     28a:	2200      	movs	r2, #0
     28c:	4b11      	ldr	r3, [pc, #68]	; (2d4 <rtc_count_init+0xdc>)
     28e:	4798      	blx	r3
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
				while (rtc_count_is_syncing(module)) {
     290:	4d11      	ldr	r5, [pc, #68]	; (2d8 <rtc_count_init+0xe0>)
     292:	1c20      	adds	r0, r4, #0
     294:	47a8      	blx	r5
     296:	2800      	cmp	r0, #0
     298:	d1fb      	bne.n	292 <rtc_count_init+0x9a>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
     29a:	1c20      	adds	r0, r4, #0
     29c:	68f1      	ldr	r1, [r6, #12]
     29e:	2201      	movs	r2, #1
     2a0:	4b0c      	ldr	r3, [pc, #48]	; (2d4 <rtc_count_init+0xdc>)
     2a2:	4798      	blx	r3
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     2a4:	7933      	ldrb	r3, [r6, #4]
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
     2a6:	2000      	movs	r0, #0
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
     2a8:	2b00      	cmp	r3, #0
     2aa:	d007      	beq.n	2bc <rtc_count_init+0xc4>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     2ac:	887a      	ldrh	r2, [r7, #2]
     2ae:	2380      	movs	r3, #128	; 0x80
     2b0:	01db      	lsls	r3, r3, #7
     2b2:	4313      	orrs	r3, r2
     2b4:	807b      	strh	r3, [r7, #2]
     2b6:	e001      	b.n	2bc <rtc_count_init+0xc4>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
				while (rtc_count_is_syncing(module)) {
     2b8:	4d07      	ldr	r5, [pc, #28]	; (2d8 <rtc_count_init+0xe0>)
     2ba:	e7cd      	b.n	258 <rtc_count_init+0x60>
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
}
     2bc:	b003      	add	sp, #12
     2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2c0:	40000400 	.word	0x40000400
     2c4:	0000087d 	.word	0x0000087d
     2c8:	000007f1 	.word	0x000007f1
     2cc:	0000016d 	.word	0x0000016d
     2d0:	200001dc 	.word	0x200001dc
     2d4:	00000199 	.word	0x00000199
     2d8:	00000111 	.word	0x00000111

000002dc <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode.
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2de:	1c04      	adds	r4, r0, #0
     2e0:	1c0f      	adds	r7, r1, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     2e2:	6806      	ldr	r6, [r0, #0]

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     2e4:	7903      	ldrb	r3, [r0, #4]
		return STATUS_ERR_UNSUPPORTED_DEV;
     2e6:	2015      	movs	r0, #21
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     2e8:	2b00      	cmp	r3, #0
     2ea:	d105      	bne.n	2f8 <rtc_count_set_period+0x1c>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}

	while (rtc_count_is_syncing(module)) {
     2ec:	4d03      	ldr	r5, [pc, #12]	; (2fc <rtc_count_set_period+0x20>)
     2ee:	1c20      	adds	r0, r4, #0
     2f0:	47a8      	blx	r5
     2f2:	2800      	cmp	r0, #0
     2f4:	d1fb      	bne.n	2ee <rtc_count_set_period+0x12>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
     2f6:	82b7      	strh	r7, [r6, #20]

	return STATUS_OK;
}
     2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	00000111 	.word	0x00000111

00000300 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     300:	2a02      	cmp	r2, #2
     302:	d00b      	beq.n	31c <rtc_count_register_callback+0x1c>
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     304:	7903      	ldrb	r3, [r0, #4]
     306:	2b00      	cmp	r3, #0
     308:	d005      	beq.n	316 <rtc_count_register_callback+0x16>
     30a:	2b01      	cmp	r3, #1
     30c:	d112      	bne.n	334 <rtc_count_register_callback+0x34>
     30e:	2317      	movs	r3, #23
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP32) {
     310:	2a01      	cmp	r2, #1
     312:	d810      	bhi.n	336 <rtc_count_register_callback+0x36>
     314:	e002      	b.n	31c <rtc_count_register_callback+0x1c>
     316:	2317      	movs	r3, #23
			}

			break;
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP16) {
     318:	2a02      	cmp	r2, #2
     31a:	d80c      	bhi.n	336 <rtc_count_register_callback+0x36>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     31c:	1c93      	adds	r3, r2, #2
     31e:	009b      	lsls	r3, r3, #2
     320:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     322:	8a83      	ldrh	r3, [r0, #20]
     324:	2101      	movs	r1, #1
     326:	4091      	lsls	r1, r2
     328:	1c0a      	adds	r2, r1, #0
     32a:	431a      	orrs	r2, r3
     32c:	b292      	uxth	r2, r2
     32e:	8282      	strh	r2, [r0, #20]
     330:	2300      	movs	r3, #0
     332:	e000      	b.n	336 <rtc_count_register_callback+0x36>
			if (callback_type > RTC_NUM_OF_COMP16) {
				status = STATUS_ERR_INVALID_ARG;
			}
			break;
		default:
			status = STATUS_ERR_INVALID_ARG;
     334:	2317      	movs	r3, #23
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
	}

	return status;
}
     336:	1c18      	adds	r0, r3, #0
     338:	4770      	bx	lr
     33a:	46c0      	nop			; (mov r8, r8)

0000033c <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     33c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     33e:	6803      	ldr	r3, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     340:	2902      	cmp	r1, #2
     342:	d102      	bne.n	34a <rtc_count_enable_callback+0xe>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     344:	2280      	movs	r2, #128	; 0x80
     346:	71da      	strb	r2, [r3, #7]
     348:	e004      	b.n	354 <rtc_count_enable_callback+0x18>
	} else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << callback_type);
     34a:	2201      	movs	r2, #1
     34c:	408a      	lsls	r2, r1
     34e:	2403      	movs	r4, #3
     350:	4022      	ands	r2, r4
     352:	71da      	strb	r2, [r3, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     354:	8ac3      	ldrh	r3, [r0, #22]
     356:	2201      	movs	r2, #1
     358:	408a      	lsls	r2, r1
     35a:	1c11      	adds	r1, r2, #0
     35c:	4319      	orrs	r1, r3
     35e:	b289      	uxth	r1, r1
     360:	82c1      	strh	r1, [r0, #22]
}
     362:	bd10      	pop	{r4, pc}

00000364 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     364:	b510      	push	{r4, lr}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
     366:	4b12      	ldr	r3, [pc, #72]	; (3b0 <RTC_Handler+0x4c>)
     368:	681b      	ldr	r3, [r3, #0]

	Rtc *const rtc_module = module->hw;
     36a:	681c      	ldr	r4, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
     36c:	8ada      	ldrh	r2, [r3, #22]
	callback_mask &= module->registered_callback;
     36e:	8a99      	ldrh	r1, [r3, #20]
     370:	1c08      	adds	r0, r1, #0
     372:	4010      	ands	r0, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     374:	7a22      	ldrb	r2, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     376:	79e1      	ldrb	r1, [r4, #7]
     378:	400a      	ands	r2, r1

	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     37a:	09d1      	lsrs	r1, r2, #7
     37c:	d006      	beq.n	38c <RTC_Handler+0x28>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     37e:	0741      	lsls	r1, r0, #29
     380:	d501      	bpl.n	386 <RTC_Handler+0x22>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     382:	691b      	ldr	r3, [r3, #16]
     384:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     386:	2380      	movs	r3, #128	; 0x80
     388:	7223      	strb	r3, [r4, #8]
     38a:	e010      	b.n	3ae <RTC_Handler+0x4a>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     38c:	07d1      	lsls	r1, r2, #31
     38e:	d506      	bpl.n	39e <RTC_Handler+0x3a>
		/* Compare 0 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     390:	07c2      	lsls	r2, r0, #31
     392:	d501      	bpl.n	398 <RTC_Handler+0x34>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     394:	689b      	ldr	r3, [r3, #8]
     396:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     398:	2301      	movs	r3, #1
     39a:	7223      	strb	r3, [r4, #8]
     39c:	e007      	b.n	3ae <RTC_Handler+0x4a>

	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     39e:	0791      	lsls	r1, r2, #30
     3a0:	d505      	bpl.n	3ae <RTC_Handler+0x4a>
		#if (RTC_NUM_OF_COMP16 > 1) || defined(__DOXYGEN__)
		/* Compare 1 interrupt */
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     3a2:	0782      	lsls	r2, r0, #30
     3a4:	d501      	bpl.n	3aa <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     3a6:	68db      	ldr	r3, [r3, #12]
     3a8:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     3aa:	2302      	movs	r3, #2
     3ac:	7223      	strb	r3, [r4, #8]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
     3ae:	bd10      	pop	{r4, pc}
     3b0:	200001dc 	.word	0x200001dc

000003b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     3b4:	e7fe      	b.n	3b4 <Dummy_Handler>
     3b6:	46c0      	nop			; (mov r8, r8)

000003b8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     3b8:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     3ba:	4b19      	ldr	r3, [pc, #100]	; (420 <Reset_Handler+0x68>)
     3bc:	4a19      	ldr	r2, [pc, #100]	; (424 <Reset_Handler+0x6c>)
     3be:	429a      	cmp	r2, r3
     3c0:	d003      	beq.n	3ca <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     3c2:	4b19      	ldr	r3, [pc, #100]	; (428 <Reset_Handler+0x70>)
     3c4:	4a16      	ldr	r2, [pc, #88]	; (420 <Reset_Handler+0x68>)
     3c6:	429a      	cmp	r2, r3
     3c8:	d304      	bcc.n	3d4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     3ca:	4b18      	ldr	r3, [pc, #96]	; (42c <Reset_Handler+0x74>)
     3cc:	4a18      	ldr	r2, [pc, #96]	; (430 <Reset_Handler+0x78>)
     3ce:	429a      	cmp	r2, r3
     3d0:	d310      	bcc.n	3f4 <Reset_Handler+0x3c>
     3d2:	e01b      	b.n	40c <Reset_Handler+0x54>
     3d4:	4b17      	ldr	r3, [pc, #92]	; (434 <Reset_Handler+0x7c>)
     3d6:	4814      	ldr	r0, [pc, #80]	; (428 <Reset_Handler+0x70>)
     3d8:	3003      	adds	r0, #3
     3da:	1ac0      	subs	r0, r0, r3
     3dc:	0880      	lsrs	r0, r0, #2
     3de:	3001      	adds	r0, #1
     3e0:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     3e2:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
     3e4:	490e      	ldr	r1, [pc, #56]	; (420 <Reset_Handler+0x68>)
     3e6:	4a0f      	ldr	r2, [pc, #60]	; (424 <Reset_Handler+0x6c>)
     3e8:	58d4      	ldr	r4, [r2, r3]
     3ea:	50cc      	str	r4, [r1, r3]
     3ec:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     3ee:	4283      	cmp	r3, r0
     3f0:	d1fa      	bne.n	3e8 <Reset_Handler+0x30>
     3f2:	e7ea      	b.n	3ca <Reset_Handler+0x12>
     3f4:	4b0e      	ldr	r3, [pc, #56]	; (430 <Reset_Handler+0x78>)
     3f6:	1d1a      	adds	r2, r3, #4
     3f8:	490c      	ldr	r1, [pc, #48]	; (42c <Reset_Handler+0x74>)
     3fa:	3103      	adds	r1, #3
     3fc:	1a89      	subs	r1, r1, r2
     3fe:	0889      	lsrs	r1, r1, #2
     400:	0089      	lsls	r1, r1, #2
     402:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
     404:	2100      	movs	r1, #0
     406:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     408:	4293      	cmp	r3, r2
     40a:	d1fc      	bne.n	406 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     40c:	4b0a      	ldr	r3, [pc, #40]	; (438 <Reset_Handler+0x80>)
     40e:	21ff      	movs	r1, #255	; 0xff
     410:	4a0a      	ldr	r2, [pc, #40]	; (43c <Reset_Handler+0x84>)
     412:	438a      	bics	r2, r1
     414:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
     416:	4b0a      	ldr	r3, [pc, #40]	; (440 <Reset_Handler+0x88>)
     418:	4798      	blx	r3

        /* Branch to main function */
        main();
     41a:	4b0a      	ldr	r3, [pc, #40]	; (444 <Reset_Handler+0x8c>)
     41c:	4798      	blx	r3
     41e:	e7fe      	b.n	41e <Reset_Handler+0x66>
     420:	20000000 	.word	0x20000000
     424:	00002324 	.word	0x00002324
     428:	2000012c 	.word	0x2000012c
     42c:	200001fc 	.word	0x200001fc
     430:	20000130 	.word	0x20000130
     434:	20000004 	.word	0x20000004
     438:	e000ed00 	.word	0xe000ed00
     43c:	00000000 	.word	0x00000000
     440:	00001fa5 	.word	0x00001fa5
     444:	000013a5 	.word	0x000013a5

00000448 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     448:	b508      	push	{r3, lr}
	switch (clock_source) {
     44a:	2808      	cmp	r0, #8
     44c:	d834      	bhi.n	4b8 <system_clock_source_get_hz+0x70>
     44e:	0080      	lsls	r0, r0, #2
     450:	4b1b      	ldr	r3, [pc, #108]	; (4c0 <system_clock_source_get_hz+0x78>)
     452:	581b      	ldr	r3, [r3, r0]
     454:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     456:	2080      	movs	r0, #128	; 0x80
     458:	0200      	lsls	r0, r0, #8
     45a:	e030      	b.n	4be <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     45c:	4b19      	ldr	r3, [pc, #100]	; (4c4 <system_clock_source_get_hz+0x7c>)
     45e:	6918      	ldr	r0, [r3, #16]
     460:	e02d      	b.n	4be <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     462:	4b19      	ldr	r3, [pc, #100]	; (4c8 <system_clock_source_get_hz+0x80>)
     464:	6a18      	ldr	r0, [r3, #32]
     466:	0580      	lsls	r0, r0, #22
     468:	0f80      	lsrs	r0, r0, #30
     46a:	4b18      	ldr	r3, [pc, #96]	; (4cc <system_clock_source_get_hz+0x84>)
     46c:	40c3      	lsrs	r3, r0
     46e:	1c18      	adds	r0, r3, #0
     470:	e025      	b.n	4be <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     472:	4b14      	ldr	r3, [pc, #80]	; (4c4 <system_clock_source_get_hz+0x7c>)
     474:	6958      	ldr	r0, [r3, #20]
     476:	e022      	b.n	4be <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     478:	4b12      	ldr	r3, [pc, #72]	; (4c4 <system_clock_source_get_hz+0x7c>)
     47a:	681b      	ldr	r3, [r3, #0]
     47c:	2002      	movs	r0, #2
     47e:	4018      	ands	r0, r3
     480:	d01d      	beq.n	4be <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     482:	4911      	ldr	r1, [pc, #68]	; (4c8 <system_clock_source_get_hz+0x80>)
     484:	2210      	movs	r2, #16
     486:	68cb      	ldr	r3, [r1, #12]
     488:	421a      	tst	r2, r3
     48a:	d0fc      	beq.n	486 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     48c:	4b0d      	ldr	r3, [pc, #52]	; (4c4 <system_clock_source_get_hz+0x7c>)
     48e:	681b      	ldr	r3, [r3, #0]
     490:	075a      	lsls	r2, r3, #29
     492:	d513      	bpl.n	4bc <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     494:	2000      	movs	r0, #0
     496:	4b0e      	ldr	r3, [pc, #56]	; (4d0 <system_clock_source_get_hz+0x88>)
     498:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     49a:	4b0a      	ldr	r3, [pc, #40]	; (4c4 <system_clock_source_get_hz+0x7c>)
     49c:	689b      	ldr	r3, [r3, #8]
     49e:	041b      	lsls	r3, r3, #16
     4a0:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     4a2:	4358      	muls	r0, r3
     4a4:	e00b      	b.n	4be <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     4a6:	2350      	movs	r3, #80	; 0x50
     4a8:	4a07      	ldr	r2, [pc, #28]	; (4c8 <system_clock_source_get_hz+0x80>)
     4aa:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     4ac:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     4ae:	075a      	lsls	r2, r3, #29
     4b0:	d505      	bpl.n	4be <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     4b2:	4b04      	ldr	r3, [pc, #16]	; (4c4 <system_clock_source_get_hz+0x7c>)
     4b4:	68d8      	ldr	r0, [r3, #12]
     4b6:	e002      	b.n	4be <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
     4b8:	2000      	movs	r0, #0
     4ba:	e000      	b.n	4be <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     4bc:	4805      	ldr	r0, [pc, #20]	; (4d4 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
     4be:	bd08      	pop	{r3, pc}
     4c0:	000021f4 	.word	0x000021f4
     4c4:	2000014c 	.word	0x2000014c
     4c8:	40000800 	.word	0x40000800
     4cc:	007a1200 	.word	0x007a1200
     4d0:	00000899 	.word	0x00000899
     4d4:	02dc6c00 	.word	0x02dc6c00

000004d8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     4d8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     4da:	4b0c      	ldr	r3, [pc, #48]	; (50c <system_clock_source_osc8m_set_config+0x34>)
     4dc:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     4de:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     4e0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     4e2:	7840      	ldrb	r0, [r0, #1]
     4e4:	2201      	movs	r2, #1
     4e6:	4010      	ands	r0, r2
     4e8:	0180      	lsls	r0, r0, #6
     4ea:	2640      	movs	r6, #64	; 0x40
     4ec:	43b4      	bics	r4, r6
     4ee:	4304      	orrs	r4, r0
     4f0:	402a      	ands	r2, r5
     4f2:	01d0      	lsls	r0, r2, #7
     4f4:	2280      	movs	r2, #128	; 0x80
     4f6:	4394      	bics	r4, r2
     4f8:	1c22      	adds	r2, r4, #0
     4fa:	4302      	orrs	r2, r0
     4fc:	2003      	movs	r0, #3
     4fe:	4001      	ands	r1, r0
     500:	0209      	lsls	r1, r1, #8
     502:	4803      	ldr	r0, [pc, #12]	; (510 <system_clock_source_osc8m_set_config+0x38>)
     504:	4002      	ands	r2, r0
     506:	430a      	orrs	r2, r1
     508:	621a      	str	r2, [r3, #32]
}
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	40000800 	.word	0x40000800
     510:	fffffcff 	.word	0xfffffcff

00000514 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     514:	2808      	cmp	r0, #8
     516:	d843      	bhi.n	5a0 <system_clock_source_enable+0x8c>
     518:	0080      	lsls	r0, r0, #2
     51a:	4b22      	ldr	r3, [pc, #136]	; (5a4 <system_clock_source_enable+0x90>)
     51c:	581b      	ldr	r3, [r3, r0]
     51e:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     520:	2000      	movs	r0, #0
     522:	e03e      	b.n	5a2 <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     524:	4b20      	ldr	r3, [pc, #128]	; (5a8 <system_clock_source_enable+0x94>)
     526:	6a19      	ldr	r1, [r3, #32]
     528:	2202      	movs	r2, #2
     52a:	430a      	orrs	r2, r1
     52c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
     52e:	2000      	movs	r0, #0
     530:	e037      	b.n	5a2 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     532:	4b1d      	ldr	r3, [pc, #116]	; (5a8 <system_clock_source_enable+0x94>)
     534:	6999      	ldr	r1, [r3, #24]
     536:	2202      	movs	r2, #2
     538:	430a      	orrs	r2, r1
     53a:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     53c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
     53e:	e030      	b.n	5a2 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     540:	4b19      	ldr	r3, [pc, #100]	; (5a8 <system_clock_source_enable+0x94>)
     542:	8a19      	ldrh	r1, [r3, #16]
     544:	2202      	movs	r2, #2
     546:	430a      	orrs	r2, r1
     548:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     54a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
     54c:	e029      	b.n	5a2 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     54e:	4b16      	ldr	r3, [pc, #88]	; (5a8 <system_clock_source_enable+0x94>)
     550:	8a99      	ldrh	r1, [r3, #20]
     552:	2202      	movs	r2, #2
     554:	430a      	orrs	r2, r1
     556:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     558:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
     55a:	e022      	b.n	5a2 <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     55c:	4b13      	ldr	r3, [pc, #76]	; (5ac <system_clock_source_enable+0x98>)
     55e:	6819      	ldr	r1, [r3, #0]
     560:	2202      	movs	r2, #2
     562:	430a      	orrs	r2, r1
     564:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     566:	681a      	ldr	r2, [r3, #0]
     568:	4b11      	ldr	r3, [pc, #68]	; (5b0 <system_clock_source_enable+0x9c>)
     56a:	401a      	ands	r2, r3
     56c:	4b0e      	ldr	r3, [pc, #56]	; (5a8 <system_clock_source_enable+0x94>)
     56e:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     570:	1c19      	adds	r1, r3, #0
     572:	2210      	movs	r2, #16
     574:	68cb      	ldr	r3, [r1, #12]
     576:	421a      	tst	r2, r3
     578:	d0fc      	beq.n	574 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     57a:	4a0c      	ldr	r2, [pc, #48]	; (5ac <system_clock_source_enable+0x98>)
     57c:	6891      	ldr	r1, [r2, #8]
     57e:	4b0a      	ldr	r3, [pc, #40]	; (5a8 <system_clock_source_enable+0x94>)
     580:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     582:	6851      	ldr	r1, [r2, #4]
     584:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     586:	6812      	ldr	r2, [r2, #0]
     588:	b292      	uxth	r2, r2
     58a:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     58c:	2000      	movs	r0, #0
     58e:	e008      	b.n	5a2 <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     590:	4a05      	ldr	r2, [pc, #20]	; (5a8 <system_clock_source_enable+0x94>)
     592:	2344      	movs	r3, #68	; 0x44
     594:	5cd0      	ldrb	r0, [r2, r3]
     596:	2102      	movs	r1, #2
     598:	4301      	orrs	r1, r0
     59a:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     59c:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
     59e:	e000      	b.n	5a2 <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     5a0:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     5a2:	4770      	bx	lr
     5a4:	00002218 	.word	0x00002218
     5a8:	40000800 	.word	0x40000800
     5ac:	2000014c 	.word	0x2000014c
     5b0:	0000ff7f 	.word	0x0000ff7f

000005b4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     5b4:	b530      	push	{r4, r5, lr}
     5b6:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     5b8:	22c2      	movs	r2, #194	; 0xc2
     5ba:	00d2      	lsls	r2, r2, #3
     5bc:	4b19      	ldr	r3, [pc, #100]	; (624 <system_clock_init+0x70>)
     5be:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     5c0:	4b19      	ldr	r3, [pc, #100]	; (628 <system_clock_init+0x74>)
     5c2:	685a      	ldr	r2, [r3, #4]
     5c4:	211e      	movs	r1, #30
     5c6:	438a      	bics	r2, r1
     5c8:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     5ca:	2301      	movs	r3, #1
     5cc:	466a      	mov	r2, sp
     5ce:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     5d0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     5d2:	4d16      	ldr	r5, [pc, #88]	; (62c <system_clock_init+0x78>)
     5d4:	b2e0      	uxtb	r0, r4
     5d6:	4669      	mov	r1, sp
     5d8:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     5da:	3401      	adds	r4, #1
     5dc:	2c25      	cmp	r4, #37	; 0x25
     5de:	d1f9      	bne.n	5d4 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
     5e0:	a803      	add	r0, sp, #12
     5e2:	2400      	movs	r4, #0
     5e4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     5e6:	2501      	movs	r5, #1
     5e8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     5ea:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     5ec:	4b10      	ldr	r3, [pc, #64]	; (630 <system_clock_init+0x7c>)
     5ee:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     5f0:	2006      	movs	r0, #6
     5f2:	4b10      	ldr	r3, [pc, #64]	; (634 <system_clock_init+0x80>)
     5f4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     5f6:	4b10      	ldr	r3, [pc, #64]	; (638 <system_clock_init+0x84>)
     5f8:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
     5fa:	4b10      	ldr	r3, [pc, #64]	; (63c <system_clock_init+0x88>)
     5fc:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
     5fe:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     600:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     602:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     604:	466b      	mov	r3, sp
     606:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     608:	2306      	movs	r3, #6
     60a:	466a      	mov	r2, sp
     60c:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     60e:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     610:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     612:	2000      	movs	r0, #0
     614:	4669      	mov	r1, sp
     616:	4b0a      	ldr	r3, [pc, #40]	; (640 <system_clock_init+0x8c>)
     618:	4798      	blx	r3
     61a:	2000      	movs	r0, #0
     61c:	4b09      	ldr	r3, [pc, #36]	; (644 <system_clock_init+0x90>)
     61e:	4798      	blx	r3
#endif
}
     620:	b005      	add	sp, #20
     622:	bd30      	pop	{r4, r5, pc}
     624:	40000800 	.word	0x40000800
     628:	41004000 	.word	0x41004000
     62c:	0000087d 	.word	0x0000087d
     630:	000004d9 	.word	0x000004d9
     634:	00000515 	.word	0x00000515
     638:	00000649 	.word	0x00000649
     63c:	40000400 	.word	0x40000400
     640:	0000066d 	.word	0x0000066d
     644:	00000721 	.word	0x00000721

00000648 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     648:	4b06      	ldr	r3, [pc, #24]	; (664 <system_gclk_init+0x1c>)
     64a:	6999      	ldr	r1, [r3, #24]
     64c:	2208      	movs	r2, #8
     64e:	430a      	orrs	r2, r1
     650:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     652:	2201      	movs	r2, #1
     654:	4b04      	ldr	r3, [pc, #16]	; (668 <system_gclk_init+0x20>)
     656:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     658:	1c19      	adds	r1, r3, #0
     65a:	780b      	ldrb	r3, [r1, #0]
     65c:	4213      	tst	r3, r2
     65e:	d1fc      	bne.n	65a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     660:	4770      	bx	lr
     662:	46c0      	nop			; (mov r8, r8)
     664:	40000400 	.word	0x40000400
     668:	40000c00 	.word	0x40000c00

0000066c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     66e:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     670:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     672:	780d      	ldrb	r5, [r1, #0]
     674:	022d      	lsls	r5, r5, #8
     676:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     678:	784b      	ldrb	r3, [r1, #1]
     67a:	2b00      	cmp	r3, #0
     67c:	d002      	beq.n	684 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     67e:	2380      	movs	r3, #128	; 0x80
     680:	02db      	lsls	r3, r3, #11
     682:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     684:	7a4b      	ldrb	r3, [r1, #9]
     686:	2b00      	cmp	r3, #0
     688:	d002      	beq.n	690 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     68a:	2380      	movs	r3, #128	; 0x80
     68c:	031b      	lsls	r3, r3, #12
     68e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     690:	684c      	ldr	r4, [r1, #4]
     692:	2c01      	cmp	r4, #1
     694:	d917      	bls.n	6c6 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     696:	1e63      	subs	r3, r4, #1
     698:	421c      	tst	r4, r3
     69a:	d10f      	bne.n	6bc <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     69c:	2c02      	cmp	r4, #2
     69e:	d906      	bls.n	6ae <system_gclk_gen_set_config+0x42>
     6a0:	2302      	movs	r3, #2
     6a2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     6a4:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
     6a6:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     6a8:	429c      	cmp	r4, r3
     6aa:	d8fb      	bhi.n	6a4 <system_gclk_gen_set_config+0x38>
     6ac:	e000      	b.n	6b0 <system_gclk_gen_set_config+0x44>
     6ae:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     6b0:	0217      	lsls	r7, r2, #8
     6b2:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     6b4:	2380      	movs	r3, #128	; 0x80
     6b6:	035b      	lsls	r3, r3, #13
     6b8:	431d      	orrs	r5, r3
     6ba:	e004      	b.n	6c6 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     6bc:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
     6be:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     6c0:	2380      	movs	r3, #128	; 0x80
     6c2:	029b      	lsls	r3, r3, #10
     6c4:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     6c6:	7a0b      	ldrb	r3, [r1, #8]
     6c8:	2b00      	cmp	r3, #0
     6ca:	d002      	beq.n	6d2 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     6cc:	2380      	movs	r3, #128	; 0x80
     6ce:	039b      	lsls	r3, r3, #14
     6d0:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     6d2:	4a0f      	ldr	r2, [pc, #60]	; (710 <system_gclk_gen_set_config+0xa4>)
     6d4:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
     6d6:	b25b      	sxtb	r3, r3
     6d8:	2b00      	cmp	r3, #0
     6da:	dbfb      	blt.n	6d4 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     6dc:	4b0d      	ldr	r3, [pc, #52]	; (714 <system_gclk_gen_set_config+0xa8>)
     6de:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     6e0:	4b0d      	ldr	r3, [pc, #52]	; (718 <system_gclk_gen_set_config+0xac>)
     6e2:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     6e4:	4a0a      	ldr	r2, [pc, #40]	; (710 <system_gclk_gen_set_config+0xa4>)
     6e6:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     6e8:	b25b      	sxtb	r3, r3
     6ea:	2b00      	cmp	r3, #0
     6ec:	dbfb      	blt.n	6e6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     6ee:	4b08      	ldr	r3, [pc, #32]	; (710 <system_gclk_gen_set_config+0xa4>)
     6f0:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     6f2:	1c1a      	adds	r2, r3, #0
     6f4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
     6f6:	b25b      	sxtb	r3, r3
     6f8:	2b00      	cmp	r3, #0
     6fa:	dbfb      	blt.n	6f4 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     6fc:	4b04      	ldr	r3, [pc, #16]	; (710 <system_gclk_gen_set_config+0xa4>)
     6fe:	6859      	ldr	r1, [r3, #4]
     700:	2280      	movs	r2, #128	; 0x80
     702:	0252      	lsls	r2, r2, #9
     704:	400a      	ands	r2, r1
     706:	4315      	orrs	r5, r2
     708:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     70a:	4b04      	ldr	r3, [pc, #16]	; (71c <system_gclk_gen_set_config+0xb0>)
     70c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     710:	40000c00 	.word	0x40000c00
     714:	00000991 	.word	0x00000991
     718:	40000c08 	.word	0x40000c08
     71c:	000009d1 	.word	0x000009d1

00000720 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     720:	b510      	push	{r4, lr}
     722:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     724:	4a0b      	ldr	r2, [pc, #44]	; (754 <system_gclk_gen_enable+0x34>)
     726:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     728:	b25b      	sxtb	r3, r3
     72a:	2b00      	cmp	r3, #0
     72c:	dbfb      	blt.n	726 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     72e:	4b0a      	ldr	r3, [pc, #40]	; (758 <system_gclk_gen_enable+0x38>)
     730:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     732:	4b0a      	ldr	r3, [pc, #40]	; (75c <system_gclk_gen_enable+0x3c>)
     734:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     736:	4a07      	ldr	r2, [pc, #28]	; (754 <system_gclk_gen_enable+0x34>)
     738:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     73a:	b25b      	sxtb	r3, r3
     73c:	2b00      	cmp	r3, #0
     73e:	dbfb      	blt.n	738 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     740:	4b04      	ldr	r3, [pc, #16]	; (754 <system_gclk_gen_enable+0x34>)
     742:	6859      	ldr	r1, [r3, #4]
     744:	2280      	movs	r2, #128	; 0x80
     746:	0252      	lsls	r2, r2, #9
     748:	430a      	orrs	r2, r1
     74a:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     74c:	4b04      	ldr	r3, [pc, #16]	; (760 <system_gclk_gen_enable+0x40>)
     74e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     750:	bd10      	pop	{r4, pc}
     752:	46c0      	nop			; (mov r8, r8)
     754:	40000c00 	.word	0x40000c00
     758:	00000991 	.word	0x00000991
     75c:	40000c04 	.word	0x40000c04
     760:	000009d1 	.word	0x000009d1

00000764 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     764:	b570      	push	{r4, r5, r6, lr}
     766:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     768:	4a1a      	ldr	r2, [pc, #104]	; (7d4 <system_gclk_gen_get_hz+0x70>)
     76a:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     76c:	b25b      	sxtb	r3, r3
     76e:	2b00      	cmp	r3, #0
     770:	dbfb      	blt.n	76a <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     772:	4b19      	ldr	r3, [pc, #100]	; (7d8 <system_gclk_gen_get_hz+0x74>)
     774:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     776:	4b19      	ldr	r3, [pc, #100]	; (7dc <system_gclk_gen_get_hz+0x78>)
     778:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     77a:	4a16      	ldr	r2, [pc, #88]	; (7d4 <system_gclk_gen_get_hz+0x70>)
     77c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     77e:	b25b      	sxtb	r3, r3
     780:	2b00      	cmp	r3, #0
     782:	dbfb      	blt.n	77c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     784:	4e13      	ldr	r6, [pc, #76]	; (7d4 <system_gclk_gen_get_hz+0x70>)
     786:	6870      	ldr	r0, [r6, #4]
     788:	04c0      	lsls	r0, r0, #19
     78a:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
     78c:	4b14      	ldr	r3, [pc, #80]	; (7e0 <system_gclk_gen_get_hz+0x7c>)
     78e:	4798      	blx	r3
     790:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     792:	4b12      	ldr	r3, [pc, #72]	; (7dc <system_gclk_gen_get_hz+0x78>)
     794:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     796:	6876      	ldr	r6, [r6, #4]
     798:	02f6      	lsls	r6, r6, #11
     79a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     79c:	4b11      	ldr	r3, [pc, #68]	; (7e4 <system_gclk_gen_get_hz+0x80>)
     79e:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     7a0:	4a0c      	ldr	r2, [pc, #48]	; (7d4 <system_gclk_gen_get_hz+0x70>)
     7a2:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
     7a4:	b25b      	sxtb	r3, r3
     7a6:	2b00      	cmp	r3, #0
     7a8:	dbfb      	blt.n	7a2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     7aa:	4b0a      	ldr	r3, [pc, #40]	; (7d4 <system_gclk_gen_get_hz+0x70>)
     7ac:	689c      	ldr	r4, [r3, #8]
     7ae:	0a24      	lsrs	r4, r4, #8
     7b0:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     7b2:	4b0d      	ldr	r3, [pc, #52]	; (7e8 <system_gclk_gen_get_hz+0x84>)
     7b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     7b6:	2e00      	cmp	r6, #0
     7b8:	d107      	bne.n	7ca <system_gclk_gen_get_hz+0x66>
     7ba:	2c01      	cmp	r4, #1
     7bc:	d907      	bls.n	7ce <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     7be:	1c28      	adds	r0, r5, #0
     7c0:	1c21      	adds	r1, r4, #0
     7c2:	4b0a      	ldr	r3, [pc, #40]	; (7ec <system_gclk_gen_get_hz+0x88>)
     7c4:	4798      	blx	r3
     7c6:	1c05      	adds	r5, r0, #0
     7c8:	e001      	b.n	7ce <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     7ca:	3401      	adds	r4, #1
     7cc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     7ce:	1c28      	adds	r0, r5, #0
     7d0:	bd70      	pop	{r4, r5, r6, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	40000c00 	.word	0x40000c00
     7d8:	00000991 	.word	0x00000991
     7dc:	40000c04 	.word	0x40000c04
     7e0:	00000449 	.word	0x00000449
     7e4:	40000c08 	.word	0x40000c08
     7e8:	000009d1 	.word	0x000009d1
     7ec:	00001e89 	.word	0x00001e89

000007f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     7f0:	b510      	push	{r4, lr}
     7f2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     7f4:	4b06      	ldr	r3, [pc, #24]	; (810 <system_gclk_chan_enable+0x20>)
     7f6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     7f8:	4b06      	ldr	r3, [pc, #24]	; (814 <system_gclk_chan_enable+0x24>)
     7fa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     7fc:	4b06      	ldr	r3, [pc, #24]	; (818 <system_gclk_chan_enable+0x28>)
     7fe:	8859      	ldrh	r1, [r3, #2]
     800:	2280      	movs	r2, #128	; 0x80
     802:	01d2      	lsls	r2, r2, #7
     804:	430a      	orrs	r2, r1
     806:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     808:	4b04      	ldr	r3, [pc, #16]	; (81c <system_gclk_chan_enable+0x2c>)
     80a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     80c:	bd10      	pop	{r4, pc}
     80e:	46c0      	nop			; (mov r8, r8)
     810:	00000991 	.word	0x00000991
     814:	40000c02 	.word	0x40000c02
     818:	40000c00 	.word	0x40000c00
     81c:	000009d1 	.word	0x000009d1

00000820 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     820:	b510      	push	{r4, lr}
     822:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     824:	4b0f      	ldr	r3, [pc, #60]	; (864 <system_gclk_chan_disable+0x44>)
     826:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     828:	4b0f      	ldr	r3, [pc, #60]	; (868 <system_gclk_chan_disable+0x48>)
     82a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     82c:	4b0f      	ldr	r3, [pc, #60]	; (86c <system_gclk_chan_disable+0x4c>)
     82e:	8858      	ldrh	r0, [r3, #2]
     830:	0500      	lsls	r0, r0, #20
     832:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     834:	8859      	ldrh	r1, [r3, #2]
     836:	4a0e      	ldr	r2, [pc, #56]	; (870 <system_gclk_chan_disable+0x50>)
     838:	400a      	ands	r2, r1
     83a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     83c:	8859      	ldrh	r1, [r3, #2]
     83e:	4a0d      	ldr	r2, [pc, #52]	; (874 <system_gclk_chan_disable+0x54>)
     840:	400a      	ands	r2, r1
     842:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     844:	1c19      	adds	r1, r3, #0
     846:	2280      	movs	r2, #128	; 0x80
     848:	01d2      	lsls	r2, r2, #7
     84a:	884b      	ldrh	r3, [r1, #2]
     84c:	4213      	tst	r3, r2
     84e:	d1fc      	bne.n	84a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     850:	4b06      	ldr	r3, [pc, #24]	; (86c <system_gclk_chan_disable+0x4c>)
     852:	0201      	lsls	r1, r0, #8
     854:	8858      	ldrh	r0, [r3, #2]
     856:	4a06      	ldr	r2, [pc, #24]	; (870 <system_gclk_chan_disable+0x50>)
     858:	4002      	ands	r2, r0
     85a:	430a      	orrs	r2, r1
     85c:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     85e:	4b06      	ldr	r3, [pc, #24]	; (878 <system_gclk_chan_disable+0x58>)
     860:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     862:	bd10      	pop	{r4, pc}
     864:	00000991 	.word	0x00000991
     868:	40000c02 	.word	0x40000c02
     86c:	40000c00 	.word	0x40000c00
     870:	fffff0ff 	.word	0xfffff0ff
     874:	ffffbfff 	.word	0xffffbfff
     878:	000009d1 	.word	0x000009d1

0000087c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
     87c:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     87e:	780c      	ldrb	r4, [r1, #0]
     880:	0224      	lsls	r4, r4, #8
     882:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
     884:	4b02      	ldr	r3, [pc, #8]	; (890 <system_gclk_chan_set_config+0x14>)
     886:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     888:	b2a4      	uxth	r4, r4
     88a:	4b02      	ldr	r3, [pc, #8]	; (894 <system_gclk_chan_set_config+0x18>)
     88c:	805c      	strh	r4, [r3, #2]
}
     88e:	bd10      	pop	{r4, pc}
     890:	00000821 	.word	0x00000821
     894:	40000c00 	.word	0x40000c00

00000898 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     898:	b510      	push	{r4, lr}
     89a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     89c:	4b06      	ldr	r3, [pc, #24]	; (8b8 <system_gclk_chan_get_hz+0x20>)
     89e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     8a0:	4b06      	ldr	r3, [pc, #24]	; (8bc <system_gclk_chan_get_hz+0x24>)
     8a2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     8a4:	4b06      	ldr	r3, [pc, #24]	; (8c0 <system_gclk_chan_get_hz+0x28>)
     8a6:	885c      	ldrh	r4, [r3, #2]
     8a8:	0524      	lsls	r4, r4, #20
     8aa:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     8ac:	4b05      	ldr	r3, [pc, #20]	; (8c4 <system_gclk_chan_get_hz+0x2c>)
     8ae:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     8b0:	1c20      	adds	r0, r4, #0
     8b2:	4b05      	ldr	r3, [pc, #20]	; (8c8 <system_gclk_chan_get_hz+0x30>)
     8b4:	4798      	blx	r3
}
     8b6:	bd10      	pop	{r4, pc}
     8b8:	00000991 	.word	0x00000991
     8bc:	40000c02 	.word	0x40000c02
     8c0:	40000c00 	.word	0x40000c00
     8c4:	000009d1 	.word	0x000009d1
     8c8:	00000765 	.word	0x00000765

000008cc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     8cc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     8ce:	78d3      	ldrb	r3, [r2, #3]
     8d0:	2b00      	cmp	r3, #0
     8d2:	d11e      	bne.n	912 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     8d4:	7813      	ldrb	r3, [r2, #0]
     8d6:	2b80      	cmp	r3, #128	; 0x80
     8d8:	d004      	beq.n	8e4 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     8da:	061b      	lsls	r3, r3, #24
     8dc:	2480      	movs	r4, #128	; 0x80
     8de:	0264      	lsls	r4, r4, #9
     8e0:	4323      	orrs	r3, r4
     8e2:	e000      	b.n	8e6 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     8e4:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     8e6:	7854      	ldrb	r4, [r2, #1]
     8e8:	2502      	movs	r5, #2
     8ea:	43ac      	bics	r4, r5
     8ec:	d10a      	bne.n	904 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     8ee:	7894      	ldrb	r4, [r2, #2]
     8f0:	2c00      	cmp	r4, #0
     8f2:	d103      	bne.n	8fc <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
     8f4:	2480      	movs	r4, #128	; 0x80
     8f6:	02a4      	lsls	r4, r4, #10
     8f8:	4323      	orrs	r3, r4
     8fa:	e002      	b.n	902 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     8fc:	24c0      	movs	r4, #192	; 0xc0
     8fe:	02e4      	lsls	r4, r4, #11
     900:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     902:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     904:	7854      	ldrb	r4, [r2, #1]
     906:	3c01      	subs	r4, #1
     908:	2c01      	cmp	r4, #1
     90a:	d804      	bhi.n	916 <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     90c:	4c11      	ldr	r4, [pc, #68]	; (954 <_system_pinmux_config+0x88>)
     90e:	4023      	ands	r3, r4
     910:	e001      	b.n	916 <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
     912:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     914:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     916:	040d      	lsls	r5, r1, #16
     918:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     91a:	24a0      	movs	r4, #160	; 0xa0
     91c:	05e4      	lsls	r4, r4, #23
     91e:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     920:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     922:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
     924:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     926:	24d0      	movs	r4, #208	; 0xd0
     928:	0624      	lsls	r4, r4, #24
     92a:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     92c:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     92e:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     930:	78d4      	ldrb	r4, [r2, #3]
     932:	2c00      	cmp	r4, #0
     934:	d10c      	bne.n	950 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     936:	035c      	lsls	r4, r3, #13
     938:	d505      	bpl.n	946 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     93a:	7893      	ldrb	r3, [r2, #2]
     93c:	2b01      	cmp	r3, #1
     93e:	d101      	bne.n	944 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
     940:	6181      	str	r1, [r0, #24]
     942:	e000      	b.n	946 <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
     944:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     946:	7853      	ldrb	r3, [r2, #1]
     948:	3b01      	subs	r3, #1
     94a:	2b01      	cmp	r3, #1
     94c:	d800      	bhi.n	950 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
     94e:	6081      	str	r1, [r0, #8]
		}
	}
}
     950:	bd30      	pop	{r4, r5, pc}
     952:	46c0      	nop			; (mov r8, r8)
     954:	fffbffff 	.word	0xfffbffff

00000958 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     958:	b508      	push	{r3, lr}
     95a:	1c03      	adds	r3, r0, #0
     95c:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     95e:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     960:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     962:	2900      	cmp	r1, #0
     964:	d103      	bne.n	96e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     966:	0958      	lsrs	r0, r3, #5
     968:	01c0      	lsls	r0, r0, #7
     96a:	4904      	ldr	r1, [pc, #16]	; (97c <system_pinmux_pin_set_config+0x24>)
     96c:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     96e:	211f      	movs	r1, #31
     970:	400b      	ands	r3, r1
     972:	2101      	movs	r1, #1
     974:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
     976:	4b02      	ldr	r3, [pc, #8]	; (980 <system_pinmux_pin_set_config+0x28>)
     978:	4798      	blx	r3
}
     97a:	bd08      	pop	{r3, pc}
     97c:	41004400 	.word	0x41004400
     980:	000008cd 	.word	0x000008cd

00000984 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     984:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     986:	4b01      	ldr	r3, [pc, #4]	; (98c <system_init+0x8>)
     988:	4798      	blx	r3
}
     98a:	bd08      	pop	{r3, pc}
     98c:	000005b5 	.word	0x000005b5

00000990 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     990:	4b0c      	ldr	r3, [pc, #48]	; (9c4 <cpu_irq_enter_critical+0x34>)
     992:	681b      	ldr	r3, [r3, #0]
     994:	2b00      	cmp	r3, #0
     996:	d110      	bne.n	9ba <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     998:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     99c:	2b00      	cmp	r3, #0
     99e:	d109      	bne.n	9b4 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     9a0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     9a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     9a6:	2200      	movs	r2, #0
     9a8:	4b07      	ldr	r3, [pc, #28]	; (9c8 <cpu_irq_enter_critical+0x38>)
     9aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     9ac:	2201      	movs	r2, #1
     9ae:	4b07      	ldr	r3, [pc, #28]	; (9cc <cpu_irq_enter_critical+0x3c>)
     9b0:	701a      	strb	r2, [r3, #0]
     9b2:	e002      	b.n	9ba <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     9b4:	2200      	movs	r2, #0
     9b6:	4b05      	ldr	r3, [pc, #20]	; (9cc <cpu_irq_enter_critical+0x3c>)
     9b8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     9ba:	4b02      	ldr	r3, [pc, #8]	; (9c4 <cpu_irq_enter_critical+0x34>)
     9bc:	681a      	ldr	r2, [r3, #0]
     9be:	3201      	adds	r2, #1
     9c0:	601a      	str	r2, [r3, #0]
}
     9c2:	4770      	bx	lr
     9c4:	20000164 	.word	0x20000164
     9c8:	20000004 	.word	0x20000004
     9cc:	20000168 	.word	0x20000168

000009d0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     9d0:	4b08      	ldr	r3, [pc, #32]	; (9f4 <cpu_irq_leave_critical+0x24>)
     9d2:	681a      	ldr	r2, [r3, #0]
     9d4:	3a01      	subs	r2, #1
     9d6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     9d8:	681b      	ldr	r3, [r3, #0]
     9da:	2b00      	cmp	r3, #0
     9dc:	d109      	bne.n	9f2 <cpu_irq_leave_critical+0x22>
     9de:	4b06      	ldr	r3, [pc, #24]	; (9f8 <cpu_irq_leave_critical+0x28>)
     9e0:	781b      	ldrb	r3, [r3, #0]
     9e2:	2b00      	cmp	r3, #0
     9e4:	d005      	beq.n	9f2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     9e6:	2201      	movs	r2, #1
     9e8:	4b04      	ldr	r3, [pc, #16]	; (9fc <cpu_irq_leave_critical+0x2c>)
     9ea:	701a      	strb	r2, [r3, #0]
     9ec:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     9f0:	b662      	cpsie	i
	}
}
     9f2:	4770      	bx	lr
     9f4:	20000164 	.word	0x20000164
     9f8:	20000168 	.word	0x20000168
     9fc:	20000004 	.word	0x20000004

00000a00 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     a00:	b510      	push	{r4, lr}
     a02:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     a04:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a06:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     a08:	4299      	cmp	r1, r3
     a0a:	d30c      	bcc.n	a26 <_sercom_get_sync_baud_val+0x26>
     a0c:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     a0e:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     a10:	1c60      	adds	r0, r4, #1
     a12:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     a14:	428b      	cmp	r3, r1
     a16:	d801      	bhi.n	a1c <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     a18:	1c04      	adds	r4, r0, #0
     a1a:	e7f8      	b.n	a0e <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a1c:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     a1e:	2cff      	cmp	r4, #255	; 0xff
     a20:	d801      	bhi.n	a26 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     a22:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     a24:	2000      	movs	r0, #0
	}
}
     a26:	bd10      	pop	{r4, pc}

00000a28 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     a28:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2a:	465f      	mov	r7, fp
     a2c:	4656      	mov	r6, sl
     a2e:	464d      	mov	r5, r9
     a30:	4644      	mov	r4, r8
     a32:	b4f0      	push	{r4, r5, r6, r7}
     a34:	b087      	sub	sp, #28
     a36:	1c06      	adds	r6, r0, #0
     a38:	1c0d      	adds	r5, r1, #0
     a3a:	9204      	str	r2, [sp, #16]
     a3c:	aa10      	add	r2, sp, #64	; 0x40
     a3e:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a40:	1c32      	adds	r2, r6, #0
     a42:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a44:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a46:	428a      	cmp	r2, r1
     a48:	d900      	bls.n	a4c <_sercom_get_async_baud_val+0x24>
     a4a:	e0b3      	b.n	bb4 <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     a4c:	2b00      	cmp	r3, #0
     a4e:	d14b      	bne.n	ae8 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     a50:	2100      	movs	r1, #0
     a52:	1c32      	adds	r2, r6, #0
     a54:	4c5e      	ldr	r4, [pc, #376]	; (bd0 <_sercom_get_async_baud_val+0x1a8>)
     a56:	47a0      	blx	r4
     a58:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     a5a:	1c2e      	adds	r6, r5, #0
     a5c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     a5e:	2000      	movs	r0, #0
     a60:	2100      	movs	r1, #0
     a62:	2200      	movs	r2, #0
     a64:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     a66:	243f      	movs	r4, #63	; 0x3f
     a68:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     a6a:	2501      	movs	r5, #1
     a6c:	46a8      	mov	r8, r5
     a6e:	9002      	str	r0, [sp, #8]
     a70:	9103      	str	r1, [sp, #12]
     a72:	4661      	mov	r1, ip
     a74:	3920      	subs	r1, #32
     a76:	d403      	bmi.n	a80 <_sercom_get_async_baud_val+0x58>
     a78:	4640      	mov	r0, r8
     a7a:	4088      	lsls	r0, r1
     a7c:	4681      	mov	r9, r0
     a7e:	e005      	b.n	a8c <_sercom_get_async_baud_val+0x64>
     a80:	2120      	movs	r1, #32
     a82:	4665      	mov	r5, ip
     a84:	1b4c      	subs	r4, r1, r5
     a86:	4640      	mov	r0, r8
     a88:	40e0      	lsrs	r0, r4
     a8a:	4681      	mov	r9, r0
     a8c:	4641      	mov	r1, r8
     a8e:	4664      	mov	r4, ip
     a90:	40a1      	lsls	r1, r4
     a92:	468a      	mov	sl, r1

		r = r << 1;
     a94:	1c10      	adds	r0, r2, #0
     a96:	1c19      	adds	r1, r3, #0
     a98:	1880      	adds	r0, r0, r2
     a9a:	4159      	adcs	r1, r3
     a9c:	1c02      	adds	r2, r0, #0
     a9e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     aa0:	465d      	mov	r5, fp
     aa2:	464c      	mov	r4, r9
     aa4:	4225      	tst	r5, r4
     aa6:	d002      	beq.n	aae <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     aa8:	4642      	mov	r2, r8
     aaa:	4302      	orrs	r2, r0
     aac:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     aae:	429f      	cmp	r7, r3
     ab0:	d80c      	bhi.n	acc <_sercom_get_async_baud_val+0xa4>
     ab2:	d101      	bne.n	ab8 <_sercom_get_async_baud_val+0x90>
     ab4:	4296      	cmp	r6, r2
     ab6:	d809      	bhi.n	acc <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     ab8:	1b92      	subs	r2, r2, r6
     aba:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     abc:	4650      	mov	r0, sl
     abe:	9d02      	ldr	r5, [sp, #8]
     ac0:	4328      	orrs	r0, r5
     ac2:	4649      	mov	r1, r9
     ac4:	9c03      	ldr	r4, [sp, #12]
     ac6:	4321      	orrs	r1, r4
     ac8:	9002      	str	r0, [sp, #8]
     aca:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     acc:	4665      	mov	r5, ip
     ace:	3d01      	subs	r5, #1
     ad0:	46ac      	mov	ip, r5
     ad2:	d2ce      	bcs.n	a72 <_sercom_get_async_baud_val+0x4a>
     ad4:	9802      	ldr	r0, [sp, #8]
     ad6:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     ad8:	4b3c      	ldr	r3, [pc, #240]	; (bcc <_sercom_get_async_baud_val+0x1a4>)
     ada:	4a3b      	ldr	r2, [pc, #236]	; (bc8 <_sercom_get_async_baud_val+0x1a0>)
     adc:	1a12      	subs	r2, r2, r0
     ade:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     ae0:	0c12      	lsrs	r2, r2, #16
     ae2:	041b      	lsls	r3, r3, #16
     ae4:	431a      	orrs	r2, r3
     ae6:	e062      	b.n	bae <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     ae8:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     aea:	2b01      	cmp	r3, #1
     aec:	d15f      	bne.n	bae <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     aee:	0f4f      	lsrs	r7, r1, #29
     af0:	46b9      	mov	r9, r7
     af2:	00cd      	lsls	r5, r1, #3
     af4:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     af6:	2100      	movs	r1, #0
     af8:	1c32      	adds	r2, r6, #0
     afa:	2300      	movs	r3, #0
     afc:	4c34      	ldr	r4, [pc, #208]	; (bd0 <_sercom_get_async_baud_val+0x1a8>)
     afe:	47a0      	blx	r4
     b00:	1c06      	adds	r6, r0, #0
     b02:	1c0f      	adds	r7, r1, #0
     b04:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     b06:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     b08:	9602      	str	r6, [sp, #8]
     b0a:	9703      	str	r7, [sp, #12]
     b0c:	469a      	mov	sl, r3
     b0e:	4650      	mov	r0, sl
     b10:	b2c0      	uxtb	r0, r0
     b12:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     b14:	2100      	movs	r1, #0
     b16:	4688      	mov	r8, r1
     b18:	2200      	movs	r2, #0
     b1a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     b1c:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     b1e:	1c27      	adds	r7, r4, #0
     b20:	3f20      	subs	r7, #32
     b22:	d403      	bmi.n	b2c <_sercom_get_async_baud_val+0x104>
     b24:	1c2e      	adds	r6, r5, #0
     b26:	40be      	lsls	r6, r7
     b28:	9601      	str	r6, [sp, #4]
     b2a:	e004      	b.n	b36 <_sercom_get_async_baud_val+0x10e>
     b2c:	2020      	movs	r0, #32
     b2e:	1b07      	subs	r7, r0, r4
     b30:	1c29      	adds	r1, r5, #0
     b32:	40f9      	lsrs	r1, r7
     b34:	9101      	str	r1, [sp, #4]
     b36:	1c2e      	adds	r6, r5, #0
     b38:	40a6      	lsls	r6, r4
     b3a:	9600      	str	r6, [sp, #0]

		r = r << 1;
     b3c:	1c10      	adds	r0, r2, #0
     b3e:	1c19      	adds	r1, r3, #0
     b40:	1880      	adds	r0, r0, r2
     b42:	4159      	adcs	r1, r3
     b44:	1c02      	adds	r2, r0, #0
     b46:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     b48:	465f      	mov	r7, fp
     b4a:	4037      	ands	r7, r6
     b4c:	46bc      	mov	ip, r7
     b4e:	9e01      	ldr	r6, [sp, #4]
     b50:	464f      	mov	r7, r9
     b52:	403e      	ands	r6, r7
     b54:	4667      	mov	r7, ip
     b56:	433e      	orrs	r6, r7
     b58:	d002      	beq.n	b60 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     b5a:	1c2a      	adds	r2, r5, #0
     b5c:	4302      	orrs	r2, r0
     b5e:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     b60:	9803      	ldr	r0, [sp, #12]
     b62:	4298      	cmp	r0, r3
     b64:	d80b      	bhi.n	b7e <_sercom_get_async_baud_val+0x156>
     b66:	d102      	bne.n	b6e <_sercom_get_async_baud_val+0x146>
     b68:	9902      	ldr	r1, [sp, #8]
     b6a:	4291      	cmp	r1, r2
     b6c:	d807      	bhi.n	b7e <_sercom_get_async_baud_val+0x156>
			r = r - d;
     b6e:	9e02      	ldr	r6, [sp, #8]
     b70:	9f03      	ldr	r7, [sp, #12]
     b72:	1b92      	subs	r2, r2, r6
     b74:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     b76:	4647      	mov	r7, r8
     b78:	9800      	ldr	r0, [sp, #0]
     b7a:	4307      	orrs	r7, r0
     b7c:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     b7e:	3c01      	subs	r4, #1
     b80:	d2cd      	bcs.n	b1e <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     b82:	4641      	mov	r1, r8
     b84:	4652      	mov	r2, sl
     b86:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     b88:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     b8a:	4c12      	ldr	r4, [pc, #72]	; (bd4 <_sercom_get_async_baud_val+0x1ac>)
     b8c:	42a3      	cmp	r3, r4
     b8e:	d908      	bls.n	ba2 <_sercom_get_async_baud_val+0x17a>
     b90:	9a05      	ldr	r2, [sp, #20]
     b92:	3201      	adds	r2, #1
     b94:	b2d2      	uxtb	r2, r2
     b96:	9205      	str	r2, [sp, #20]
     b98:	2601      	movs	r6, #1
     b9a:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     b9c:	4657      	mov	r7, sl
     b9e:	2f08      	cmp	r7, #8
     ba0:	d1b5      	bne.n	b0e <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ba2:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     ba4:	9805      	ldr	r0, [sp, #20]
     ba6:	2808      	cmp	r0, #8
     ba8:	d004      	beq.n	bb4 <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     baa:	0342      	lsls	r2, r0, #13
     bac:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     bae:	9c04      	ldr	r4, [sp, #16]
     bb0:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     bb2:	2400      	movs	r4, #0
}
     bb4:	1c20      	adds	r0, r4, #0
     bb6:	b007      	add	sp, #28
     bb8:	bc3c      	pop	{r2, r3, r4, r5}
     bba:	4690      	mov	r8, r2
     bbc:	4699      	mov	r9, r3
     bbe:	46a2      	mov	sl, r4
     bc0:	46ab      	mov	fp, r5
     bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bc4:	46c0      	nop			; (mov r8, r8)
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	00000000 	.word	0x00000000
     bcc:	00000001 	.word	0x00000001
     bd0:	00001f29 	.word	0x00001f29
     bd4:	00001fff 	.word	0x00001fff

00000bd8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     bd8:	b510      	push	{r4, lr}
     bda:	b082      	sub	sp, #8
     bdc:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     bde:	4b0f      	ldr	r3, [pc, #60]	; (c1c <sercom_set_gclk_generator+0x44>)
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	2b00      	cmp	r3, #0
     be4:	d001      	beq.n	bea <sercom_set_gclk_generator+0x12>
     be6:	2900      	cmp	r1, #0
     be8:	d00d      	beq.n	c06 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     bea:	a901      	add	r1, sp, #4
     bec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     bee:	2013      	movs	r0, #19
     bf0:	4b0b      	ldr	r3, [pc, #44]	; (c20 <sercom_set_gclk_generator+0x48>)
     bf2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     bf4:	2013      	movs	r0, #19
     bf6:	4b0b      	ldr	r3, [pc, #44]	; (c24 <sercom_set_gclk_generator+0x4c>)
     bf8:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     bfa:	4b08      	ldr	r3, [pc, #32]	; (c1c <sercom_set_gclk_generator+0x44>)
     bfc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     bfe:	2201      	movs	r2, #1
     c00:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     c02:	2000      	movs	r0, #0
     c04:	e007      	b.n	c16 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     c06:	4b05      	ldr	r3, [pc, #20]	; (c1c <sercom_set_gclk_generator+0x44>)
     c08:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     c0a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     c0c:	1b14      	subs	r4, r2, r4
     c0e:	1e62      	subs	r2, r4, #1
     c10:	4194      	sbcs	r4, r2
     c12:	4264      	negs	r4, r4
     c14:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     c16:	b002      	add	sp, #8
     c18:	bd10      	pop	{r4, pc}
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	2000016c 	.word	0x2000016c
     c20:	0000087d 	.word	0x0000087d
     c24:	000007f1 	.word	0x000007f1

00000c28 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     c28:	4b44      	ldr	r3, [pc, #272]	; (d3c <_sercom_get_default_pad+0x114>)
     c2a:	4298      	cmp	r0, r3
     c2c:	d033      	beq.n	c96 <_sercom_get_default_pad+0x6e>
     c2e:	d806      	bhi.n	c3e <_sercom_get_default_pad+0x16>
     c30:	4b43      	ldr	r3, [pc, #268]	; (d40 <_sercom_get_default_pad+0x118>)
     c32:	4298      	cmp	r0, r3
     c34:	d00d      	beq.n	c52 <_sercom_get_default_pad+0x2a>
     c36:	4b43      	ldr	r3, [pc, #268]	; (d44 <_sercom_get_default_pad+0x11c>)
     c38:	4298      	cmp	r0, r3
     c3a:	d01b      	beq.n	c74 <_sercom_get_default_pad+0x4c>
     c3c:	e06f      	b.n	d1e <_sercom_get_default_pad+0xf6>
     c3e:	4b42      	ldr	r3, [pc, #264]	; (d48 <_sercom_get_default_pad+0x120>)
     c40:	4298      	cmp	r0, r3
     c42:	d04a      	beq.n	cda <_sercom_get_default_pad+0xb2>
     c44:	4b41      	ldr	r3, [pc, #260]	; (d4c <_sercom_get_default_pad+0x124>)
     c46:	4298      	cmp	r0, r3
     c48:	d058      	beq.n	cfc <_sercom_get_default_pad+0xd4>
     c4a:	4b41      	ldr	r3, [pc, #260]	; (d50 <_sercom_get_default_pad+0x128>)
     c4c:	4298      	cmp	r0, r3
     c4e:	d166      	bne.n	d1e <_sercom_get_default_pad+0xf6>
     c50:	e032      	b.n	cb8 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c52:	2901      	cmp	r1, #1
     c54:	d065      	beq.n	d22 <_sercom_get_default_pad+0xfa>
     c56:	2900      	cmp	r1, #0
     c58:	d004      	beq.n	c64 <_sercom_get_default_pad+0x3c>
     c5a:	2902      	cmp	r1, #2
     c5c:	d006      	beq.n	c6c <_sercom_get_default_pad+0x44>
     c5e:	2903      	cmp	r1, #3
     c60:	d006      	beq.n	c70 <_sercom_get_default_pad+0x48>
     c62:	e001      	b.n	c68 <_sercom_get_default_pad+0x40>
     c64:	483b      	ldr	r0, [pc, #236]	; (d54 <_sercom_get_default_pad+0x12c>)
     c66:	e067      	b.n	d38 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     c68:	2000      	movs	r0, #0
     c6a:	e065      	b.n	d38 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c6c:	483a      	ldr	r0, [pc, #232]	; (d58 <_sercom_get_default_pad+0x130>)
     c6e:	e063      	b.n	d38 <_sercom_get_default_pad+0x110>
     c70:	483a      	ldr	r0, [pc, #232]	; (d5c <_sercom_get_default_pad+0x134>)
     c72:	e061      	b.n	d38 <_sercom_get_default_pad+0x110>
     c74:	2901      	cmp	r1, #1
     c76:	d056      	beq.n	d26 <_sercom_get_default_pad+0xfe>
     c78:	2900      	cmp	r1, #0
     c7a:	d004      	beq.n	c86 <_sercom_get_default_pad+0x5e>
     c7c:	2902      	cmp	r1, #2
     c7e:	d006      	beq.n	c8e <_sercom_get_default_pad+0x66>
     c80:	2903      	cmp	r1, #3
     c82:	d006      	beq.n	c92 <_sercom_get_default_pad+0x6a>
     c84:	e001      	b.n	c8a <_sercom_get_default_pad+0x62>
     c86:	2003      	movs	r0, #3
     c88:	e056      	b.n	d38 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     c8a:	2000      	movs	r0, #0
     c8c:	e054      	b.n	d38 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c8e:	4834      	ldr	r0, [pc, #208]	; (d60 <_sercom_get_default_pad+0x138>)
     c90:	e052      	b.n	d38 <_sercom_get_default_pad+0x110>
     c92:	4834      	ldr	r0, [pc, #208]	; (d64 <_sercom_get_default_pad+0x13c>)
     c94:	e050      	b.n	d38 <_sercom_get_default_pad+0x110>
     c96:	2901      	cmp	r1, #1
     c98:	d047      	beq.n	d2a <_sercom_get_default_pad+0x102>
     c9a:	2900      	cmp	r1, #0
     c9c:	d004      	beq.n	ca8 <_sercom_get_default_pad+0x80>
     c9e:	2902      	cmp	r1, #2
     ca0:	d006      	beq.n	cb0 <_sercom_get_default_pad+0x88>
     ca2:	2903      	cmp	r1, #3
     ca4:	d006      	beq.n	cb4 <_sercom_get_default_pad+0x8c>
     ca6:	e001      	b.n	cac <_sercom_get_default_pad+0x84>
     ca8:	482f      	ldr	r0, [pc, #188]	; (d68 <_sercom_get_default_pad+0x140>)
     caa:	e045      	b.n	d38 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     cac:	2000      	movs	r0, #0
     cae:	e043      	b.n	d38 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cb0:	482e      	ldr	r0, [pc, #184]	; (d6c <_sercom_get_default_pad+0x144>)
     cb2:	e041      	b.n	d38 <_sercom_get_default_pad+0x110>
     cb4:	482e      	ldr	r0, [pc, #184]	; (d70 <_sercom_get_default_pad+0x148>)
     cb6:	e03f      	b.n	d38 <_sercom_get_default_pad+0x110>
     cb8:	2901      	cmp	r1, #1
     cba:	d038      	beq.n	d2e <_sercom_get_default_pad+0x106>
     cbc:	2900      	cmp	r1, #0
     cbe:	d004      	beq.n	cca <_sercom_get_default_pad+0xa2>
     cc0:	2902      	cmp	r1, #2
     cc2:	d006      	beq.n	cd2 <_sercom_get_default_pad+0xaa>
     cc4:	2903      	cmp	r1, #3
     cc6:	d006      	beq.n	cd6 <_sercom_get_default_pad+0xae>
     cc8:	e001      	b.n	cce <_sercom_get_default_pad+0xa6>
     cca:	482a      	ldr	r0, [pc, #168]	; (d74 <_sercom_get_default_pad+0x14c>)
     ccc:	e034      	b.n	d38 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     cce:	2000      	movs	r0, #0
     cd0:	e032      	b.n	d38 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cd2:	4829      	ldr	r0, [pc, #164]	; (d78 <_sercom_get_default_pad+0x150>)
     cd4:	e030      	b.n	d38 <_sercom_get_default_pad+0x110>
     cd6:	4829      	ldr	r0, [pc, #164]	; (d7c <_sercom_get_default_pad+0x154>)
     cd8:	e02e      	b.n	d38 <_sercom_get_default_pad+0x110>
     cda:	2901      	cmp	r1, #1
     cdc:	d029      	beq.n	d32 <_sercom_get_default_pad+0x10a>
     cde:	2900      	cmp	r1, #0
     ce0:	d004      	beq.n	cec <_sercom_get_default_pad+0xc4>
     ce2:	2902      	cmp	r1, #2
     ce4:	d006      	beq.n	cf4 <_sercom_get_default_pad+0xcc>
     ce6:	2903      	cmp	r1, #3
     ce8:	d006      	beq.n	cf8 <_sercom_get_default_pad+0xd0>
     cea:	e001      	b.n	cf0 <_sercom_get_default_pad+0xc8>
     cec:	4824      	ldr	r0, [pc, #144]	; (d80 <_sercom_get_default_pad+0x158>)
     cee:	e023      	b.n	d38 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     cf0:	2000      	movs	r0, #0
     cf2:	e021      	b.n	d38 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cf4:	4823      	ldr	r0, [pc, #140]	; (d84 <_sercom_get_default_pad+0x15c>)
     cf6:	e01f      	b.n	d38 <_sercom_get_default_pad+0x110>
     cf8:	4823      	ldr	r0, [pc, #140]	; (d88 <_sercom_get_default_pad+0x160>)
     cfa:	e01d      	b.n	d38 <_sercom_get_default_pad+0x110>
     cfc:	2901      	cmp	r1, #1
     cfe:	d01a      	beq.n	d36 <_sercom_get_default_pad+0x10e>
     d00:	2900      	cmp	r1, #0
     d02:	d004      	beq.n	d0e <_sercom_get_default_pad+0xe6>
     d04:	2902      	cmp	r1, #2
     d06:	d006      	beq.n	d16 <_sercom_get_default_pad+0xee>
     d08:	2903      	cmp	r1, #3
     d0a:	d006      	beq.n	d1a <_sercom_get_default_pad+0xf2>
     d0c:	e001      	b.n	d12 <_sercom_get_default_pad+0xea>
     d0e:	481f      	ldr	r0, [pc, #124]	; (d8c <_sercom_get_default_pad+0x164>)
     d10:	e012      	b.n	d38 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     d12:	2000      	movs	r0, #0
     d14:	e010      	b.n	d38 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d16:	481e      	ldr	r0, [pc, #120]	; (d90 <_sercom_get_default_pad+0x168>)
     d18:	e00e      	b.n	d38 <_sercom_get_default_pad+0x110>
     d1a:	481e      	ldr	r0, [pc, #120]	; (d94 <_sercom_get_default_pad+0x16c>)
     d1c:	e00c      	b.n	d38 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     d1e:	2000      	movs	r0, #0
     d20:	e00a      	b.n	d38 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d22:	481d      	ldr	r0, [pc, #116]	; (d98 <_sercom_get_default_pad+0x170>)
     d24:	e008      	b.n	d38 <_sercom_get_default_pad+0x110>
     d26:	481d      	ldr	r0, [pc, #116]	; (d9c <_sercom_get_default_pad+0x174>)
     d28:	e006      	b.n	d38 <_sercom_get_default_pad+0x110>
     d2a:	481d      	ldr	r0, [pc, #116]	; (da0 <_sercom_get_default_pad+0x178>)
     d2c:	e004      	b.n	d38 <_sercom_get_default_pad+0x110>
     d2e:	481d      	ldr	r0, [pc, #116]	; (da4 <_sercom_get_default_pad+0x17c>)
     d30:	e002      	b.n	d38 <_sercom_get_default_pad+0x110>
     d32:	481d      	ldr	r0, [pc, #116]	; (da8 <_sercom_get_default_pad+0x180>)
     d34:	e000      	b.n	d38 <_sercom_get_default_pad+0x110>
     d36:	481d      	ldr	r0, [pc, #116]	; (dac <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     d38:	4770      	bx	lr
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	42001000 	.word	0x42001000
     d40:	42000800 	.word	0x42000800
     d44:	42000c00 	.word	0x42000c00
     d48:	42001800 	.word	0x42001800
     d4c:	42001c00 	.word	0x42001c00
     d50:	42001400 	.word	0x42001400
     d54:	00040003 	.word	0x00040003
     d58:	00060003 	.word	0x00060003
     d5c:	00070003 	.word	0x00070003
     d60:	001e0003 	.word	0x001e0003
     d64:	001f0003 	.word	0x001f0003
     d68:	00080003 	.word	0x00080003
     d6c:	000a0003 	.word	0x000a0003
     d70:	000b0003 	.word	0x000b0003
     d74:	00100003 	.word	0x00100003
     d78:	00120003 	.word	0x00120003
     d7c:	00130003 	.word	0x00130003
     d80:	000c0003 	.word	0x000c0003
     d84:	000e0003 	.word	0x000e0003
     d88:	000f0003 	.word	0x000f0003
     d8c:	00160003 	.word	0x00160003
     d90:	00180003 	.word	0x00180003
     d94:	00190003 	.word	0x00190003
     d98:	00050003 	.word	0x00050003
     d9c:	00010003 	.word	0x00010003
     da0:	00090003 	.word	0x00090003
     da4:	00110003 	.word	0x00110003
     da8:	000d0003 	.word	0x000d0003
     dac:	00170003 	.word	0x00170003

00000db0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     db0:	b570      	push	{r4, r5, r6, lr}
     db2:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     db4:	4a0c      	ldr	r2, [pc, #48]	; (de8 <_sercom_get_sercom_inst_index+0x38>)
     db6:	466b      	mov	r3, sp
     db8:	ca70      	ldmia	r2!, {r4, r5, r6}
     dba:	c370      	stmia	r3!, {r4, r5, r6}
     dbc:	ca32      	ldmia	r2!, {r1, r4, r5}
     dbe:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     dc0:	9e00      	ldr	r6, [sp, #0]
     dc2:	4286      	cmp	r6, r0
     dc4:	d006      	beq.n	dd4 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dc6:	2301      	movs	r3, #1
     dc8:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     dca:	4669      	mov	r1, sp
     dcc:	5852      	ldr	r2, [r2, r1]
     dce:	4282      	cmp	r2, r0
     dd0:	d103      	bne.n	dda <_sercom_get_sercom_inst_index+0x2a>
     dd2:	e000      	b.n	dd6 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dd4:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     dd6:	b2d8      	uxtb	r0, r3
     dd8:	e003      	b.n	de2 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dda:	3301      	adds	r3, #1
     ddc:	2b06      	cmp	r3, #6
     dde:	d1f3      	bne.n	dc8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     de0:	2000      	movs	r0, #0
}
     de2:	b006      	add	sp, #24
     de4:	bd70      	pop	{r4, r5, r6, pc}
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	0000223c 	.word	0x0000223c

00000dec <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     dec:	4770      	bx	lr
     dee:	46c0      	nop			; (mov r8, r8)

00000df0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     df0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     df2:	4b0a      	ldr	r3, [pc, #40]	; (e1c <_sercom_set_handler+0x2c>)
     df4:	781b      	ldrb	r3, [r3, #0]
     df6:	2b00      	cmp	r3, #0
     df8:	d10c      	bne.n	e14 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     dfa:	4f09      	ldr	r7, [pc, #36]	; (e20 <_sercom_set_handler+0x30>)
     dfc:	4e09      	ldr	r6, [pc, #36]	; (e24 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     dfe:	4d0a      	ldr	r5, [pc, #40]	; (e28 <_sercom_set_handler+0x38>)
     e00:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e02:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     e04:	195a      	adds	r2, r3, r5
     e06:	6014      	str	r4, [r2, #0]
     e08:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e0a:	2b18      	cmp	r3, #24
     e0c:	d1f9      	bne.n	e02 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     e0e:	2201      	movs	r2, #1
     e10:	4b02      	ldr	r3, [pc, #8]	; (e1c <_sercom_set_handler+0x2c>)
     e12:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     e14:	0080      	lsls	r0, r0, #2
     e16:	4b02      	ldr	r3, [pc, #8]	; (e20 <_sercom_set_handler+0x30>)
     e18:	50c1      	str	r1, [r0, r3]
}
     e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e1c:	20000170 	.word	0x20000170
     e20:	20000174 	.word	0x20000174
     e24:	00000ded 	.word	0x00000ded
     e28:	200001e0 	.word	0x200001e0

00000e2c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     e2c:	b510      	push	{r4, lr}
     e2e:	b082      	sub	sp, #8
     e30:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     e32:	4668      	mov	r0, sp
     e34:	4905      	ldr	r1, [pc, #20]	; (e4c <_sercom_get_interrupt_vector+0x20>)
     e36:	2206      	movs	r2, #6
     e38:	4b05      	ldr	r3, [pc, #20]	; (e50 <_sercom_get_interrupt_vector+0x24>)
     e3a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     e3c:	1c20      	adds	r0, r4, #0
     e3e:	4b05      	ldr	r3, [pc, #20]	; (e54 <_sercom_get_interrupt_vector+0x28>)
     e40:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     e42:	466b      	mov	r3, sp
     e44:	5618      	ldrsb	r0, [r3, r0]
}
     e46:	b002      	add	sp, #8
     e48:	bd10      	pop	{r4, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	00002254 	.word	0x00002254
     e50:	00002019 	.word	0x00002019
     e54:	00000db1 	.word	0x00000db1

00000e58 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     e58:	b508      	push	{r3, lr}
     e5a:	4b02      	ldr	r3, [pc, #8]	; (e64 <SERCOM0_Handler+0xc>)
     e5c:	681b      	ldr	r3, [r3, #0]
     e5e:	2000      	movs	r0, #0
     e60:	4798      	blx	r3
     e62:	bd08      	pop	{r3, pc}
     e64:	20000174 	.word	0x20000174

00000e68 <SERCOM1_Handler>:
     e68:	b508      	push	{r3, lr}
     e6a:	4b02      	ldr	r3, [pc, #8]	; (e74 <SERCOM1_Handler+0xc>)
     e6c:	685b      	ldr	r3, [r3, #4]
     e6e:	2001      	movs	r0, #1
     e70:	4798      	blx	r3
     e72:	bd08      	pop	{r3, pc}
     e74:	20000174 	.word	0x20000174

00000e78 <SERCOM2_Handler>:
     e78:	b508      	push	{r3, lr}
     e7a:	4b02      	ldr	r3, [pc, #8]	; (e84 <SERCOM2_Handler+0xc>)
     e7c:	689b      	ldr	r3, [r3, #8]
     e7e:	2002      	movs	r0, #2
     e80:	4798      	blx	r3
     e82:	bd08      	pop	{r3, pc}
     e84:	20000174 	.word	0x20000174

00000e88 <SERCOM3_Handler>:
     e88:	b508      	push	{r3, lr}
     e8a:	4b02      	ldr	r3, [pc, #8]	; (e94 <SERCOM3_Handler+0xc>)
     e8c:	68db      	ldr	r3, [r3, #12]
     e8e:	2003      	movs	r0, #3
     e90:	4798      	blx	r3
     e92:	bd08      	pop	{r3, pc}
     e94:	20000174 	.word	0x20000174

00000e98 <SERCOM4_Handler>:
     e98:	b508      	push	{r3, lr}
     e9a:	4b02      	ldr	r3, [pc, #8]	; (ea4 <SERCOM4_Handler+0xc>)
     e9c:	691b      	ldr	r3, [r3, #16]
     e9e:	2004      	movs	r0, #4
     ea0:	4798      	blx	r3
     ea2:	bd08      	pop	{r3, pc}
     ea4:	20000174 	.word	0x20000174

00000ea8 <SERCOM5_Handler>:
     ea8:	b508      	push	{r3, lr}
     eaa:	4b02      	ldr	r3, [pc, #8]	; (eb4 <SERCOM5_Handler+0xc>)
     eac:	695b      	ldr	r3, [r3, #20]
     eae:	2005      	movs	r0, #5
     eb0:	4798      	blx	r3
     eb2:	bd08      	pop	{r3, pc}
     eb4:	20000174 	.word	0x20000174

00000eb8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eba:	465f      	mov	r7, fp
     ebc:	4656      	mov	r6, sl
     ebe:	464d      	mov	r5, r9
     ec0:	4644      	mov	r4, r8
     ec2:	b4f0      	push	{r4, r5, r6, r7}
     ec4:	b091      	sub	sp, #68	; 0x44
     ec6:	1c05      	adds	r5, r0, #0
     ec8:	1c0c      	adds	r4, r1, #0
     eca:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     ecc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ece:	1c08      	adds	r0, r1, #0
     ed0:	4bad      	ldr	r3, [pc, #692]	; (1188 <usart_init+0x2d0>)
     ed2:	4798      	blx	r3
     ed4:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ed6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     ed8:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     eda:	07d9      	lsls	r1, r3, #31
     edc:	d500      	bpl.n	ee0 <usart_init+0x28>
     ede:	e14b      	b.n	1178 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ee0:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     ee2:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ee4:	079f      	lsls	r7, r3, #30
     ee6:	d500      	bpl.n	eea <usart_init+0x32>
     ee8:	e146      	b.n	1178 <usart_init+0x2c0>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     eea:	4ba8      	ldr	r3, [pc, #672]	; (118c <usart_init+0x2d4>)
     eec:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     eee:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     ef0:	2701      	movs	r7, #1
     ef2:	408f      	lsls	r7, r1
     ef4:	1c39      	adds	r1, r7, #0
     ef6:	4301      	orrs	r1, r0
     ef8:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     efa:	a90f      	add	r1, sp, #60	; 0x3c
     efc:	272d      	movs	r7, #45	; 0x2d
     efe:	5df3      	ldrb	r3, [r6, r7]
     f00:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f02:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f04:	b2d2      	uxtb	r2, r2
     f06:	4690      	mov	r8, r2
     f08:	1c10      	adds	r0, r2, #0
     f0a:	4ba1      	ldr	r3, [pc, #644]	; (1190 <usart_init+0x2d8>)
     f0c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f0e:	4640      	mov	r0, r8
     f10:	4ba0      	ldr	r3, [pc, #640]	; (1194 <usart_init+0x2dc>)
     f12:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     f14:	5df0      	ldrb	r0, [r6, r7]
     f16:	2100      	movs	r1, #0
     f18:	4b9f      	ldr	r3, [pc, #636]	; (1198 <usart_init+0x2e0>)
     f1a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     f1c:	7af3      	ldrb	r3, [r6, #11]
     f1e:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     f20:	2324      	movs	r3, #36	; 0x24
     f22:	5cf3      	ldrb	r3, [r6, r3]
     f24:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     f26:	2325      	movs	r3, #37	; 0x25
     f28:	5cf3      	ldrb	r3, [r6, r3]
     f2a:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     f2c:	7ef3      	ldrb	r3, [r6, #27]
     f2e:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     f30:	7f33      	ldrb	r3, [r6, #28]
     f32:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f34:	6829      	ldr	r1, [r5, #0]
     f36:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f38:	1c08      	adds	r0, r1, #0
     f3a:	4b93      	ldr	r3, [pc, #588]	; (1188 <usart_init+0x2d0>)
     f3c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f3e:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     f40:	2200      	movs	r2, #0
     f42:	466b      	mov	r3, sp
     f44:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     f46:	8a32      	ldrh	r2, [r6, #16]
     f48:	9202      	str	r2, [sp, #8]
     f4a:	2380      	movs	r3, #128	; 0x80
     f4c:	01db      	lsls	r3, r3, #7
     f4e:	429a      	cmp	r2, r3
     f50:	d021      	beq.n	f96 <usart_init+0xde>
     f52:	2380      	movs	r3, #128	; 0x80
     f54:	01db      	lsls	r3, r3, #7
     f56:	429a      	cmp	r2, r3
     f58:	d804      	bhi.n	f64 <usart_init+0xac>
     f5a:	2380      	movs	r3, #128	; 0x80
     f5c:	019b      	lsls	r3, r3, #6
     f5e:	429a      	cmp	r2, r3
     f60:	d011      	beq.n	f86 <usart_init+0xce>
     f62:	e008      	b.n	f76 <usart_init+0xbe>
     f64:	23c0      	movs	r3, #192	; 0xc0
     f66:	01db      	lsls	r3, r3, #7
     f68:	9f02      	ldr	r7, [sp, #8]
     f6a:	429f      	cmp	r7, r3
     f6c:	d00f      	beq.n	f8e <usart_init+0xd6>
     f6e:	2380      	movs	r3, #128	; 0x80
     f70:	021b      	lsls	r3, r3, #8
     f72:	429f      	cmp	r7, r3
     f74:	d003      	beq.n	f7e <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f76:	2710      	movs	r7, #16
     f78:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f7a:	2700      	movs	r7, #0
     f7c:	e00e      	b.n	f9c <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     f7e:	2703      	movs	r7, #3
     f80:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f82:	2700      	movs	r7, #0
     f84:	e00a      	b.n	f9c <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f86:	2710      	movs	r7, #16
     f88:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f8a:	2701      	movs	r7, #1
     f8c:	e006      	b.n	f9c <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f8e:	2708      	movs	r7, #8
     f90:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f92:	2701      	movs	r7, #1
     f94:	e002      	b.n	f9c <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f96:	2708      	movs	r7, #8
     f98:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f9a:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     f9c:	6831      	ldr	r1, [r6, #0]
     f9e:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
     fa0:	68f2      	ldr	r2, [r6, #12]
     fa2:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     fa4:	6973      	ldr	r3, [r6, #20]
     fa6:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     fa8:	7e31      	ldrb	r1, [r6, #24]
     faa:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     fac:	2326      	movs	r3, #38	; 0x26
     fae:	5cf3      	ldrb	r3, [r6, r3]
     fb0:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     fb2:	6873      	ldr	r3, [r6, #4]
     fb4:	2b00      	cmp	r3, #0
     fb6:	d013      	beq.n	fe0 <usart_init+0x128>
     fb8:	2280      	movs	r2, #128	; 0x80
     fba:	0552      	lsls	r2, r2, #21
     fbc:	4293      	cmp	r3, r2
     fbe:	d12e      	bne.n	101e <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     fc0:	2327      	movs	r3, #39	; 0x27
     fc2:	5cf3      	ldrb	r3, [r6, r3]
     fc4:	2b00      	cmp	r3, #0
     fc6:	d12e      	bne.n	1026 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     fc8:	6a37      	ldr	r7, [r6, #32]
     fca:	b2c0      	uxtb	r0, r0
     fcc:	4b73      	ldr	r3, [pc, #460]	; (119c <usart_init+0x2e4>)
     fce:	4798      	blx	r3
     fd0:	1c01      	adds	r1, r0, #0
     fd2:	1c38      	adds	r0, r7, #0
     fd4:	466a      	mov	r2, sp
     fd6:	3226      	adds	r2, #38	; 0x26
     fd8:	4b71      	ldr	r3, [pc, #452]	; (11a0 <usart_init+0x2e8>)
     fda:	4798      	blx	r3
     fdc:	1c03      	adds	r3, r0, #0
     fde:	e01f      	b.n	1020 <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     fe0:	2327      	movs	r3, #39	; 0x27
     fe2:	5cf3      	ldrb	r3, [r6, r3]
     fe4:	2b00      	cmp	r3, #0
     fe6:	d00a      	beq.n	ffe <usart_init+0x146>
				status_code =
     fe8:	9a06      	ldr	r2, [sp, #24]
     fea:	9200      	str	r2, [sp, #0]
     fec:	6a30      	ldr	r0, [r6, #32]
     fee:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     ff0:	466a      	mov	r2, sp
     ff2:	3226      	adds	r2, #38	; 0x26
     ff4:	1c3b      	adds	r3, r7, #0
     ff6:	4f6b      	ldr	r7, [pc, #428]	; (11a4 <usart_init+0x2ec>)
     ff8:	47b8      	blx	r7
     ffa:	1c03      	adds	r3, r0, #0
     ffc:	e010      	b.n	1020 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     ffe:	6a31      	ldr	r1, [r6, #32]
    1000:	9107      	str	r1, [sp, #28]
    1002:	b2c0      	uxtb	r0, r0
    1004:	4b65      	ldr	r3, [pc, #404]	; (119c <usart_init+0x2e4>)
    1006:	4798      	blx	r3
    1008:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    100a:	9a06      	ldr	r2, [sp, #24]
    100c:	9200      	str	r2, [sp, #0]
    100e:	9807      	ldr	r0, [sp, #28]
    1010:	466a      	mov	r2, sp
    1012:	3226      	adds	r2, #38	; 0x26
    1014:	1c3b      	adds	r3, r7, #0
    1016:	4f63      	ldr	r7, [pc, #396]	; (11a4 <usart_init+0x2ec>)
    1018:	47b8      	blx	r7
    101a:	1c03      	adds	r3, r0, #0
    101c:	e000      	b.n	1020 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    101e:	2300      	movs	r3, #0
    1020:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1022:	d000      	beq.n	1026 <usart_init+0x16e>
    1024:	e0a8      	b.n	1178 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1026:	7e73      	ldrb	r3, [r6, #25]
    1028:	2b00      	cmp	r3, #0
    102a:	d002      	beq.n	1032 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    102c:	7eb3      	ldrb	r3, [r6, #26]
    102e:	4641      	mov	r1, r8
    1030:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1032:	682a      	ldr	r2, [r5, #0]
    1034:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1036:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1038:	2b00      	cmp	r3, #0
    103a:	d1fc      	bne.n	1036 <usart_init+0x17e>
    103c:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    103e:	466b      	mov	r3, sp
    1040:	3326      	adds	r3, #38	; 0x26
    1042:	881b      	ldrh	r3, [r3, #0]
    1044:	4642      	mov	r2, r8
    1046:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1048:	464b      	mov	r3, r9
    104a:	9f03      	ldr	r7, [sp, #12]
    104c:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
    104e:	9f04      	ldr	r7, [sp, #16]
    1050:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1052:	6871      	ldr	r1, [r6, #4]
    1054:	430b      	orrs	r3, r1
		config->sample_rate |
    1056:	9f02      	ldr	r7, [sp, #8]
    1058:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    105a:	4652      	mov	r2, sl
    105c:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    105e:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1060:	4659      	mov	r1, fp
    1062:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    1064:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1066:	2327      	movs	r3, #39	; 0x27
    1068:	5cf3      	ldrb	r3, [r6, r3]
    106a:	2b00      	cmp	r3, #0
    106c:	d101      	bne.n	1072 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    106e:	2304      	movs	r3, #4
    1070:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1072:	7e71      	ldrb	r1, [r6, #25]
    1074:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1076:	7f33      	ldrb	r3, [r6, #28]
    1078:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    107a:	4319      	orrs	r1, r3
    107c:	7af2      	ldrb	r2, [r6, #11]
    107e:	7ab3      	ldrb	r3, [r6, #10]
    1080:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1082:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1084:	7f73      	ldrb	r3, [r6, #29]
    1086:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1088:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    108a:	2324      	movs	r3, #36	; 0x24
    108c:	5cf3      	ldrb	r3, [r6, r3]
    108e:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1090:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1092:	2325      	movs	r3, #37	; 0x25
    1094:	5cf3      	ldrb	r3, [r6, r3]
    1096:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1098:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    109a:	8933      	ldrh	r3, [r6, #8]
    109c:	2bff      	cmp	r3, #255	; 0xff
    109e:	d00b      	beq.n	10b8 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    10a0:	7ef2      	ldrb	r2, [r6, #27]
    10a2:	2a00      	cmp	r2, #0
    10a4:	d003      	beq.n	10ae <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    10a6:	22a0      	movs	r2, #160	; 0xa0
    10a8:	04d2      	lsls	r2, r2, #19
    10aa:	4317      	orrs	r7, r2
    10ac:	e002      	b.n	10b4 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    10ae:	2280      	movs	r2, #128	; 0x80
    10b0:	0452      	lsls	r2, r2, #17
    10b2:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    10b4:	4319      	orrs	r1, r3
    10b6:	e005      	b.n	10c4 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    10b8:	7ef3      	ldrb	r3, [r6, #27]
    10ba:	2b00      	cmp	r3, #0
    10bc:	d002      	beq.n	10c4 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    10be:	2380      	movs	r3, #128	; 0x80
    10c0:	04db      	lsls	r3, r3, #19
    10c2:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    10c4:	232c      	movs	r3, #44	; 0x2c
    10c6:	5cf3      	ldrb	r3, [r6, r3]
    10c8:	2b00      	cmp	r3, #0
    10ca:	d103      	bne.n	10d4 <usart_init+0x21c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    10cc:	4b36      	ldr	r3, [pc, #216]	; (11a8 <usart_init+0x2f0>)
    10ce:	789b      	ldrb	r3, [r3, #2]
    10d0:	079a      	lsls	r2, r3, #30
    10d2:	d501      	bpl.n	10d8 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    10d4:	2380      	movs	r3, #128	; 0x80
    10d6:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    10d8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10da:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    10dc:	2b00      	cmp	r3, #0
    10de:	d1fc      	bne.n	10da <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    10e0:	4643      	mov	r3, r8
    10e2:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    10e4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    10e6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    10e8:	2b00      	cmp	r3, #0
    10ea:	d1fc      	bne.n	10e6 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    10ec:	4641      	mov	r1, r8
    10ee:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    10f0:	ab0e      	add	r3, sp, #56	; 0x38
    10f2:	2280      	movs	r2, #128	; 0x80
    10f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    10f6:	2200      	movs	r2, #0
    10f8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    10fa:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    10fc:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    10fe:	6b32      	ldr	r2, [r6, #48]	; 0x30
    1100:	920a      	str	r2, [sp, #40]	; 0x28
    1102:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1104:	930b      	str	r3, [sp, #44]	; 0x2c
    1106:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    1108:	970c      	str	r7, [sp, #48]	; 0x30
    110a:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
    110c:	960d      	str	r6, [sp, #52]	; 0x34
    110e:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1110:	ae0e      	add	r6, sp, #56	; 0x38
    1112:	b2f9      	uxtb	r1, r7
    1114:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1116:	aa0a      	add	r2, sp, #40	; 0x28
    1118:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    111a:	2800      	cmp	r0, #0
    111c:	d102      	bne.n	1124 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    111e:	1c20      	adds	r0, r4, #0
    1120:	4a22      	ldr	r2, [pc, #136]	; (11ac <usart_init+0x2f4>)
    1122:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1124:	1c43      	adds	r3, r0, #1
    1126:	d005      	beq.n	1134 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1128:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    112a:	0c00      	lsrs	r0, r0, #16
    112c:	b2c0      	uxtb	r0, r0
    112e:	1c31      	adds	r1, r6, #0
    1130:	4a1f      	ldr	r2, [pc, #124]	; (11b0 <usart_init+0x2f8>)
    1132:	4790      	blx	r2
    1134:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1136:	2f04      	cmp	r7, #4
    1138:	d1eb      	bne.n	1112 <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    113a:	2300      	movs	r3, #0
    113c:	60eb      	str	r3, [r5, #12]
    113e:	612b      	str	r3, [r5, #16]
    1140:	616b      	str	r3, [r5, #20]
    1142:	61ab      	str	r3, [r5, #24]
    1144:	61eb      	str	r3, [r5, #28]
    1146:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1148:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    114a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    114c:	2200      	movs	r2, #0
    114e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1150:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1152:	2330      	movs	r3, #48	; 0x30
    1154:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1156:	2331      	movs	r3, #49	; 0x31
    1158:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    115a:	2332      	movs	r3, #50	; 0x32
    115c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    115e:	2333      	movs	r3, #51	; 0x33
    1160:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1162:	6828      	ldr	r0, [r5, #0]
    1164:	4b08      	ldr	r3, [pc, #32]	; (1188 <usart_init+0x2d0>)
    1166:	4798      	blx	r3
    1168:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    116a:	4912      	ldr	r1, [pc, #72]	; (11b4 <usart_init+0x2fc>)
    116c:	4b12      	ldr	r3, [pc, #72]	; (11b8 <usart_init+0x300>)
    116e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1170:	00a4      	lsls	r4, r4, #2
    1172:	4b12      	ldr	r3, [pc, #72]	; (11bc <usart_init+0x304>)
    1174:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1176:	2000      	movs	r0, #0
}
    1178:	b011      	add	sp, #68	; 0x44
    117a:	bc3c      	pop	{r2, r3, r4, r5}
    117c:	4690      	mov	r8, r2
    117e:	4699      	mov	r9, r3
    1180:	46a2      	mov	sl, r4
    1182:	46ab      	mov	fp, r5
    1184:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1186:	46c0      	nop			; (mov r8, r8)
    1188:	00000db1 	.word	0x00000db1
    118c:	40000400 	.word	0x40000400
    1190:	0000087d 	.word	0x0000087d
    1194:	000007f1 	.word	0x000007f1
    1198:	00000bd9 	.word	0x00000bd9
    119c:	00000899 	.word	0x00000899
    11a0:	00000a01 	.word	0x00000a01
    11a4:	00000a29 	.word	0x00000a29
    11a8:	41002000 	.word	0x41002000
    11ac:	00000c29 	.word	0x00000c29
    11b0:	00000959 	.word	0x00000959
    11b4:	000011c1 	.word	0x000011c1
    11b8:	00000df1 	.word	0x00000df1
    11bc:	200001e0 	.word	0x200001e0

000011c0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    11c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    11c2:	0080      	lsls	r0, r0, #2
    11c4:	4b64      	ldr	r3, [pc, #400]	; (1358 <_usart_interrupt_handler+0x198>)
    11c6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    11c8:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    11ca:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    11cc:	2b00      	cmp	r3, #0
    11ce:	d1fc      	bne.n	11ca <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    11d0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    11d2:	7da6      	ldrb	r6, [r4, #22]
    11d4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    11d6:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    11d8:	5ceb      	ldrb	r3, [r5, r3]
    11da:	2230      	movs	r2, #48	; 0x30
    11dc:	5caf      	ldrb	r7, [r5, r2]
    11de:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    11e0:	07f1      	lsls	r1, r6, #31
    11e2:	d520      	bpl.n	1226 <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    11e4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    11e6:	b29b      	uxth	r3, r3
    11e8:	2b00      	cmp	r3, #0
    11ea:	d01a      	beq.n	1222 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    11ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    11ee:	781a      	ldrb	r2, [r3, #0]
    11f0:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    11f2:	1c59      	adds	r1, r3, #1
    11f4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    11f6:	7969      	ldrb	r1, [r5, #5]
    11f8:	2901      	cmp	r1, #1
    11fa:	d104      	bne.n	1206 <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    11fc:	7859      	ldrb	r1, [r3, #1]
    11fe:	0209      	lsls	r1, r1, #8
    1200:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1202:	3302      	adds	r3, #2
    1204:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1206:	05d3      	lsls	r3, r2, #23
    1208:	0ddb      	lsrs	r3, r3, #23
    120a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    120c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    120e:	3b01      	subs	r3, #1
    1210:	b29b      	uxth	r3, r3
    1212:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1214:	2b00      	cmp	r3, #0
    1216:	d106      	bne.n	1226 <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1218:	2301      	movs	r3, #1
    121a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    121c:	2302      	movs	r3, #2
    121e:	75a3      	strb	r3, [r4, #22]
    1220:	e001      	b.n	1226 <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1222:	2301      	movs	r3, #1
    1224:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1226:	07b2      	lsls	r2, r6, #30
    1228:	d509      	bpl.n	123e <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    122a:	2302      	movs	r3, #2
    122c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    122e:	2200      	movs	r2, #0
    1230:	2333      	movs	r3, #51	; 0x33
    1232:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1234:	07fb      	lsls	r3, r7, #31
    1236:	d502      	bpl.n	123e <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1238:	1c28      	adds	r0, r5, #0
    123a:	68e9      	ldr	r1, [r5, #12]
    123c:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    123e:	0772      	lsls	r2, r6, #29
    1240:	d56a      	bpl.n	1318 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    1242:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1244:	b29b      	uxth	r3, r3
    1246:	2b00      	cmp	r3, #0
    1248:	d064      	beq.n	1314 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    124a:	8b63      	ldrh	r3, [r4, #26]
    124c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    124e:	0719      	lsls	r1, r3, #28
    1250:	d402      	bmi.n	1258 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1252:	223f      	movs	r2, #63	; 0x3f
    1254:	4013      	ands	r3, r2
    1256:	e001      	b.n	125c <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1258:	2237      	movs	r2, #55	; 0x37
    125a:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    125c:	2b00      	cmp	r3, #0
    125e:	d037      	beq.n	12d0 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1260:	079a      	lsls	r2, r3, #30
    1262:	d507      	bpl.n	1274 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1264:	221a      	movs	r2, #26
    1266:	2332      	movs	r3, #50	; 0x32
    1268:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    126a:	8b62      	ldrh	r2, [r4, #26]
    126c:	2302      	movs	r3, #2
    126e:	4313      	orrs	r3, r2
    1270:	8363      	strh	r3, [r4, #26]
    1272:	e027      	b.n	12c4 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1274:	0759      	lsls	r1, r3, #29
    1276:	d507      	bpl.n	1288 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1278:	221e      	movs	r2, #30
    127a:	2332      	movs	r3, #50	; 0x32
    127c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    127e:	8b62      	ldrh	r2, [r4, #26]
    1280:	2304      	movs	r3, #4
    1282:	4313      	orrs	r3, r2
    1284:	8363      	strh	r3, [r4, #26]
    1286:	e01d      	b.n	12c4 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1288:	07da      	lsls	r2, r3, #31
    128a:	d507      	bpl.n	129c <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    128c:	2213      	movs	r2, #19
    128e:	2332      	movs	r3, #50	; 0x32
    1290:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1292:	8b62      	ldrh	r2, [r4, #26]
    1294:	2301      	movs	r3, #1
    1296:	4313      	orrs	r3, r2
    1298:	8363      	strh	r3, [r4, #26]
    129a:	e013      	b.n	12c4 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    129c:	06d9      	lsls	r1, r3, #27
    129e:	d507      	bpl.n	12b0 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    12a0:	2242      	movs	r2, #66	; 0x42
    12a2:	2332      	movs	r3, #50	; 0x32
    12a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    12a6:	8b62      	ldrh	r2, [r4, #26]
    12a8:	2310      	movs	r3, #16
    12aa:	4313      	orrs	r3, r2
    12ac:	8363      	strh	r3, [r4, #26]
    12ae:	e009      	b.n	12c4 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    12b0:	2220      	movs	r2, #32
    12b2:	421a      	tst	r2, r3
    12b4:	d006      	beq.n	12c4 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    12b6:	2241      	movs	r2, #65	; 0x41
    12b8:	2332      	movs	r3, #50	; 0x32
    12ba:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    12bc:	8b62      	ldrh	r2, [r4, #26]
    12be:	2320      	movs	r3, #32
    12c0:	4313      	orrs	r3, r2
    12c2:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    12c4:	077a      	lsls	r2, r7, #29
    12c6:	d527      	bpl.n	1318 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    12c8:	1c28      	adds	r0, r5, #0
    12ca:	696b      	ldr	r3, [r5, #20]
    12cc:	4798      	blx	r3
    12ce:	e023      	b.n	1318 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    12d0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    12d2:	05d2      	lsls	r2, r2, #23
    12d4:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    12d6:	b2d3      	uxtb	r3, r2
    12d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    12da:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    12dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    12de:	1c59      	adds	r1, r3, #1
    12e0:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    12e2:	7969      	ldrb	r1, [r5, #5]
    12e4:	2901      	cmp	r1, #1
    12e6:	d104      	bne.n	12f2 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    12e8:	0a12      	lsrs	r2, r2, #8
    12ea:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    12ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    12ee:	3301      	adds	r3, #1
    12f0:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    12f2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    12f4:	3b01      	subs	r3, #1
    12f6:	b29b      	uxth	r3, r3
    12f8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    12fa:	2b00      	cmp	r3, #0
    12fc:	d10c      	bne.n	1318 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    12fe:	2304      	movs	r3, #4
    1300:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1302:	2200      	movs	r2, #0
    1304:	2332      	movs	r3, #50	; 0x32
    1306:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1308:	07ba      	lsls	r2, r7, #30
    130a:	d505      	bpl.n	1318 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    130c:	1c28      	adds	r0, r5, #0
    130e:	692b      	ldr	r3, [r5, #16]
    1310:	4798      	blx	r3
    1312:	e001      	b.n	1318 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1314:	2304      	movs	r3, #4
    1316:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1318:	06f1      	lsls	r1, r6, #27
    131a:	d507      	bpl.n	132c <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    131c:	2310      	movs	r3, #16
    131e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1320:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1322:	06fa      	lsls	r2, r7, #27
    1324:	d502      	bpl.n	132c <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1326:	1c28      	adds	r0, r5, #0
    1328:	69eb      	ldr	r3, [r5, #28]
    132a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    132c:	06b1      	lsls	r1, r6, #26
    132e:	d507      	bpl.n	1340 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1330:	2320      	movs	r3, #32
    1332:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1334:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1336:	073a      	lsls	r2, r7, #28
    1338:	d502      	bpl.n	1340 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    133a:	1c28      	adds	r0, r5, #0
    133c:	69ab      	ldr	r3, [r5, #24]
    133e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1340:	0731      	lsls	r1, r6, #28
    1342:	d507      	bpl.n	1354 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1344:	2308      	movs	r3, #8
    1346:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1348:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    134a:	06ba      	lsls	r2, r7, #26
    134c:	d502      	bpl.n	1354 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    134e:	6a2b      	ldr	r3, [r5, #32]
    1350:	1c28      	adds	r0, r5, #0
    1352:	4798      	blx	r3
		}
	}
#endif
}
    1354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	200001e0 	.word	0x200001e0

0000135c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    135c:	b500      	push	{lr}
    135e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1360:	ab01      	add	r3, sp, #4
    1362:	2280      	movs	r2, #128	; 0x80
    1364:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1366:	780a      	ldrb	r2, [r1, #0]
    1368:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    136a:	784a      	ldrb	r2, [r1, #1]
    136c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    136e:	788a      	ldrb	r2, [r1, #2]
    1370:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1372:	1c19      	adds	r1, r3, #0
    1374:	4b01      	ldr	r3, [pc, #4]	; (137c <port_pin_set_config+0x20>)
    1376:	4798      	blx	r3
}
    1378:	b003      	add	sp, #12
    137a:	bd00      	pop	{pc}
    137c:	00000959 	.word	0x00000959

00001380 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1380:	4b06      	ldr	r3, [pc, #24]	; (139c <_sbrk+0x1c>)
    1382:	681b      	ldr	r3, [r3, #0]
    1384:	2b00      	cmp	r3, #0
    1386:	d102      	bne.n	138e <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    1388:	4a05      	ldr	r2, [pc, #20]	; (13a0 <_sbrk+0x20>)
    138a:	4b04      	ldr	r3, [pc, #16]	; (139c <_sbrk+0x1c>)
    138c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    138e:	4a03      	ldr	r2, [pc, #12]	; (139c <_sbrk+0x1c>)
    1390:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    1392:	1818      	adds	r0, r3, r0
    1394:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    1396:	1c18      	adds	r0, r3, #0
    1398:	4770      	bx	lr
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	2000018c 	.word	0x2000018c
    13a0:	20000200 	.word	0x20000200

000013a4 <main>:
#include "sam.h"

#include <main_app.h>

int main(void)
{
    13a4:	b508      	push	{r3, lr}
	main_app();
    13a6:	4b02      	ldr	r3, [pc, #8]	; (13b0 <main+0xc>)
    13a8:	4798      	blx	r3
}
    13aa:	2000      	movs	r0, #0
    13ac:	bd08      	pop	{r3, pc}
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	000013b9 	.word	0x000013b9
    13b4:	00000000 	.word	0x00000000

000013b8 <_Z8main_appv>:
	term_cmd->parse(data);
}
#endif

void main_app(void)
{
    13b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ba:	4647      	mov	r7, r8
    13bc:	b480      	push	{r7}
    13be:	b08c      	sub	sp, #48	; 0x30
	GI::Sys::Timer timer_touch = GI::Sys::Timer(20);
    13c0:	a804      	add	r0, sp, #16
    13c2:	2214      	movs	r2, #20
    13c4:	2300      	movs	r3, #0
    13c6:	4c22      	ldr	r4, [pc, #136]	; (1450 <_Z8main_appv+0x98>)
    13c8:	47a0      	blx	r4
	GI::Sys::Timer blink_timer = GI::Sys::Timer(100);
    13ca:	a808      	add	r0, sp, #32
    13cc:	2264      	movs	r2, #100	; 0x64
    13ce:	2300      	movs	r3, #0
    13d0:	47a0      	blx	r4
	/*GI::Sys::Clock::changeCoreClk(25000000);
	unsigned long baud = 1200;
	terminal.ctl(GI::IO::IO_CTL_SET_SPEED, &baud);*/

#if (SHOW_SENSORS_RESULT_ON_SCREEN == 0)
	GI::IO terminal = GI::IO((char *)CONSOLE_UART_OUT);
    13d2:	a801      	add	r0, sp, #4
    13d4:	491f      	ldr	r1, [pc, #124]	; (1454 <_Z8main_appv+0x9c>)
    13d6:	4b20      	ldr	r3, [pc, #128]	; (1458 <_Z8main_appv+0xa0>)
    13d8:	4798      	blx	r3
void main_app(void)
{
	GI::Sys::Timer timer_touch = GI::Sys::Timer(20);
	GI::Sys::Timer blink_timer = GI::Sys::Timer(100);

	bool led_state = false;
    13da:	2300      	movs	r3, #0
    13dc:	4698      	mov	r8, r3
#endif

	while(1)
	{
		//GI::Sys::Clock::sleep();
		dev.idle();
    13de:	4e1f      	ldr	r6, [pc, #124]	; (145c <_Z8main_appv+0xa4>)
    13e0:	4d1f      	ldr	r5, [pc, #124]	; (1460 <_Z8main_appv+0xa8>)
#endif
		/*
		 * Call every 20ms the idle function of touch screen interface
		 * 	and idle function of parent window.
		 */
		if(timer_touch.tick())
    13e2:	4c20      	ldr	r4, [pc, #128]	; (1464 <_Z8main_appv+0xac>)
#endif

	while(1)
	{
		//GI::Sys::Clock::sleep();
		dev.idle();
    13e4:	1c30      	adds	r0, r6, #0
    13e6:	47a8      	blx	r5
#endif
		/*
		 * Call every 20ms the idle function of touch screen interface
		 * 	and idle function of parent window.
		 */
		if(timer_touch.tick())
    13e8:	a804      	add	r0, sp, #16
    13ea:	47a0      	blx	r4
					pass->clearText->set((char *)"Wrong password!");
				}
			}
#endif
		}
		if(blink_timer.tick())
    13ec:	a808      	add	r0, sp, #32
    13ee:	47a0      	blx	r4
    13f0:	2800      	cmp	r0, #0
    13f2:	d0f7      	beq.n	13e4 <_Z8main_appv+0x2c>
		{
			bool state;
			GI::IO::read((char *)"led-0", &state);
    13f4:	466f      	mov	r7, sp
    13f6:	3703      	adds	r7, #3
    13f8:	481b      	ldr	r0, [pc, #108]	; (1468 <_Z8main_appv+0xb0>)
    13fa:	1c39      	adds	r1, r7, #0
    13fc:	4b1b      	ldr	r3, [pc, #108]	; (146c <_Z8main_appv+0xb4>)
    13fe:	4798      	blx	r3
			if(state)
    1400:	783b      	ldrb	r3, [r7, #0]
    1402:	2b00      	cmp	r3, #0
    1404:	d016      	beq.n	1434 <_Z8main_appv+0x7c>
			{
				if(led_state)
    1406:	4643      	mov	r3, r8
    1408:	2b00      	cmp	r3, #0
    140a:	d007      	beq.n	141c <_Z8main_appv+0x64>
				{
					blink_timer.interval(780);
    140c:	a808      	add	r0, sp, #32
    140e:	4b0f      	ldr	r3, [pc, #60]	; (144c <_Z8main_appv+0x94>)
    1410:	4a0d      	ldr	r2, [pc, #52]	; (1448 <_Z8main_appv+0x90>)
    1412:	4917      	ldr	r1, [pc, #92]	; (1470 <_Z8main_appv+0xb8>)
    1414:	4788      	blx	r1
					led_state = false;
    1416:	2300      	movs	r3, #0
    1418:	4698      	mov	r8, r3
    141a:	e006      	b.n	142a <_Z8main_appv+0x72>
				}
				else
				{
					blink_timer.interval(180);
    141c:	a808      	add	r0, sp, #32
    141e:	22b4      	movs	r2, #180	; 0xb4
    1420:	2300      	movs	r3, #0
    1422:	4913      	ldr	r1, [pc, #76]	; (1470 <_Z8main_appv+0xb8>)
    1424:	4788      	blx	r1
					led_state = true;
    1426:	2301      	movs	r3, #1
    1428:	4698      	mov	r8, r3
				}
				GI::IO::write((char *)"led-0", false);
    142a:	480f      	ldr	r0, [pc, #60]	; (1468 <_Z8main_appv+0xb0>)
    142c:	2100      	movs	r1, #0
    142e:	4b11      	ldr	r3, [pc, #68]	; (1474 <_Z8main_appv+0xbc>)
    1430:	4798      	blx	r3
    1432:	e7d7      	b.n	13e4 <_Z8main_appv+0x2c>
			}
			else
			{
				blink_timer.interval(20);
    1434:	a808      	add	r0, sp, #32
    1436:	2214      	movs	r2, #20
    1438:	2300      	movs	r3, #0
    143a:	490d      	ldr	r1, [pc, #52]	; (1470 <_Z8main_appv+0xb8>)
    143c:	4788      	blx	r1
				GI::IO::write((char *)"led-0", true);
    143e:	480a      	ldr	r0, [pc, #40]	; (1468 <_Z8main_appv+0xb0>)
    1440:	2101      	movs	r1, #1
    1442:	4b0c      	ldr	r3, [pc, #48]	; (1474 <_Z8main_appv+0xbc>)
    1444:	4798      	blx	r3
    1446:	e7cd      	b.n	13e4 <_Z8main_appv+0x2c>
    1448:	0000030c 	.word	0x0000030c
    144c:	00000000 	.word	0x00000000
    1450:	00001891 	.word	0x00001891
    1454:	0000225c 	.word	0x0000225c
    1458:	000016e9 	.word	0x000016e9
    145c:	20000190 	.word	0x20000190
    1460:	0000169d 	.word	0x0000169d
    1464:	000018d5 	.word	0x000018d5
    1468:	00002264 	.word	0x00002264
    146c:	0000182d 	.word	0x0000182d
    1470:	000018bd 	.word	0x000018bd
    1474:	000017b5 	.word	0x000017b5

00001478 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE>:

extern ioSettings *ioSetCfg[];


SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Gpio **device)
{
    1478:	b5f0      	push	{r4, r5, r6, r7, lr}
    147a:	4647      	mov	r7, r8
    147c:	b480      	push	{r7}
    147e:	1c07      	adds	r7, r0, #0
    1480:	4688      	mov	r8, r1
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
    1482:	4b13      	ldr	r3, [pc, #76]	; (14d0 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x58>)
    1484:	681c      	ldr	r4, [r3, #0]
		if(!io_item || !io_item->cfg)
    1486:	2c00      	cmp	r4, #0
    1488:	d007      	beq.n	149a <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x22>
    148a:	6922      	ldr	r2, [r4, #16]
    148c:	2a00      	cmp	r2, #0
    148e:	d109      	bne.n	14a4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x2c>
    1490:	e003      	b.n	149a <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x22>
    1492:	3504      	adds	r5, #4
    1494:	6923      	ldr	r3, [r4, #16]
    1496:	2b00      	cmp	r3, #0
    1498:	d106      	bne.n	14a8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x30>
		{
			*device = NULL;
    149a:	2300      	movs	r3, #0
    149c:	4642      	mov	r2, r8
    149e:	6013      	str	r3, [r2, #0]
			return SYS_ERR_INVALID_PATH;
    14a0:	20f5      	movs	r0, #245	; 0xf5
    14a2:	e011      	b.n	14c8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x50>
    14a4:	4d0b      	ldr	r5, [pc, #44]	; (14d4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x5c>)
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_GPIO && !strcmp(io_item->info.name, path))
    14a6:	4e0c      	ldr	r6, [pc, #48]	; (14d8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x60>)
    14a8:	7823      	ldrb	r3, [r4, #0]
    14aa:	2b01      	cmp	r3, #1
    14ac:	d104      	bne.n	14b8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x40>
    14ae:	1c60      	adds	r0, r4, #1
    14b0:	1c39      	adds	r1, r7, #0
    14b2:	47b0      	blx	r6
    14b4:	2800      	cmp	r0, #0
    14b6:	d003      	beq.n	14c0 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x48>
SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Gpio **device)
{
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
    14b8:	682c      	ldr	r4, [r5, #0]
		if(!io_item || !io_item->cfg)
    14ba:	2c00      	cmp	r4, #0
    14bc:	d1e9      	bne.n	1492 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x1a>
    14be:	e7ec      	b.n	149a <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x22>
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_GPIO && !strcmp(io_item->info.name, path))
			break;
		dev_nr++;
	}
	*device = (GI::Dev::Gpio *)ioSetCfg[dev_nr]->ioConstruct;
    14c0:	6964      	ldr	r4, [r4, #20]
    14c2:	4643      	mov	r3, r8
    14c4:	601c      	str	r4, [r3, #0]
	return SYS_ERR_OK;
    14c6:	2000      	movs	r0, #0
    14c8:	b240      	sxtb	r0, r0
}
    14ca:	bc04      	pop	{r2}
    14cc:	4690      	mov	r8, r2
    14ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14d0:	20000024 	.word	0x20000024
    14d4:	20000028 	.word	0x20000028
    14d8:	000021b5 	.word	0x000021b5

000014dc <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::I2c **device)
{
    14dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    14de:	4647      	mov	r7, r8
    14e0:	b480      	push	{r7}
    14e2:	1c07      	adds	r7, r0, #0
    14e4:	4688      	mov	r8, r1
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
    14e6:	4b13      	ldr	r3, [pc, #76]	; (1534 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x58>)
    14e8:	681c      	ldr	r4, [r3, #0]
		if(!io_item || !io_item->cfg)
    14ea:	2c00      	cmp	r4, #0
    14ec:	d007      	beq.n	14fe <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x22>
    14ee:	6922      	ldr	r2, [r4, #16]
    14f0:	2a00      	cmp	r2, #0
    14f2:	d109      	bne.n	1508 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x2c>
    14f4:	e003      	b.n	14fe <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x22>
    14f6:	3504      	adds	r5, #4
    14f8:	6923      	ldr	r3, [r4, #16]
    14fa:	2b00      	cmp	r3, #0
    14fc:	d106      	bne.n	150c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x30>
		{
			*device = NULL;
    14fe:	2300      	movs	r3, #0
    1500:	4642      	mov	r2, r8
    1502:	6013      	str	r3, [r2, #0]
			return SYS_ERR_INVALID_PATH;
    1504:	20f5      	movs	r0, #245	; 0xf5
    1506:	e011      	b.n	152c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x50>
    1508:	4d0b      	ldr	r5, [pc, #44]	; (1538 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x5c>)
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_I2C && !strcmp(io_item->info.name, path))
    150a:	4e0c      	ldr	r6, [pc, #48]	; (153c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x60>)
    150c:	7823      	ldrb	r3, [r4, #0]
    150e:	2b03      	cmp	r3, #3
    1510:	d104      	bne.n	151c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x40>
    1512:	1c60      	adds	r0, r4, #1
    1514:	1c39      	adds	r1, r7, #0
    1516:	47b0      	blx	r6
    1518:	2800      	cmp	r0, #0
    151a:	d003      	beq.n	1524 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x48>
SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::I2c **device)
{
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
    151c:	682c      	ldr	r4, [r5, #0]
		if(!io_item || !io_item->cfg)
    151e:	2c00      	cmp	r4, #0
    1520:	d1e9      	bne.n	14f6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x1a>
    1522:	e7ec      	b.n	14fe <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x22>
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_I2C && !strcmp(io_item->info.name, path))
			break;
		dev_nr++;
	}
	*device = (GI::Dev::I2c *)ioSetCfg[dev_nr]->ioConstruct;
    1524:	6964      	ldr	r4, [r4, #20]
    1526:	4643      	mov	r3, r8
    1528:	601c      	str	r4, [r3, #0]
	return SYS_ERR_OK;
    152a:	2000      	movs	r0, #0
    152c:	b240      	sxtb	r0, r0
}
    152e:	bc04      	pop	{r2}
    1530:	4690      	mov	r8, r2
    1532:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1534:	20000024 	.word	0x20000024
    1538:	20000028 	.word	0x20000028
    153c:	000021b5 	.word	0x000021b5

00001540 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Spi **device)
{
    1540:	b5f0      	push	{r4, r5, r6, r7, lr}
    1542:	4647      	mov	r7, r8
    1544:	b480      	push	{r7}
    1546:	1c07      	adds	r7, r0, #0
    1548:	4688      	mov	r8, r1
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
    154a:	4b13      	ldr	r3, [pc, #76]	; (1598 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x58>)
    154c:	681c      	ldr	r4, [r3, #0]
		if(!io_item || !io_item->cfg)
    154e:	2c00      	cmp	r4, #0
    1550:	d007      	beq.n	1562 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x22>
    1552:	6922      	ldr	r2, [r4, #16]
    1554:	2a00      	cmp	r2, #0
    1556:	d109      	bne.n	156c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x2c>
    1558:	e003      	b.n	1562 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x22>
    155a:	3504      	adds	r5, #4
    155c:	6923      	ldr	r3, [r4, #16]
    155e:	2b00      	cmp	r3, #0
    1560:	d106      	bne.n	1570 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x30>
		{
			*device = NULL;
    1562:	2300      	movs	r3, #0
    1564:	4642      	mov	r2, r8
    1566:	6013      	str	r3, [r2, #0]
			return SYS_ERR_INVALID_PATH;
    1568:	20f5      	movs	r0, #245	; 0xf5
    156a:	e011      	b.n	1590 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x50>
    156c:	4d0b      	ldr	r5, [pc, #44]	; (159c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x5c>)
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_SPI && !strcmp(io_item->info.name, path))
    156e:	4e0c      	ldr	r6, [pc, #48]	; (15a0 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x60>)
    1570:	7823      	ldrb	r3, [r4, #0]
    1572:	2b04      	cmp	r3, #4
    1574:	d104      	bne.n	1580 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x40>
    1576:	1c60      	adds	r0, r4, #1
    1578:	1c39      	adds	r1, r7, #0
    157a:	47b0      	blx	r6
    157c:	2800      	cmp	r0, #0
    157e:	d003      	beq.n	1588 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x48>
SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Spi **device)
{
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
    1580:	682c      	ldr	r4, [r5, #0]
		if(!io_item || !io_item->cfg)
    1582:	2c00      	cmp	r4, #0
    1584:	d1e9      	bne.n	155a <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x1a>
    1586:	e7ec      	b.n	1562 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x22>
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_SPI && !strcmp(io_item->info.name, path))
			break;
		dev_nr++;
	}
	*device = (GI::Dev::Spi *)ioSetCfg[dev_nr]->ioConstruct;
    1588:	6964      	ldr	r4, [r4, #20]
    158a:	4643      	mov	r3, r8
    158c:	601c      	str	r4, [r3, #0]
	return SYS_ERR_OK;
    158e:	2000      	movs	r0, #0
    1590:	b240      	sxtb	r0, r0
}
    1592:	bc04      	pop	{r2}
    1594:	4690      	mov	r8, r2
    1596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1598:	20000024 	.word	0x20000024
    159c:	20000028 	.word	0x20000028
    15a0:	000021b5 	.word	0x000021b5

000015a4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Uart **device)
{
    15a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15a6:	4647      	mov	r7, r8
    15a8:	b480      	push	{r7}
    15aa:	1c07      	adds	r7, r0, #0
    15ac:	4688      	mov	r8, r1
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
    15ae:	4b13      	ldr	r3, [pc, #76]	; (15fc <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x58>)
    15b0:	681c      	ldr	r4, [r3, #0]
		if(!io_item || !io_item->cfg)
    15b2:	2c00      	cmp	r4, #0
    15b4:	d007      	beq.n	15c6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x22>
    15b6:	6922      	ldr	r2, [r4, #16]
    15b8:	2a00      	cmp	r2, #0
    15ba:	d109      	bne.n	15d0 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x2c>
    15bc:	e003      	b.n	15c6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x22>
    15be:	3504      	adds	r5, #4
    15c0:	6923      	ldr	r3, [r4, #16]
    15c2:	2b00      	cmp	r3, #0
    15c4:	d106      	bne.n	15d4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x30>
		{
			*device = NULL;
    15c6:	2300      	movs	r3, #0
    15c8:	4642      	mov	r2, r8
    15ca:	6013      	str	r3, [r2, #0]
			return SYS_ERR_INVALID_PATH;
    15cc:	20f5      	movs	r0, #245	; 0xf5
    15ce:	e011      	b.n	15f4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x50>
    15d0:	4d0b      	ldr	r5, [pc, #44]	; (1600 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x5c>)
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_UART && !strcmp(io_item->info.name, path))
    15d2:	4e0c      	ldr	r6, [pc, #48]	; (1604 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x60>)
    15d4:	7823      	ldrb	r3, [r4, #0]
    15d6:	2b02      	cmp	r3, #2
    15d8:	d104      	bne.n	15e4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x40>
    15da:	1c60      	adds	r0, r4, #1
    15dc:	1c39      	adds	r1, r7, #0
    15de:	47b0      	blx	r6
    15e0:	2800      	cmp	r0, #0
    15e2:	d003      	beq.n	15ec <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x48>
SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Uart **device)
{
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
    15e4:	682c      	ldr	r4, [r5, #0]
		if(!io_item || !io_item->cfg)
    15e6:	2c00      	cmp	r4, #0
    15e8:	d1e9      	bne.n	15be <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x1a>
    15ea:	e7ec      	b.n	15c6 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x22>
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_UART && !strcmp(io_item->info.name, path))
			break;
		dev_nr++;
	}
	*device = (GI::Dev::Uart *)ioSetCfg[dev_nr]->ioConstruct;
    15ec:	6964      	ldr	r4, [r4, #20]
    15ee:	4643      	mov	r3, r8
    15f0:	601c      	str	r4, [r3, #0]
	return SYS_ERR_OK;
    15f2:	2000      	movs	r0, #0
    15f4:	b240      	sxtb	r0, r0
}
    15f6:	bc04      	pop	{r2}
    15f8:	4690      	mov	r8, r2
    15fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15fc:	20000024 	.word	0x20000024
    1600:	20000028 	.word	0x20000028
    1604:	000021b5 	.word	0x000021b5

00001608 <_ZN2GI5Board4InitD1Ev>:
}

GI::Board::Init::~Init()
{

}
    1608:	4770      	bx	lr
    160a:	46c0      	nop			; (mov r8, r8)

0000160c <_ZN2GI5Board4InitC1Ev>:
extern ioSettings *ioSetCfg[];

GI::Sys::Clock coreClk = GI::Sys::Clock();
GI::Board::Init dev = GI::Board::Init();

GI::Board::Init::Init()
    160c:	b5f0      	push	{r4, r5, r6, r7, lr}
    160e:	4657      	mov	r7, sl
    1610:	464e      	mov	r6, r9
    1612:	4645      	mov	r5, r8
    1614:	b4e0      	push	{r5, r6, r7}
    1616:	4682      	mov	sl, r0
{
    memset(this, 0, sizeof(*this));
    1618:	2100      	movs	r1, #0
    161a:	2210      	movs	r2, #16
    161c:	4b18      	ldr	r3, [pc, #96]	; (1680 <_ZN2GI5Board4InitC1Ev+0x74>)
    161e:	4798      	blx	r3
/*******************************************************************/
    unsigned int io_cnt = 0;
    for(; io_cnt < 1024; io_cnt++)
	{
		ioSettings *io_item = ioSetCfg[io_cnt];
    1620:	4b18      	ldr	r3, [pc, #96]	; (1684 <_ZN2GI5Board4InitC1Ev+0x78>)
    1622:	681c      	ldr	r4, [r3, #0]
		if(io_item->cfg)
    1624:	6923      	ldr	r3, [r4, #16]
    1626:	2b00      	cmp	r3, #0
    1628:	d023      	beq.n	1672 <_ZN2GI5Board4InitC1Ev+0x66>
    162a:	4d17      	ldr	r5, [pc, #92]	; (1688 <_ZN2GI5Board4InitC1Ev+0x7c>)
    162c:	4b17      	ldr	r3, [pc, #92]	; (168c <_ZN2GI5Board4InitC1Ev+0x80>)
    162e:	18ef      	adds	r7, r5, r3
		{
			switch((unsigned int)io_item->info.ioType)
			{
#if (USE_GPIO == true)
			case ioSettings::info_s::ioType_GPIO:
				io_item->ioConstruct = (void *)new GI::Dev::Gpio(io_item);
    1630:	4b17      	ldr	r3, [pc, #92]	; (1690 <_ZN2GI5Board4InitC1Ev+0x84>)
    1632:	4699      	mov	r9, r3
				break;
#endif
#if (USE_UART == true)
			case ioSettings::info_s::ioType_UART:
				io_item->ioConstruct = (void *)new GI::Dev::Uart(io_item);
    1634:	4698      	mov	r8, r3
    1636:	e003      	b.n	1640 <_ZN2GI5Board4InitC1Ev+0x34>
    memset(this, 0, sizeof(*this));
/*******************************************************************/
    unsigned int io_cnt = 0;
    for(; io_cnt < 1024; io_cnt++)
	{
		ioSettings *io_item = ioSetCfg[io_cnt];
    1638:	cd10      	ldmia	r5!, {r4}
		if(io_item->cfg)
    163a:	6923      	ldr	r3, [r4, #16]
    163c:	2b00      	cmp	r3, #0
    163e:	d018      	beq.n	1672 <_ZN2GI5Board4InitC1Ev+0x66>
		{
			switch((unsigned int)io_item->info.ioType)
    1640:	7823      	ldrb	r3, [r4, #0]
    1642:	2b01      	cmp	r3, #1
    1644:	d002      	beq.n	164c <_ZN2GI5Board4InitC1Ev+0x40>
    1646:	2b02      	cmp	r3, #2
    1648:	d009      	beq.n	165e <_ZN2GI5Board4InitC1Ev+0x52>
    164a:	e010      	b.n	166e <_ZN2GI5Board4InitC1Ev+0x62>
			{
#if (USE_GPIO == true)
			case ioSettings::info_s::ioType_GPIO:
				io_item->ioConstruct = (void *)new GI::Dev::Gpio(io_item);
    164c:	2034      	movs	r0, #52	; 0x34
    164e:	47c8      	blx	r9
    1650:	1e06      	subs	r6, r0, #0
    1652:	d002      	beq.n	165a <_ZN2GI5Board4InitC1Ev+0x4e>
    1654:	1c21      	adds	r1, r4, #0
    1656:	4b0f      	ldr	r3, [pc, #60]	; (1694 <_ZN2GI5Board4InitC1Ev+0x88>)
    1658:	4798      	blx	r3
    165a:	6166      	str	r6, [r4, #20]
				break;
    165c:	e007      	b.n	166e <_ZN2GI5Board4InitC1Ev+0x62>
#endif
#if (USE_UART == true)
			case ioSettings::info_s::ioType_UART:
				io_item->ioConstruct = (void *)new GI::Dev::Uart(io_item);
    165e:	2018      	movs	r0, #24
    1660:	47c0      	blx	r8
    1662:	1e06      	subs	r6, r0, #0
    1664:	d002      	beq.n	166c <_ZN2GI5Board4InitC1Ev+0x60>
    1666:	1c21      	adds	r1, r4, #0
    1668:	4b0b      	ldr	r3, [pc, #44]	; (1698 <_ZN2GI5Board4InitC1Ev+0x8c>)
    166a:	4798      	blx	r3
    166c:	6166      	str	r6, [r4, #20]
GI::Board::Init::Init()
{
    memset(this, 0, sizeof(*this));
/*******************************************************************/
    unsigned int io_cnt = 0;
    for(; io_cnt < 1024; io_cnt++)
    166e:	42bd      	cmp	r5, r7
    1670:	d1e2      	bne.n	1638 <_ZN2GI5Board4InitC1Ev+0x2c>
    ftpd_init(FTP_SERVER_PORT);
#endif
#if (USE_SNTP == 1 && USE_LWIP == 1)
    SNTP_CLIENT = new GI::App::SntpClient();
#endif
}
    1672:	4650      	mov	r0, sl
    1674:	bc1c      	pop	{r2, r3, r4}
    1676:	4690      	mov	r8, r2
    1678:	4699      	mov	r9, r3
    167a:	46a2      	mov	sl, r4
    167c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    167e:	46c0      	nop			; (mov r8, r8)
    1680:	0000202b 	.word	0x0000202b
    1684:	20000024 	.word	0x20000024
    1688:	20000028 	.word	0x20000028
    168c:	00000ffc 	.word	0x00000ffc
    1690:	0000194d 	.word	0x0000194d
    1694:	00001b55 	.word	0x00001b55
    1698:	00001b8d 	.word	0x00001b8d

0000169c <_ZN2GI5Board4Init4idleEv>:
    MMCSD[0]->idle();
#endif
#if (USE_LWIP == 1)
    LWIP[0]->idle(0);
#endif
}
    169c:	4770      	bx	lr
    169e:	46c0      	nop			; (mov r8, r8)

000016a0 <_GLOBAL__sub_I_coreClk>:
    16a0:	b570      	push	{r4, r5, r6, lr}
#include <lib/operators.h>
#include <include/global.h>

extern ioSettings *ioSetCfg[];

GI::Sys::Clock coreClk = GI::Sys::Clock();
    16a2:	4c09      	ldr	r4, [pc, #36]	; (16c8 <_GLOBAL__sub_I_coreClk+0x28>)
    16a4:	1c20      	adds	r0, r4, #0
    16a6:	4b09      	ldr	r3, [pc, #36]	; (16cc <_GLOBAL__sub_I_coreClk+0x2c>)
    16a8:	4798      	blx	r3
    16aa:	4d09      	ldr	r5, [pc, #36]	; (16d0 <_GLOBAL__sub_I_coreClk+0x30>)
    16ac:	1c20      	adds	r0, r4, #0
    16ae:	4909      	ldr	r1, [pc, #36]	; (16d4 <_GLOBAL__sub_I_coreClk+0x34>)
    16b0:	1c2a      	adds	r2, r5, #0
    16b2:	4c09      	ldr	r4, [pc, #36]	; (16d8 <_GLOBAL__sub_I_coreClk+0x38>)
    16b4:	47a0      	blx	r4
GI::Board::Init dev = GI::Board::Init();
    16b6:	4e09      	ldr	r6, [pc, #36]	; (16dc <_GLOBAL__sub_I_coreClk+0x3c>)
    16b8:	1c30      	adds	r0, r6, #0
    16ba:	4b09      	ldr	r3, [pc, #36]	; (16e0 <_GLOBAL__sub_I_coreClk+0x40>)
    16bc:	4798      	blx	r3
    16be:	1c30      	adds	r0, r6, #0
    16c0:	4908      	ldr	r1, [pc, #32]	; (16e4 <_GLOBAL__sub_I_coreClk+0x44>)
    16c2:	1c2a      	adds	r2, r5, #0
    16c4:	47a0      	blx	r4
    MMCSD[0]->idle();
#endif
#if (USE_LWIP == 1)
    LWIP[0]->idle(0);
#endif
}
    16c6:	bd70      	pop	{r4, r5, r6, pc}
    16c8:	200001a0 	.word	0x200001a0
    16cc:	00001db1 	.word	0x00001db1
    16d0:	20000000 	.word	0x20000000
    16d4:	00001dc1 	.word	0x00001dc1
    16d8:	00001e79 	.word	0x00001e79
    16dc:	20000190 	.word	0x20000190
    16e0:	0000160d 	.word	0x0000160d
    16e4:	00001609 	.word	0x00001609

000016e8 <_ZN2GI2IOC1EPc>:
#include <api/uart.h>

#include <api/dev_request.h>

/**********************************************************************************/
GI::IO::IO(char *path)
    16e8:	b530      	push	{r4, r5, lr}
    16ea:	b085      	sub	sp, #20
    16ec:	1c04      	adds	r4, r0, #0
    16ee:	1c0d      	adds	r5, r1, #0
{
	memset(this, 0, sizeof(*this));
    16f0:	2300      	movs	r3, #0
    16f2:	7003      	strb	r3, [r0, #0]
    16f4:	7043      	strb	r3, [r0, #1]
    16f6:	7083      	strb	r3, [r0, #2]
    16f8:	70c3      	strb	r3, [r0, #3]
    16fa:	7103      	strb	r3, [r0, #4]
    16fc:	7143      	strb	r3, [r0, #5]
    16fe:	7183      	strb	r3, [r0, #6]
    1700:	71c3      	strb	r3, [r0, #7]
    1702:	7203      	strb	r3, [r0, #8]
    1704:	7243      	strb	r3, [r0, #9]
    1706:	7283      	strb	r3, [r0, #10]
    1708:	72c3      	strb	r3, [r0, #11]
	GI::Dev::Gpio *gpioDev;
	GI::Dev::I2c *i2cdev;
	GI::Dev::Spi *spiDev;
	GI::Dev::Uart *uartDev;
	if(GI::Dev::DevRequest::request(path, &gpioDev) == SYS_ERR_OK)
    170a:	1c08      	adds	r0, r1, #0
    170c:	4669      	mov	r1, sp
    170e:	4b18      	ldr	r3, [pc, #96]	; (1770 <_ZN2GI2IOC1EPc+0x88>)
    1710:	4798      	blx	r3
    1712:	2800      	cmp	r0, #0
    1714:	d104      	bne.n	1720 <_ZN2GI2IOC1EPc+0x38>
	{
		devHandler = (void *)gpioDev;
    1716:	9b00      	ldr	r3, [sp, #0]
    1718:	6063      	str	r3, [r4, #4]
		ioDevType = IO_DEV_GPIO;
    171a:	2301      	movs	r3, #1
    171c:	7063      	strb	r3, [r4, #1]
    171e:	e023      	b.n	1768 <_ZN2GI2IOC1EPc+0x80>
	}
	else if(GI::Dev::DevRequest::request(path, &i2cdev) == SYS_ERR_OK)
    1720:	1c28      	adds	r0, r5, #0
    1722:	a901      	add	r1, sp, #4
    1724:	4b13      	ldr	r3, [pc, #76]	; (1774 <_ZN2GI2IOC1EPc+0x8c>)
    1726:	4798      	blx	r3
    1728:	2800      	cmp	r0, #0
    172a:	d104      	bne.n	1736 <_ZN2GI2IOC1EPc+0x4e>
	{
		devHandler = (void *)i2cdev;
    172c:	9b01      	ldr	r3, [sp, #4]
    172e:	6063      	str	r3, [r4, #4]
		ioDevType = IO_DEV_I2C;
    1730:	2303      	movs	r3, #3
    1732:	7063      	strb	r3, [r4, #1]
    1734:	e018      	b.n	1768 <_ZN2GI2IOC1EPc+0x80>
	}
	else if(GI::Dev::DevRequest::request(path, &spiDev) == SYS_ERR_OK)
    1736:	1c28      	adds	r0, r5, #0
    1738:	a902      	add	r1, sp, #8
    173a:	4b0f      	ldr	r3, [pc, #60]	; (1778 <_ZN2GI2IOC1EPc+0x90>)
    173c:	4798      	blx	r3
    173e:	2800      	cmp	r0, #0
    1740:	d104      	bne.n	174c <_ZN2GI2IOC1EPc+0x64>
	{
		devHandler = (void *)spiDev;
    1742:	9b02      	ldr	r3, [sp, #8]
    1744:	6063      	str	r3, [r4, #4]
		ioDevType = IO_DEV_SPI;
    1746:	2304      	movs	r3, #4
    1748:	7063      	strb	r3, [r4, #1]
    174a:	e00d      	b.n	1768 <_ZN2GI2IOC1EPc+0x80>
	}
	else if(GI::Dev::DevRequest::request(path, &uartDev) == SYS_ERR_OK)
    174c:	1c28      	adds	r0, r5, #0
    174e:	a903      	add	r1, sp, #12
    1750:	4b0a      	ldr	r3, [pc, #40]	; (177c <_ZN2GI2IOC1EPc+0x94>)
    1752:	4798      	blx	r3
    1754:	2800      	cmp	r0, #0
    1756:	d104      	bne.n	1762 <_ZN2GI2IOC1EPc+0x7a>
	{
		devHandler = (void *)uartDev;
    1758:	9b03      	ldr	r3, [sp, #12]
    175a:	6063      	str	r3, [r4, #4]
		ioDevType = IO_DEV_UART;
    175c:	2302      	movs	r3, #2
    175e:	7063      	strb	r3, [r4, #1]
    1760:	e002      	b.n	1768 <_ZN2GI2IOC1EPc+0x80>
	}
	else
	{
		ioDevType = IO_DEV_NULL;
    1762:	2300      	movs	r3, #0
    1764:	7063      	strb	r3, [r4, #1]
		devHandler = NULL;
    1766:	6063      	str	r3, [r4, #4]
	}
}
    1768:	1c20      	adds	r0, r4, #0
    176a:	b005      	add	sp, #20
    176c:	bd30      	pop	{r4, r5, pc}
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	00001479 	.word	0x00001479
    1774:	000014dd 	.word	0x000014dd
    1778:	00001541 	.word	0x00001541
    177c:	000015a5 	.word	0x000015a5

00001780 <_ZN2GI2IOD1Ev>:

GI::IO::~IO()
{
	ioDevType = IO_DEV_NULL;
    1780:	2300      	movs	r3, #0
    1782:	7043      	strb	r3, [r0, #1]
	devHandler = NULL;
    1784:	6043      	str	r3, [r0, #4]
}
    1786:	4770      	bx	lr

00001788 <_ZN2GI2IO5writeEb>:
    }
    return SYS_ERR_NOT_IMPLEMENTED;
}

SysErr GI::IO::write(bool state)
{
    1788:	b508      	push	{r3, lr}
	if(!devHandler || !ioDevType)
    178a:	6842      	ldr	r2, [r0, #4]
    178c:	2a00      	cmp	r2, #0
    178e:	d008      	beq.n	17a2 <_ZN2GI2IO5writeEb+0x1a>
    1790:	7843      	ldrb	r3, [r0, #1]
    1792:	2b00      	cmp	r3, #0
    1794:	d007      	beq.n	17a6 <_ZN2GI2IO5writeEb+0x1e>
		return SYS_ERR_NO_REGISTERED_DEVICE;
	switch((int)ioDevType)
    1796:	2b01      	cmp	r3, #1
    1798:	d107      	bne.n	17aa <_ZN2GI2IO5writeEb+0x22>
	{
	case IO_DEV_GPIO:
		return ((GI::Dev::Gpio *)devHandler)->setOut(state);
    179a:	1c10      	adds	r0, r2, #0
    179c:	4b04      	ldr	r3, [pc, #16]	; (17b0 <_ZN2GI2IO5writeEb+0x28>)
    179e:	4798      	blx	r3
    17a0:	e004      	b.n	17ac <_ZN2GI2IO5writeEb+0x24>
}

SysErr GI::IO::write(bool state)
{
	if(!devHandler || !ioDevType)
		return SYS_ERR_NO_REGISTERED_DEVICE;
    17a2:	20ef      	movs	r0, #239	; 0xef
    17a4:	e002      	b.n	17ac <_ZN2GI2IO5writeEb+0x24>
    17a6:	20ef      	movs	r0, #239	; 0xef
    17a8:	e000      	b.n	17ac <_ZN2GI2IO5writeEb+0x24>
	switch((int)ioDevType)
	{
	case IO_DEV_GPIO:
		return ((GI::Dev::Gpio *)devHandler)->setOut(state);
	}
	return SYS_ERR_NOT_IMPLEMENTED;
    17aa:	20f8      	movs	r0, #248	; 0xf8
    17ac:	b240      	sxtb	r0, r0
}
    17ae:	bd08      	pop	{r3, pc}
    17b0:	00001a05 	.word	0x00001a05

000017b4 <_ZN2GI2IO5writeEPcb>:
	GI::IO tmp_io = GI::IO((char *)path);
	return tmp_io.write(string);
}

SysErr GI::IO::write(char *path, bool state)/* Bit device */
{
    17b4:	b510      	push	{r4, lr}
    17b6:	b084      	sub	sp, #16
    17b8:	1c03      	adds	r3, r0, #0
    17ba:	1c0c      	adds	r4, r1, #0
	GI::IO tmp_io = GI::IO((char *)path);
    17bc:	a801      	add	r0, sp, #4
    17be:	1c19      	adds	r1, r3, #0
    17c0:	4b06      	ldr	r3, [pc, #24]	; (17dc <_ZN2GI2IO5writeEPcb+0x28>)
    17c2:	4798      	blx	r3
	return tmp_io.write(state);
    17c4:	a801      	add	r0, sp, #4
    17c6:	1c21      	adds	r1, r4, #0
    17c8:	4b05      	ldr	r3, [pc, #20]	; (17e0 <_ZN2GI2IO5writeEPcb+0x2c>)
    17ca:	4798      	blx	r3
    17cc:	1c04      	adds	r4, r0, #0
    17ce:	a801      	add	r0, sp, #4
    17d0:	4b04      	ldr	r3, [pc, #16]	; (17e4 <_ZN2GI2IO5writeEPcb+0x30>)
    17d2:	4798      	blx	r3
}
    17d4:	1c20      	adds	r0, r4, #0
    17d6:	b004      	add	sp, #16
    17d8:	bd10      	pop	{r4, pc}
    17da:	46c0      	nop			; (mov r8, r8)
    17dc:	000016e9 	.word	0x000016e9
    17e0:	00001789 	.word	0x00001789
    17e4:	00001781 	.word	0x00001781

000017e8 <_ZN2GI2IO4readEPb>:
	}
	return SYS_ERR_NOT_IMPLEMENTED;
}

SysErr GI::IO::read(bool *state)
{
    17e8:	b510      	push	{r4, lr}
    17ea:	b082      	sub	sp, #8
    17ec:	1c0c      	adds	r4, r1, #0
	if(!devHandler || !ioDevType)
    17ee:	6842      	ldr	r2, [r0, #4]
    17f0:	2a00      	cmp	r2, #0
    17f2:	d011      	beq.n	1818 <_ZN2GI2IO4readEPb+0x30>
    17f4:	7843      	ldrb	r3, [r0, #1]
    17f6:	2b00      	cmp	r3, #0
    17f8:	d010      	beq.n	181c <_ZN2GI2IO4readEPb+0x34>
		return SYS_ERR_NO_REGISTERED_DEVICE;
	switch((int)ioDevType)
    17fa:	2b01      	cmp	r3, #1
    17fc:	d110      	bne.n	1820 <_ZN2GI2IO4readEPb+0x38>
	{
	case IO_DEV_GPIO:
		u32 data;
		SysErr res = ((GI::Dev::Gpio *)devHandler)->getIn(&data);
    17fe:	1c10      	adds	r0, r2, #0
    1800:	a901      	add	r1, sp, #4
    1802:	4b09      	ldr	r3, [pc, #36]	; (1828 <_ZN2GI2IO4readEPb+0x40>)
    1804:	4798      	blx	r3
		if(data)
    1806:	9b01      	ldr	r3, [sp, #4]
    1808:	2b00      	cmp	r3, #0
    180a:	d002      	beq.n	1812 <_ZN2GI2IO4readEPb+0x2a>
			*state = true;
    180c:	2301      	movs	r3, #1
    180e:	7023      	strb	r3, [r4, #0]
    1810:	e007      	b.n	1822 <_ZN2GI2IO4readEPb+0x3a>
		else
			*state = false;
    1812:	2300      	movs	r3, #0
    1814:	7023      	strb	r3, [r4, #0]
    1816:	e004      	b.n	1822 <_ZN2GI2IO4readEPb+0x3a>
}

SysErr GI::IO::read(bool *state)
{
	if(!devHandler || !ioDevType)
		return SYS_ERR_NO_REGISTERED_DEVICE;
    1818:	20ef      	movs	r0, #239	; 0xef
    181a:	e002      	b.n	1822 <_ZN2GI2IO4readEPb+0x3a>
    181c:	20ef      	movs	r0, #239	; 0xef
    181e:	e000      	b.n	1822 <_ZN2GI2IO4readEPb+0x3a>
			*state = true;
		else
			*state = false;
		return res;
	}
	return SYS_ERR_NOT_IMPLEMENTED;
    1820:	20f8      	movs	r0, #248	; 0xf8
    1822:	b240      	sxtb	r0, r0
}
    1824:	b002      	add	sp, #8
    1826:	bd10      	pop	{r4, pc}
    1828:	00001abd 	.word	0x00001abd

0000182c <_ZN2GI2IO4readEPcPb>:
	GI::IO tmp_io = GI::IO((char *)path);
	return tmp_io.read(buff, len);
}

SysErr GI::IO::read(char *path, bool *state)/* Bit device */
{
    182c:	b510      	push	{r4, lr}
    182e:	b084      	sub	sp, #16
    1830:	1c03      	adds	r3, r0, #0
    1832:	1c0c      	adds	r4, r1, #0
	GI::IO tmp_io = GI::IO((char *)path);
    1834:	a801      	add	r0, sp, #4
    1836:	1c19      	adds	r1, r3, #0
    1838:	4b06      	ldr	r3, [pc, #24]	; (1854 <_ZN2GI2IO4readEPcPb+0x28>)
    183a:	4798      	blx	r3
	return tmp_io.read(state);
    183c:	a801      	add	r0, sp, #4
    183e:	1c21      	adds	r1, r4, #0
    1840:	4b05      	ldr	r3, [pc, #20]	; (1858 <_ZN2GI2IO4readEPcPb+0x2c>)
    1842:	4798      	blx	r3
    1844:	1c04      	adds	r4, r0, #0
    1846:	a801      	add	r0, sp, #4
    1848:	4b04      	ldr	r3, [pc, #16]	; (185c <_ZN2GI2IO4readEPcPb+0x30>)
    184a:	4798      	blx	r3
}
    184c:	1c20      	adds	r0, r4, #0
    184e:	b004      	add	sp, #16
    1850:	bd10      	pop	{r4, pc}
    1852:	46c0      	nop			; (mov r8, r8)
    1854:	000016e9 	.word	0x000016e9
    1858:	000017e9 	.word	0x000017e9
    185c:	00001781 	.word	0x00001781

00001860 <_ZN2GI3Sys5Timer6enableEb>:
#endif
	enable(true);
}
//#####################################################
void GI::Sys::Timer::enable(bool action)
{
    1860:	b530      	push	{r4, r5, lr}
	if (action)
    1862:	2900      	cmp	r1, #0
    1864:	d00b      	beq.n	187e <_ZN2GI3Sys5Timer6enableEb+0x1e>
	{
		sTimmerTickValue = (sTimmerInterval + STimerCnt)&(u64)__INT64_MAX__;
    1866:	4b09      	ldr	r3, [pc, #36]	; (188c <_ZN2GI3Sys5Timer6enableEb+0x2c>)
    1868:	681a      	ldr	r2, [r3, #0]
    186a:	685b      	ldr	r3, [r3, #4]
    186c:	6804      	ldr	r4, [r0, #0]
    186e:	6845      	ldr	r5, [r0, #4]
    1870:	1912      	adds	r2, r2, r4
    1872:	416b      	adcs	r3, r5
    1874:	6082      	str	r2, [r0, #8]
    1876:	005b      	lsls	r3, r3, #1
    1878:	085b      	lsrs	r3, r3, #1
    187a:	60c3      	str	r3, [r0, #12]
    187c:	e004      	b.n	1888 <_ZN2GI3Sys5Timer6enableEb+0x28>
	}
	else
	{
		sTimmerTickValue = sTimmerTickValue | (u64)(-__INT64_MAX__ - 1);
    187e:	2380      	movs	r3, #128	; 0x80
    1880:	061b      	lsls	r3, r3, #24
    1882:	68c5      	ldr	r5, [r0, #12]
    1884:	432b      	orrs	r3, r5
    1886:	60c3      	str	r3, [r0, #12]
	}
}
    1888:	bd30      	pop	{r4, r5, pc}
    188a:	46c0      	nop			; (mov r8, r8)
    188c:	200001b0 	.word	0x200001b0

00001890 <_ZN2GI3Sys5TimerC1Ey>:
GI::Sys::Timer::Timer()
{
	memset(this, 0, sizeof(*this));
}
//#####################################################
GI::Sys::Timer::Timer(u64 interval)
    1890:	b570      	push	{r4, r5, r6, lr}
    1892:	1c04      	adds	r4, r0, #0
    1894:	1c16      	adds	r6, r2, #0
    1896:	1c1d      	adds	r5, r3, #0
{
	memset(this, 0, sizeof(*this));
    1898:	2100      	movs	r1, #0
    189a:	2210      	movs	r2, #16
    189c:	4b05      	ldr	r3, [pc, #20]	; (18b4 <_ZN2GI3Sys5TimerC1Ey+0x24>)
    189e:	4798      	blx	r3
	sTimmerInterval = interval & (u64)__INT64_MAX__;
    18a0:	6026      	str	r6, [r4, #0]
    18a2:	006d      	lsls	r5, r5, #1
    18a4:	086d      	lsrs	r5, r5, #1
    18a6:	6065      	str	r5, [r4, #4]
	enable(true);
    18a8:	1c20      	adds	r0, r4, #0
    18aa:	2101      	movs	r1, #1
    18ac:	4b02      	ldr	r3, [pc, #8]	; (18b8 <_ZN2GI3Sys5TimerC1Ey+0x28>)
    18ae:	4798      	blx	r3
}
    18b0:	1c20      	adds	r0, r4, #0
    18b2:	bd70      	pop	{r4, r5, r6, pc}
    18b4:	0000202b 	.word	0x0000202b
    18b8:	00001861 	.word	0x00001861

000018bc <_ZN2GI3Sys5Timer8intervalEy>:
{

}
//#####################################################
void GI::Sys::Timer::interval(u64 interval)
{
    18bc:	b508      	push	{r3, lr}
#ifdef USE_RTC_100_MS
	sTimmerInterval = (interval & (u64)INT64_MAX) / 10;
#else
	sTimmerInterval = interval & (u64)__INT64_MAX__;
    18be:	6002      	str	r2, [r0, #0]
    18c0:	005b      	lsls	r3, r3, #1
    18c2:	085b      	lsrs	r3, r3, #1
    18c4:	6043      	str	r3, [r0, #4]
#endif
	enable(true);
    18c6:	2101      	movs	r1, #1
    18c8:	4b01      	ldr	r3, [pc, #4]	; (18d0 <_ZN2GI3Sys5Timer8intervalEy+0x14>)
    18ca:	4798      	blx	r3
}
    18cc:	bd08      	pop	{r3, pc}
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	00001861 	.word	0x00001861

000018d4 <_ZN2GI3Sys5Timer4tickEv>:
		sTimmerTickValue = sTimmerTickValue | (u64)(-__INT64_MAX__ - 1);
	}
}
//#####################################################
bool GI::Sys::Timer::tick()
{
    18d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(!(sTimmerTickValue & (u64)(-__INT64_MAX__ - 1)))
    18d6:	6886      	ldr	r6, [r0, #8]
    18d8:	68c1      	ldr	r1, [r0, #12]
    18da:	2900      	cmp	r1, #0
    18dc:	db19      	blt.n	1912 <_ZN2GI3Sys5Timer4tickEv+0x3e>
	{
		u64 Temp1 = sTimmerTickValue & (u64)__INT64_MAX__;
		u64 Temp2 = STimerCnt & (u64)__INT64_MAX__;
    18de:	4b0e      	ldr	r3, [pc, #56]	; (1918 <_ZN2GI3Sys5Timer4tickEv+0x44>)
    18e0:	681c      	ldr	r4, [r3, #0]
    18e2:	685d      	ldr	r5, [r3, #4]
//#####################################################
bool GI::Sys::Timer::tick()
{
	if(!(sTimmerTickValue & (u64)(-__INT64_MAX__ - 1)))
	{
		u64 Temp1 = sTimmerTickValue & (u64)__INT64_MAX__;
    18e4:	1c32      	adds	r2, r6, #0
    18e6:	0049      	lsls	r1, r1, #1
    18e8:	084b      	lsrs	r3, r1, #1
		u64 Temp2 = STimerCnt & (u64)__INT64_MAX__;
		u64 Temp = (Temp1 - Temp2 - 1)& (u64)(-__INT64_MAX__ - 1);
    18ea:	2601      	movs	r6, #1
    18ec:	4276      	negs	r6, r6
    18ee:	17f7      	asrs	r7, r6, #31
    18f0:	18b6      	adds	r6, r6, r2
    18f2:	415f      	adcs	r7, r3
bool GI::Sys::Timer::tick()
{
	if(!(sTimmerTickValue & (u64)(-__INT64_MAX__ - 1)))
	{
		u64 Temp1 = sTimmerTickValue & (u64)__INT64_MAX__;
		u64 Temp2 = STimerCnt & (u64)__INT64_MAX__;
    18f4:	1c22      	adds	r2, r4, #0
    18f6:	0069      	lsls	r1, r5, #1
    18f8:	084b      	lsrs	r3, r1, #1
		u64 Temp = (Temp1 - Temp2 - 1)& (u64)(-__INT64_MAX__ - 1);
    18fa:	1c34      	adds	r4, r6, #0
    18fc:	1c3d      	adds	r5, r7, #0
    18fe:	1aa4      	subs	r4, r4, r2
    1900:	419d      	sbcs	r5, r3
		{
			enable(true);
			return true;
		}
	}
	return false;
    1902:	2200      	movs	r2, #0
	if(!(sTimmerTickValue & (u64)(-__INT64_MAX__ - 1)))
	{
		u64 Temp1 = sTimmerTickValue & (u64)__INT64_MAX__;
		u64 Temp2 = STimerCnt & (u64)__INT64_MAX__;
		u64 Temp = (Temp1 - Temp2 - 1)& (u64)(-__INT64_MAX__ - 1);
		if(Temp)
    1904:	2d00      	cmp	r5, #0
    1906:	da05      	bge.n	1914 <_ZN2GI3Sys5Timer4tickEv+0x40>
		{
			enable(true);
    1908:	2101      	movs	r1, #1
    190a:	4b04      	ldr	r3, [pc, #16]	; (191c <_ZN2GI3Sys5Timer4tickEv+0x48>)
    190c:	4798      	blx	r3
			return true;
    190e:	2201      	movs	r2, #1
    1910:	e000      	b.n	1914 <_ZN2GI3Sys5Timer4tickEv+0x40>
		}
	}
	return false;
    1912:	2200      	movs	r2, #0
}
    1914:	1c10      	adds	r0, r2, #0
    1916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1918:	200001b0 	.word	0x200001b0
    191c:	00001861 	.word	0x00001861

00001920 <_GLOBAL__sub_I_fs_err_table>:
		errPath->write((char *)fs_err_table[error]);
	else
		errPath->write((char *)"Unknown error");
#endif
	this->errPath->write((unsigned char *)"\n\r");
}
    1920:	b510      	push	{r4, lr}
/*typedef struct {
	char name[8];
	SysErr (*fnc)(int argc, char *argv[]);
}cmd_list;*/

static GI::StringArray hystoryTable = GI::StringArray();
    1922:	4c05      	ldr	r4, [pc, #20]	; (1938 <_GLOBAL__sub_I_fs_err_table+0x18>)
    1924:	1c20      	adds	r0, r4, #0
    1926:	4b05      	ldr	r3, [pc, #20]	; (193c <_GLOBAL__sub_I_fs_err_table+0x1c>)
    1928:	4798      	blx	r3
    192a:	1c20      	adds	r0, r4, #0
    192c:	4904      	ldr	r1, [pc, #16]	; (1940 <_GLOBAL__sub_I_fs_err_table+0x20>)
    192e:	4a05      	ldr	r2, [pc, #20]	; (1944 <_GLOBAL__sub_I_fs_err_table+0x24>)
    1930:	4b05      	ldr	r3, [pc, #20]	; (1948 <_GLOBAL__sub_I_fs_err_table+0x28>)
    1932:	4798      	blx	r3
		errPath->write((char *)fs_err_table[error]);
	else
		errPath->write((char *)"Unknown error");
#endif
	this->errPath->write((unsigned char *)"\n\r");
}
    1934:	bd10      	pop	{r4, pc}
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	200001a4 	.word	0x200001a4
    193c:	00001989 	.word	0x00001989
    1940:	000019b1 	.word	0x000019b1
    1944:	20000000 	.word	0x20000000
    1948:	00001e79 	.word	0x00001e79

0000194c <_Znwj>:
#include <stdio.h>
#include "operators.h"
#include <stdlib.h>

void* operator new(size_t sz) throw()
{
    194c:	b508      	push	{r3, lr}
//    cerr << "allocating " << sz << " bytes\n";
    void* mem = malloc(sz);
    194e:	4b01      	ldr	r3, [pc, #4]	; (1954 <_Znwj+0x8>)
    1950:	4798      	blx	r3
    if (mem)
        return mem;
    else
        return NULL;
}
    1952:	bd08      	pop	{r3, pc}
    1954:	00001ff1 	.word	0x00001ff1

00001958 <_ZdlPv>:


void operator delete(void* ptr) throw()
{
    1958:	b508      	push	{r3, lr}
//    cerr << "deallocating at " << ptr << endl;
    free(ptr);
    195a:	4b01      	ldr	r3, [pc, #4]	; (1960 <_ZdlPv+0x8>)
    195c:	4798      	blx	r3
}
    195e:	bd08      	pop	{r3, pc}
    1960:	00002005 	.word	0x00002005

00001964 <_ZN2GI6StringD1Ev>:
		error = SYS_ERR_OK;
		modifyed++;
	}
}

GI::String::~String()
    1964:	b510      	push	{r4, lr}
    1966:	1c04      	adds	r4, r0, #0
{
	if (buff)
    1968:	6800      	ldr	r0, [r0, #0]
    196a:	2800      	cmp	r0, #0
    196c:	d001      	beq.n	1972 <_ZN2GI6StringD1Ev+0xe>
		free((void *) buff);
    196e:	4b04      	ldr	r3, [pc, #16]	; (1980 <_ZN2GI6StringD1Ev+0x1c>)
    1970:	4798      	blx	r3
	memset(this, 0, sizeof(*this));
    1972:	1c20      	adds	r0, r4, #0
    1974:	2100      	movs	r1, #0
    1976:	2210      	movs	r2, #16
    1978:	4b02      	ldr	r3, [pc, #8]	; (1984 <_ZN2GI6StringD1Ev+0x20>)
    197a:	4798      	blx	r3
}
    197c:	1c20      	adds	r0, r4, #0
    197e:	bd10      	pop	{r4, pc}
    1980:	00002005 	.word	0x00002005
    1984:	0000202b 	.word	0x0000202b

00001988 <_ZN2GI11StringArrayC1Ev>:
	*Return = 0;
	strcpy(Return, buff + position);
	return Return;
}

GI::StringArray::StringArray()
    1988:	b510      	push	{r4, lr}
    198a:	1c04      	adds	r4, r0, #0
{
	memset(this, 0, sizeof(*this));
    198c:	2300      	movs	r3, #0
    198e:	7003      	strb	r3, [r0, #0]
    1990:	7043      	strb	r3, [r0, #1]
    1992:	7083      	strb	r3, [r0, #2]
    1994:	70c3      	strb	r3, [r0, #3]
    1996:	7103      	strb	r3, [r0, #4]
    1998:	7143      	strb	r3, [r0, #5]
    199a:	7183      	strb	r3, [r0, #6]
    199c:	71c3      	strb	r3, [r0, #7]
	array = (GI::String **)calloc(1, sizeof(GI::String *));
    199e:	2001      	movs	r0, #1
    19a0:	2104      	movs	r1, #4
    19a2:	4b02      	ldr	r3, [pc, #8]	; (19ac <_ZN2GI11StringArrayC1Ev+0x24>)
    19a4:	4798      	blx	r3
    19a6:	6020      	str	r0, [r4, #0]
}
    19a8:	1c20      	adds	r0, r4, #0
    19aa:	bd10      	pop	{r4, pc}
    19ac:	00001f6d 	.word	0x00001f6d

000019b0 <_ZN2GI11StringArrayD1Ev>:

GI::StringArray::~StringArray()
    19b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19b2:	1c04      	adds	r4, r0, #0
{
	if(!array)
    19b4:	6802      	ldr	r2, [r0, #0]
    19b6:	2a00      	cmp	r2, #0
    19b8:	d019      	beq.n	19ee <_ZN2GI11StringArrayD1Ev+0x3e>
		return;
	while(itemsCount)
    19ba:	6843      	ldr	r3, [r0, #4]
    19bc:	2b00      	cmp	r3, #0
    19be:	d011      	beq.n	19e4 <_ZN2GI11StringArrayD1Ev+0x34>
	{
		delete array[itemsCount - 1];
    19c0:	4f0c      	ldr	r7, [pc, #48]	; (19f4 <_ZN2GI11StringArrayD1Ev+0x44>)
    19c2:	4e0d      	ldr	r6, [pc, #52]	; (19f8 <_ZN2GI11StringArrayD1Ev+0x48>)
    19c4:	4a0d      	ldr	r2, [pc, #52]	; (19fc <_ZN2GI11StringArrayD1Ev+0x4c>)
    19c6:	189b      	adds	r3, r3, r2
    19c8:	009b      	lsls	r3, r3, #2
    19ca:	6822      	ldr	r2, [r4, #0]
    19cc:	589d      	ldr	r5, [r3, r2]
    19ce:	2d00      	cmp	r5, #0
    19d0:	d003      	beq.n	19da <_ZN2GI11StringArrayD1Ev+0x2a>
    19d2:	1c28      	adds	r0, r5, #0
    19d4:	47b8      	blx	r7
    19d6:	1c28      	adds	r0, r5, #0
    19d8:	47b0      	blx	r6
		itemsCount--;
    19da:	6863      	ldr	r3, [r4, #4]
    19dc:	3b01      	subs	r3, #1
    19de:	6063      	str	r3, [r4, #4]

GI::StringArray::~StringArray()
{
	if(!array)
		return;
	while(itemsCount)
    19e0:	2b00      	cmp	r3, #0
    19e2:	d1ef      	bne.n	19c4 <_ZN2GI11StringArrayD1Ev+0x14>
	{
		delete array[itemsCount - 1];
		itemsCount--;
	}
	free(array);
    19e4:	6820      	ldr	r0, [r4, #0]
    19e6:	4b06      	ldr	r3, [pc, #24]	; (1a00 <_ZN2GI11StringArrayD1Ev+0x50>)
    19e8:	4798      	blx	r3
	array = NULL;
    19ea:	2300      	movs	r3, #0
    19ec:	6023      	str	r3, [r4, #0]
}
    19ee:	1c20      	adds	r0, r4, #0
    19f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	00001965 	.word	0x00001965
    19f8:	00001959 	.word	0x00001959
    19fc:	3fffffff 	.word	0x3fffffff
    1a00:	00002005 	.word	0x00002005

00001a04 <_ZN2GI3Dev4Gpio6setOutEj>:
	setMode(CfgGpio::GPIO_IN_FLOATING, multiPinMask);
}
/*#####################################################*/
SysErr GI::Dev::Gpio::setOut(unsigned int value)
{
	if (!this)
    1a04:	2800      	cmp	r0, #0
    1a06:	d020      	beq.n	1a4a <_ZN2GI3Dev4Gpio6setOutEj+0x46>
		return SYS_ERR_INVALID_HANDLER;
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
    1a08:	6843      	ldr	r3, [r0, #4]
    1a0a:	691b      	ldr	r3, [r3, #16]
	if (int_cfg->multiPin)
    1a0c:	7c9a      	ldrb	r2, [r3, #18]
		unsigned int state = value;
		if (int_cfg->reverse)
			state = (~state) & 0x01;
		port_pin_set_output_level(int_cfg->pin, state);
	}
	return SYS_ERR_OK;
    1a0e:	2000      	movs	r0, #0
SysErr GI::Dev::Gpio::setOut(unsigned int value)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
	if (int_cfg->multiPin)
    1a10:	2a00      	cmp	r2, #0
    1a12:	d11b      	bne.n	1a4c <_ZN2GI3Dev4Gpio6setOutEj+0x48>
				//| (value & (int_cfg->pin % 32));
	}
	else
	{
		unsigned int state = value;
		if (int_cfg->reverse)
    1a14:	7c1a      	ldrb	r2, [r3, #16]
    1a16:	2a00      	cmp	r2, #0
    1a18:	d002      	beq.n	1a20 <_ZN2GI3Dev4Gpio6setOutEj+0x1c>
			state = (~state) & 0x01;
    1a1a:	2201      	movs	r2, #1
    1a1c:	4051      	eors	r1, r2
    1a1e:	4011      	ands	r1, r2
		port_pin_set_output_level(int_cfg->pin, state);
    1a20:	7b1b      	ldrb	r3, [r3, #12]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a22:	09d8      	lsrs	r0, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1a24:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a26:	2800      	cmp	r0, #0
    1a28:	d103      	bne.n	1a32 <_ZN2GI3Dev4Gpio6setOutEj+0x2e>
		return &(ports[port_index]->Group[group_index]);
    1a2a:	095a      	lsrs	r2, r3, #5
    1a2c:	01d2      	lsls	r2, r2, #7
    1a2e:	4808      	ldr	r0, [pc, #32]	; (1a50 <_ZN2GI3Dev4Gpio6setOutEj+0x4c>)
    1a30:	1812      	adds	r2, r2, r0
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1a32:	201f      	movs	r0, #31
    1a34:	4003      	ands	r3, r0
    1a36:	2001      	movs	r0, #1
    1a38:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1a3a:	2900      	cmp	r1, #0
    1a3c:	d002      	beq.n	1a44 <_ZN2GI3Dev4Gpio6setOutEj+0x40>
		port_base->OUTSET.reg = pin_mask;
    1a3e:	6190      	str	r0, [r2, #24]
	}
	return SYS_ERR_OK;
    1a40:	2000      	movs	r0, #0
    1a42:	e003      	b.n	1a4c <_ZN2GI3Dev4Gpio6setOutEj+0x48>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1a44:	6150      	str	r0, [r2, #20]
    1a46:	2000      	movs	r0, #0
    1a48:	e000      	b.n	1a4c <_ZN2GI3Dev4Gpio6setOutEj+0x48>
}
/*#####################################################*/
SysErr GI::Dev::Gpio::setOut(unsigned int value)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
    1a4a:	20fe      	movs	r0, #254	; 0xfe
    1a4c:	b240      	sxtb	r0, r0
		if (int_cfg->reverse)
			state = (~state) & 0x01;
		port_pin_set_output_level(int_cfg->pin, state);
	}
	return SYS_ERR_OK;
}
    1a4e:	4770      	bx	lr
    1a50:	41004400 	.word	0x41004400

00001a54 <_ZN2GI3Dev4Gpio2inEv>:
/*#####################################################*/
signed int GI::Dev::Gpio::in()
{
	if (!this)
    1a54:	2800      	cmp	r0, #0
    1a56:	d02c      	beq.n	1ab2 <_ZN2GI3Dev4Gpio2inEv+0x5e>
		return -1;
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
    1a58:	6843      	ldr	r3, [r0, #4]
    1a5a:	691b      	ldr	r3, [r3, #16]
	if (int_cfg->multiPin)
    1a5c:	7c9a      	ldrb	r2, [r3, #18]
	{
		return false;//BaseAddr->DIR & (int_cfg->pin % 32);
    1a5e:	2000      	movs	r0, #0
signed int GI::Dev::Gpio::in()
{
	if (!this)
		return -1;
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
	if (int_cfg->multiPin)
    1a60:	2a00      	cmp	r2, #0
    1a62:	d128      	bne.n	1ab6 <_ZN2GI3Dev4Gpio2inEv+0x62>
	{
		return false;//BaseAddr->DIR & (int_cfg->pin % 32);
	}
	else
	{
		if (int_cfg->reverse)
    1a64:	7c1a      	ldrb	r2, [r3, #16]
    1a66:	2a00      	cmp	r2, #0
    1a68:	d011      	beq.n	1a8e <_ZN2GI3Dev4Gpio2inEv+0x3a>
		{
			if(port_pin_get_input_level(int_cfg->pin))
    1a6a:	7b1b      	ldrb	r3, [r3, #12]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a6c:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1a6e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a70:	2900      	cmp	r1, #0
    1a72:	d103      	bne.n	1a7c <_ZN2GI3Dev4Gpio2inEv+0x28>
		return &(ports[port_index]->Group[group_index]);
    1a74:	095a      	lsrs	r2, r3, #5
    1a76:	01d2      	lsls	r2, r2, #7
    1a78:	490f      	ldr	r1, [pc, #60]	; (1ab8 <_ZN2GI3Dev4Gpio2inEv+0x64>)
    1a7a:	1852      	adds	r2, r2, r1
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    1a7c:	6a10      	ldr	r0, [r2, #32]
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1a7e:	221f      	movs	r2, #31
    1a80:	4013      	ands	r3, r2
    1a82:	2201      	movs	r2, #1
    1a84:	409a      	lsls	r2, r3

	return (port_base->IN.reg & pin_mask);
    1a86:	4010      	ands	r0, r2
}
/*#####################################################*/
signed int GI::Dev::Gpio::in()
{
	if (!this)
		return -1;
    1a88:	4243      	negs	r3, r0
    1a8a:	4158      	adcs	r0, r3
    1a8c:	e013      	b.n	1ab6 <_ZN2GI3Dev4Gpio2inEv+0x62>
				return false;
			else
				return true;
		}
		else
			return port_pin_get_input_level(int_cfg->pin);
    1a8e:	7b1b      	ldrb	r3, [r3, #12]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a90:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1a92:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1a94:	2900      	cmp	r1, #0
    1a96:	d103      	bne.n	1aa0 <_ZN2GI3Dev4Gpio2inEv+0x4c>
		return &(ports[port_index]->Group[group_index]);
    1a98:	095a      	lsrs	r2, r3, #5
    1a9a:	01d2      	lsls	r2, r2, #7
    1a9c:	4906      	ldr	r1, [pc, #24]	; (1ab8 <_ZN2GI3Dev4Gpio2inEv+0x64>)
    1a9e:	1852      	adds	r2, r2, r1
    1aa0:	6a10      	ldr	r0, [r2, #32]
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1aa2:	221f      	movs	r2, #31
    1aa4:	4013      	ands	r3, r2
    1aa6:	2201      	movs	r2, #1
    1aa8:	409a      	lsls	r2, r3

	return (port_base->IN.reg & pin_mask);
    1aaa:	4010      	ands	r0, r2
    1aac:	1e43      	subs	r3, r0, #1
    1aae:	4198      	sbcs	r0, r3
    1ab0:	e001      	b.n	1ab6 <_ZN2GI3Dev4Gpio2inEv+0x62>
}
/*#####################################################*/
signed int GI::Dev::Gpio::in()
{
	if (!this)
		return -1;
    1ab2:	2001      	movs	r0, #1
    1ab4:	4240      	negs	r0, r0
				return true;
		}
		else
			return port_pin_get_input_level(int_cfg->pin);
	}
}
    1ab6:	4770      	bx	lr
    1ab8:	41004400 	.word	0x41004400

00001abc <_ZN2GI3Dev4Gpio5getInEPm>:
/*#####################################################*/
SysErr GI::Dev::Gpio::getIn(unsigned long *value)
{
    1abc:	b510      	push	{r4, lr}
    1abe:	1c0c      	adds	r4, r1, #0
	if (!this)
    1ac0:	2800      	cmp	r0, #0
    1ac2:	d004      	beq.n	1ace <_ZN2GI3Dev4Gpio5getInEPm+0x12>
		return SYS_ERR_INVALID_HANDLER;
	*value = (unsigned int)in();
    1ac4:	4b03      	ldr	r3, [pc, #12]	; (1ad4 <_ZN2GI3Dev4Gpio5getInEPm+0x18>)
    1ac6:	4798      	blx	r3
    1ac8:	6020      	str	r0, [r4, #0]
	return SYS_ERR_OK;
    1aca:	2000      	movs	r0, #0
    1acc:	e000      	b.n	1ad0 <_ZN2GI3Dev4Gpio5getInEPm+0x14>
}
/*#####################################################*/
SysErr GI::Dev::Gpio::getIn(unsigned long *value)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
    1ace:	20fe      	movs	r0, #254	; 0xfe
    1ad0:	b240      	sxtb	r0, r0
	*value = (unsigned int)in();
	return SYS_ERR_OK;
}
    1ad2:	bd10      	pop	{r4, pc}
    1ad4:	00001a55 	.word	0x00001a55

00001ad8 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE>:
/*#####################################################*/
SysErr GI::Dev::Gpio::setMode(CfgGpio::gpioMode_e mode)
{
    1ad8:	b510      	push	{r4, lr}
    1ada:	b082      	sub	sp, #8
	if (!this)
    1adc:	2800      	cmp	r0, #0
    1ade:	d02f      	beq.n	1b40 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x68>
		return SYS_ERR_INVALID_HANDLER;
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
    1ae0:	6843      	ldr	r3, [r0, #4]
    1ae2:	691b      	ldr	r3, [r3, #16]
	if(int_cfg->multiPin)
    1ae4:	7c9a      	ldrb	r2, [r3, #18]
    1ae6:	2a00      	cmp	r2, #0
    1ae8:	d12c      	bne.n	1b44 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x6c>
		return SYS_ERR_INVALID_COMMAND;
	multiPinMask = 1 << (int_cfg->pin % 32);
    1aea:	221f      	movs	r2, #31
    1aec:	68dc      	ldr	r4, [r3, #12]
    1aee:	4022      	ands	r2, r4
    1af0:	2401      	movs	r4, #1
    1af2:	4094      	lsls	r4, r2
    1af4:	6104      	str	r4, [r0, #16]
	
	struct port_config config_port_pin;
	switch (mode)
    1af6:	2901      	cmp	r1, #1
    1af8:	d012      	beq.n	1b20 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x48>
    1afa:	2900      	cmp	r1, #0
    1afc:	d015      	beq.n	1b2a <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x52>
    1afe:	2902      	cmp	r1, #2
    1b00:	d008      	beq.n	1b14 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x3c>
	case CfgGpio::GPIO_OUT_PUSH_PULL:
		config_port_pin.direction  = PORT_PIN_DIR_OUTPUT_WTH_READBACK;
		config_port_pin.input_pull = PORT_PIN_PULL_NONE;
		break;
	default:
		return SYS_ERR_INVALID_COMMAND;
    1b02:	20fb      	movs	r0, #251	; 0xfb
	if(int_cfg->multiPin)
		return SYS_ERR_INVALID_COMMAND;
	multiPinMask = 1 << (int_cfg->pin % 32);
	
	struct port_config config_port_pin;
	switch (mode)
    1b04:	2903      	cmp	r1, #3
    1b06:	d11f      	bne.n	1b48 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x70>
	{
	case CfgGpio::GPIO_IN_PULL_UP:
		config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    1b08:	aa01      	add	r2, sp, #4
    1b0a:	2100      	movs	r1, #0
    1b0c:	7011      	strb	r1, [r2, #0]
		config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1b0e:	2101      	movs	r1, #1
    1b10:	7051      	strb	r1, [r2, #1]
		break;
    1b12:	e00f      	b.n	1b34 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x5c>
	case CfgGpio::GPIO_IN_PULL_DOWN:
		config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    1b14:	aa01      	add	r2, sp, #4
    1b16:	2100      	movs	r1, #0
    1b18:	7011      	strb	r1, [r2, #0]
		config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1b1a:	2102      	movs	r1, #2
    1b1c:	7051      	strb	r1, [r2, #1]
		break;
    1b1e:	e009      	b.n	1b34 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x5c>
	case CfgGpio::GPIO_IN_FLOATING:
		config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    1b20:	aa01      	add	r2, sp, #4
    1b22:	2100      	movs	r1, #0
    1b24:	7011      	strb	r1, [r2, #0]
		config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    1b26:	7051      	strb	r1, [r2, #1]
		break;
    1b28:	e004      	b.n	1b34 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x5c>
	case CfgGpio::GPIO_OUT_PUSH_PULL:
		config_port_pin.direction  = PORT_PIN_DIR_OUTPUT_WTH_READBACK;
    1b2a:	aa01      	add	r2, sp, #4
    1b2c:	2102      	movs	r1, #2
    1b2e:	7011      	strb	r1, [r2, #0]
		config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    1b30:	2100      	movs	r1, #0
    1b32:	7051      	strb	r1, [r2, #1]
		break;
	default:
		return SYS_ERR_INVALID_COMMAND;
	}
	port_pin_set_config(int_cfg->pin, &config_port_pin);
    1b34:	7b18      	ldrb	r0, [r3, #12]
    1b36:	a901      	add	r1, sp, #4
    1b38:	4b05      	ldr	r3, [pc, #20]	; (1b50 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x78>)
    1b3a:	4798      	blx	r3
	return SYS_ERR_OK;
    1b3c:	2000      	movs	r0, #0
    1b3e:	e003      	b.n	1b48 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x70>
}
/*#####################################################*/
SysErr GI::Dev::Gpio::setMode(CfgGpio::gpioMode_e mode)
{
	if (!this)
		return SYS_ERR_INVALID_HANDLER;
    1b40:	20fe      	movs	r0, #254	; 0xfe
    1b42:	e001      	b.n	1b48 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x70>
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
	if(int_cfg->multiPin)
		return SYS_ERR_INVALID_COMMAND;
    1b44:	20fb      	movs	r0, #251	; 0xfb
    1b46:	e7ff      	b.n	1b48 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x70>
    1b48:	b240      	sxtb	r0, r0
	default:
		return SYS_ERR_INVALID_COMMAND;
	}
	port_pin_set_config(int_cfg->pin, &config_port_pin);
	return SYS_ERR_OK;
}
    1b4a:	b002      	add	sp, #8
    1b4c:	bd10      	pop	{r4, pc}
    1b4e:	46c0      	nop			; (mov r8, r8)
    1b50:	0000135d 	.word	0x0000135d

00001b54 <_ZN2GI3Dev4GpioC1EP10ioSettings>:
#include <string.h>
#include <api/gpio.h>
#include <driver/gpio.h>

/*#####################################################*/
GI::Dev::Gpio::Gpio(ioSettings *cfg)
    1b54:	b538      	push	{r3, r4, r5, lr}
    1b56:	1c04      	adds	r4, r0, #0
    1b58:	1c0d      	adds	r5, r1, #0
{
	memset(this, 0, sizeof(*this));
    1b5a:	2100      	movs	r1, #0
    1b5c:	2234      	movs	r2, #52	; 0x34
    1b5e:	4b08      	ldr	r3, [pc, #32]	; (1b80 <_ZN2GI3Dev4GpioC1EP10ioSettings+0x2c>)
    1b60:	4798      	blx	r3
	if(cfg->info.ioType != ioSettings::info_s::ioType_GPIO)
    1b62:	782b      	ldrb	r3, [r5, #0]
    1b64:	2b01      	cmp	r3, #1
    1b66:	d109      	bne.n	1b7c <_ZN2GI3Dev4GpioC1EP10ioSettings+0x28>
		return;
	this->cfg = cfg;
    1b68:	6065      	str	r5, [r4, #4]
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
    1b6a:	692d      	ldr	r5, [r5, #16]
	setMode(int_cfg->gpioMode);
    1b6c:	7c69      	ldrb	r1, [r5, #17]
    1b6e:	1c20      	adds	r0, r4, #0
    1b70:	4b04      	ldr	r3, [pc, #16]	; (1b84 <_ZN2GI3Dev4GpioC1EP10ioSettings+0x30>)
    1b72:	4798      	blx	r3
	setOut(int_cfg->defValue);
    1b74:	6969      	ldr	r1, [r5, #20]
    1b76:	1c20      	adds	r0, r4, #0
    1b78:	4b03      	ldr	r3, [pc, #12]	; (1b88 <_ZN2GI3Dev4GpioC1EP10ioSettings+0x34>)
    1b7a:	4798      	blx	r3
}
    1b7c:	1c20      	adds	r0, r4, #0
    1b7e:	bd38      	pop	{r3, r4, r5, pc}
    1b80:	0000202b 	.word	0x0000202b
    1b84:	00001ad9 	.word	0x00001ad9
    1b88:	00001a05 	.word	0x00001a05

00001b8c <_ZN2GI3Dev4UartC1EP10ioSettings>:
volatile bool uart_semaphore[UART_INTERFACE_COUNT];
#endif
extern unsigned long FCPU;

/*#####################################################*/
GI::Dev::Uart::Uart(ioSettings *cfg)
    1b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b8e:	b091      	sub	sp, #68	; 0x44
    1b90:	1c04      	adds	r4, r0, #0
    1b92:	1c0d      	adds	r5, r1, #0
{
	memset(this, 0, sizeof(*this));
    1b94:	2100      	movs	r1, #0
    1b96:	2218      	movs	r2, #24
    1b98:	4b6b      	ldr	r3, [pc, #428]	; (1d48 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1bc>)
    1b9a:	4798      	blx	r3
	if(cfg->info.ioType != ioSettings::info_s::ioType_UART)
    1b9c:	782b      	ldrb	r3, [r5, #0]
    1b9e:	2b02      	cmp	r3, #2
    1ba0:	d000      	beq.n	1ba4 <_ZN2GI3Dev4UartC1EP10ioSettings+0x18>
    1ba2:	e0cd      	b.n	1d40 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1b4>
		return;

	if(strncmp(cfg->info.name, (char *)"uart-", sizeof("uart-") - 1) && strncmp(cfg->info.name, (char *)"usbcdc-", sizeof("usbcdc-") - 1))
    1ba4:	1c6e      	adds	r6, r5, #1
    1ba6:	1c30      	adds	r0, r6, #0
    1ba8:	4968      	ldr	r1, [pc, #416]	; (1d4c <_ZN2GI3Dev4UartC1EP10ioSettings+0x1c0>)
    1baa:	2205      	movs	r2, #5
    1bac:	4b68      	ldr	r3, [pc, #416]	; (1d50 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1c4>)
    1bae:	4798      	blx	r3
    1bb0:	2800      	cmp	r0, #0
    1bb2:	d009      	beq.n	1bc8 <_ZN2GI3Dev4UartC1EP10ioSettings+0x3c>
    1bb4:	1c30      	adds	r0, r6, #0
    1bb6:	4967      	ldr	r1, [pc, #412]	; (1d54 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1c8>)
    1bb8:	2207      	movs	r2, #7
    1bba:	4b65      	ldr	r3, [pc, #404]	; (1d50 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1c4>)
    1bbc:	4798      	blx	r3
    1bbe:	2800      	cmp	r0, #0
    1bc0:	d03c      	beq.n	1c3c <_ZN2GI3Dev4UartC1EP10ioSettings+0xb0>
	{
		err = SYS_ERR_INVALID_PATH;
    1bc2:	23f5      	movs	r3, #245	; 0xf5
    1bc4:	7023      	strb	r3, [r4, #0]
		return;
    1bc6:	e0bb      	b.n	1d40 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1b4>
	}
	if(!strncmp(cfg->info.name, (char *)"uart-", sizeof("uart-") - 1))
	{
		unsigned char dev_nr = cfg->info.name[sizeof("uart-") - 1] - '0';
    1bc8:	79aa      	ldrb	r2, [r5, #6]
    1bca:	3a30      	subs	r2, #48	; 0x30
    1bcc:	b2d2      	uxtb	r2, r2
		if(dev_nr >= UART_INTERFACE_COUNT)
    1bce:	2a05      	cmp	r2, #5
    1bd0:	d902      	bls.n	1bd8 <_ZN2GI3Dev4UartC1EP10ioSettings+0x4c>
		{
			err = SYS_ERR_INVALID_PATH;
    1bd2:	23f5      	movs	r3, #245	; 0xf5
    1bd4:	7023      	strb	r3, [r4, #0]
			return;
    1bd6:	e0b3      	b.n	1d40 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1b4>
		}
		unitNr = dev_nr;
    1bd8:	7462      	strb	r2, [r4, #17]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1bda:	2380      	movs	r3, #128	; 0x80
    1bdc:	05db      	lsls	r3, r3, #23
    1bde:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1be0:	2300      	movs	r3, #0
    1be2:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1be4:	21ff      	movs	r1, #255	; 0xff
    1be6:	4668      	mov	r0, sp
    1be8:	8101      	strh	r1, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    1bea:	2100      	movs	r1, #0
    1bec:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1bee:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
    1bf0:	2096      	movs	r0, #150	; 0x96
    1bf2:	0180      	lsls	r0, r0, #6
    1bf4:	9008      	str	r0, [sp, #32]
	config->receiver_enable  = true;
    1bf6:	2001      	movs	r0, #1
    1bf8:	2624      	movs	r6, #36	; 0x24
    1bfa:	466f      	mov	r7, sp
    1bfc:	55b8      	strb	r0, [r7, r6]
	config->transmitter_enable = true;
    1bfe:	2625      	movs	r6, #37	; 0x25
    1c00:	55b8      	strb	r0, [r7, r6]
	config->clock_polarity_inverted = false;
    1c02:	2026      	movs	r0, #38	; 0x26
    1c04:	543b      	strb	r3, [r7, r0]
	config->use_external_clock = false;
    1c06:	2027      	movs	r0, #39	; 0x27
    1c08:	543b      	strb	r3, [r7, r0]
	config->ext_clock_freq   = 0;
    1c0a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    1c0c:	2088      	movs	r0, #136	; 0x88
    1c0e:	0340      	lsls	r0, r0, #13
    1c10:	9003      	str	r0, [sp, #12]
	config->run_in_standby   = false;
    1c12:	202c      	movs	r0, #44	; 0x2c
    1c14:	543b      	strb	r3, [r7, r0]
	config->generator_source = GCLK_GENERATOR_0;
    1c16:	202d      	movs	r0, #45	; 0x2d
    1c18:	543b      	strb	r3, [r7, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
    1c1a:	930e      	str	r3, [sp, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    1c1c:	930f      	str	r3, [sp, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1c1e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1c20:	823b      	strh	r3, [r7, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1c22:	76fb      	strb	r3, [r7, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    1c24:	7639      	strb	r1, [r7, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    1c26:	7739      	strb	r1, [r7, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    1c28:	7679      	strb	r1, [r7, #25]
	config->receive_pulse_length                        = 19;
    1c2a:	2313      	movs	r3, #19
    1c2c:	76bb      	strb	r3, [r7, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    1c2e:	7779      	strb	r1, [r7, #29]

	struct usart_config usart_conf;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&usart_conf);
	Sercom *hw;
	switch (unitNr)
    1c30:	2a05      	cmp	r2, #5
    1c32:	d82a      	bhi.n	1c8a <_ZN2GI3Dev4UartC1EP10ioSettings+0xfe>
    1c34:	0092      	lsls	r2, r2, #2
    1c36:	4b48      	ldr	r3, [pc, #288]	; (1d58 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1cc>)
    1c38:	589b      	ldr	r3, [r3, r2]
    1c3a:	469f      	mov	pc, r3
		}
		unitNr = dev_nr;
	}
	else
	{
		err = SYS_ERR_INVALID_PARAM;
    1c3c:	23fa      	movs	r3, #250	; 0xfa
    1c3e:	7023      	strb	r3, [r4, #0]
		return;
    1c40:	e07e      	b.n	1d40 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1b4>
	Sercom *hw;
	switch (unitNr)
	{
	case 0:
		hw = SERCOM0;
		usart_conf.pinmux_pad0 = SERCOM0_PAD0_DEFAULT;
    1c42:	4b46      	ldr	r3, [pc, #280]	; (1d5c <_ZN2GI3Dev4UartC1EP10ioSettings+0x1d0>)
    1c44:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM0_PAD1_DEFAULT;
    1c46:	4b46      	ldr	r3, [pc, #280]	; (1d60 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1d4>)
    1c48:	930d      	str	r3, [sp, #52]	; 0x34
	usart_get_config_defaults(&usart_conf);
	Sercom *hw;
	switch (unitNr)
	{
	case 0:
		hw = SERCOM0;
    1c4a:	4f46      	ldr	r7, [pc, #280]	; (1d64 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1d8>)
		usart_conf.pinmux_pad0 = SERCOM0_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM0_PAD1_DEFAULT;
		break;
    1c4c:	e020      	b.n	1c90 <_ZN2GI3Dev4UartC1EP10ioSettings+0x104>
	case 1:
		hw = SERCOM1;
		usart_conf.pinmux_pad0 = SERCOM1_PAD0_DEFAULT;
    1c4e:	2303      	movs	r3, #3
    1c50:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM1_PAD1_DEFAULT;
    1c52:	4b45      	ldr	r3, [pc, #276]	; (1d68 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1dc>)
    1c54:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM0;
		usart_conf.pinmux_pad0 = SERCOM0_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM0_PAD1_DEFAULT;
		break;
	case 1:
		hw = SERCOM1;
    1c56:	4f45      	ldr	r7, [pc, #276]	; (1d6c <_ZN2GI3Dev4UartC1EP10ioSettings+0x1e0>)
		usart_conf.pinmux_pad0 = SERCOM1_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM1_PAD1_DEFAULT;
		break;
    1c58:	e01a      	b.n	1c90 <_ZN2GI3Dev4UartC1EP10ioSettings+0x104>
	case 2:
		hw = SERCOM2;
		usart_conf.pinmux_pad0 = SERCOM2_PAD0_DEFAULT;
    1c5a:	4b45      	ldr	r3, [pc, #276]	; (1d70 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1e4>)
    1c5c:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM2_PAD1_DEFAULT;
    1c5e:	4b45      	ldr	r3, [pc, #276]	; (1d74 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1e8>)
    1c60:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM1;
		usart_conf.pinmux_pad0 = SERCOM1_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM1_PAD1_DEFAULT;
		break;
	case 2:
		hw = SERCOM2;
    1c62:	4f45      	ldr	r7, [pc, #276]	; (1d78 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1ec>)
		usart_conf.pinmux_pad0 = SERCOM2_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM2_PAD1_DEFAULT;
		break;
    1c64:	e014      	b.n	1c90 <_ZN2GI3Dev4UartC1EP10ioSettings+0x104>
	case 3:
		hw = SERCOM3;
		usart_conf.pinmux_pad0 = SERCOM3_PAD0_DEFAULT;
    1c66:	4b45      	ldr	r3, [pc, #276]	; (1d7c <_ZN2GI3Dev4UartC1EP10ioSettings+0x1f0>)
    1c68:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM3_PAD1_DEFAULT;
    1c6a:	4b45      	ldr	r3, [pc, #276]	; (1d80 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1f4>)
    1c6c:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM2;
		usart_conf.pinmux_pad0 = SERCOM2_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM2_PAD1_DEFAULT;
		break;
	case 3:
		hw = SERCOM3;
    1c6e:	4f45      	ldr	r7, [pc, #276]	; (1d84 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1f8>)
		usart_conf.pinmux_pad0 = SERCOM3_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM3_PAD1_DEFAULT;
		break;
    1c70:	e00e      	b.n	1c90 <_ZN2GI3Dev4UartC1EP10ioSettings+0x104>
	case 4:
		hw = SERCOM4;
		usart_conf.pinmux_pad0 = SERCOM4_PAD0_DEFAULT;
    1c72:	4b45      	ldr	r3, [pc, #276]	; (1d88 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1fc>)
    1c74:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM4_PAD1_DEFAULT;
    1c76:	4b45      	ldr	r3, [pc, #276]	; (1d8c <_ZN2GI3Dev4UartC1EP10ioSettings+0x200>)
    1c78:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM3;
		usart_conf.pinmux_pad0 = SERCOM3_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM3_PAD1_DEFAULT;
		break;
	case 4:
		hw = SERCOM4;
    1c7a:	4f45      	ldr	r7, [pc, #276]	; (1d90 <_ZN2GI3Dev4UartC1EP10ioSettings+0x204>)
		usart_conf.pinmux_pad0 = SERCOM4_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM4_PAD1_DEFAULT;
		break;
    1c7c:	e008      	b.n	1c90 <_ZN2GI3Dev4UartC1EP10ioSettings+0x104>
	case 5:
		hw = SERCOM5;
		usart_conf.pinmux_pad0 = SERCOM5_PAD0_DEFAULT;
    1c7e:	4b45      	ldr	r3, [pc, #276]	; (1d94 <_ZN2GI3Dev4UartC1EP10ioSettings+0x208>)
    1c80:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM5_PAD1_DEFAULT;
    1c82:	4b45      	ldr	r3, [pc, #276]	; (1d98 <_ZN2GI3Dev4UartC1EP10ioSettings+0x20c>)
    1c84:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM4;
		usart_conf.pinmux_pad0 = SERCOM4_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM4_PAD1_DEFAULT;
		break;
	case 5:
		hw = SERCOM5;
    1c86:	4f45      	ldr	r7, [pc, #276]	; (1d9c <_ZN2GI3Dev4UartC1EP10ioSettings+0x210>)
		usart_conf.pinmux_pad0 = SERCOM5_PAD0_DEFAULT;
		usart_conf.pinmux_pad1 = SERCOM5_PAD1_DEFAULT;
		break;
    1c88:	e002      	b.n	1c90 <_ZN2GI3Dev4UartC1EP10ioSettings+0x104>
	default:
		err = SYS_ERR_DEVICE_NOT_FOUND;
    1c8a:	23ea      	movs	r3, #234	; 0xea
    1c8c:	7023      	strb	r3, [r4, #0]
		return;
    1c8e:	e057      	b.n	1d40 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1b4>
	}

	struct usart_module *uart_module = (struct usart_module *)calloc(1, sizeof(struct usart_module));
    1c90:	2001      	movs	r0, #1
    1c92:	2134      	movs	r1, #52	; 0x34
    1c94:	4b42      	ldr	r3, [pc, #264]	; (1da0 <_ZN2GI3Dev4UartC1EP10ioSettings+0x214>)
    1c96:	4798      	blx	r3
    1c98:	1e06      	subs	r6, r0, #0
	if(!uart_module)
    1c9a:	d102      	bne.n	1ca2 <_ZN2GI3Dev4UartC1EP10ioSettings+0x116>
	{
		err = SYS_ERR_OUT_OF_MEMORY;
    1c9c:	23fd      	movs	r3, #253	; 0xfd
    1c9e:	7023      	strb	r3, [r4, #0]
		return;
    1ca0:	e04e      	b.n	1d40 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1b4>
	}
	
	this->cfg = cfg;
    1ca2:	6065      	str	r5, [r4, #4]
	CfgUart *int_cfg = (CfgUart *)cfg->cfg;
    1ca4:	692b      	ldr	r3, [r5, #16]

	udata = (void *)uart_module;
    1ca6:	60e0      	str	r0, [r4, #12]
	usart_conf.mux_setting = USART_RX_1_TX_0_XCK_1;
    1ca8:	2280      	movs	r2, #128	; 0x80
    1caa:	0352      	lsls	r2, r2, #13
    1cac:	9203      	str	r2, [sp, #12]
	usart_conf.pinmux_pad2 = PINMUX_UNUSED;
    1cae:	2201      	movs	r2, #1
    1cb0:	4252      	negs	r2, r2
    1cb2:	920e      	str	r2, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = PINMUX_UNUSED;
    1cb4:	920f      	str	r2, [sp, #60]	; 0x3c
	usart_conf.baudrate    = int_cfg->speed;
    1cb6:	6959      	ldr	r1, [r3, #20]
    1cb8:	9108      	str	r1, [sp, #32]

	if( int_cfg->parity == CfgUart::PAR_EVEN)
    1cba:	7e9a      	ldrb	r2, [r3, #26]
    1cbc:	2a02      	cmp	r2, #2
    1cbe:	d103      	bne.n	1cc8 <_ZN2GI3Dev4UartC1EP10ioSettings+0x13c>
		usart_conf.parity = USART_PARITY_EVEN;
    1cc0:	2200      	movs	r2, #0
    1cc2:	4668      	mov	r0, sp
    1cc4:	8102      	strh	r2, [r0, #8]
    1cc6:	e005      	b.n	1cd4 <_ZN2GI3Dev4UartC1EP10ioSettings+0x148>
	else if( int_cfg->parity == CfgUart::PAR_ODD)
    1cc8:	2a01      	cmp	r2, #1
    1cca:	d103      	bne.n	1cd4 <_ZN2GI3Dev4UartC1EP10ioSettings+0x148>
		usart_conf.parity = USART_PARITY_ODD;
    1ccc:	2280      	movs	r2, #128	; 0x80
    1cce:	0192      	lsls	r2, r2, #6
    1cd0:	4669      	mov	r1, sp
    1cd2:	810a      	strh	r2, [r1, #8]

	if(int_cfg->wordLen == CfgUart::WORD_LEN_5)
    1cd4:	7e1a      	ldrb	r2, [r3, #24]
    1cd6:	2a00      	cmp	r2, #0
    1cd8:	d103      	bne.n	1ce2 <_ZN2GI3Dev4UartC1EP10ioSettings+0x156>
		usart_conf.character_size = USART_CHARACTER_SIZE_5BIT;
    1cda:	2205      	movs	r2, #5
    1cdc:	4668      	mov	r0, sp
    1cde:	72c2      	strb	r2, [r0, #11]
    1ce0:	e010      	b.n	1d04 <_ZN2GI3Dev4UartC1EP10ioSettings+0x178>
	else if(int_cfg->wordLen == CfgUart::WORD_LEN_6)
    1ce2:	2a01      	cmp	r2, #1
    1ce4:	d103      	bne.n	1cee <_ZN2GI3Dev4UartC1EP10ioSettings+0x162>
		usart_conf.character_size = USART_CHARACTER_SIZE_6BIT;
    1ce6:	2206      	movs	r2, #6
    1ce8:	4669      	mov	r1, sp
    1cea:	72ca      	strb	r2, [r1, #11]
    1cec:	e00a      	b.n	1d04 <_ZN2GI3Dev4UartC1EP10ioSettings+0x178>
	else if(int_cfg->wordLen == CfgUart::WORD_LEN_7)
    1cee:	2a02      	cmp	r2, #2
    1cf0:	d103      	bne.n	1cfa <_ZN2GI3Dev4UartC1EP10ioSettings+0x16e>
		usart_conf.character_size = USART_CHARACTER_SIZE_7BIT;
    1cf2:	2207      	movs	r2, #7
    1cf4:	4668      	mov	r0, sp
    1cf6:	72c2      	strb	r2, [r0, #11]
    1cf8:	e004      	b.n	1d04 <_ZN2GI3Dev4UartC1EP10ioSettings+0x178>
	else if(int_cfg->wordLen == CfgUart::WORD_LEN_9)
    1cfa:	2a04      	cmp	r2, #4
    1cfc:	d102      	bne.n	1d04 <_ZN2GI3Dev4UartC1EP10ioSettings+0x178>
		usart_conf.character_size = USART_CHARACTER_SIZE_9BIT;
    1cfe:	2201      	movs	r2, #1
    1d00:	4669      	mov	r1, sp
    1d02:	72ca      	strb	r2, [r1, #11]

	if(int_cfg->stopBits == CfgUart::STOP_BITS_TWO)
    1d04:	7e5b      	ldrb	r3, [r3, #25]
    1d06:	2b01      	cmp	r3, #1
    1d08:	d102      	bne.n	1d10 <_ZN2GI3Dev4UartC1EP10ioSettings+0x184>
		usart_conf.stopbits = USART_STOPBITS_2;
    1d0a:	2340      	movs	r3, #64	; 0x40
    1d0c:	466a      	mov	r2, sp
    1d0e:	7293      	strb	r3, [r2, #10]

	usart_init(uart_module, hw, &usart_conf);
    1d10:	1c30      	adds	r0, r6, #0
    1d12:	1c39      	adds	r1, r7, #0
    1d14:	466a      	mov	r2, sp
    1d16:	4b23      	ldr	r3, [pc, #140]	; (1da4 <_ZN2GI3Dev4UartC1EP10ioSettings+0x218>)
    1d18:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1d1a:	6835      	ldr	r5, [r6, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1d1c:	1c28      	adds	r0, r5, #0
    1d1e:	4b22      	ldr	r3, [pc, #136]	; (1da8 <_ZN2GI3Dev4UartC1EP10ioSettings+0x21c>)
    1d20:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1d22:	231f      	movs	r3, #31
    1d24:	4018      	ands	r0, r3
    1d26:	2301      	movs	r3, #1
    1d28:	4083      	lsls	r3, r0
    1d2a:	1c18      	adds	r0, r3, #0
    1d2c:	4b1f      	ldr	r3, [pc, #124]	; (1dac <_ZN2GI3Dev4UartC1EP10ioSettings+0x220>)
    1d2e:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1d30:	6832      	ldr	r2, [r6, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1d32:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1d34:	2b00      	cmp	r3, #0
    1d36:	d1fc      	bne.n	1d32 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1a6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1d38:	682a      	ldr	r2, [r5, #0]
    1d3a:	2302      	movs	r3, #2
    1d3c:	4313      	orrs	r3, r2
    1d3e:	602b      	str	r3, [r5, #0]
	usart_enable(uart_module);
}
    1d40:	1c20      	adds	r0, r4, #0
    1d42:	b011      	add	sp, #68	; 0x44
    1d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d46:	46c0      	nop			; (mov r8, r8)
    1d48:	0000202b 	.word	0x0000202b
    1d4c:	00002284 	.word	0x00002284
    1d50:	000021c9 	.word	0x000021c9
    1d54:	0000228c 	.word	0x0000228c
    1d58:	0000226c 	.word	0x0000226c
    1d5c:	00040003 	.word	0x00040003
    1d60:	00050003 	.word	0x00050003
    1d64:	42000800 	.word	0x42000800
    1d68:	00010003 	.word	0x00010003
    1d6c:	42000c00 	.word	0x42000c00
    1d70:	00080003 	.word	0x00080003
    1d74:	00090003 	.word	0x00090003
    1d78:	42001000 	.word	0x42001000
    1d7c:	00100003 	.word	0x00100003
    1d80:	00110003 	.word	0x00110003
    1d84:	42001400 	.word	0x42001400
    1d88:	000c0003 	.word	0x000c0003
    1d8c:	000d0003 	.word	0x000d0003
    1d90:	42001800 	.word	0x42001800
    1d94:	00160003 	.word	0x00160003
    1d98:	00170003 	.word	0x00170003
    1d9c:	42001c00 	.word	0x42001c00
    1da0:	00001f6d 	.word	0x00001f6d
    1da4:	00000eb9 	.word	0x00000eb9
    1da8:	00000e2d 	.word	0x00000e2d
    1dac:	e000e100 	.word	0xe000e100

00001db0 <_ZN2GI3Sys5ClockC1Ev>:

/**********************************************************************************************
* Global functions
**********************************************************************************************/

GI::Sys::Clock::Clock()
    1db0:	b510      	push	{r4, lr}
    1db2:	1c04      	adds	r4, r0, #0
{
	setClk(FCPU);

	system_init();
    1db4:	4b01      	ldr	r3, [pc, #4]	; (1dbc <_ZN2GI3Sys5ClockC1Ev+0xc>)
    1db6:	4798      	blx	r3
}
    1db8:	1c20      	adds	r0, r4, #0
    1dba:	bd10      	pop	{r4, pc}
    1dbc:	00000985 	.word	0x00000985

00001dc0 <_ZN2GI3Sys5ClockD1Ev>:

GI::Sys::Clock::~Clock()
{
	//SystemClock_Config(HSI_VALUE, 0, 0);
}
    1dc0:	4770      	bx	lr
    1dc2:	46c0      	nop			; (mov r8, r8)

00001dc4 <SysTick_Handler>:
//#####################################################
#ifdef __cplusplus
extern "C" {
	#endif
	void SysTick_Handler(void)
	{
    1dc4:	b510      	push	{r4, lr}
		STimerCnt++;
    1dc6:	4c05      	ldr	r4, [pc, #20]	; (1ddc <SysTick_Handler+0x18>)
    1dc8:	6820      	ldr	r0, [r4, #0]
    1dca:	6861      	ldr	r1, [r4, #4]
    1dcc:	2201      	movs	r2, #1
    1dce:	2300      	movs	r3, #0
    1dd0:	1812      	adds	r2, r2, r0
    1dd2:	414b      	adcs	r3, r1
    1dd4:	6022      	str	r2, [r4, #0]
    1dd6:	6063      	str	r3, [r4, #4]
	}
    1dd8:	bd10      	pop	{r4, pc}
    1dda:	46c0      	nop			; (mov r8, r8)
    1ddc:	200001b0 	.word	0x200001b0

00001de0 <_ZN2GI3Sys7SystimeD1Ev>:
}

GI::Sys::Systime::~Systime()
{
	//RTC.CTRL = RTC_PRESCALER_OFF_gc;
}
    1de0:	4770      	bx	lr
    1de2:	46c0      	nop			; (mov r8, r8)

00001de4 <_ZN2GI3Sys7SystimeC1Ev>:
//#####################################################
//! [rtc_module_instance]
struct rtc_module rtc_instance;
//! [rtc_module_instance]

GI::Sys::Systime::Systime()
    1de4:	b530      	push	{r4, r5, lr}
    1de6:	b085      	sub	sp, #20
    1de8:	1c05      	adds	r5, r0, #0
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    1dea:	2300      	movs	r3, #0
    1dec:	466a      	mov	r2, sp
    1dee:	70d3      	strb	r3, [r2, #3]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    1df0:	9302      	str	r3, [sp, #8]
    1df2:	9303      	str	r3, [sp, #12]
	struct rtc_count_config config_rtc_count;
	rtc_count_get_config_defaults(&config_rtc_count);
	//! [init_conf]

	//! [set_config]
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    1df4:	8013      	strh	r3, [r2, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    1df6:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config_rtc_count.continuously_update = true;
    1df8:	2301      	movs	r3, #1
    1dfa:	7113      	strb	r3, [r2, #4]
#endif
	//! [set_config]
	//! [init_rtc]
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    1dfc:	4c0b      	ldr	r4, [pc, #44]	; (1e2c <_ZN2GI3Sys7SystimeC1Ev+0x48>)
    1dfe:	1c20      	adds	r0, r4, #0
    1e00:	490b      	ldr	r1, [pc, #44]	; (1e30 <_ZN2GI3Sys7SystimeC1Ev+0x4c>)
    1e02:	4b0c      	ldr	r3, [pc, #48]	; (1e34 <_ZN2GI3Sys7SystimeC1Ev+0x50>)
    1e04:	4798      	blx	r3
	//! [init_rtc]

	//! [enable]
	rtc_count_enable(&rtc_instance);
    1e06:	1c20      	adds	r0, r4, #0
    1e08:	4b0b      	ldr	r3, [pc, #44]	; (1e38 <_ZN2GI3Sys7SystimeC1Ev+0x54>)
    1e0a:	4798      	blx	r3
	//! [enable]
	//! [reg_callback]
	rtc_count_register_callback(
	&rtc_instance, SysTick_Handler, RTC_COUNT_CALLBACK_OVERFLOW);
    1e0c:	1c20      	adds	r0, r4, #0
    1e0e:	490b      	ldr	r1, [pc, #44]	; (1e3c <_ZN2GI3Sys7SystimeC1Ev+0x58>)
    1e10:	2202      	movs	r2, #2
    1e12:	4b0b      	ldr	r3, [pc, #44]	; (1e40 <_ZN2GI3Sys7SystimeC1Ev+0x5c>)
    1e14:	4798      	blx	r3
	//! [reg_callback]
	//! [en_callback]
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    1e16:	1c20      	adds	r0, r4, #0
    1e18:	2102      	movs	r1, #2
    1e1a:	4b0a      	ldr	r3, [pc, #40]	; (1e44 <_ZN2GI3Sys7SystimeC1Ev+0x60>)
    1e1c:	4798      	blx	r3
	//! [en_callback]
	//! [period]
	rtc_count_set_period(&rtc_instance, 32);
    1e1e:	1c20      	adds	r0, r4, #0
    1e20:	2120      	movs	r1, #32
    1e22:	4b09      	ldr	r3, [pc, #36]	; (1e48 <_ZN2GI3Sys7SystimeC1Ev+0x64>)
    1e24:	4798      	blx	r3
	//! [period]
}
    1e26:	1c28      	adds	r0, r5, #0
    1e28:	b005      	add	sp, #20
    1e2a:	bd30      	pop	{r4, r5, pc}
    1e2c:	200001bc 	.word	0x200001bc
    1e30:	40001400 	.word	0x40001400
    1e34:	000001f9 	.word	0x000001f9
    1e38:	00000119 	.word	0x00000119
    1e3c:	00001dc5 	.word	0x00001dc5
    1e40:	00000301 	.word	0x00000301
    1e44:	0000033d 	.word	0x0000033d
    1e48:	000002dd 	.word	0x000002dd

00001e4c <_GLOBAL__sub_I_time>:
{
	TimerTimeoutValue = STimerCnt + (unsigned long long)milliSec;
	while(1) {
		if(TimerTimeoutValue < STimerCnt) break;
	}
}
    1e4c:	b510      	push	{r4, lr}

#include <sys/systime.h>
#include <driver/rtc_count.h>
#include <driver/rtc_count_interrupt.h>

GI::Sys::Systime time = GI::Sys::Systime();
    1e4e:	4c05      	ldr	r4, [pc, #20]	; (1e64 <_GLOBAL__sub_I_time+0x18>)
    1e50:	1c20      	adds	r0, r4, #0
    1e52:	4b05      	ldr	r3, [pc, #20]	; (1e68 <_GLOBAL__sub_I_time+0x1c>)
    1e54:	4798      	blx	r3
    1e56:	1c20      	adds	r0, r4, #0
    1e58:	4904      	ldr	r1, [pc, #16]	; (1e6c <_GLOBAL__sub_I_time+0x20>)
    1e5a:	4a05      	ldr	r2, [pc, #20]	; (1e70 <_GLOBAL__sub_I_time+0x24>)
    1e5c:	4b05      	ldr	r3, [pc, #20]	; (1e74 <_GLOBAL__sub_I_time+0x28>)
    1e5e:	4798      	blx	r3
{
	TimerTimeoutValue = STimerCnt + (unsigned long long)milliSec;
	while(1) {
		if(TimerTimeoutValue < STimerCnt) break;
	}
}
    1e60:	bd10      	pop	{r4, pc}
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	200001b8 	.word	0x200001b8
    1e68:	00001de5 	.word	0x00001de5
    1e6c:	00001de1 	.word	0x00001de1
    1e70:	20000000 	.word	0x20000000
    1e74:	00001e79 	.word	0x00001e79

00001e78 <__aeabi_atexit>:
    1e78:	b508      	push	{r3, lr}
    1e7a:	1c03      	adds	r3, r0, #0
    1e7c:	1c08      	adds	r0, r1, #0
    1e7e:	1c19      	adds	r1, r3, #0
    1e80:	f000 f880 	bl	1f84 <__cxa_atexit>
    1e84:	bd08      	pop	{r3, pc}
	...

00001e88 <__aeabi_uidiv>:
    1e88:	2900      	cmp	r1, #0
    1e8a:	d034      	beq.n	1ef6 <.udivsi3_skip_div0_test+0x6a>

00001e8c <.udivsi3_skip_div0_test>:
    1e8c:	2301      	movs	r3, #1
    1e8e:	2200      	movs	r2, #0
    1e90:	b410      	push	{r4}
    1e92:	4288      	cmp	r0, r1
    1e94:	d32c      	bcc.n	1ef0 <.udivsi3_skip_div0_test+0x64>
    1e96:	2401      	movs	r4, #1
    1e98:	0724      	lsls	r4, r4, #28
    1e9a:	42a1      	cmp	r1, r4
    1e9c:	d204      	bcs.n	1ea8 <.udivsi3_skip_div0_test+0x1c>
    1e9e:	4281      	cmp	r1, r0
    1ea0:	d202      	bcs.n	1ea8 <.udivsi3_skip_div0_test+0x1c>
    1ea2:	0109      	lsls	r1, r1, #4
    1ea4:	011b      	lsls	r3, r3, #4
    1ea6:	e7f8      	b.n	1e9a <.udivsi3_skip_div0_test+0xe>
    1ea8:	00e4      	lsls	r4, r4, #3
    1eaa:	42a1      	cmp	r1, r4
    1eac:	d204      	bcs.n	1eb8 <.udivsi3_skip_div0_test+0x2c>
    1eae:	4281      	cmp	r1, r0
    1eb0:	d202      	bcs.n	1eb8 <.udivsi3_skip_div0_test+0x2c>
    1eb2:	0049      	lsls	r1, r1, #1
    1eb4:	005b      	lsls	r3, r3, #1
    1eb6:	e7f8      	b.n	1eaa <.udivsi3_skip_div0_test+0x1e>
    1eb8:	4288      	cmp	r0, r1
    1eba:	d301      	bcc.n	1ec0 <.udivsi3_skip_div0_test+0x34>
    1ebc:	1a40      	subs	r0, r0, r1
    1ebe:	431a      	orrs	r2, r3
    1ec0:	084c      	lsrs	r4, r1, #1
    1ec2:	42a0      	cmp	r0, r4
    1ec4:	d302      	bcc.n	1ecc <.udivsi3_skip_div0_test+0x40>
    1ec6:	1b00      	subs	r0, r0, r4
    1ec8:	085c      	lsrs	r4, r3, #1
    1eca:	4322      	orrs	r2, r4
    1ecc:	088c      	lsrs	r4, r1, #2
    1ece:	42a0      	cmp	r0, r4
    1ed0:	d302      	bcc.n	1ed8 <.udivsi3_skip_div0_test+0x4c>
    1ed2:	1b00      	subs	r0, r0, r4
    1ed4:	089c      	lsrs	r4, r3, #2
    1ed6:	4322      	orrs	r2, r4
    1ed8:	08cc      	lsrs	r4, r1, #3
    1eda:	42a0      	cmp	r0, r4
    1edc:	d302      	bcc.n	1ee4 <.udivsi3_skip_div0_test+0x58>
    1ede:	1b00      	subs	r0, r0, r4
    1ee0:	08dc      	lsrs	r4, r3, #3
    1ee2:	4322      	orrs	r2, r4
    1ee4:	2800      	cmp	r0, #0
    1ee6:	d003      	beq.n	1ef0 <.udivsi3_skip_div0_test+0x64>
    1ee8:	091b      	lsrs	r3, r3, #4
    1eea:	d001      	beq.n	1ef0 <.udivsi3_skip_div0_test+0x64>
    1eec:	0909      	lsrs	r1, r1, #4
    1eee:	e7e3      	b.n	1eb8 <.udivsi3_skip_div0_test+0x2c>
    1ef0:	1c10      	adds	r0, r2, #0
    1ef2:	bc10      	pop	{r4}
    1ef4:	4770      	bx	lr
    1ef6:	2800      	cmp	r0, #0
    1ef8:	d001      	beq.n	1efe <.udivsi3_skip_div0_test+0x72>
    1efa:	2000      	movs	r0, #0
    1efc:	43c0      	mvns	r0, r0
    1efe:	b407      	push	{r0, r1, r2}
    1f00:	4802      	ldr	r0, [pc, #8]	; (1f0c <.udivsi3_skip_div0_test+0x80>)
    1f02:	a102      	add	r1, pc, #8	; (adr r1, 1f0c <.udivsi3_skip_div0_test+0x80>)
    1f04:	1840      	adds	r0, r0, r1
    1f06:	9002      	str	r0, [sp, #8]
    1f08:	bd03      	pop	{r0, r1, pc}
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	00000019 	.word	0x00000019

00001f10 <__aeabi_uidivmod>:
    1f10:	2900      	cmp	r1, #0
    1f12:	d0f0      	beq.n	1ef6 <.udivsi3_skip_div0_test+0x6a>
    1f14:	b503      	push	{r0, r1, lr}
    1f16:	f7ff ffb9 	bl	1e8c <.udivsi3_skip_div0_test>
    1f1a:	bc0e      	pop	{r1, r2, r3}
    1f1c:	4342      	muls	r2, r0
    1f1e:	1a89      	subs	r1, r1, r2
    1f20:	4718      	bx	r3
    1f22:	46c0      	nop			; (mov r8, r8)

00001f24 <__aeabi_idiv0>:
    1f24:	4770      	bx	lr
    1f26:	46c0      	nop			; (mov r8, r8)

00001f28 <__aeabi_lmul>:
    1f28:	469c      	mov	ip, r3
    1f2a:	0403      	lsls	r3, r0, #16
    1f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f2e:	0c1b      	lsrs	r3, r3, #16
    1f30:	0417      	lsls	r7, r2, #16
    1f32:	0c3f      	lsrs	r7, r7, #16
    1f34:	0c15      	lsrs	r5, r2, #16
    1f36:	1c1e      	adds	r6, r3, #0
    1f38:	1c04      	adds	r4, r0, #0
    1f3a:	0c00      	lsrs	r0, r0, #16
    1f3c:	437e      	muls	r6, r7
    1f3e:	436b      	muls	r3, r5
    1f40:	4347      	muls	r7, r0
    1f42:	4345      	muls	r5, r0
    1f44:	18fb      	adds	r3, r7, r3
    1f46:	0c30      	lsrs	r0, r6, #16
    1f48:	1818      	adds	r0, r3, r0
    1f4a:	4287      	cmp	r7, r0
    1f4c:	d902      	bls.n	1f54 <__aeabi_lmul+0x2c>
    1f4e:	2380      	movs	r3, #128	; 0x80
    1f50:	025b      	lsls	r3, r3, #9
    1f52:	18ed      	adds	r5, r5, r3
    1f54:	0c03      	lsrs	r3, r0, #16
    1f56:	18ed      	adds	r5, r5, r3
    1f58:	4663      	mov	r3, ip
    1f5a:	435c      	muls	r4, r3
    1f5c:	434a      	muls	r2, r1
    1f5e:	0436      	lsls	r6, r6, #16
    1f60:	0c36      	lsrs	r6, r6, #16
    1f62:	18a1      	adds	r1, r4, r2
    1f64:	0400      	lsls	r0, r0, #16
    1f66:	1980      	adds	r0, r0, r6
    1f68:	1949      	adds	r1, r1, r5
    1f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001f6c <calloc>:
    1f6c:	b508      	push	{r3, lr}
    1f6e:	1c0a      	adds	r2, r1, #0
    1f70:	4903      	ldr	r1, [pc, #12]	; (1f80 <calloc+0x14>)
    1f72:	1c03      	adds	r3, r0, #0
    1f74:	6808      	ldr	r0, [r1, #0]
    1f76:	1c19      	adds	r1, r3, #0
    1f78:	f000 f85f 	bl	203a <_calloc_r>
    1f7c:	bd08      	pop	{r3, pc}
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	20000128 	.word	0x20000128

00001f84 <__cxa_atexit>:
    1f84:	b538      	push	{r3, r4, r5, lr}
    1f86:	1c05      	adds	r5, r0, #0
    1f88:	4805      	ldr	r0, [pc, #20]	; (1fa0 <__cxa_atexit+0x1c>)
    1f8a:	1c0c      	adds	r4, r1, #0
    1f8c:	1c13      	adds	r3, r2, #0
    1f8e:	2800      	cmp	r0, #0
    1f90:	d004      	beq.n	1f9c <__cxa_atexit+0x18>
    1f92:	2002      	movs	r0, #2
    1f94:	1c29      	adds	r1, r5, #0
    1f96:	1c22      	adds	r2, r4, #0
    1f98:	e000      	b.n	1f9c <__cxa_atexit+0x18>
    1f9a:	bf00      	nop
    1f9c:	bd38      	pop	{r3, r4, r5, pc}
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	00000000 	.word	0x00000000

00001fa4 <__libc_init_array>:
    1fa4:	b570      	push	{r4, r5, r6, lr}
    1fa6:	4b0e      	ldr	r3, [pc, #56]	; (1fe0 <__libc_init_array+0x3c>)
    1fa8:	4d0e      	ldr	r5, [pc, #56]	; (1fe4 <__libc_init_array+0x40>)
    1faa:	2400      	movs	r4, #0
    1fac:	1aed      	subs	r5, r5, r3
    1fae:	10ad      	asrs	r5, r5, #2
    1fb0:	1c1e      	adds	r6, r3, #0
    1fb2:	42ac      	cmp	r4, r5
    1fb4:	d004      	beq.n	1fc0 <__libc_init_array+0x1c>
    1fb6:	00a3      	lsls	r3, r4, #2
    1fb8:	58f3      	ldr	r3, [r6, r3]
    1fba:	4798      	blx	r3
    1fbc:	3401      	adds	r4, #1
    1fbe:	e7f8      	b.n	1fb2 <__libc_init_array+0xe>
    1fc0:	f000 f99a 	bl	22f8 <_init>
    1fc4:	4b08      	ldr	r3, [pc, #32]	; (1fe8 <__libc_init_array+0x44>)
    1fc6:	4d09      	ldr	r5, [pc, #36]	; (1fec <__libc_init_array+0x48>)
    1fc8:	2400      	movs	r4, #0
    1fca:	1aed      	subs	r5, r5, r3
    1fcc:	10ad      	asrs	r5, r5, #2
    1fce:	1c1e      	adds	r6, r3, #0
    1fd0:	42ac      	cmp	r4, r5
    1fd2:	d004      	beq.n	1fde <__libc_init_array+0x3a>
    1fd4:	00a3      	lsls	r3, r4, #2
    1fd6:	58f3      	ldr	r3, [r6, r3]
    1fd8:	4798      	blx	r3
    1fda:	3401      	adds	r4, #1
    1fdc:	e7f8      	b.n	1fd0 <__libc_init_array+0x2c>
    1fde:	bd70      	pop	{r4, r5, r6, pc}
    1fe0:	00002304 	.word	0x00002304
    1fe4:	00002304 	.word	0x00002304
    1fe8:	00002304 	.word	0x00002304
    1fec:	00002314 	.word	0x00002314

00001ff0 <malloc>:
    1ff0:	b508      	push	{r3, lr}
    1ff2:	4b03      	ldr	r3, [pc, #12]	; (2000 <malloc+0x10>)
    1ff4:	1c01      	adds	r1, r0, #0
    1ff6:	6818      	ldr	r0, [r3, #0]
    1ff8:	f000 f876 	bl	20e8 <_malloc_r>
    1ffc:	bd08      	pop	{r3, pc}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	20000128 	.word	0x20000128

00002004 <free>:
    2004:	b508      	push	{r3, lr}
    2006:	4b03      	ldr	r3, [pc, #12]	; (2014 <free+0x10>)
    2008:	1c01      	adds	r1, r0, #0
    200a:	6818      	ldr	r0, [r3, #0]
    200c:	f000 f824 	bl	2058 <_free_r>
    2010:	bd08      	pop	{r3, pc}
    2012:	46c0      	nop			; (mov r8, r8)
    2014:	20000128 	.word	0x20000128

00002018 <memcpy>:
    2018:	b510      	push	{r4, lr}
    201a:	2300      	movs	r3, #0
    201c:	4293      	cmp	r3, r2
    201e:	d003      	beq.n	2028 <memcpy+0x10>
    2020:	5ccc      	ldrb	r4, [r1, r3]
    2022:	54c4      	strb	r4, [r0, r3]
    2024:	3301      	adds	r3, #1
    2026:	e7f9      	b.n	201c <memcpy+0x4>
    2028:	bd10      	pop	{r4, pc}

0000202a <memset>:
    202a:	1c03      	adds	r3, r0, #0
    202c:	1882      	adds	r2, r0, r2
    202e:	4293      	cmp	r3, r2
    2030:	d002      	beq.n	2038 <memset+0xe>
    2032:	7019      	strb	r1, [r3, #0]
    2034:	3301      	adds	r3, #1
    2036:	e7fa      	b.n	202e <memset+0x4>
    2038:	4770      	bx	lr

0000203a <_calloc_r>:
    203a:	b538      	push	{r3, r4, r5, lr}
    203c:	1c15      	adds	r5, r2, #0
    203e:	434d      	muls	r5, r1
    2040:	1c29      	adds	r1, r5, #0
    2042:	f000 f851 	bl	20e8 <_malloc_r>
    2046:	1e04      	subs	r4, r0, #0
    2048:	d003      	beq.n	2052 <_calloc_r+0x18>
    204a:	2100      	movs	r1, #0
    204c:	1c2a      	adds	r2, r5, #0
    204e:	f7ff ffec 	bl	202a <memset>
    2052:	1c20      	adds	r0, r4, #0
    2054:	bd38      	pop	{r3, r4, r5, pc}
	...

00002058 <_free_r>:
    2058:	b530      	push	{r4, r5, lr}
    205a:	2900      	cmp	r1, #0
    205c:	d040      	beq.n	20e0 <_free_r+0x88>
    205e:	3904      	subs	r1, #4
    2060:	680b      	ldr	r3, [r1, #0]
    2062:	2b00      	cmp	r3, #0
    2064:	da00      	bge.n	2068 <_free_r+0x10>
    2066:	18c9      	adds	r1, r1, r3
    2068:	4a1e      	ldr	r2, [pc, #120]	; (20e4 <_free_r+0x8c>)
    206a:	6813      	ldr	r3, [r2, #0]
    206c:	1c14      	adds	r4, r2, #0
    206e:	2b00      	cmp	r3, #0
    2070:	d102      	bne.n	2078 <_free_r+0x20>
    2072:	604b      	str	r3, [r1, #4]
    2074:	6011      	str	r1, [r2, #0]
    2076:	e033      	b.n	20e0 <_free_r+0x88>
    2078:	4299      	cmp	r1, r3
    207a:	d20f      	bcs.n	209c <_free_r+0x44>
    207c:	6808      	ldr	r0, [r1, #0]
    207e:	180a      	adds	r2, r1, r0
    2080:	429a      	cmp	r2, r3
    2082:	d105      	bne.n	2090 <_free_r+0x38>
    2084:	6813      	ldr	r3, [r2, #0]
    2086:	6852      	ldr	r2, [r2, #4]
    2088:	18c0      	adds	r0, r0, r3
    208a:	6008      	str	r0, [r1, #0]
    208c:	604a      	str	r2, [r1, #4]
    208e:	e000      	b.n	2092 <_free_r+0x3a>
    2090:	604b      	str	r3, [r1, #4]
    2092:	6021      	str	r1, [r4, #0]
    2094:	e024      	b.n	20e0 <_free_r+0x88>
    2096:	428a      	cmp	r2, r1
    2098:	d803      	bhi.n	20a2 <_free_r+0x4a>
    209a:	1c13      	adds	r3, r2, #0
    209c:	685a      	ldr	r2, [r3, #4]
    209e:	2a00      	cmp	r2, #0
    20a0:	d1f9      	bne.n	2096 <_free_r+0x3e>
    20a2:	681d      	ldr	r5, [r3, #0]
    20a4:	195c      	adds	r4, r3, r5
    20a6:	428c      	cmp	r4, r1
    20a8:	d10b      	bne.n	20c2 <_free_r+0x6a>
    20aa:	6809      	ldr	r1, [r1, #0]
    20ac:	1869      	adds	r1, r5, r1
    20ae:	1858      	adds	r0, r3, r1
    20b0:	6019      	str	r1, [r3, #0]
    20b2:	4290      	cmp	r0, r2
    20b4:	d114      	bne.n	20e0 <_free_r+0x88>
    20b6:	6814      	ldr	r4, [r2, #0]
    20b8:	6852      	ldr	r2, [r2, #4]
    20ba:	1909      	adds	r1, r1, r4
    20bc:	6019      	str	r1, [r3, #0]
    20be:	605a      	str	r2, [r3, #4]
    20c0:	e00e      	b.n	20e0 <_free_r+0x88>
    20c2:	428c      	cmp	r4, r1
    20c4:	d902      	bls.n	20cc <_free_r+0x74>
    20c6:	230c      	movs	r3, #12
    20c8:	6003      	str	r3, [r0, #0]
    20ca:	e009      	b.n	20e0 <_free_r+0x88>
    20cc:	6808      	ldr	r0, [r1, #0]
    20ce:	180c      	adds	r4, r1, r0
    20d0:	4294      	cmp	r4, r2
    20d2:	d103      	bne.n	20dc <_free_r+0x84>
    20d4:	6814      	ldr	r4, [r2, #0]
    20d6:	6852      	ldr	r2, [r2, #4]
    20d8:	1900      	adds	r0, r0, r4
    20da:	6008      	str	r0, [r1, #0]
    20dc:	604a      	str	r2, [r1, #4]
    20de:	6059      	str	r1, [r3, #4]
    20e0:	bd30      	pop	{r4, r5, pc}
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	200001d8 	.word	0x200001d8

000020e8 <_malloc_r>:
    20e8:	b570      	push	{r4, r5, r6, lr}
    20ea:	2303      	movs	r3, #3
    20ec:	1ccd      	adds	r5, r1, #3
    20ee:	439d      	bics	r5, r3
    20f0:	3508      	adds	r5, #8
    20f2:	1c06      	adds	r6, r0, #0
    20f4:	2d0c      	cmp	r5, #12
    20f6:	d201      	bcs.n	20fc <_malloc_r+0x14>
    20f8:	250c      	movs	r5, #12
    20fa:	e001      	b.n	2100 <_malloc_r+0x18>
    20fc:	2d00      	cmp	r5, #0
    20fe:	db3f      	blt.n	2180 <_malloc_r+0x98>
    2100:	428d      	cmp	r5, r1
    2102:	d33d      	bcc.n	2180 <_malloc_r+0x98>
    2104:	4b20      	ldr	r3, [pc, #128]	; (2188 <_malloc_r+0xa0>)
    2106:	681c      	ldr	r4, [r3, #0]
    2108:	1c1a      	adds	r2, r3, #0
    210a:	1c21      	adds	r1, r4, #0
    210c:	2900      	cmp	r1, #0
    210e:	d013      	beq.n	2138 <_malloc_r+0x50>
    2110:	6808      	ldr	r0, [r1, #0]
    2112:	1b43      	subs	r3, r0, r5
    2114:	d40d      	bmi.n	2132 <_malloc_r+0x4a>
    2116:	2b0b      	cmp	r3, #11
    2118:	d902      	bls.n	2120 <_malloc_r+0x38>
    211a:	600b      	str	r3, [r1, #0]
    211c:	18cc      	adds	r4, r1, r3
    211e:	e01e      	b.n	215e <_malloc_r+0x76>
    2120:	428c      	cmp	r4, r1
    2122:	d102      	bne.n	212a <_malloc_r+0x42>
    2124:	6863      	ldr	r3, [r4, #4]
    2126:	6013      	str	r3, [r2, #0]
    2128:	e01a      	b.n	2160 <_malloc_r+0x78>
    212a:	6848      	ldr	r0, [r1, #4]
    212c:	6060      	str	r0, [r4, #4]
    212e:	1c0c      	adds	r4, r1, #0
    2130:	e016      	b.n	2160 <_malloc_r+0x78>
    2132:	1c0c      	adds	r4, r1, #0
    2134:	6849      	ldr	r1, [r1, #4]
    2136:	e7e9      	b.n	210c <_malloc_r+0x24>
    2138:	4c14      	ldr	r4, [pc, #80]	; (218c <_malloc_r+0xa4>)
    213a:	6820      	ldr	r0, [r4, #0]
    213c:	2800      	cmp	r0, #0
    213e:	d103      	bne.n	2148 <_malloc_r+0x60>
    2140:	1c30      	adds	r0, r6, #0
    2142:	f000 f825 	bl	2190 <_sbrk_r>
    2146:	6020      	str	r0, [r4, #0]
    2148:	1c30      	adds	r0, r6, #0
    214a:	1c29      	adds	r1, r5, #0
    214c:	f000 f820 	bl	2190 <_sbrk_r>
    2150:	1c43      	adds	r3, r0, #1
    2152:	d015      	beq.n	2180 <_malloc_r+0x98>
    2154:	1cc4      	adds	r4, r0, #3
    2156:	2303      	movs	r3, #3
    2158:	439c      	bics	r4, r3
    215a:	4284      	cmp	r4, r0
    215c:	d10a      	bne.n	2174 <_malloc_r+0x8c>
    215e:	6025      	str	r5, [r4, #0]
    2160:	1c20      	adds	r0, r4, #0
    2162:	300b      	adds	r0, #11
    2164:	2207      	movs	r2, #7
    2166:	1d23      	adds	r3, r4, #4
    2168:	4390      	bics	r0, r2
    216a:	1ac3      	subs	r3, r0, r3
    216c:	d00b      	beq.n	2186 <_malloc_r+0x9e>
    216e:	425a      	negs	r2, r3
    2170:	50e2      	str	r2, [r4, r3]
    2172:	e008      	b.n	2186 <_malloc_r+0x9e>
    2174:	1a21      	subs	r1, r4, r0
    2176:	1c30      	adds	r0, r6, #0
    2178:	f000 f80a 	bl	2190 <_sbrk_r>
    217c:	3001      	adds	r0, #1
    217e:	d1ee      	bne.n	215e <_malloc_r+0x76>
    2180:	230c      	movs	r3, #12
    2182:	6033      	str	r3, [r6, #0]
    2184:	2000      	movs	r0, #0
    2186:	bd70      	pop	{r4, r5, r6, pc}
    2188:	200001d8 	.word	0x200001d8
    218c:	200001d4 	.word	0x200001d4

00002190 <_sbrk_r>:
    2190:	b538      	push	{r3, r4, r5, lr}
    2192:	4c07      	ldr	r4, [pc, #28]	; (21b0 <_sbrk_r+0x20>)
    2194:	2300      	movs	r3, #0
    2196:	1c05      	adds	r5, r0, #0
    2198:	1c08      	adds	r0, r1, #0
    219a:	6023      	str	r3, [r4, #0]
    219c:	f7ff f8f0 	bl	1380 <_sbrk>
    21a0:	1c43      	adds	r3, r0, #1
    21a2:	d103      	bne.n	21ac <_sbrk_r+0x1c>
    21a4:	6823      	ldr	r3, [r4, #0]
    21a6:	2b00      	cmp	r3, #0
    21a8:	d000      	beq.n	21ac <_sbrk_r+0x1c>
    21aa:	602b      	str	r3, [r5, #0]
    21ac:	bd38      	pop	{r3, r4, r5, pc}
    21ae:	46c0      	nop			; (mov r8, r8)
    21b0:	200001f8 	.word	0x200001f8

000021b4 <strcmp>:
    21b4:	7802      	ldrb	r2, [r0, #0]
    21b6:	780b      	ldrb	r3, [r1, #0]
    21b8:	3001      	adds	r0, #1
    21ba:	3101      	adds	r1, #1
    21bc:	2a00      	cmp	r2, #0
    21be:	d001      	beq.n	21c4 <strcmp+0x10>
    21c0:	429a      	cmp	r2, r3
    21c2:	d0f7      	beq.n	21b4 <strcmp>
    21c4:	1ad0      	subs	r0, r2, r3
    21c6:	4770      	bx	lr

000021c8 <strncmp>:
    21c8:	1c03      	adds	r3, r0, #0
    21ca:	2000      	movs	r0, #0
    21cc:	b510      	push	{r4, lr}
    21ce:	4282      	cmp	r2, r0
    21d0:	d00f      	beq.n	21f2 <strncmp+0x2a>
    21d2:	781c      	ldrb	r4, [r3, #0]
    21d4:	7808      	ldrb	r0, [r1, #0]
    21d6:	42a0      	cmp	r0, r4
    21d8:	d101      	bne.n	21de <strncmp+0x16>
    21da:	2a01      	cmp	r2, #1
    21dc:	d103      	bne.n	21e6 <strncmp+0x1e>
    21de:	7818      	ldrb	r0, [r3, #0]
    21e0:	780b      	ldrb	r3, [r1, #0]
    21e2:	1ac0      	subs	r0, r0, r3
    21e4:	e005      	b.n	21f2 <strncmp+0x2a>
    21e6:	3a01      	subs	r2, #1
    21e8:	2800      	cmp	r0, #0
    21ea:	d0f8      	beq.n	21de <strncmp+0x16>
    21ec:	3301      	adds	r3, #1
    21ee:	3101      	adds	r1, #1
    21f0:	e7ef      	b.n	21d2 <strncmp+0xa>
    21f2:	bd10      	pop	{r4, pc}
    21f4:	0000045c 	.word	0x0000045c
    21f8:	000004b8 	.word	0x000004b8
    21fc:	000004b8 	.word	0x000004b8
    2200:	00000456 	.word	0x00000456
    2204:	00000456 	.word	0x00000456
    2208:	00000472 	.word	0x00000472
    220c:	00000462 	.word	0x00000462
    2210:	00000478 	.word	0x00000478
    2214:	000004a6 	.word	0x000004a6
    2218:	00000540 	.word	0x00000540
    221c:	000005a0 	.word	0x000005a0
    2220:	000005a0 	.word	0x000005a0
    2224:	00000520 	.word	0x00000520
    2228:	00000532 	.word	0x00000532
    222c:	0000054e 	.word	0x0000054e
    2230:	00000524 	.word	0x00000524
    2234:	0000055c 	.word	0x0000055c
    2238:	00000590 	.word	0x00000590
    223c:	42000800 	.word	0x42000800
    2240:	42000c00 	.word	0x42000c00
    2244:	42001000 	.word	0x42001000
    2248:	42001400 	.word	0x42001400
    224c:	42001800 	.word	0x42001800
    2250:	42001c00 	.word	0x42001c00
    2254:	0c0b0a09 	.word	0x0c0b0a09
    2258:	00000e0d 	.word	0x00000e0d
    225c:	74726175 	.word	0x74726175
    2260:	0000352d 	.word	0x0000352d
    2264:	2d64656c 	.word	0x2d64656c
    2268:	00000030 	.word	0x00000030
    226c:	00001c42 	.word	0x00001c42
    2270:	00001c4e 	.word	0x00001c4e
    2274:	00001c5a 	.word	0x00001c5a
    2278:	00001c66 	.word	0x00001c66
    227c:	00001c72 	.word	0x00001c72
    2280:	00001c7e 	.word	0x00001c7e
    2284:	74726175 	.word	0x74726175
    2288:	0000002d 	.word	0x0000002d
    228c:	63627375 	.word	0x63627375
    2290:	002d6364 	.word	0x002d6364

00002294 <__sf_fake_stdin>:
	...

000022b4 <__sf_fake_stdout>:
	...

000022d4 <__sf_fake_stderr>:
	...
    22f4:	00000043                                C...

000022f8 <_init>:
    22f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22fa:	46c0      	nop			; (mov r8, r8)
    22fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    22fe:	bc08      	pop	{r3}
    2300:	469e      	mov	lr, r3
    2302:	4770      	bx	lr

00002304 <__init_array_start>:
    2304:	000000d9 	.word	0x000000d9
    2308:	000016a1 	.word	0x000016a1
    230c:	00001921 	.word	0x00001921
    2310:	00001e4d 	.word	0x00001e4d

00002314 <_fini>:
    2314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2316:	46c0      	nop			; (mov r8, r8)
    2318:	bcf8      	pop	{r3, r4, r5, r6, r7}
    231a:	bc08      	pop	{r3}
    231c:	469e      	mov	lr, r3
    231e:	4770      	bx	lr

00002320 <__fini_array_start>:
    2320:	000000b1 	.word	0x000000b1
